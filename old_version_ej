commit f1cc353fe2697bbdd54c31afac636dbb01caca3b
Author: Liang Zhang <terrymanu@163.com>
Date:   Fri Aug 7 13:23:57 2020 +0800

    Unify project name in document (#1340)
    
    * Update doc for the relationship of failover and execution monitor
    
    * Unify project name in document

diff --git a/docs/content/features/schedule-model.cn.md b/docs/content/features/schedule-model.cn.md
index c1f37469d..5f5d4523a 100644
--- a/docs/content/features/schedule-model.cn.md
+++ b/docs/content/features/schedule-model.cn.md
@@ -5,15 +5,15 @@ weight = 1
 chapter = true
 +++
 
-与大部分的作业平台不同，ElasticJob 的调度模型划分为支持线程级别调度的进程内调度 ElasticJob Lite，和进程级别调度的 ElasticJob Cloud。
+与大部分的作业平台不同，ElasticJob 的调度模型划分为支持线程级别调度的进程内调度 ElasticJob-Lite，和进程级别调度的 ElasticJob-Cloud。
 
 ## 进程内调度
 
-ElasticJob Lite 是面向进程内的线程级调度框架。通过它，作业能够透明化的与业务应用系统相结合。
+ElasticJob-Lite 是面向进程内的线程级调度框架。通过它，作业能够透明化的与业务应用系统相结合。
 它能够方便的与 Spring 、Dubbo 等 Java 框架配合使用，在作业中可自由使用 Spring 注入的 Bean，如数据源连接池、Dubbo 远程服务等，更加方便的贴合业务开发。
 
 ## 进程级调度
 
-ElasticJob Cloud 拥有进程内调度和进程级别调度两种方式。
-由于 ElasticJob Cloud 能够对作业服务器的资源进行控制，因此其作业类型可划分为常驻任务和瞬时任务。
-常驻任务类似于 ElasticJob Lite，是进程内调度；瞬时任务则完全不同，它充分的利用了资源分配的削峰填谷能力，是进程级的调度，每次任务的会启动全新的进程处理。
+ElasticJob-Cloud 拥有进程内调度和进程级别调度两种方式。
+由于 ElasticJob-Cloud 能够对作业服务器的资源进行控制，因此其作业类型可划分为常驻任务和瞬时任务。
+常驻任务类似于 ElasticJob-Lite，是进程内调度；瞬时任务则完全不同，它充分的利用了资源分配的削峰填谷能力，是进程级的调度，每次任务的会启动全新的进程处理。
diff --git a/docs/content/features/schedule-model.en.md b/docs/content/features/schedule-model.en.md
index a3f55990c..8bb872a91 100644
--- a/docs/content/features/schedule-model.en.md
+++ b/docs/content/features/schedule-model.en.md
@@ -5,15 +5,15 @@ weight = 1
 chapter = true
 +++
 
-Unlike most job platforms, ElasticJob's scheduling model is divided into in-process scheduling ElasticJob Lite that supports thread-level scheduling, and ElasticJob Cloud for process-level scheduling.
+Unlike most job platforms, ElasticJob's scheduling model is divided into in-process scheduling ElasticJob-Lite that supports thread-level scheduling, and ElasticJob-Cloud for process-level scheduling.
 
 ## In-process scheduling
 
-ElasticJob Lite is a thread-level scheduling framework for in-process. Through it, Job can be transparently combined with business application systems.
+ElasticJob-Lite is a thread-level scheduling framework for in-process. Through it, Job can be transparently combined with business application systems.
 It can be easily used in conjunction with Java frameworks such as Spring and Dubbo. Spring DI (Dependency Injection) Beans can be freely used in Job, such as data source connection pool and Dubbo remote service, etc., which is more convenient for business development.
 
 ## Process-level scheduling
 
-ElasticJob Cloud has two methods: in-process scheduling and process-level scheduling.
-Because ElasticJob Cloud can control the resources of the job server, its job types can be divided into resident tasks and transient tasks.
-The resident task is similar to ElasticJob Lite, which is an in-process scheduling; the transient task is completely different. It fully utilizes the peak-cutting and valley-filling capabilities of resource allocation, and is a process-level scheduling. Each task will start a new process.
\ No newline at end of file
+ElasticJob-Cloud has two methods: in-process scheduling and process-level scheduling.
+Because ElasticJob-Cloud can control the resources of the job server, its job types can be divided into resident tasks and transient tasks.
+The resident task is similar to ElasticJob-Lite, which is an in-process scheduling; the transient task is completely different. It fully utilizes the peak-cutting and valley-filling capabilities of resource allocation, and is a process-level scheduling. Each task will start a new process.
\ No newline at end of file
diff --git a/docs/content/overview/_index.cn.md b/docs/content/overview/_index.cn.md
index aaffbe2f4..5c924690e 100644
--- a/docs/content/overview/_index.cn.md
+++ b/docs/content/overview/_index.cn.md
@@ -11,7 +11,7 @@ chapter = true
 [![GitHub watchers](https://img.shields.io/github/watchers/apache/shardingsphere-elasticjob.svg?style=social&label=Watch)](https://github.com/apache/shardingsphere-elasticjob/watchers)
 [![Stargazers over time](https://starchart.cc/apache/shardingsphere-elasticjob.svg)](https://starchart.cc/apache/shardingsphere-elasticjob)
 
-ElasticJob 是一个分布式调度解决方案，由两个相互独立的子项目 ElasticJob Lite 和 ElasticJob Cloud 组成。
+ElasticJob 是面向互联网生态和海量任务的分布式调度解决方案，由两个相互独立的子项目 ElasticJob-Lite 和 ElasticJob-Cloud 组成。
 它通过弹性调度、资源管控、以及作业治理的功能，打造一个适用于互联网场景的分布式调度解决方案，并通过开放的架构设计，提供多元化的作业生态。
 它的各个产品使用统一的作业 API，开发者仅需一次开发，即可随意部署。
 
diff --git a/docs/content/user-manual/elasticjob-cloud/_index.en.md b/docs/content/user-manual/elasticjob-cloud/_index.en.md
index 79efb66cf..d0133034e 100644
--- a/docs/content/user-manual/elasticjob-cloud/_index.en.md
+++ b/docs/content/user-manual/elasticjob-cloud/_index.en.md
@@ -20,5 +20,5 @@ ElasticJob-Cloud uses Mesos to manage and isolate resources.
 | Job Execution     | Daemon            | `Daemon + Transient` |
 | Deploy Dependency | ZooKeeper         | `ZooKeeper + Mesos`  |
 
-The advantages of Elasticjob Cloud are resource management and isolation, 
+The advantages of Elasticjob-Cloud are resource management and isolation, 
 which is suitable for big data application with starve resource environment.
diff --git a/docs/content/user-manual/elasticjob-lite/_index.en.md b/docs/content/user-manual/elasticjob-lite/_index.en.md
index 58908cca8..5ae23dfd0 100644
--- a/docs/content/user-manual/elasticjob-lite/_index.en.md
+++ b/docs/content/user-manual/elasticjob-lite/_index.en.md
@@ -20,5 +20,5 @@ ElasticJob-Lite is a lightweight, decentralized solution that provides distribut
 | Job Execution     | `Daemon`          | Daemon + Transient |
 | Deploy Dependency | `ZooKeeper`       | ZooKeeper + Mesos  |
 
-The advantages of Elasticjob Lite are no centralized design and less external dependence, 
+The advantages of Elasticjob-Lite are no centralized design and less external dependence, 
 which is suitable for business application with stable resource allocation.
