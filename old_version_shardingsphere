commit cd6d7df7cde15c7d84451378c5a45826ba656ca2
Author: Zhengqiang Duan <duanzhengqiang@apache.org>
Date:   Mon Aug 15 17:48:03 2022 +0800

    Update dev manual chinese documents (#20191)
    
    * Update dev manual chinese documents
    
    * Update dev manual chinese documents

diff --git a/docs/document/content/dev-manual/data-source.cn.md b/docs/document/content/dev-manual/data-source.cn.md
index 0e71de8eb6f..8ccb2e48c41 100644
--- a/docs/document/content/dev-manual/data-source.cn.md
+++ b/docs/document/content/dev-manual/data-source.cn.md
@@ -5,52 +5,81 @@ weight = 4
 chapter = true
 +++
 
-## SPI 接口
-
-| SPI 名称                     | 详细说明                         |
-| ---------------------------- | -------------------------------- |
-| DatabaseType                 | 支持的数据库类型                 |
-| DialectTableMetaDataLoader   | 用于使用数据库方言快速加载元数据 |
-| DataSourcePoolMetaData       | 数据源连接池元数据               |
-| DataSourcePoolActiveDetector | 数据源连接池活跃探测器           |
-
-## 示例
-
-### DatabaseType
-
-| *已知实现类*             | *详细说明*               |
-| ---------------------- | ----------------------- |
-| SQL92DatabaseType      | 遵循 SQL92 标准的数据库类型 |
-| MySQLDatabaseType      | MySQL 数据库             |
-| MariaDBDatabaseType    | MariaDB 数据库           |
-| PostgreSQLDatabaseType | PostgreSQL 数据库        |
-| OracleDatabaseType     | Oracle 数据库            |
-| SQLServerDatabaseType  | SQLServer 数据库         |
-| H2DatabaseType         | H2 数据库                |
-| OpenGaussDatabaseType  | OpenGauss 数据库         |
-
-### DialectTableMetaDataLoader
-
-| *已知实现类*                    | *详细说明*                   |
-| ----------------------------- | --------------------------- |
-| MySQLTableMetaDataLoader      | 使用 MySQL 方言加载元数据      |
-| OracleTableMetaDataLoader     | 使用 Oracle 方言加载元数据     |
-| PostgreSQLTableMetaDataLoader | 使用 PostgreSQL 方言加载元数据 |
-| SQLServerTableMetaDataLoader  | 使用 SQLServer 方言加载元数据  |
-| H2TableMetaDataLoader         | 使用 H2 方言加载元数据         |
-| OpenGaussTableMetaDataLoader  | 使用 OpenGauss 方言加载元数据  |
-
-### DataSourcePoolMetaData
-
-| *已知实现类*                   | *详细说明*             |
-|------------------------------|-----------------------|
-| DBCPDataSourcePoolMetaData   | DBCP 数据库连接池元数据   |
-| HikariDataSourcePoolMetaData | Hikari 数据源连接池元数据 |
-| C3P0DataSourcePoolMetaData   | C3P0 数据源连接池元数据   |
-
-### DataSourcePoolActiveDetector 
-
-| *已知实现类*                          | *详细说明*                 |
-| ----------------------------------- | ------------------------- |
-| DefaultDataSourcePoolActiveDetector | 默认数据源连接池活跃探测器     |
-| HikariDataSourcePoolActiveDetector  | Hikari 数据源连接池活跃探测器 |
+## DatabaseType
+
+### 全限定类名
+
+[`org.apache.shardingsphere.infra.database.type.DatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/DatabaseType.java)
+
+### 定义
+
+支持的数据库类型
+
+### 已知实现
+
+| *配置标识* | *详细说明*                             | *全限定类名* |
+| -------------------- | ----------------------------------------- | ---------------------------- |
+| SQL92                | 遵循 SQL92 标准的数据库类型                       | [`org.apache.shardingsphere.infra.database.type.dialect.SQL92DatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/dialect/SQL92DatabaseType.java) |
+| MySQL                | MySQL 数据库                            | [`org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/dialect/MySQLDatabaseType.java) |
+| MariaDB              | MariaDB 数据库                          | [`org.apache.shardingsphere.infra.database.type.dialect.MariaDBDatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/dialect/MariaDBDatabaseType.java) |
+| PostgreSQL           | PostgreSQL 数据库                       | [`org.apache.shardingsphere.infra.database.type.dialect.PostgreSQLDatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/dialect/PostgreSQLDatabaseType.java) |
+| Oracle               | Oracle 数据库                           | [`org.apache.shardingsphere.infra.database.type.dialect.OracleDatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/dialect/OracleDatabaseType.java) |
+| SQLServer            | SQLServer 数据库                        | [`org.apache.shardingsphere.infra.database.type.dialect.SQLServerDatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/dialect/SQLServerDatabaseType.java) |
+| H2                   | H2 数据库                               | [`org.apache.shardingsphere.infra.database.type.dialect.H2DatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/dialect/H2DatabaseType.java) |
+| openGauss            | OpenGauss 数据库                        | [`org.apache.shardingsphere.infra.database.type.dialect.OpenGaussDatabaseType`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/database/type/dialect/OpenGaussDatabaseType.java) |
+
+## DialectSchemaMetaDataLoader
+
+### 全限定类名
+
+[`org.apache.shardingsphere.infra.metadata.database.schema.loader.spi.DialectSchemaMetaDataLoader`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/database/schema/loader/spi/DialectSchemaMetaDataLoader.java)
+
+### 定义
+
+使用 SQL 方言快速加载元数据
+
+### 已知实现
+
+| *配置标识* | *详细说明*                           | *全限定类名* |
+| -------------------- | --------------------------------------- | ---------------------- |
+| MySQL                | 使用 MySQL 方言加载元数据      | [`org.apache.shardingsphere.infra.metadata.database.schema.loader.dialect.MySQLSchemaMetaDataLoader`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/database/schema/loader/dialect/MySQLSchemaMetaDataLoader.java) |
+| Oracle               | 使用 Oracle 方言加载元数据    | [`org.apache.shardingsphere.infra.metadata.database.schema.loader.dialect.OracleSchemaMetaDataLoader`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/database/schema/loader/dialect/OracleSchemaMetaDataLoader.java) |
+| PostgreSQL           | 使用 PostgreSQL 方言加载元数据 | [`org.apache.shardingsphere.infra.metadata.database.schema.loader.dialect.PostgreSQLSchemaMetaDataLoader`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/database/schema/loader/dialect/PostgreSQLSchemaMetaDataLoader.java) |
+| SQLServer            | 使用 SQLServer 方言加载元数据 | [`org.apache.shardingsphere.infra.metadata.database.schema.loader.dialect.SQLServerSchemaMetaDataLoader`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/database/schema/loader/dialect/SQLServerSchemaMetaDataLoader.java) |
+| H2                   | 使用 H2 方言加载元数据         | [`org.apache.shardingsphere.infra.metadata.database.schema.loader.dialect.H2SchemaMetaDataLoader`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/database/schema/loader/dialect/H2SchemaMetaDataLoader.java) |
+| openGauss            | 使用 OpenGauss 方言加载元数据 | [`org.apache.shardingsphere.infra.metadata.database.schema.loader.dialect.OpenGaussSchemaMetaDataLoader`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/database/schema/loader/dialect/OpenGaussSchemaMetaDataLoader.java) |
+
+## DataSourcePoolMetaData
+
+### 全限定类名
+
+[`org.apache.shardingsphere.infra.datasource.pool.metadata.DataSourcePoolMetaData`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/datasource/pool/metadata/DataSourcePoolMetaData.java)
+
+### 定义
+
+数据源连接池元数据
+
+### 已知实现
+
+| *配置标识*                                                                  | *详细说明*                    | *全限定类名* |
+| ------------------------------------------------------------------------------------- | -------------------------------- | ---------------------------- |
+| org.apache.commons.dbcp.BasicDataSource, org.apache.tomcat.dbcp.dbcp2.BasicDataSource | DBCP 数据库连接池元数据   | [`org.apache.shardingsphere.infra.datasource.pool.metadata.type.dbcp.DBCPDataSourcePoolMetaData`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/datasource/pool/metadata/type/dbcp/DBCPDataSourcePoolMetaData.java) |
+| com.zaxxer.hikari.HikariDataSource                                                    | Hikari 数据源连接池元数据 | [`org.apache.shardingsphere.infra.datasource.pool.metadata.type.hikari.HikariDataSourcePoolMetaData`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/datasource/pool/metadata/type/hikari/HikariDataSourcePoolMetaData.java) |
+| com.mchange.v2.c3p0.ComboPooledDataSource                                             | C3P0 数据源连接池元数据  | [`org.apache.shardingsphere.infra.datasource.pool.metadata.type.c3p0.C3P0DataSourcePoolMetaData`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/datasource/pool/metadata/type/c3p0/C3P0DataSourcePoolMetaData.java)         |
+
+## DataSourcePoolActiveDetector
+
+### 全限定类名
+
+[`org.apache.shardingsphere.infra.datasource.pool.destroyer.detector.DataSourcePoolActiveDetector`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/datasource/pool/destroyer/detector/DataSourcePoolActiveDetector.java)
+
+### 定义
+
+数据源连接池活跃探测器
+
+### 已知实现
+
+| *配置标识*               | *详细说明*                            | *全限定类名* |
+| ---------------------------------- | ---------------------------------------- | ---------------------------- |
+| Default                            | 默认数据源连接池活跃探测器 | [`org.apache.shardingsphere.infra.datasource.pool.destroyer.detector.type.DefaultDataSourcePoolActiveDetector`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/datasource/pool/destroyer/detector/type/DefaultDataSourcePoolActiveDetector.java) |
+| com.zaxxer.hikari.HikariDataSource | Hikari 数据源连接池活跃探测器  | [`org.apache.shardingsphere.infra.datasource.pool.destroyer.detector.type.HikariDataSourcePoolActiveDetector`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/datasource/pool/destroyer/detector/type/HikariDataSourcePoolActiveDetector.java) |
diff --git a/docs/document/content/dev-manual/encrypt.cn.md b/docs/document/content/dev-manual/encrypt.cn.md
index 7c00084aa55..906517d1e29 100644
--- a/docs/document/content/dev-manual/encrypt.cn.md
+++ b/docs/document/content/dev-manual/encrypt.cn.md
@@ -5,20 +5,22 @@ weight = 12
 chapter = true
 +++
 
-## SPI 接口
+## EncryptAlgorithm
 
-| SPI 名称         | 详细说明     |
-| ---------------- | ------------ |
-| EncryptAlgorithm | 数据加密算法 |
+### 全限定类名
 
-## 示例
+[`org.apache.shardingsphere.encrypt.spi.EncryptAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-api/src/main/java/org/apache/shardingsphere/encrypt/spi/EncryptAlgorithm.java)
 
-### EncryptAlgorithm
+### 定义
 
-| *已知实现类*         | *详细说明*             |
-| ------------------- | --------------------- |
-| MD5EncryptAlgorithm | 基于 MD5 的数据加密算法 |
-| AESEncryptAlgorithm | 基于 AES 的数据加密算法 |
-| RC4EncryptAlgorithm | 基于 RC4 的数据加密算法 |
-| SM4EncryptAlgorithm | 基于 SM4 的数据加密算法 |
-| SM3EncryptAlgorithm | 基于 SM3 的数据加密算法 |
+数据加密算法
+
+### 已知实现
+
+| *配置标识* | *详细说明*              | *全限定类名* |
+| -------------------- | -------------------------- | ---------------------------- |
+| MD5                  | 基于 MD5 的数据加密算法 | [`org.apache.shardingsphere.encryption.algorithm.MD5Encrypt`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/MD5EncryptAlgorithm.java) |
+| AES                  | 基于 AES 的数据加密算法 | [`org.apache.shardingsphere.encryption.algorithm.AESEncrypt`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/AESEncryptAlgorithm.java) |
+| RC4                  | 基于 RC4 的数据加密算法 | [`org.apache.shardingsphere.encryption.algorithm.RC4Encrypt`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java) |
+| SM3                  | 基于 SM4 的数据加密算法 | [`org.apache.shardingsphere.encryption.algorithm.SM3Encrypt`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-plugin/shardingsphere-encrypt-sm/src/main/java/org/apache/shardingsphere/encrypt/sm/algorithm/SM3EncryptAlgorithm.java) |
+| SM4                  | 基于 SM3 的数据加密算法 | [`org.apache.shardingsphere.encryption.algorithm.SM4Encrypt`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-plugin/shardingsphere-encrypt-sm/src/main/java/org/apache/shardingsphere/encrypt/sm/algorithm/SM4EncryptAlgorithm.java) |
diff --git a/docs/document/content/dev-manual/sharding.cn.md b/docs/document/content/dev-manual/sharding.cn.md
index e0705cb01b6..5107190bd1d 100644
--- a/docs/document/content/dev-manual/sharding.cn.md
+++ b/docs/document/content/dev-manual/sharding.cn.md
@@ -5,64 +5,83 @@ weight = 7
 chapter = true
 +++
 
-## SPI 接口
-
-| SPI 名称                  | 详细说明                 |
-|-------------------------| ------------------------ |
-| ShardingAlgorithm       | 分片算法                 |
-| KeyGenerateAlgorithm    | 分布式主键生成算法       |
-| ShardingAuditAlgorithm  | 分片审计算法 |
-| DatetimeService         | 获取当前时间进行路由     |
-| DatabaseSQLEntry        | 获取当前时间的数据库方言 |
-
-## 示例
-
-### ShardingAlgorithm 
-
-| *已知实现类*                                 | *详细说明*                    |
-|-----------------------------------------|---------------------------|
-| BoundaryBasedRangeShardingAlgorithm     | 基于分片边界的范围分片算法             |
-| VolumeBasedRangeShardingAlgorithm       | 基于分片容量的范围分片算法             |
-| ComplexInlineShardingAlgorithm          | 基于行表达式的复合分片算法             |
-| AutoIntervalShardingAlgorithm           | 基于可变时间范围的分片算法             |
-| ClassBasedShardingAlgorithm             | 基于自定义类的分片算法               |
-| HintInlineShardingAlgorithm             | 基于行表达式的 Hint 分片算法         |
-| IntervalShardingAlgorithm               | 基于固定时间范围的分片算法             |
-| HashModShardingAlgorithm                | 基于哈希取模的分片算法               |
-| InlineShardingAlgorithm                 | 基于行表达式的分片算法               |
-| ModShardingAlgorithm                    | 基于取模的分片算法                 |
-| CosIdModShardingAlgorithm               | 基于 CosId 的取模分片算法          |
-| CosIdIntervalShardingAlgorithm          | 基于 CosId 的固定时间范围的分片算法     |
-| CosIdSnowflakeIntervalShardingAlgorithm | 基于 CosId 的雪花ID固定时间范围的分片算法 |
-
-### KeyGenerateAlgorithm 
-
-| *已知实现类*                         | *详细说明*                         |
-|----------------------------------- |---------------------------------- |
-| SnowflakeKeyGenerateAlgorithm      | 基于雪花算法的分布式主键生成算法        |
-| UUIDKeyGenerateAlgorithm           | 基于 UUID 的分布式主键生成算法        |
-| CosIdKeyGenerateAlgorithm          | 基于 CosId 的分布式主键生成算法       |
-| CosIdSnowflakeKeyGenerateAlgorithm | 基于 CosId 的雪花算法分布式主键生成算法 |
-| NanoIdKeyGenerateAlgorithm         | 基于 NanoId 的分布式主键生成算法      |
-
-### ShardingAuditAlgorithm 
-
-| *已知实现类*                                  | *详细说明*                         |
-|-------------------------------------------- |---------------------------------- |
-| DMLShardingConditionsShardingAuditAlgorithm | 禁止不带分片键的DML审计算法           |
-
-### DatetimeService 
-
-| *已知实现类*                      | *详细说明*                     |
-| ------------------------------- | ----------------------------- |
-| DatabaseDatetimeServiceDelegate | 从数据库中获取当前时间进行路由      |
-| SystemDatetimeService           | 从应用系统时间中获取当前时间进行路由 |
-
-### DatabaseSQLEntry 
-
-| *已知实现类*                 | *详细说明*                         |
-| -------------------------- | --------------------------------- |
-| MySQLDatabaseSQLEntry      | 从 MySQL 获取当前时间的数据库方言      |
-| PostgreSQLDatabaseSQLEntry | 从 PostgreSQL 获取当前时间的数据库方言 |
-| OracleDatabaseSQLEntry     | 从 Oracle 获取当前时间的数据库方言     |
-| SQLServerDatabaseSQLEntry  | 从 SQLServer 获取当前时间的数据库方言  |
+## ShardingAlgorithm
+
+### 全限定类名
+
+[`org.apache.shardingsphere.sharding.spi.ShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-api/src/main/java/org/apache/shardingsphere/sharding/spi/ShardingAlgorithm.java)
+
+### 定义
+
+分片算法
+
+### 已知实现
+
+| *配置标识*     | *自动分片算法* |       *详细说明*                                                     | *全限定类名* |
+| ------------------------ |----------| ----------------------------------------------------------------------- | ---------------------------- |
+| MOD                      | Y        | 基于取模的分片算法                                               | [`org.apache.shardingsphere.sharding.algorithm.sharding.mod.ModShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/mod/ModShardingAlgorithm.java) |
+| HASH_MOD                 | Y        | 基于哈希取模的分片算法                                          | [`org.apache.shardingsphere.sharding.algorithm.sharding.mod.HashModShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/mod/HashModShardingAlgorithm.java) |
+| BOUNDARY_RANGE           | Y        | 基于分片边界的范围分片算法                                 | [`org.apache.shardingsphere.sharding.algorithm.sharding.range.BoundaryBasedRangeShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/range/BoundaryBasedRangeShardingAlgorithm.java) |
+| VOLUME_RANGE             | Y        | 基于分片容量的范围分片算法                                   | [`org.apache.shardingsphere.sharding.algorithm.sharding.range.VolumeBasedRangeShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/range/VolumeBasedRangeShardingAlgorithm.java) |
+| AUTO_INTERVAL            | Y        | 基于可变时间范围的分片算法                                     | [`org.apache.shardingsphere.sharding.algorithm.sharding.datetime.AutoIntervalShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/datetime/AutoIntervalShardingAlgorithm.java) |
+| INTERVAL                 | N        | 基于固定时间范围的分片算法                                       | [`org.apache.shardingsphere.sharding.algorithm.sharding.datetime.IntervalShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/datetime/IntervalShardingAlgorithm.java) |
+| CLASS_BASED              | N        | 基于自定义类的分片算法                                          | [`org.apache.shardingsphere.sharding.algorithm.sharding.classbased.ClassBasedShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java) |
+| INLINE                   | N        | 基于行表达式的分片算法                                               | [`org.apache.shardingsphere.sharding.algorithm.sharding.inline.InlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java) |
+| COMPLEX_INLINE           | N        | 基于行表达式的复合分片算法                                       | [`org.apache.shardingsphere.sharding.algorithm.sharding.complex.ComplexInlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/complex/ComplexInlineShardingAlgorithm.java) |
+| HINT_INLINE              | N        | 基于行表达式的 Hint 分片算法                                          | [`org.apache.shardingsphere.sharding.algorithm.sharding.hint.HintInlineShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/hint/HintInlineShardingAlgorithm.java) |
+| COSID_MOD                | N        | 基于 CosId 的取模分片算法                             | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.mod.CosIdModShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-plugin/shardingsphere-sharding-cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/mod/CosIdModShardingAlgorithm.java) |
+| COSID_INTERVAL           | N        | 基于 CosId 的固定时间范围的分片算法                     | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.interval.CosIdIntervalShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-plugin/shardingsphere-sharding-cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/interval/CosIdIntervalShardingAlgorithm.java) |
+| COSID_INTERVAL_SNOWFLAKE | N        | 基于 CosId 的雪花ID固定时间范围的分片算法 | [`org.apache.shardingsphere.sharding.cosid.algorithm.sharding.interval.CosIdSnowflakeIntervalShardingAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-plugin/shardingsphere-sharding-cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/sharding/interval/CosIdSnowflakeIntervalShardingAlgorithm.java) |
+
+## KeyGenerateAlgorithm
+
+### 全限定类名
+
+[`org.apache.shardingsphere.sharding.spi.KeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-api/src/main/java/org/apache/shardingsphere/sharding/spi/KeyGenerateAlgorithm.java)
+
+### 定义
+
+分布式主键生成算法
+
+### 已知实现
+
+| *配置标识* | *详细说明*                                      | *全限定类名* |
+| -------------------- | -------------------------------------------------- | ---------------------------- |
+| SNOWFLAKE            | 基于雪花算法的分布式主键生成算法                   | [`org.apache.shardingsphere.sharding.algorithm.keygen.SnowflakeKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/keygen/SnowflakeKeyGenerateAlgorithm.java) |
+| UUID                 | 基于 UUID 的分布式主键生成算法                        | [`org.apache.shardingsphere.sharding.algorithm.keygen.UUIDKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/keygen/UUIDKeyGenerateAlgorithm.java) |
+| NANOID               | 基于 NanoId 的分布式主键生成算法                      | [`org.apache.shardingsphere.sharding.nanoid.algorithm.keygen.NanoIdKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-plugin/shardingsphere-sharding-nanoid/src/main/java/org/apache/shardingsphere/sharding/nanoid/algorithm/keygen/NanoIdKeyGenerateAlgorithm.java) |
+| COSID                | 基于 CosId 的分布式主键生成算法                       | [`org.apache.shardingsphere.sharding.cosid.algorithm.keygen.CosIdKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-plugin/shardingsphere-sharding-cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/keygen/CosIdKeyGenerateAlgorithm.java) |
+| COSID_SNOWFLAKE      | 基于 CosId 的雪花算法分布式主键生成算法 | [`org.apache.shardingsphere.sharding.cosid.algorithm.keygen.CosIdSnowflakeKeyGenerateAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-plugin/shardingsphere-sharding-cosid/src/main/java/org/apache/shardingsphere/sharding/cosid/algorithm/keygen/CosIdSnowflakeKeyGenerateAlgorithm.java) |
+
+## ShardingAuditAlgorithm
+
+### 全限定类名
+
+[`org.apache.shardingsphere.sharding.spi.ShardingAuditAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-api/src/main/java/org/apache/shardingsphere/sharding/spi/ShardingAuditAlgorithm.java)
+
+### 定义
+
+分片审计算法
+
+### 已知实现
+
+| *配置标识*    | *详细说明*                                                 | *全限定类名* |
+| ----------------------- | ------------------------------------------------------------- | ---------------------------- |
+| DML_SHARDING_CONDITIONS | 禁止不带分片键的DML审计算法   | [`org.apache.shardingsphere.sharding.algorithm.audit.DMLShardingConditionsShardingAuditAlgorithm`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-core/src/main/java/org/apache/shardingsphere/sharding/algorithm/audit/DMLShardingConditionsShardingAuditAlgorithm.java) |
+
+## DatetimeService
+
+### 全限定类名
+
+[`org.apache.shardingsphere.infra.datetime.DatetimeService`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-datetime/shardingsphere-infra-datetime-spi/src/main/java/org/apache/shardingsphere/infra/datetime/DatetimeService.java)
+
+### 定义
+
+获取当前时间进行路由
+
+### 已知实现
+
+| *配置标识*    | *详细说明*                                                | *全限定类名* |
+| ----------------------- | ------------------------------------------------------------ | ---------------------------- |
+| DatabaseDatetimeService | 从数据库中获取当前时间进行路由           | [`org.apache.shardingsphere.agent.metrics.prometheus.service.PrometheusPluginBootService`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-datetime/shardingsphere-infra-datetime-type/shardingsphere-database-datetime/src/main/java/org/apache/shardingsphere/datetime/database/DatabaseDatetimeService.java) |
+| SystemDatetime          | 从应用系统时间中获取当前时间进行路由 | [`org.apache.shardingsphere.datetime.system.SystemDatetimeService`](https://github.com/apache/shardingsphere/blob/master/shardingsphere-infra/shardingsphere-infra-datetime/shardingsphere-infra-datetime-type/shardingsphere-system-datetime/src/main/java/org/apache/shardingsphere/datetime/system/SystemDatetimeService.java) |
