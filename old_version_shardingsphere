commit 4658046d9e40d89d70c0da733b1484f6363d0595
Author: Guocheng Tang <totalo@qq.com>
Date:   Wed Nov 24 08:26:43 2021 +0800

    Minor optimization documentation (#13761)

diff --git a/docs/blog/content/material/database.cn.md b/docs/blog/content/material/database.cn.md
index 960a2634df..27e8c9ea93 100644
--- a/docs/blog/content/material/database.cn.md
+++ b/docs/blog/content/material/database.cn.md
@@ -59,7 +59,7 @@ Sharding-JDBC 采用无中心化架构，适用于 Java 开发的高性能的轻
 
 ![](https://shardingsphere.apache.org/blog/img/database4.jpg)
 
-Apache ShardingSphere 是多接入端共同组成的生态圈。通过混合使用 Sharding-JDBC 和 Sharding-Proxy，并采用同一配置中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合与当前业务的最佳系统架构。
+Apache ShardingSphere 是多接入端共同组成的生态圈。通过混合使用 Sharding-JDBC 和 Sharding-Proxy，并采用同一配置中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。
 
 ![](https://shardingsphere.apache.org/blog/img/database5.jpg)
 
diff --git a/docs/document/content/concepts/adaptor/_index.cn.md b/docs/document/content/concepts/adaptor/_index.cn.md
index 2f6086a839..a6834e07ed 100644
--- a/docs/document/content/concepts/adaptor/_index.cn.md
+++ b/docs/document/content/concepts/adaptor/_index.cn.md
@@ -59,6 +59,6 @@ ShardingSphere-JDBC 采用无中心化架构，与应用程序共享资源，适
 ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。
 
 Apache ShardingSphere 是多接入端共同组成的生态圈。
-通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合与当前业务的最佳系统架构。
+通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。
 
 ![Hybrid Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-hybrid-architecture_v2.png)
diff --git a/docs/document/content/features/management/_index.cn.md b/docs/document/content/features/management/_index.cn.md
index f1e53cadd6..13b959aa6e 100644
--- a/docs/document/content/features/management/_index.cn.md
+++ b/docs/document/content/features/management/_index.cn.md
@@ -20,4 +20,4 @@ chapter = true
 
 ## 目标
 
-实现从数据库到计算节点打通的一体化管理能力，在故障中为组件提供细粒度的控制能力，并尽可能的提供自愈的可能，是 Apache ShardingSphere 管控模块的主要设计目标。
+**实现从数据库到计算节点打通的一体化管理能力，在故障中为组件提供细粒度的控制能力，并尽可能的提供自愈的可能，是 Apache ShardingSphere 管控模块的主要设计目标。**
diff --git a/docs/document/content/features/management/_index.en.md b/docs/document/content/features/management/_index.en.md
index ef6c835040..9212a0e71a 100644
--- a/docs/document/content/features/management/_index.en.md
+++ b/docs/document/content/features/management/_index.en.md
@@ -21,4 +21,4 @@ In the overload traffic scenario, circuit breaker and request limiting for a nod
 
 ## Goal
 
-The goal of Apache ShardingSphere management module is to realize the integrated management ability from database to computing node, and provide control ability for components in case of failure.
+**The goal of Apache ShardingSphere management module is to realize the integrated management ability from database to computing node, and provide control ability for components in case of failure.**
diff --git a/docs/document/content/features/observability/_index.cn.md b/docs/document/content/features/observability/_index.cn.md
index 39e14f364c..9d6256c01e 100644
--- a/docs/document/content/features/observability/_index.cn.md
+++ b/docs/document/content/features/observability/_index.cn.md
@@ -42,4 +42,4 @@ APM 和 Metrics 需要通过埋点来收集系统信息。
 
 ## 目标
 
-提供尽量多的性能和统计指标，并隔离核心代码和埋点代码，是 Apache ShardingSphere 可观察性模块的设计目标。
+**提供尽量多的性能和统计指标，并隔离核心代码和埋点代码，是 Apache ShardingSphere 可观察性模块的设计目标。**
diff --git a/docs/document/content/features/observability/_index.en.md b/docs/document/content/features/observability/_index.en.md
index 022a6b6120..2bd1cbb810 100644
--- a/docs/document/content/features/observability/_index.en.md
+++ b/docs/document/content/features/observability/_index.en.md
@@ -46,4 +46,4 @@ Lots of events tracking make kernel code mess, difficult to maintain, and diffic
 
 ## Goal
 
-The goal of Apache ShardingSphere observability module is providing as many performance and statistical indicators as possible and isolating kernel code and embedded code.
+**The goal of Apache ShardingSphere observability module is providing as many performance and statistical indicators as possible and isolating kernel code and embedded code.**
diff --git a/docs/document/content/features/observability/concept.cn.md b/docs/document/content/features/observability/concept.cn.md
index b198fc6dc7..4e16c709aa 100644
--- a/docs/document/content/features/observability/concept.cn.md
+++ b/docs/document/content/features/observability/concept.cn.md
@@ -6,7 +6,7 @@ weight = 1
 ## 探针
 
 基于字节码增强和插件化设计提供 APM 和 metrics 埋点，以及日志输出功能。
-需要开启探针后，才能将监控指标数据输出至 第三方 APM 中展示。
+需要开启探针后，才能将监控指标数据输出至第三方 APM 中展示。
 
 ## APM
 
diff --git a/docs/document/content/features/scaling/_index.cn.md b/docs/document/content/features/scaling/_index.cn.md
index ed6dd335b8..bde26ce291 100644
--- a/docs/document/content/features/scaling/_index.cn.md
+++ b/docs/document/content/features/scaling/_index.cn.md
@@ -13,7 +13,7 @@ chapter = true
 ## 挑战
 
 Apache ShardingSphere 在分片算法上提供给用户极大的自由度，但却给弹性伸缩造成了极大的挑战。
-找寻即能支持自定义的分片算法，又能高效地将数据节点进行扩缩容的方式，是弹性伸缩面临的第一个挑战；
+找寻既能支持自定义的分片算法，又能高效地将数据节点进行扩缩容的方式，是弹性伸缩面临的第一个挑战；
 
 同时，在伸缩过程中，不应该对正在运行的业务造成影响。
 尽可能减少伸缩时数据不可用的时间窗口，甚至做到用户完全无感知，是弹性伸缩的另一个挑战；
@@ -26,7 +26,7 @@ ShardingSphere-Scaling 是一个提供给用户的通用数据接入迁移及弹
 
 ## 目标
 
-支持自定义分片算法，减少数据伸缩及迁移时的业务影响，提供一站式的通用弹性伸缩解决方案，是 Apache ShardingSphere 弹性伸缩的主要设计目标。
+**支持自定义分片算法，减少数据伸缩及迁移时的业务影响，提供一站式的通用弹性伸缩解决方案，是 Apache ShardingSphere 弹性伸缩的主要设计目标。**
 
 ## 状态
 
diff --git a/docs/document/content/features/scaling/_index.en.md b/docs/document/content/features/scaling/_index.en.md
index e6b2e84f59..32cca39283 100644
--- a/docs/document/content/features/scaling/_index.en.md
+++ b/docs/document/content/features/scaling/_index.en.md
@@ -26,7 +26,7 @@ ShardingSphere-Scaling is a common solution for migrating or scaling data.
 
 ## Goal
 
-The main design goal of ShardingSphere-Scaling is providing common solution which can support kinds of sharding algorithm and reduce the impact as much as possible during scaling.
+**The main design goal of ShardingSphere-Scaling is providing common solution which can support kinds of sharding algorithm and reduce the impact as much as possible during scaling.**
 
 ## Status
 
diff --git a/docs/document/content/features/shadow/_index.cn.md b/docs/document/content/features/shadow/_index.cn.md
index e291f6f2fa..17ad4b02da 100644
--- a/docs/document/content/features/shadow/_index.cn.md
+++ b/docs/document/content/features/shadow/_index.cn.md
@@ -21,5 +21,5 @@ chapter = true
 
 ## 目标
 
-Apache ShardingSphere 关注于全链路压测场景下，数据库层面的解决方案。
-将压测数据自动路由至用户指定的数据库，是 Apache ShardingSphere 影子库模块的主要设计目标。
+**Apache ShardingSphere 关注于全链路压测场景下，数据库层面的解决方案。
+将压测数据自动路由至用户指定的数据库，是 Apache ShardingSphere 影子库模块的主要设计目标。**
diff --git a/docs/document/content/features/shadow/_index.en.md b/docs/document/content/features/shadow/_index.en.md
index fafcd4167d..2532cffa2f 100644
--- a/docs/document/content/features/shadow/_index.en.md
+++ b/docs/document/content/features/shadow/_index.en.md
@@ -29,6 +29,6 @@ This requires business applications to perform data classification based on the
 
 ## Goal
 
-Apache ShardingSphere focuses on data solutions in pressure testing on production environment.
+**Apache ShardingSphere focuses on data solutions in pressure testing on production environment.
 
-The main goal of the Apache ShardingSphere shadow Database module is routing pressure testing data to user defined database automatically.
+The main goal of the Apache ShardingSphere shadow Database module is routing pressure testing data to user defined database automatically.**
diff --git a/docs/document/content/features/sharding/_index.cn.md b/docs/document/content/features/sharding/_index.cn.md
index 490dadf9cc..939c77e870 100644
--- a/docs/document/content/features/sharding/_index.cn.md
+++ b/docs/document/content/features/sharding/_index.cn.md
@@ -12,7 +12,7 @@ chapter = true
 从性能方面来说，由于关系型数据库大多采用 B+ 树类型的索引，在数据量超过阈值的情况下，索引深度的增加也将使得磁盘访问的 IO 次数增加，进而导致查询性能的下降；
 同时，高并发访问请求也使得集中式数据库成为系统的最大瓶颈。
 
-从可用性的方面来讲，服务化的无状态型，能够达到较小成本的随意扩容，这必然导致系统的最终压力都落在数据库之上。
+从可用性的方面来讲，服务化的无状态性，能够达到较小成本的随意扩容，这必然导致系统的最终压力都落在数据库之上。
 而单一的数据节点，或者简单的主从架构，已经越来越难以承担。数据库的可用性，已成为整个系统的关键。
 
 从运维成本方面考虑，当一个数据库实例中的数据达到阈值以上，对于 DBA 的运维压力就会增大。
diff --git a/docs/document/content/features/transaction/_index.cn.md b/docs/document/content/features/transaction/_index.cn.md
index 4a39295a13..dafcaf641f 100644
--- a/docs/document/content/features/transaction/_index.cn.md
+++ b/docs/document/content/features/transaction/_index.cn.md
@@ -48,7 +48,7 @@ BASE 是基本可用、柔性状态和最终一致性这三个要素的缩写。
 
 - 基本可用（Basically Available）保证分布式事务参与方不一定同时在线；
 - 柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉；
-- 而最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。
+- 最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。
 
 在 ACID 事务中对隔离性的要求很高，在事务执行过程中，必须将所有的资源锁定。
 柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。
diff --git a/docs/document/content/features/transaction/concept/base.cn.md b/docs/document/content/features/transaction/concept/base.cn.md
index 5a50020e97..3c1cfa1484 100644
--- a/docs/document/content/features/transaction/concept/base.cn.md
+++ b/docs/document/content/features/transaction/concept/base.cn.md
@@ -6,7 +6,7 @@ weight = 3
 柔性事务在 2008 年发表的一篇[论文](https://queue.acm.org/detail.cfm?id=1394128)中被最早提到，
 它提倡采用最终一致性放宽对强一致性的要求，以达到事务处理并发度的提升。
 
-TCC 和 Sage 是两种常见实现方案。
+TCC 和 Saga 是两种常见实现方案。
 他们主张开发者自行实现对数据库的反向操作，来达到数据在回滚时仍能够保证最终一致性。
 [SEATA](https://github.com/seata/seata) 实现了 SQL 反向操作的自动生成，可以使柔性事务不再必须由开发者介入才能使用。
 
diff --git a/docs/document/content/features/transaction/concept/base.en.md b/docs/document/content/features/transaction/concept/base.en.md
index 61141e1157..1d430327c3 100644
--- a/docs/document/content/features/transaction/concept/base.en.md
+++ b/docs/document/content/features/transaction/concept/base.en.md
@@ -6,7 +6,7 @@ weight = 3
 A [paper](https://queue.acm.org/detail.cfm?id=1394128) published in 2008 first mentioned on BASE transaction,
 it advocates the use of eventual consistency to instead of consistency when improve concurrency of transaction processing.
 
-TCC and Sage are two regular implementations.
+TCC and Saga are two regular implementations.
 They use reverse operation implemented by developers themselves to ensure the eventual consistency when data rollback.
 [SEATA](https://github.com/seata/seata) implements SQL reverse operation automatically, 
 so that BASE transaction can be used without the intervention of developers.
diff --git a/docs/document/content/overview/_index.cn.md b/docs/document/content/overview/_index.cn.md
index 16ad6ad0c5..36589215ab 100644
--- a/docs/document/content/overview/_index.cn.md
+++ b/docs/document/content/overview/_index.cn.md
@@ -105,7 +105,7 @@ ShardingSphere-JDBC 采用无中心化架构，与应用程序共享资源，适
 ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。
 
 Apache ShardingSphere 是多接入端共同组成的生态圈。
-通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合与当前业务的最佳系统架构。
+通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。
 
 ![ShardingSphere Hybrid Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-hybrid-architecture_v2.png)
 
