commit a783c5bb263cb71a308f9e9081688f7b8da52e93
Author: gin <jacky7boy@163.com>
Date:   Mon Oct 18 17:11:24 2021 +0800

    Add shadow english docs. (#13093)
    
    * Add shadow english docs.
    
    * Fix shadow docs.

diff --git a/docs/document/content/features/shadow/_index.en.md b/docs/document/content/features/shadow/_index.en.md
index c378355700..3cc00240ae 100644
--- a/docs/document/content/features/shadow/_index.en.md
+++ b/docs/document/content/features/shadow/_index.en.md
@@ -5,6 +5,27 @@ weight = 7
 chapter = true
 +++
 
-## Navigation
+## Background
 
-TODO
+Under the distributed application architecture based on microservices, since the overall service completes business requirements through a series of microservice calls and middleware calls, the stress testing of a single service can no longer represent the real scenario.
+
+In the offline environment, if you rebuild a complete set of stress testing environment similar to the production environment, the cost is too high, and it is often impossible to simulate the volume and complexity of the online environment.
+
+In this scenario, the industry usually chooses the full-link stress test method, that is, the stress test is performed in the production environment, so that the test results obtained can more accurately reflect the real capacity level and performance of the system.
+
+## Challenges
+
+Full-link stress testing is a complex and huge task that requires corresponding adjustments and cooperation between various middleware and microservices to deal with the transparent transmission of different flows and stress test identifiers. 
+Usually there should be a complete set of stress test platform and test plan.
+
+Among them, at the database level, in order to ensure the reliability and integrity of the production data and do a good job of data isolation, it is necessary to put pressure test data requests into the shadow database to prevent the pressure test data from being written into the production database and causing pollution to the real data.
+
+This requires business applications to perform data classification based on the transparently transmitted pressure test identification before executing SQL, and route the corresponding SQL to the corresponding data source.
+
+## Goal
+
+Apache ShardingSphere focuses on database-level solutions in full-link stress testing scenarios.
+
+Kernel-based SQL analysis capabilities and a pluggable platform architecture realize the isolation of pressure test data and production data, help application automatic routing, and support full-link pressure test.
+
+It is the main design goal of the Apache ShardingSphere shadow database module.
diff --git a/docs/document/content/features/shadow/concept.en.md b/docs/document/content/features/shadow/concept.en.md
index 3e40c443c0..135fde03ed 100644
--- a/docs/document/content/features/shadow/concept.en.md
+++ b/docs/document/content/features/shadow/concept.en.md
@@ -4,5 +4,36 @@ title = "Core Concept"
 weight = 1
 +++
 
-TODO
+## Shadow DB Switch
 
+Shadow library switch.
+
+A stress test is a demand for a specific period of time, and it can be turned on when needed.
+
+## Production DB
+
+The database used for production data.
+
+## Shadow DB
+
+The database used for the test data.
+
+## Shadow Table
+
+Perform pressure test data related tables.
+
+It has the same table structure as the corresponding table in the production database.
+
+## Shadow Algorithm
+
+Provides 2 types of shadow algorithms.
+
+Since the shadow algorithm is closely related to business implementation, no default shadow algorithm is provided.
+
+- Column shadow algorithm
+  
+It is suitable for scenarios where the value of a field involved in the executed SQL satisfies certain matching conditions in the test.
+
+- Note shadow algorithm
+
+It is suitable for scenarios where the field values involved in executing SQL cannot meet certain matching conditions in the test.
diff --git a/docs/document/content/features/shadow/principle.cn.md b/docs/document/content/features/shadow/principle.cn.md
index 2e46ad9d86..16e72417e0 100644
--- a/docs/document/content/features/shadow/principle.cn.md
+++ b/docs/document/content/features/shadow/principle.cn.md
@@ -40,14 +40,14 @@ Apache ShardingSphere 通过解析 SQL，对传入的 SQL 进行影子判定，
 
 ### DDL 语句
 
-仅支持影子算法。一般不会对 DDL 语句的压力测试。主要做为影子库环境的初始化或者影子表调整时执行。
+仅支持注解影子算法。一般不会对 DDL 语句的压力测试。主要做为影子库环境的初始化或者影子表调整时执行。
 
 影子判定会首先判断执行 SQL 是否包含注解，如果包含注解对影子规则中的注解影子算法依次判定。如果注解影子算法有任何一个判定成功。SQL 语句路由到影子库。
 没有 SQL 不包含注解或者注解影子算法判定不成功，路由到生产库。
 
 ## 影子算法
 
-影子算法详情，请参见[内置影子算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow)。
+影子算法详情，请参见[内置影子算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow)
 
 ## 使用案例
 
diff --git a/docs/document/content/features/shadow/principle.en.md b/docs/document/content/features/shadow/principle.en.md
index 10b2612994..17b92e835e 100644
--- a/docs/document/content/features/shadow/principle.en.md
+++ b/docs/document/content/features/shadow/principle.en.md
@@ -6,29 +6,69 @@ weight = 2
 
 ## Overall Architecture
 
-TODO
+Apache ShardingSphere makes shadow judgments on incoming SQL by parsing SQL, according to the shadow rules set by the user in the configuration file,
+route to production DB or shadow DB.
+
+![Execute Process](https://shardingsphere.apache.org/document/current/img/shadow/execute.png)
 
 ## Shadow Rule
 
-TODO
+Shadow rules include shadow data source mapping, shadow tables, and shadow algorithms.
+
+![Shadow Rule](https://shardingsphere.apache.org/document/current/img/shadow/rule_en.png)
+
+**enable**：Shadow DB switch, The default value is `false`. Optional value `true`/`false`.
+
+**data-sources**：Production data source name and shadow data source name mappings.
+
+**tables**：For tables related to stress testing, shadow tables must be included in the shadow library. 
+The shadow table needs to specify the corresponding shadow library mapping and shadow algorithm.
+
+**shadow-algorithms**：SQL routing shadow algorithm.
+
 
 ## Routing Process
 
-TODO
+Take the INSERT statement as an example, When writing data, Apache ShardingSphere will parse the SQL, and then construct a routing chain according to the rules in the configuration file.
+
+In the current version of the function, the shadow function is the last execution unit in the routing chain, that is, if there are other rules that require routing, such as sharding, Apache ShardingSphere will first route to a certain database according to the sharding rules, and then
+perform the shadow routing decision process.
+
+It is determined that the execution of SQL satisfies the configuration of the shadow rule, the data is routed to the corresponding shadow database, and the production data remains unchanged.
 
 ## Shadow Judgment Process
 
+When the shadow library switch is turned on, a shadow judgment will be made on the executed SQL statement.
+
+Shadow judgment currently supports two types of algorithms, and users can choose one or combine them according to actual business needs.
+
 ### DML Statement
 
-TODO
+Support two shadow algorithms.
+
+The shadow judgment first judges whether the table associated with the SQL execution has an intersection with the shadow table.
+
+If there is an intersection, the shadow algorithm associated with the shadow table of the intersection is determined in turn.
+
+If any of the shadow algorithms associated with the shadow table succeeds, the SQL statement is routed to the shadow database.
+
+If there is no intersection or the shadow algorithm is unsuccessful, the SQL statement is routed to the production database.
 
 ### DDL Statement
 
-TODO
+Only support note shadow algorithm.
+
+Generally, there is no stress test on DDL statements. It is mainly used for the initialization of the shadow library environment or the adjustment of the shadow table.
+
+The shadow determination will first determine whether the executed SQL contains annotations, and if it contains annotations, the shadow algorithm of the annotations in the shadow rule will be determined in turn.
+
+If any one of the annotation shadow algorithms succeeds, the SQL statement is routed to the shadow library.
+
+No SQL does not contain annotations or the annotation shadow algorithm is unsuccessful and is routed to the production database.
 
 ## Shadow Algorithm
 
-TODO
+Shadow algorithm details, See the [List of built-in shadow algorithms](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow)
 
 ## Use Example
 
diff --git a/docs/document/content/features/shadow/use-norms.cn.md b/docs/document/content/features/shadow/use-norms.cn.md
index 7d73de8382..56e6f5adac 100644
--- a/docs/document/content/features/shadow/use-norms.cn.md
+++ b/docs/document/content/features/shadow/use-norms.cn.md
@@ -25,7 +25,7 @@ weight = 3
 
 * 列影子算法不支持 DDL 语句。
 * 列影子算法不支持范围值匹配操作，比如：子查询、BETWEEN、GROUP BY ... HAVING等；
-* 使用影子库功能+分库分表功能，部分特殊SQL不支持，请参考[SQL使用规范]( https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/sql/)；
+* 使用影子库功能+分库分表功能，部分特殊SQL不支持，请参考[SQL使用规范](https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/sql/)
 
 ## 列影子算法 DML 语句支持度列表
 
@@ -39,7 +39,7 @@ weight = 3
 | INSERT   | INSERT INTO table (column,...) VALUES (value,...),(value,...),... |  支持 |
 | INSERT   | INSERT INTO table (column,...) SELECT column1 from table1 where column1 = value1 |  不支持 |
 
-* SELECT，UPDATE，DELETE语句
+* SELECT/UPDATE/DELETE语句
 
 对 `WHERE` 条件中包含的字段和值进行判定
 
diff --git a/docs/document/content/features/shadow/use-norms.en.md b/docs/document/content/features/shadow/use-norms.en.md
index b7b3f74954..ccdde241cf 100644
--- a/docs/document/content/features/shadow/use-norms.en.md
+++ b/docs/document/content/features/shadow/use-norms.en.md
@@ -4,10 +4,51 @@ title = "Use Norms"
 weight = 3
 +++
 
-## Supported Items
+## Shadow database
 
-TODO
+### Supported Items
 
-## Unsupported Items
+* The database is MySQL, Oracle, PostgreSQL, SQLServer;
 
-TODO
+### Unsupported Items
+
+* NoSQL database;
+
+## Shadow algorithm
+
+### Supported Items
+
+* The note shadow algorithm supports MDL and DDL statements;
+* The column shadow algorithm basically supports commonly used MDL statements;
+
+### Unsupported Items
+
+* Column shadow algorithm does not support DDL statements；
+* The column shadow algorithm does not support range value matching operations, for example: subQuery, BETWEEN, GROUP BY ... HAVING...;
+* Use shadow library function + sub-library sub-table function, some special SQL is not supported, 
+  please refer to[SQL Usage Specification](https://shardingsphere.apache.org/document/current/en/features/sharding/use-norms/sql/)
+
+## Column shadow algorithm DML statement support list
+
+* INSERT statement
+
+Judge the inserted column and inserted value of `INSERT` operation
+
+| *Operation* | *SQL* | *Support*  |
+| -------- | --------- | --------- |
+| INSERT   | INSERT INTO table (column,...) VALUES (value,...) |  true |
+| INSERT   | INSERT INTO table (column,...) VALUES (value,...),(value,...),... |  true |
+| INSERT   | INSERT INTO table (column,...) SELECT column1 from table1 where column1 = value1 |  false |
+
+* SELECT/UPDATE/DELETE statement
+
+Judge the fields and values included in the `WHERE` condition
+
+| *Condition* | *SQL* | *Support* |
+| -------- | --------- | --------- |
+| = | SELECT/UPDATE/DELETE ... WHERE column = value | true |
+| LIKE/NOT LIKE | SELECT/UPDATE/DELETE ... WHERE column LIKE/NOT LIKE value | true |
+| IN/NOT IN | SELECT/UPDATE/DELETE ... WHERE column IN/NOT IN (value1,value2,...) | true |
+| BETWEEN | SELECT/UPDATE/DELETE ... WHERE column BETWEEN value1 AND value2 | false |
+| GROUP BY ... HAVING... | SELECT/UPDATE/DELETE ... WHERE ... GROUP BY column HAVING column > value; | false |
+| subQuery | SELECT/UPDATE/DELETE ... WHERE column = (SELECT column FROM table WHERE column = value) | false |
