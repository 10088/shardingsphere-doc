commit 02024a8bda7d0c295c9bae4f5d2c47bc8aaa4434
Author: Mike0601 <40025573+Mike0601@users.noreply.github.com>
Date:   Wed Aug 10 18:29:19 2022 +0800

    modify overview part according to today's discussion (#20054)
    
    * modify according to today's discussion
    
    * add enhance part content
    
    * add application scenarios of traffic governance
    
    * fix a link bug

diff --git a/docs/document/content/features/management/_index.cn.md b/docs/document/content/features/management/_index.cn.md
index 513ba18a5a8..ac7f744506f 100644
--- a/docs/document/content/features/management/_index.cn.md
+++ b/docs/document/content/features/management/_index.cn.md
@@ -21,3 +21,13 @@ chapter = true
 ## 目标
 
 实现从数据库到计算节点打通的一体化管理能力，在故障中为组件提供细粒度的控制能力，并尽可能的提供自愈的可能，是 Apache ShardingSphere 管控模块的主要设计目标。
+
+## 应用场景
+
+### 计算节点过载保护
+
+当 ShardingSphere 集群内某个计算节点超过负载后，通过熔断功能，阻断应用到该计算节点的流量，保证整个集群继续提供稳定服务。
+
+### 存储节点限流
+
+在读写分离的场景下，当 ShardingSphere 集群内某个负责读流量的存储节点承接超负荷的请求时，通过限流功能，阻断集群内计算节点到该存储节点的流量，以保证存储节点集群正常响应。
diff --git a/docs/document/content/features/management/_index.en.md b/docs/document/content/features/management/_index.en.md
index 4ed136f33e3..7f6b1a0e9d9 100644
--- a/docs/document/content/features/management/_index.en.md
+++ b/docs/document/content/features/management/_index.en.md
@@ -21,4 +21,14 @@ In the overload traffic scenario, circuit breaker and request limiting for a nod
 
 ## Goal
 
-**The goal of Apache ShardingSphere management module is to realize the integrated management ability from database to computing node, and provide control ability for components in case of failure.**
+The goal of Apache ShardingSphere management module is to realize the integrated management ability from database to computing node, and provide control ability for components in case of failure.
+
+## Application Scenarios
+
+### Overloaded compute node protection
+
+When a compute node in a ShardingSphere cluster exceeds its load, the circuit breaker function is used to block the traffic to the compute node, to ensure that the whole cluster continues to provide stable services.
+
+### Storage node traffic limit
+
+In the read-write splitting scenario where a storage node responsible for the read traffic in a ShardingSphere cluster receives overloaded requests, the traffic limit function is used to block traffic from compute nodes to the storage node, to ensure normal response of the storage node cluster.
diff --git a/docs/document/content/features/readwrite-splitting/_index.en.md b/docs/document/content/features/readwrite-splitting/_index.en.md
index f26f213be47..6a2a507c517 100644
--- a/docs/document/content/features/readwrite-splitting/_index.en.md
+++ b/docs/document/content/features/readwrite-splitting/_index.en.md
@@ -21,7 +21,7 @@ Data in readwrite-splitting nodes are consistent, whereas that in shards is not.
 
 Though readwrite-splitting can enhance system throughput and availability, it also brings inconsistent data, including that among multiple primary databases and among primary databases and replica databases. What’s more, it also brings the same problem as data sharding, complicating developer and operator’s maintenance and operation. The following diagram has shown the complex topological relations between applications and database groups when sharding used together with readwrite-splitting.
 
-![chanllenges](https://shardingsphere.apache.org/document/current/img/readwrite-splitting/chanllenges.png)
+![challenges](https://shardingsphere.apache.org/document/current/img/readwrite-splitting/challenges.png)
 
 ## Goal
 
diff --git a/docs/document/content/overview/design.cn.md b/docs/document/content/overview/design.cn.md
index 5236ca76548..5db77be4bee 100644
--- a/docs/document/content/overview/design.cn.md
+++ b/docs/document/content/overview/design.cn.md
@@ -7,22 +7,32 @@ chapter = true
 
 ShardingSphere 采用 Database Plus 设计哲学，该理念致力于构建数据库上层的标准和生态，在生态中补充数据库所缺失的能力。
 
-Apache ShardingSphere 的可插拔架构划分为 3 层，它们是：L1 内核层、L2 功能层、L3 生态层。
-
 ![ShardingSphere Architecture](https://shardingsphere.apache.org/document/current/img/overview.cn_v2.png)
 
-## L1 内核层
+## 连接：打造数据库上层标准
+
+通过对数据库协议、SQL 方言以及数据库存储的灵活适配，快速构建多模异构数据库上层的标准，同时通过内置 DistSQL 为应用提供标准化的连接方式。
+
+## 增强：数据库计算增强引擎
+
+获取数据库的访问流量，并提供流量重定向（数据分片、读写分离、影子库）、流量变形（数据加密、数据脱敏）、流量鉴权（安全、审计、权限）、流量治理（熔断、限流）以及流量分析（服务质量分析、可观察性）等透明化增量功能。
+
+## 可插拔：构建数据库功能生态
+
+Apache ShardingSphere 的可插拔架构划分为 3 层，它们是：L1 内核层、L2 功能层、L3 生态层。
+
+### L1 内核层
 
 是数据库基本能力的抽象，其所有组件均必须存在，但具体实现方式可通过可插拔的方式更换。
 主要包括查询优化器、分布式事务引擎、分布式执行引擎、权限引擎和调度引擎等。
 
-## L2 功能层
+### L2 功能层
 
 用于提供增量能力，其所有组件均是可选的，可以包含零至多个组件。
 组件之间完全隔离，互无感知，多组件可通过叠加的方式相互配合使用。
 主要包括数据分片、读写分离、数据库高可用、数据加密、影子库等。
 用户自定义功能可完全面向 Apache ShardingSphere 定义的顶层接口进行定制化扩展，而无需改动内核代码。
 
-## L3 生态层
+### L3 生态层
 
-用于对接和融入现有数据库生态，包括数据库协议、SQL 解析器和存储适配器，分别对应于 Apache ShardingSphere 以数据库协议提供服务的方式、SQL 方言操作数据的方式以及对接存储节点的数据库类型。
\ No newline at end of file
+用于对接和融入现有数据库生态，包括数据库协议、SQL 解析器和存储适配器，分别对应于 Apache ShardingSphere 以数据库协议提供服务的方式、SQL 方言操作数据的方式以及对接存储节点的数据库类型。
diff --git a/docs/document/content/overview/design.en.md b/docs/document/content/overview/design.en.md
index 1ed1ea4b8d7..a79b28c1cee 100644
--- a/docs/document/content/overview/design.en.md
+++ b/docs/document/content/overview/design.en.md
@@ -7,17 +7,27 @@ chapter = true
 
 ShardingSphere adopts the database plus design philosophy, which is committed to building the standards and ecology of the upper layer of the database and supplementing the missing capabilities of the database in the ecology.
 
-The pluggable architecture of Apache ShardingSphere is composed of three layers - L1 Kernel Layer, L2 Feature Layer and L3 Ecosystem Layer.
-
 ![Overview](https://shardingsphere.apache.org/document/current/img/overview.en.png)
 
-## L1 Kernel Layer
+## Connect: Create database upper level standard
+
+ Through flexible adaptation of database protocols, SQL dialects, and database storage, it can quickly build standards on top of multi-modal heterogeneous databases, while providing standardized connection mode for applications through built-in DistSQL.
+
+## Enhance: Database computing enhancement engine
+
+Capture database access entry to provide additional features transparently, such as: redirect (sharding, readwrite-splitting and shadow), transform (data encrypt and mask), authentication (security, audit and authority), governance (circuit breaker and access limitation and analyze, QoS and observability).
+
+## Pluggable: Building database function ecology
+
+The pluggable architecture of Apache ShardingSphere is composed of three layers - L1 Kernel Layer, L2 Feature Layer and L3 Ecosystem Layer.
+
+### L1 Kernel Layer
 
 An abstraction of databases' basic capabilities.
 All the components are required and the specific implementation method can be replaced thanks to plugins.
 It includes a query optimizer, distributed transaction engine, distributed execution engine, permission engine and scheduling engine.
 
-## L2 Feature Layer
+### L2 Feature Layer
 
 Used to provide enhancement capabilities.
 All components are optional, allowing you to choose whether to include zero or multiple components.
@@ -25,8 +35,7 @@ Components are isolated from each other, and multiple components can be used tog
 It includes data sharding, read/write splitting, database high availability, data encryption and shadow database and so on.
 The user-defined feature can be fully customized and extended for the top-level interface defined by Apache ShardingSphere without changing kernel codes.
 
-## L3 Ecosystem Layer
+### L3 Ecosystem Layer
 
 It is used to integrate and merge the current database ecosystems.
 The ecosystem layer includes database protocol, SQL parser and storage adapter, corresponding to the way in which Apache ShardingSphere provides services by database protocol, the way in which SQL dialect operates data, and the database type that interacts with storage nodes.
-
diff --git a/docs/document/content/overview/distsql.cn.md b/docs/document/content/overview/distsql.cn.md
deleted file mode 100644
index 07ccaf50aa3..00000000000
--- a/docs/document/content/overview/distsql.cn.md
+++ /dev/null
@@ -1,77 +0,0 @@
-+++
-pre = "<b>1.4 </b>"
-title = "DistSQL"
-weight = 4
-chapter = true
-+++
-
-## 定义
-
-DistSQL（Distributed SQL）是 Apache ShardingSphere 特有的操作语言。 它与标准 SQL 的使用方式完全一致，用于提供增量功能的 SQL 级别操作能力。
-
-灵活的规则配置和资源管控能力是 Apache ShardingSphere 的特点之一。
-
-在使用 4.x 及其之前版本时，开发者虽然可以像使用原生数据库一样操作数据，但却需要通过本地文件或注册中心配置资源和规则。然而，操作习惯变更，对于运维工程师并不友好。
-
-从 5.x 版本开始，DistSQL（Distributed SQL）让用户可以像操作数据库一样操作 Apache ShardingSphere，使其从面向开发人员的框架和中间件转变为面向运维人员的数据库产品。
-
-## 相关概念
-
-DistSQL 细分为 RDL、RQL、RAL 和 RUL 四种类型。
-
-### RDL
-
-Resource & Rule Definition Language，负责资源和规则的创建、修改和删除。
-
-### RQL
-
-Resource & Rule Query Language，负责资源和规则的查询和展现。
-
-### RAL
-
-Resource & Rule Administration Language，负责强制路由、熔断、配置导入导出、数据迁移控制等管理功能。
-
-### RUL
-
-Resource & Rule Utility Language，负责 SQL 解析、SQL 格式化、执行计划预览等功能。
-
-## 对系统的影响
-
-### 之前
-
-在拥有 DistSQL 以前，用户一边使用 SQL 语句操作数据，一边使用 YAML 文件来管理 ShardingSphere 的配置，如下图：
-
-![Before](https://shardingsphere.apache.org/document/current/img/distsql/before.png)
-
-这时用户不得不面对以下几个问题：
-- 需要通过不同类型的客户端来操作数据和管理 ShardingSphere 规则；
-- 多个逻辑库需要多个 YAML 文件；
-- 修改 YAML 需要文件的编辑权限；
-- 修改 YAML 后需要重启 ShardingSphere。
-
-### 之后
-
-随着 DistSQL 的出现，对 ShardingSphere 的操作方式也得到了改变：
-
-![After](https://shardingsphere.apache.org/document/current/img/distsql/after.png)
-
-现在，用户的使用体验得到了巨大改善：
-- 使用相同的客户端来管理数据和 ShardingSphere 配置；
-- 不再额外创建 YAML 文件，通过 DistSQL 管理逻辑库；
-- 不再需要文件的编辑权限，通过 DistSQL 来管理配置；
-- 配置的变更实时生效，无需重启 ShardingSphere。
-
-## 使用限制
-
-DistSQL 只能用于 ShardingSphere-Proxy，ShardingSphere-JDBC 暂不提供。
-
-## 原理介绍
-
-与标准 SQL 一样，DistSQL 由 ShardingSphere 的解析引擎进行识别，将输入语句转换为抽象语法树，进而生成各个语法对应的 `Statement`，最后由合适的 `Handler` 进行业务处理。
-整体流程如下图所示：
-
-![Overview](https://shardingsphere.apache.org/document/current/img/distsql/overview.png)
-
-## 相关参考
-
-[用户手册：DistSQL](/cn/user-manual/shardingsphere-proxy/distsql/)
diff --git a/docs/document/content/overview/distsql.en.md b/docs/document/content/overview/distsql.en.md
deleted file mode 100644
index 2bd038a4153..00000000000
--- a/docs/document/content/overview/distsql.en.md
+++ /dev/null
@@ -1,76 +0,0 @@
-+++
-pre = "<b>1.4 </b>"
-title = "DistSQL"
-weight = 4
-chapter = true
-+++
-
-## Definition
-
-DistSQL (Distributed SQL) is Apache ShardingSphere's specific SQL, providing additional operation capabilities compared to standard SQL.
-
-Flexible rule configuration and resource management & control capabilities are one of the characteristics of Apache ShardingSphere.
-
-When using 4.x and earlier versions, developers can operate data just like using a database, but they need to configure resources and rules through YAML file (or registry center). However, the YAML file format and the changes brought by using the registry center made it unfriendly to DBAs.
-
-Starting from version 5.x, DistSQL enables users to operate Apache ShardingSphere just like a database, transforming it from a framework and middleware for developers to a database product for DBAs.
-
-## Related Concepts
-
-DistSQL is divided into RDL, RQL, RAL and RUL.
-
-### RDL
-
-Resource & Rule Definition Language, is responsible for the definition of resources and rules.
-
-### RQL
-
-Resource & Rule Query Language, is responsible for the query of resources and rules.
-
-### RAL
-
-Resource & Rule Administration Language, is responsible for hint, circuit breaker, configuration import and export, scaling control and other management functions.
-
-### RUL
-
-Resource & Rule Utility Language, is responsible for SQL parsing, SQL formatting, preview execution plan, etc.
-
-## Impact on the System
-
-### Before
-
-Before having DistSQL, users used SQL to operate data while using YAML configuration files to manage ShardingSphere, as shown below:
-
-![Before](https://shardingsphere.apache.org/document/current/img/distsql/before.png)
-
-At that time, users faced the following problems:
-- Different types of clients are required to operate data and manage ShardingSphere configuration.
-- Multiple logical databases require multiple YAML files.
-- Editing a YAML file requires writing permissions.
-- Need to restart ShardingSphere after editing YAML.
-
-### After
-
-With the advent of DistSQL, the operation of ShardingSphere has also changed:
-
-![After](https://shardingsphere.apache.org/document/current/img/distsql/after.png)
-
-Now, the user experience has been greatly improved:
-- Uses the same client to operate data and ShardingSphere configuration.
-- No need for additional YAML files, and the logical databases are managed through DistSQL.
-- Editing permissions for files are no longer required, and configuration is managed through DistSQL.
-- Configuration changes take effect in real-time without restarting ShardingSphere.
-
-## Limitations
-
-DistSQL can be used only with ShardingSphere-Proxy, not with ShardingSphere-JDBC for now.
-
-## How it works
-
-Like standard SQL, DistSQL is recognized by the parsing engine of ShardingSphere. It converts the input statement into an abstract syntax tree and then generates the `Statement` corresponding to each grammar, which is processed by the appropriate `Handler`.
-
-![Overview](https://shardingsphere.apache.org/document/current/img/distsql/overview.png)
-
-## Related References
-
-[User Manual: DistSQL](/en/user-manual/shardingsphere-proxy/distsql/)
diff --git a/docs/document/content/overview/introduction.cn.md b/docs/document/content/overview/introduction.cn.md
index c84f1592ed0..23d5567dbee 100644
--- a/docs/document/content/overview/introduction.cn.md
+++ b/docs/document/content/overview/introduction.cn.md
@@ -16,7 +16,44 @@ Apache ShardingSphere 项目理念，是提供数据库增强计算服务平台
 ShardingSphere 已于 2020 年 4 月 16 日成为 [Apache 软件基金会](https://apache.org/index.html#projects-list)的顶级项目。
 欢迎通过[邮件列表](mailto:dev@shardingsphere.apache.org)参与讨论。
 
-## 产品优势
+### ShardingSphere-JDBC
+
+ShardingSphere-JDBC 是 Apache ShardingSphere 的第一个产品，也是 Apache ShardingSphere 的前身。定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。
+它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。
+
+* 适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC；
+* 支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等；
+* 支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。
+
+|           | ShardingSphere-JDBC | ShardingSphere-Proxy |
+| --------- | ------------------- | -------------------- |
+| 数据库     | `任意`               | MySQL/PostgreSQL     |
+| 连接消耗数  | `高`                | 低                    |
+| 异构语言   | `仅 Java`            | 任意                  |
+| 性能      | `损耗低`              | 损耗略高               |
+| 无中心化   | `是`                 | 否                    |
+| 静态入口   | `无`                 | 有                    |
+
+ShardingSphere-JDBC 的优势在于对 Java 应用的友好度。
+
+### ShardingSphere-Proxy
+
+ShardingSphere-Proxy 是 Apache ShardingSphere 的第二个产品。它定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。
+目前提供 MySQL 和 PostgreSQL（兼容 openGauss 等基于 PostgreSQL 的数据库）版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好。
+
+* 向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；
+* 适用于任何兼容 MySQL/PostgreSQL 协议的的客户端。
+
+|           | ShardingSphere-JDBC | ShardingSphere-Proxy |
+| --------- | ------------------- | -------------------- |
+| 数据库     | 任意                 | `MySQL/PostgreSQL`   |
+| 连接消耗数  | 高                  | `低`                  |
+| 异构语言   | 仅 Java              | `任意`                |
+| 性能      | 损耗低                | `损耗略高`             |
+| 无中心化   | 是                   | `否`                  |
+| 静态入口   | 无                   | `有`                  |
+
+## 产品定位
 
 * 构建异构数据库上层生态和标准
 
diff --git a/docs/document/content/overview/introduction.en.md b/docs/document/content/overview/introduction.en.md
index 0ff2ab32a9e..6c35330170b 100644
--- a/docs/document/content/overview/introduction.en.md
+++ b/docs/document/content/overview/introduction.en.md
@@ -20,7 +20,47 @@ It can solve many digital transformation challenges faced by enterprises and emp
 ShardingSphere became an [Apache](https://apache.org/index.html#projects-list) Top-Level Project on April 16, 2020.
 You are welcome to check out the mailing list and discuss via [mail](mailto:dev@shardingsphere.apache.org).
 
-## Advantages
+### ShardingSphere-JDBC
+
+As the community's first product and the predecessor of Apache ShardingSphere, ShardingSphere-JDBC is a lightweight Java framework that provides additional services at Java's JDBC layer. With the client connecting directly to the database, it provides services in the form of jar and requires no extra deployment and dependence. It can be considered as an enhanced version of the JDBC driver, which is fully compatible with JDBC and all kinds of ORM frameworks.
+- Applicable in any ORM framework based on JDBC, such as JPA, Hibernate, Mybatis, Spring JDBC Template, or direct use of JDBC;
+- Support any third-party database connection pool, such as DBCP, C3P0, BoneCP, HikariCP;
+- Support any kind of JDBC standard database: MySQL, PostgreSQL, Oracle, SQLServer and any JDBC adapted databases.
+
+|                        | ShardingSphere-JDBC | ShardingSphere-Proxy |
+| ---------------------- | ------------------- | -------------------- |
+| Database               | `Any`               | MySQL/PostgreSQL     |
+| Connections Count Cost | `More`              | Less                 |
+| Heterogeneous language | `Java Only`         | Any                  |
+| Performance            | `Low loss`          | Relatively High loss |
+| Decentralization       | `Yes`               | No                   |
+| Static entry           | `No`                | Yes                  |
+
+ShardingSphere-JDBC is suitable for java applications.
+
+### ShardingSphere-Proxy
+
+ShardingSphere-Proxy is Apache ShardingSphere's second product.
+It is a transparent database proxy, providing a database server that encapsulates database binary protocol to support heterogeneous languages. 
+
+Currently, MySQL and PostgreSQL (compatible with PostgreSQL-based databases, such as openGauss) versions are provided.
+It can use any kind of terminal (such as MySQL Command Client, MySQL Workbench, etc.) that is compatible with MySQL or PostgreSQL protocol to operate data, which is more friendly to DBAs.
+
+- Transparent to applications, it can be used directly as MySQL/PostgreSQL;
+- Applicable to any kind of client that is compatible with MySQL/PostgreSQL protocol.
+
+|                        | ShardingSphere-JDBC | ShardingSphere-Proxy   |
+| ---------------------- | ------------------- | ---------------------- |
+| Database               | Any                 | `MySQL/PostgreSQL`     |
+| Connections Count Cost | More                | `Less`                 |
+| Heterogeneous language | Java Only           | `Any`                  |
+| Performance            | Low loss            | `Relatively High loss` |
+| Decentralization       | Yes                 | `No`                   |
+| Static entry           | No                  | `Yes`                  |
+
+The advantages of ShardingSphere-Proxy lie in supporting heterogeneous languages and providing operational entries for DBA.
+
+## Positioning
 
 - Build a standard layer & ecosystem above heterogeneous databases
 
diff --git a/docs/document/content/overview/jdbc_proxy.cn.md b/docs/document/content/overview/jdbc_proxy.cn.md
index 35f5c464f1e..d8b24e258e3 100644
--- a/docs/document/content/overview/jdbc_proxy.cn.md
+++ b/docs/document/content/overview/jdbc_proxy.cn.md
@@ -1,14 +1,15 @@
 +++
 pre = "<b>1.3 </b>"
-title = "JDBC & Proxy"
+title = "部署形态"
 weight = 3
 chapter = true
 +++
 
+## 部署形态
 Apache ShardingSphere 由 ShardingSphere-JDBC 和 ShardingSphere-Proxy 这 2 款既能够独立部署，又支持混合部署配合使用的产品组成。
 它们均提供标准化的基于数据库作为存储节点的增量功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。
 
-## ShardingSphere-JDBC 独立部署
+### ShardingSphere-JDBC 独立部署
 
 [![Maven Status](https://img.shields.io/maven-central/v/org.apache.shardingsphere/shardingsphere-jdbc.svg?color=green)](https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc)
 
@@ -32,9 +33,7 @@ ShardingSphere-JDBC 是 Apache ShardingSphere 的第一个产品，也是 Apache
 
 ShardingSphere-JDBC 的优势在于对 Java 应用的友好度。
 
-源码：[https://github.com/apache/shardingsphere/tree/master/shardingsphere-jdbc](https://github.com/apache/shardingsphere/tree/master/shardingsphere-jdbc)
-
-## ShardingSphere-Proxy 独立部署
+### ShardingSphere-Proxy 独立部署
 
 [![Nightly-Download](https://img.shields.io/badge/nightly--builds-download-orange.svg)](https://nightlies.apache.org/shardingsphere/)
 [![Download](https://img.shields.io/badge/release-download-orange.svg)](/cn/downloads/)
@@ -58,9 +57,8 @@ ShardingSphere-Proxy 是 Apache ShardingSphere 的第二个产品。它定位为
 | 静态入口   | 无                   | `有`                  |
 
 ShardingSphere-Proxy 的优势在于对异构语言的支持，以及为 DBA 提供可操作入口。
-源码：[https://github.com/apache/shardingsphere/tree/master/shardingsphere-proxy](https://github.com/apache/shardingsphere/tree/master/shardingsphere-proxy)
 
-## 混合部署架构
+### 混合部署架构
 
 ShardingSphere-JDBC 采用无中心化架构，与应用程序共享资源，适用于 Java 开发的高性能的轻量级 OLTP 应用；
 ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。
@@ -69,3 +67,22 @@ Apache ShardingSphere 是多接入端共同组成的生态圈。
 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。
 
 ![ShardingSphere Hybrid Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-hybrid-architecture_v2.png)
+
+## 运行模式
+
+Apache ShardingSphere 是一套完善的产品，使用场景非常广泛。
+除生产环境的集群部署之外，还为工程师在开发和自动化测试等场景提供相应的运行模式。
+Apache ShardingSphere 提供的 2 种运行模式分别是单机模式和集群模式。
+
+### 单机模式
+
+能够将数据源和规则等元数据信息持久化，但无法将元数据同步至多个 Apache ShardingSphere 实例，无法在集群环境中相互感知。
+通过某一实例更新元数据之后，会导致其他实例由于获取不到最新的元数据而产生不一致的错误。
+适用于工程师在本地搭建 Apache ShardingSphere 环境。
+
+### 集群模式
+
+提供了多个 Apache ShardingSphere 实例之间的元数据共享和分布式场景下状态协调的能力。
+在真实部署上线的生产环境，必须使用集群模式。
+它能够提供计算能力水平扩展和高可用等分布式系统必备的能力。
+集群环境需要通过独立部署的注册中心来存储元数据和协调节点状态。
diff --git a/docs/document/content/overview/jdbc_proxy.en.md b/docs/document/content/overview/jdbc_proxy.en.md
index 9ddff65d4ce..81e11f6b2ff 100644
--- a/docs/document/content/overview/jdbc_proxy.en.md
+++ b/docs/document/content/overview/jdbc_proxy.en.md
@@ -1,13 +1,15 @@
 +++
 pre = "<b>1.3 </b>"
-title = "JDBC & Proxy"
+title = "Deployment"
 weight = 3
 chapter = true
 +++
 
+## Deployment
+
 Apache ShardingSphere includes two independent clients: ShardingSphere-JDBC & ShardingSphere-Proxy. They all provide functions of data scale-out, distributed transaction and distributed governance, applicable in a variety of scenarios such as Java isomorphism, heterogeneous languages, and a cloud-native environment.
 
-## ShardingSphere-JDBC
+### ShardingSphere-JDBC
 
 [![Maven Status](https://img.shields.io/maven-central/v/org.apache.shardingsphere/shardingsphere-jdbc.svg?color=green)](https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc)
 
@@ -29,9 +31,7 @@ As the community's first product and the predecessor of Apache ShardingSphere, S
 
 ShardingSphere-JDBC is suitable for java applications.
 
-Source Codes: [https://github.com/apache/shardingsphere/tree/master/shardingsphere-jdbc](https://github.com/apache/shardingsphere/tree/master/shardingsphere-jdbc)
-
-## ShardingSphere-Proxy
+### ShardingSphere-Proxy
 
 [![Nightly-Release](https://img.shields.io/badge/nightly--builds-download-orange.svg)](https://nightlies.apache.org/shardingsphere/)
 [![Download](https://img.shields.io/badge/release-download-orange.svg)](/cn/downloads/)
@@ -59,9 +59,7 @@ It can use any kind of terminal (such as MySQL Command Client, MySQL Workbench,
 
 The advantages of ShardingSphere-Proxy lie in supporting heterogeneous languages and providing operational entries for DBA.
 
-Source Codes: [https://github.com/apache/shardingsphere/tree/master/shardingsphere-proxy](https://github.com/apache/shardingsphere/tree/master/shardingsphere-proxy)
-
-## Hybrid Architecture
+### Hybrid Architecture
 
 ShardingSphere-JDBC adopts a decentralized architecture, applicable to high-performance light-weight OLTP applications developed with Java.
 ShardingSphere-Proxy provides static entry and supports all languages, applicable to OLAP applications and the sharding databases management and operation situation.
@@ -70,3 +68,22 @@ Apache ShardingSphere is an ecosystem composed of multiple access ports.
 By combining ShardingSphere-JDBC and ShardingSphere-Proxy, and using the same registry to configure sharding strategies, it can flexibly build application systems for various scenarios, allowing architects to freely adjust the system architecture according to the current businesses. 
 
 ![ShardingSphere Hybrid Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-hybrid-architecture_v2.png)
+
+## Operation Modes
+
+Apache ShardingSphere is a complete set of products applicable to a wide range of usage scenarios.
+In addition to the cluster deployment of the production environment, it also provides corresponding operation modes for engineers in the development process and automated testing scenarios. Apache ShardingSphere provides two runtime modes: standalone mode and cluster mode.
+
+### Standalone mode
+
+It can achieve data persistence in terms of metadata information such as data sources and rules, but it is not able to synchronize metadata to multiple Apache ShardingSphere instances or be aware of each other in a cluster environment.
+Updating metadata through one instance causes inconsistencies in other instances because they cannot get the latest metadata.
+It is ideal for engineers to build a ShardingSphere environment locally.
+
+### Cluster mode
+
+It provides metadata sharing between multiple Apache ShardingSphere instances and the capability to coordinate states in distributed scenarios.
+In an actual production environment for deployment and release, you must use the cluster mode. 
+
+It provides the capabilities necessary for distributed systems, such as horizontal scaling of computing capability and high availability.
+Clustered environments need to store metadata and coordinate nodes' status through a separately deployed registry center.
diff --git a/docs/document/content/overview/mode.cn.md b/docs/document/content/overview/mode.cn.md
deleted file mode 100644
index 8d257bd777c..00000000000
--- a/docs/document/content/overview/mode.cn.md
+++ /dev/null
@@ -1,23 +0,0 @@
-+++
-pre = "<b>1.5 </b>"
-title = "运行模式"
-weight = 5
-chapter = true
-+++
-
-Apache ShardingSphere 是一套完善的产品，使用场景非常广泛。
-除生产环境的集群部署之外，还为工程师在开发和自动化测试等场景提供相应的运行模式。
-Apache ShardingSphere 提供的 2 种运行模式分别是单机模式和集群模式。
-
-## 单机模式
-
-能够将数据源和规则等元数据信息持久化，但无法将元数据同步至多个 Apache ShardingSphere 实例，无法在集群环境中相互感知。
-通过某一实例更新元数据之后，会导致其他实例由于获取不到最新的元数据而产生不一致的错误。
-适用于工程师在本地搭建 Apache ShardingSphere 环境。
-
-## 集群模式
-
-提供了多个 Apache ShardingSphere 实例之间的元数据共享和分布式场景下状态协调的能力。
-在真实部署上线的生产环境，必须使用集群模式。
-它能够提供计算能力水平扩展和高可用等分布式系统必备的能力。
-集群环境需要通过独立部署的注册中心来存储元数据和协调节点状态。
diff --git a/docs/document/content/overview/mode.en.md b/docs/document/content/overview/mode.en.md
deleted file mode 100644
index 9945dc2c33f..00000000000
--- a/docs/document/content/overview/mode.en.md
+++ /dev/null
@@ -1,23 +0,0 @@
-+++
-pre = "<b>1.5 </b>"
-title = "Mode"
-weight = 5
-chapter = true
-+++
-
-Apache ShardingSphere is a complete set of products applicable to a wide range of usage scenarios.
-In addition to the cluster deployment of the production environment, it also provides corresponding operation modes for engineers in the development process and automated testing scenarios. Apache ShardingSphere provides two runtime modes: standalone mode and cluster mode.
-
-## Standalone mode
-
-It can achieve data persistence in terms of metadata information such as data sources and rules, but it is not able to synchronize metadata to multiple Apache ShardingSphere instances or be aware of each other in a cluster environment.
-Updating metadata through one instance causes inconsistencies in other instances because they cannot get the latest metadata.
-It is ideal for engineers to build a ShardingSphere environment locally.
-
-## Cluster mode
-
-It provides metadata sharing between multiple Apache ShardingSphere instances and the capability to coordinate states in distributed scenarios.
-In an actual production environment for deployment and release, you must use the cluster mode. 
-
-It provides the capabilities necessary for distributed systems, such as horizontal scaling of computing capability and high availability.
-Clustered environments need to store metadata and coordinate nodes' status through a separately deployed registry center.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/_index.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/_index.cn.md
index b06a7db5875..42fdb00b09f 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/_index.cn.md
@@ -4,4 +4,75 @@ weight = 3
 chapter = true
 +++
 
-本章节将介绍 [DistSQL](/cn/overview/distsql/) 的详细语法。
+本章节将介绍 DistSQL 的详细语法。
+
+## 定义
+
+DistSQL（Distributed SQL）是 Apache ShardingSphere 特有的操作语言。 它与标准 SQL 的使用方式完全一致，用于提供增量功能的 SQL 级别操作能力。
+
+灵活的规则配置和资源管控能力是 Apache ShardingSphere 的特点之一。
+
+在使用 4.x 及其之前版本时，开发者虽然可以像使用原生数据库一样操作数据，但却需要通过本地文件或注册中心配置资源和规则。然而，操作习惯变更，对于运维工程师并不友好。
+
+从 5.x 版本开始，DistSQL（Distributed SQL）让用户可以像操作数据库一样操作 Apache ShardingSphere，使其从面向开发人员的框架和中间件转变为面向运维人员的数据库产品。
+
+## 相关概念
+
+DistSQL 细分为 RDL、RQL、RAL 和 RUL 四种类型。
+
+### RDL
+
+Resource & Rule Definition Language，负责资源和规则的创建、修改和删除。
+
+### RQL
+
+Resource & Rule Query Language，负责资源和规则的查询和展现。
+
+### RAL
+
+Resource & Rule Administration Language，负责强制路由、熔断、配置导入导出、数据迁移控制等管理功能。
+
+### RUL
+
+Resource & Rule Utility Language，负责 SQL 解析、SQL 格式化、执行计划预览等功能。
+
+## 对系统的影响
+
+### 之前
+
+在拥有 DistSQL 以前，用户一边使用 SQL 语句操作数据，一边使用 YAML 文件来管理 ShardingSphere 的配置，如下图：
+
+![Before](https://shardingsphere.apache.org/document/current/img/distsql/before.png)
+
+这时用户不得不面对以下几个问题：
+- 需要通过不同类型的客户端来操作数据和管理 ShardingSphere 规则；
+- 多个逻辑库需要多个 YAML 文件；
+- 修改 YAML 需要文件的编辑权限；
+- 修改 YAML 后需要重启 ShardingSphere。
+
+### 之后
+
+随着 DistSQL 的出现，对 ShardingSphere 的操作方式也得到了改变：
+
+![After](https://shardingsphere.apache.org/document/current/img/distsql/after.png)
+
+现在，用户的使用体验得到了巨大改善：
+- 使用相同的客户端来管理数据和 ShardingSphere 配置；
+- 不再额外创建 YAML 文件，通过 DistSQL 管理逻辑库；
+- 不再需要文件的编辑权限，通过 DistSQL 来管理配置；
+- 配置的变更实时生效，无需重启 ShardingSphere。
+
+## 使用限制
+
+DistSQL 只能用于 ShardingSphere-Proxy，ShardingSphere-JDBC 暂不提供。
+
+## 原理介绍
+
+与标准 SQL 一样，DistSQL 由 ShardingSphere 的解析引擎进行识别，将输入语句转换为抽象语法树，进而生成各个语法对应的 `Statement`，最后由合适的 `Handler` 进行业务处理。
+整体流程如下图所示：
+
+![Overview](https://shardingsphere.apache.org/document/current/img/distsql/overview.png)
+
+## 相关参考
+
+[用户手册：DistSQL](/cn/user-manual/shardingsphere-proxy/distsql/)
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/_index.en.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/_index.en.md
index 62d39c4743f..ca1b9d4ab53 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/_index.en.md
@@ -4,4 +4,74 @@ weight = 3
 chapter = true
 +++
 
-This chapter will introduce the detailed syntax of [DistSQL](/en/overview/distsql/).
+This chapter will introduce the detailed syntax of DistSQL.
+
+## Definition
+
+DistSQL (Distributed SQL) is Apache ShardingSphere's specific SQL, providing additional operation capabilities compared to standard SQL.
+
+Flexible rule configuration and resource management & control capabilities are one of the characteristics of Apache ShardingSphere.
+
+When using 4.x and earlier versions, developers can operate data just like using a database, but they need to configure resources and rules through YAML file (or registry center). However, the YAML file format and the changes brought by using the registry center made it unfriendly to DBAs.
+
+Starting from version 5.x, DistSQL enables users to operate Apache ShardingSphere just like a database, transforming it from a framework and middleware for developers to a database product for DBAs.
+
+## Related Concepts
+
+DistSQL is divided into RDL, RQL, RAL and RUL.
+
+### RDL
+
+Resource & Rule Definition Language, is responsible for the definition of resources and rules.
+
+### RQL
+
+Resource & Rule Query Language, is responsible for the query of resources and rules.
+
+### RAL
+
+Resource & Rule Administration Language, is responsible for hint, circuit breaker, configuration import and export, scaling control and other management functions.
+
+### RUL
+
+Resource & Rule Utility Language, is responsible for SQL parsing, SQL formatting, preview execution plan, etc.
+
+## Impact on the System
+
+### Before
+
+Before having DistSQL, users used SQL to operate data while using YAML configuration files to manage ShardingSphere, as shown below:
+
+![Before](https://shardingsphere.apache.org/document/current/img/distsql/before.png)
+
+At that time, users faced the following problems:
+- Different types of clients are required to operate data and manage ShardingSphere configuration.
+- Multiple logical databases require multiple YAML files.
+- Editing a YAML file requires writing permissions.
+- Need to restart ShardingSphere after editing YAML.
+
+### After
+
+With the advent of DistSQL, the operation of ShardingSphere has also changed:
+
+![After](https://shardingsphere.apache.org/document/current/img/distsql/after.png)
+
+Now, the user experience has been greatly improved:
+- Uses the same client to operate data and ShardingSphere configuration.
+- No need for additional YAML files, and the logical databases are managed through DistSQL.
+- Editing permissions for files are no longer required, and configuration is managed through DistSQL.
+- Configuration changes take effect in real-time without restarting ShardingSphere.
+
+## Limitations
+
+DistSQL can be used only with ShardingSphere-Proxy, not with ShardingSphere-JDBC for now.
+
+## How it works
+
+Like standard SQL, DistSQL is recognized by the parsing engine of ShardingSphere. It converts the input statement into an abstract syntax tree and then generates the `Statement` corresponding to each grammar, which is processed by the appropriate `Handler`.
+
+![Overview](https://shardingsphere.apache.org/document/current/img/distsql/overview.png)
+
+## Related References
+
+[User Manual: DistSQL](/en/user-manual/shardingsphere-proxy/distsql/)
diff --git a/docs/document/static/img/overview.cn_v2.png b/docs/document/static/img/overview.cn_v2.png
index f98ab199dc7..1115c973f5d 100644
Binary files a/docs/document/static/img/overview.cn_v2.png and b/docs/document/static/img/overview.cn_v2.png differ
