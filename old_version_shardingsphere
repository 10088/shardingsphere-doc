commit a7512e14062ec8d62c14fc21ebcbe15de23c9ab0
Author: AFTAB SAMA <79740895+Aftab700@users.noreply.github.com>
Date:   Wed Mar 9 10:34:17 2022 +0530

     space between Chinese and English words #15906 (#15913)
    
    * Update performance-test.cn.md
    
    space between Chinese and English words
    #15851
    
    * Update _index.cn.md
    
    space between Chinese and English words
     #15907
    
    * Update release-elasticjob-ui.cn.md
    
     space between Chinese and English words
    Fix : #15906

diff --git a/docs/community/content/contribute/release-elasticjob-ui.cn.md b/docs/community/content/contribute/release-elasticjob-ui.cn.md
index d97a9ac589..e29134f830 100644
--- a/docs/community/content/contribute/release-elasticjob-ui.cn.md
+++ b/docs/community/content/contribute/release-elasticjob-ui.cn.md
@@ -1,18 +1,18 @@
 +++
-title = "ElasticJob-UI发布指南"
+title = "ElasticJob-UI 发布指南"
 weight = 10
 chapter = true
 +++
 
-## GPG设置
+## GPG 设置
 
 详情请参见[发布指南](/cn/contribute/release/)。
 
-## 发布Apache Maven中央仓库
+## 发布 Apache Maven 中央仓库
 
-**1. 设置settings.xml文件**
+**1. 设置 settings.xml 文件**
 
-将以下模板添加到 `~/.m2/settings.xml`中，所有密码需要加密后再填入。
+将以下模板添加到 `~/.m2/settings.xml` 中，所有密码需要加密后再填入。
 加密设置可参考[这里](http://maven.apache.org/guides/mini/guide-encryption.html)。
 
 ```xml
@@ -40,11 +40,11 @@ https://github.com/apache/shardingsphere-elasticjob-ui/blob/master/RELEASE-NOTES
 
 **3. 创建发布分支**
 
-假设从github下载的ElasticJob-UI源代码在`~/elasticjob-ui/`目录；假设即将发布的版本为`${RELEASE.VERSION}`。
-创建`${RELEASE.VERSION}-release`分支，接下来的操作都在该分支进行。
+假设从 github 下载的 ElasticJob-UI 源代码在 `~/elasticjob-ui/` 目录；假设即将发布的版本为 `${RELEASE.VERSION}`。
+创建 `${RELEASE.VERSION}-release` 分支，接下来的操作都在该分支进行。
 
 ```shell
-## ${name}为源码所在分支，如：master，dev-4.x
+## ${name} 为源码所在分支，如：master，dev-4.x
 git clone --branch ${name} https://github.com/apache/shardingsphere-elasticjob-ui.git ~/elasticjob-ui
 cd ~/elasticjob-ui/
 git pull
@@ -56,10 +56,10 @@ git push origin ${RELEASE.VERSION}-release
 
 ```shell
 cd ~/elasticjob-ui
-mvn release:prepare -Prelease -Darguments="-DskipTests" -DautoVersionSubmodules=true -DdryRun=true -Dusername=${Github用户名}
+mvn release:prepare -Prelease -Darguments="-DskipTests" -DautoVersionSubmodules=true -DdryRun=true -Dusername=${Github 用户名}
 ```
 
--Prelease: 选择release的profile，这个profile会打包所有源码、jar文件以及ElasticJob-UI的可执行二进制包。
+-Prelease: 选择 release 的 profile，这个 profile 会打包所有源码、jar 文件以及 ElasticJob-UI 的可执行二进制包。
 
 -DautoVersionSubmodules=true：作用是发布过程中版本号只需要输入一次，不必为每个子模块都输入一次。
 
@@ -81,11 +81,11 @@ cd ~/elasticjob-ui
 mvn release:prepare -Prelease -Darguments="-DskipTests" -DautoVersionSubmodules=true -DpushChanges=false -Dusername=${Github用户名}
 ```
 
-和上一步演练的命令基本相同，去掉了-DdryRun=true参数。
+和上一步演练的命令基本相同，去掉了 -DdryRun=true 参数。
 
--DpushChanges=false：不要将修改后的版本号和tag自动提交至Github。
+-DpushChanges=false：不要将修改后的版本号和 tag 自动提交至 Github。
 
-将本地文件检查无误后，提交至github。
+将本地文件检查无误后，提交至 github。
 
 ```shell
 git push origin ${RELEASE.VERSION}-release
@@ -99,9 +99,9 @@ cd ~/elasticjob-ui
 mvn release:perform -Prelease -Darguments="-DskipTests" -DautoVersionSubmodules=true -Dusername=${Github用户名}
 ```
 
-## 发布Apache SVN仓库
+## 发布 Apache SVN 仓库
 
-**1. 检出shardingsphere发布目录**
+**1. 检出 shardingsphere 发布目录**
 
 如无本地工作目录，则先创建本地工作目录。
 
@@ -110,7 +110,7 @@ mkdir -p ~/ss_svn/dev/
 cd ~/ss_svn/dev/
 ```
 
-创建完毕后，从Apache SVN检出shardingsphere发布目录。
+创建完毕后，从 Apache SVN 检出 shardingsphere 发布目录。
 
 ```shell
 svn --username=${APACHE LDAP 用户名} co https://dist.apache.org/repos/dist/dev/shardingsphere
@@ -119,7 +119,7 @@ cd ~/ss_svn/dev/shardingsphere
 
 **2. 添加gpg公钥**
 
-仅第一次部署的账号需要添加，只要`KEYS`中包含已经部署过的账户的公钥即可。
+仅第一次部署的账号需要添加，只要 `KEYS` 中包含已经部署过的账户的公钥即可。
 
 ```shell
 gpg -a --export ${GPG用户名} >> KEYS
@@ -153,7 +153,7 @@ shasum -b -a 512 apache-shardingsphere-elasticjob-${RELEASE.VERSION}-lite-ui-bin
 shasum -b -a 512 apache-shardingsphere-elasticjob-${RELEASE.VERSION}-cloud-ui-bin.tar.gz > apache-shardingsphere-elasticjob-${RELEASE.VERSION}-cloud-ui-bin.tar.gz.sha512
 ```
 
-**5. 提交Apache SVN**
+**5. 提交 Apache SVN**
 
 ```shell
 cd ~/ss_svn/dev/shardingsphere/
@@ -162,7 +162,7 @@ svn --username=${APACHE LDAP 用户名} commit -m "release elasticjob-ui-${RELEA
 ```
 ## 检查发布结果
 
-**检查sha512哈希**
+**检查 sha512 哈希**
 
 ```shell
 shasum -c apache-shardingsphere-elasticjob-${RELEASE.VERSION}-ui-src.zip.sha512
@@ -170,9 +170,9 @@ shasum -c apache-shardingsphere-elasticjob-${RELEASE.VERSION}-lite-ui-bin.tar.gz
 shasum -c apache-shardingsphere-elasticjob-${RELEASE.VERSION}-cloud-ui-bin.tar.gz.sha512
 ```
 
-**检查gpg签名**
+**检查 gpg 签名**
 
-首先导入发布人公钥。从svn仓库导入KEYS到本地环境。（发布版本的人不需要再导入，帮助做验证的人需要导入，用户名填发版人的即可）
+首先导入发布人公钥。从 svn 仓库导入 KEYS 到本地环境。（发布版本的人不需要再导入，帮助做验证的人需要导入，用户名填发版人的即可）
 
 ```shell
 curl https://dist.apache.org/repos/dist/dev/shardingsphere/KEYS >> KEYS
@@ -195,7 +195,7 @@ Your decision? 5
   > save
 ```
 
-然后进行gpg签名检查。
+然后进行 gpg 签名检查。
 
 ```shell
 gpg --verify apache-shardingsphere-elasticjob-${RELEASE.VERSION}-ui-src.zip.asc apache-shardingsphere-elasticjob-${RELEASE.VERSION}-ui-src.zip
@@ -204,7 +204,7 @@ gpg --verify apache-shardingsphere-elasticjob-${RELEASE.VERSION}-cloud-ui-bin.ta
 ```
 **检查发布文件内容**
 
-**对比源码包与Github上tag的内容差异**
+**对比源码包与 Github 上 tag 的内容差异**
 
 ```
 curl -Lo tag-${RELEASE.VERSION}.zip https://github.com/apache/shardingsphere-elasticjob-ui/archive/${RELEASE.VERSION}.zip
@@ -215,9 +215,9 @@ diff -r apache-shardingsphere-elasticjob-${RELEASE.VERSION}-ui-src shardingspher
 
 **检查源码包的文件内容**
 
-- 检查源码包是否包含由于包含不必要文件，致使tarball过于庞大
-- 存在`LICENSE`和`NOTICE`文件
-- `NOTICE`文件中的年份正确
+- 检查源码包是否包含由于包含不必要文件，致使 tarball 过于庞大
+- 存在 `LICENSE` 和 `NOTICE` 文件
+- `NOTICE` 文件中的年份正确
 - 只存在文本文件，不存在二进制文件
 - 所有文件的开头都有ASF许可证
 - 能够正确编译，单元测试可以通过 (./mvnw -T 1C install)
@@ -225,30 +225,30 @@ diff -r apache-shardingsphere-elasticjob-${RELEASE.VERSION}-ui-src shardingspher
 
 **检查二进制包的文件内容**
 
-解压缩`apache-shardingsphere-elasticjob-${RELEASE.VERSION}-lite-ui-bin.tar.gz`和`apache-shardingsphere-elasticjob-${RELEASE.VERSION}-cloud-ui-bin.tar.gz`
+解压缩 `apache-shardingsphere-elasticjob-${RELEASE.VERSION}-lite-ui-bin.tar.gz` 和 `apache-shardingsphere-elasticjob-${RELEASE.VERSION}-cloud-ui-bin.tar.gz`
 进行如下检查:
 
-- 存在`LICENSE`和`NOTICE`文件
-- `NOTICE`文件中的年份正确
-- 所有文本文件开头都有ASF许可证
+- 存在 `LICENSE` 和 `NOTICE` 文件
+- `NOTICE` 文件中的年份正确
+- 所有文本文件开头都有 ASF 许可证
 - 检查第三方依赖许可证：
   - 第三方依赖的许可证兼容
-  - 所有第三方依赖的许可证都在`LICENSE`文件中声名
-  - 依赖许可证的完整版全部在`license`目录
-  - 如果依赖的是Apache许可证并且存在`NOTICE`文件，那么这些`NOTICE`文件也需要加入到版本的`NOTICE`文件中
+  - 所有第三方依赖的许可证都在 `LICENSE` 文件中声名
+  - 依赖许可证的完整版全部在 `license` 目录
+  - 如果依赖的是Apache许可证并且存在 `NOTICE` 文件，那么这些 `NOTICE` 文件也需要加入到版本的 `NOTICE` 文件中
 
 ## 发起投票
 
 **投票阶段**
 
-1. ShardingSphere社区投票，发起投票邮件到`dev@shardingsphere.apache.org`。PMC需要先按照文档检查版本的正确性，然后再进行投票。
-经过至少72小时并统计到3个`+1 PMC member`票后，即可进入下一阶段的投票。
+1. ShardingSphere 社区投票，发起投票邮件到 `dev@shardingsphere.apache.org`。PMC 需要先按照文档检查版本的正确性，然后再进行投票。
+经过至少 72 小时并统计到3个`+1 PMC member` 票后，即可进入下一阶段的投票。
 
-2. 宣布投票结果,发起投票结果邮件到`dev@shardingsphere.apache.org`。
+2. 宣布投票结果,发起投票结果邮件到 `dev@shardingsphere.apache.org`。
 
 **投票模板**
 
-1. ShardingSphere社区投票模板
+1. ShardingSphere 社区投票模板
 
 标题：
 
@@ -336,7 +336,7 @@ I will process to publish the release and send ANNOUNCE.
 
 ## 完成发布
 
-**1. 将源码、二进制包以及KEYS从svn的dev目录移动到release目录**
+**1. 将源码、二进制包以及 KEYS 从 svn 的 dev 目录移动到 release 目录**
 
 ```shell
 svn mv https://dist.apache.org/repos/dist/dev/shardingsphere/elasticjob-ui-${RELEASE.VERSION} https://dist.apache.org/repos/dist/release/shardingsphere/ -m "transfer packages for elasticjob-ui-${RELEASE.VERSION}"
@@ -344,7 +344,7 @@ svn delete https://dist.apache.org/repos/dist/release/shardingsphere/KEYS -m "de
 svn cp https://dist.apache.org/repos/dist/dev/shardingsphere/KEYS https://dist.apache.org/repos/dist/release/shardingsphere/ -m "transfer KEYS for elasticjob-ui-${RELEASE.VERSION}"
 ```
 
-**2. 合并Github的release分支到`master`, 合并完成后删除release分支**
+**2. 合并 Github 的 release 分支到 `master`, 合并完成后删除 release 分支**
 
 ```shell
 git checkout master
@@ -371,14 +371,14 @@ mvn clean package -Prelease,docker
 
 3.3 给本地 Docker 镜像打标记
 
-通过`docker images`查看到IMAGE ID，例如为：e9ea51023687
+通过 `docker images` 查看到 IMAGE ID，例如为：e9ea51023687
 
 ```shell
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-ui:latest
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-cloud-ui:${RELEASE.VERSION}
 ```
 
-3.4 发布Docker镜像
+3.4 发布 Docker 镜像
 
 ```shell
 docker push apache/shardingsphere-elasticjob-cloud-ui:latest
@@ -411,7 +411,7 @@ docker tag e9ea51023687 apache/shardingsphere-elasticjob-lite-ui:latest
 docker tag e9ea51023687 apache/shardingsphere-elasticjob-lite-ui:${RELEASE.VERSION}
 ```
 
-4.4 发布Docker镜像
+4.4 发布 Docker 镜像
 
 ```shell
 docker login
@@ -427,7 +427,7 @@ docker push apache/shardingsphere-elasticjob-lite-ui:${RELEASE_VERSION}
 
 在 [GitHub Releases](https://github.com/apache/shardingsphere-elasticjob-ui/releases) 页面的 `shardingsphere-elasticjob-ui-${RELEASE_VERSION}` 版本上点击 `Edit`
 
-编辑版本号及版本说明，并点击`Publish release`
+编辑版本号及版本说明，并点击 `Publish release`
 
 **6. 更新下载页面**
 
@@ -443,7 +443,7 @@ GPG签名文件和哈希校验文件的下载连接应该使用这个前缀： `
 
 **7. 邮件通知版本发布完成**
 
-发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
+发送邮件到 `dev@shardingsphere.apache.org` 和 `announce@apache.org` 通知完成版本发布
 
 通知邮件模板：
 
