commit 63fcc43af01f5eb10094d9af4edfad449d975927
Author: Liang Zhang <terrymanu@163.com>
Date:   Fri Oct 29 10:54:47 2021 +0800

    Complete document of sharding/concept (#13344)
    
    * Update inline-expression
    
    * Update key-generator
    
    * Update sharding
    
    * Update hint

diff --git a/docs/document/content/features/sharding/concept/hint.cn.md b/docs/document/content/features/sharding/concept/hint.cn.md
index faf2b5b84d..b5e3784a23 100644
--- a/docs/document/content/features/sharding/concept/hint.cn.md
+++ b/docs/document/content/features/sharding/concept/hint.cn.md
@@ -5,13 +5,16 @@ weight = 6
 
 ## 实现动机
 
-通过解析 SQL 语句提取分片键列与值并进行分片是 Apache ShardingSphere 对 SQL 零侵入的实现方式。若 SQL 语句中没有分片条件，则无法进行分片，需要全路由。
+通过解析 SQL 语句提取分片键列与值并进行分片是 Apache ShardingSphere 对 SQL 零侵入的实现方式。
+若 SQL 语句中没有分片条件，则无法进行分片，需要全路由。
 
-在一些应用场景中，分片条件并不存在于 SQL，而存在于外部业务逻辑。因此需要提供一种通过外部指定分片结果的方式，在 Apache ShardingSphere 中叫做 Hint。
+在一些应用场景中，分片条件并不存在于 SQL，而存在于外部业务逻辑。
+因此需要提供一种通过外部指定分片结果的方式，在 Apache ShardingSphere 中叫做 Hint。
 
 ## 实现机制
 
-Apache ShardingSphere 使用 `ThreadLocal` 管理分片键值。可以通过编程的方式向 `HintManager` 中添加分片条件，该分片条件仅在当前线程内生效。
+Apache ShardingSphere 使用 `ThreadLocal` 管理分片键值。
+可以通过编程的方式向 `HintManager` 中添加分片条件，该分片条件仅在当前线程内生效。
 
 除了通过编程的方式使用强制分片路由，Apache ShardingSphere 还计划通过 SQL 中的特殊注释的方式引用 Hint，使开发者可以采用更加透明的方式使用该功能。
 
diff --git a/docs/document/content/features/sharding/concept/hint.en.md b/docs/document/content/features/sharding/concept/hint.en.md
index 5979357612..2a3e0f30bd 100644
--- a/docs/document/content/features/sharding/concept/hint.en.md
+++ b/docs/document/content/features/sharding/concept/hint.en.md
@@ -6,14 +6,15 @@ weight = 6
 ## Motivation
 
 Apache ShardingSphere can be compatible with SQL in way of parsing SQL statements and extracting columns and values to shard. 
-If SQL does not have sharding conditions, it is impossible to shard without full route.
+If SQL does not have sharding conditions, it is impossible to shard without full data node route.
 
 In some applications, sharding conditions are not in SQL but in external business logic. 
-So it requires to  designate sharding result externally, which is referred to as `Hint` in ShardingSphere.
+So it requires to designate sharding result externally, which is referred to as `Hint` in ShardingSphere.
 
 ## Mechanism
 
-Apache ShardingSphere uses `ThreadLocal` to manage sharding key values. Users can program to add sharding conditions to `HintManager`, but the condition is only effective within the current thread.
+Apache ShardingSphere uses `ThreadLocal` to manage sharding key values. 
+Users can program to add sharding conditions to `HintManager`, but the condition is only effective within the current thread.
 
 In addition to the programming method, Apache ShardingSphere also plans to cite Hint through special notation in SQL, so that users can use that function in a more transparent way.
 
diff --git a/docs/document/content/features/sharding/concept/inline-expression.cn.md b/docs/document/content/features/sharding/concept/inline-expression.cn.md
index 12dd403081..12d35f21e7 100644
--- a/docs/document/content/features/sharding/concept/inline-expression.cn.md
+++ b/docs/document/content/features/sharding/concept/inline-expression.cn.md
@@ -40,7 +40,7 @@ online_table1, online_table2, online_table3, offline_table1, offline_table2, off
 
 ## 配置
 
-###数据节点
+### 数据节点
 
 对于均匀分布的数据节点，如果数据结构如下：
 
diff --git a/docs/document/content/features/sharding/concept/key-generator.cn.md b/docs/document/content/features/sharding/concept/key-generator.cn.md
index db846952cf..491c52c682 100644
--- a/docs/document/content/features/sharding/concept/key-generator.cn.md
+++ b/docs/document/content/features/sharding/concept/key-generator.cn.md
@@ -27,7 +27,8 @@ Apache ShardingSphere 不仅提供了内置的分布式主键生成器，例如
 #### 实现原理
 
 在同一个进程中，它首先是通过时间位保证不重复，如果时间相同则是通过序列位保证。
-同时由于时间位是单调递增的，且各个服务器如果大体做了时间同步，那么生成的主键在分布式环境可以认为是总体有序的，这就保证了对索引字段的插入的高效性。例如 MySQL 的 Innodb 存储引擎的主键。
+同时由于时间位是单调递增的，且各个服务器如果大体做了时间同步，那么生成的主键在分布式环境可以认为是总体有序的，这就保证了对索引字段的插入的高效性。
+例如 MySQL 的 Innodb 存储引擎的主键。
 
 使用雪花算法生成的主键，二进制表示形式包含 4 部分，从高位到低位分表为：1bit 符号位、41bit 时间戳位、10bit 工作进程位以及 12bit 序列号位。
 
@@ -37,17 +38,20 @@ Apache ShardingSphere 不仅提供了内置的分布式主键生成器，例如
 
  - 时间戳位（41bit）
 
-41 位的时间戳可以容纳的毫秒数是 2 的 41 次幂，一年所使用的毫秒数是：`365 * 24 * 60 * 60 * 1000`。通过计算可知：
+41 位的时间戳可以容纳的毫秒数是 2 的 41 次幂，一年所使用的毫秒数是：`365 * 24 * 60 * 60 * 1000`。
+通过计算可知：
 
 ```java
 Math.pow(2, 41) / (365 * 24 * 60 * 60 * 1000L);
 ```
 
-结果约等于 69.73 年。Apache ShardingSphere 的雪花算法的时间纪元从 `2016年11月1日` 零点开始，可以使用到 2086 年，相信能满足绝大部分系统的要求。
+结果约等于 69.73 年。
+Apache ShardingSphere 的雪花算法的时间纪元从 `2016年11月1日` 零点开始，可以使用到 2086 年，相信能满足绝大部分系统的要求。
 
  - 工作进程位（10bit）
 
-该标志在 Java 进程内是唯一的，如果是分布式应用部署应保证每个工作进程的 id 是不同的。该值默认为 0，可通过属性设置。
+该标志在 Java 进程内是唯一的，如果是分布式应用部署应保证每个工作进程的 id 是不同的。
+该值默认为 0，可通过属性设置。
 
  - 序列号位（12bit）
 
diff --git a/docs/document/content/features/sharding/concept/sharding.cn.md b/docs/document/content/features/sharding/concept/sharding.cn.md
index f102a0c01d..7b95966505 100644
--- a/docs/document/content/features/sharding/concept/sharding.cn.md
+++ b/docs/document/content/features/sharding/concept/sharding.cn.md
@@ -42,7 +42,7 @@ SQL 中如果无分片字段，将执行全路由，性能较差。
 包含分片键和分片算法，由于分片算法的独立性，将其独立抽离。
 真正可用于分片操作的是分片键 + 分片算法，也就是分片策略。
 
-## SQL Hint
+## 强制分片路由
 
 对于分片字段并非由 SQL 而是其他外置条件决定的场景，可使用 SQL Hint 注入分片值。
 例：按照员工登录主键分库，而数据库中并无此字段。
