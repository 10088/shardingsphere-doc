commit d77624fc74e49181ce67aba26761622124298197
Author: 吴伟杰 <wuweijie@apache.org>
Date:   Sat Jan 29 09:59:17 2022 +0800

    Correct metadata and weight in blogs (#15166)

diff --git a/docs/blog/content/material/Jan_28_Blog_Apache_ShardingSphere_Enterprise_Applications.en.md b/docs/blog/content/material/Jan_28_Blog_Apache_ShardingSphere_Enterprise_Applications.en.md
index 01003d5ab5..10f8470541 100644
--- a/docs/blog/content/material/Jan_28_Blog_Apache_ShardingSphere_Enterprise_Applications.en.md
+++ b/docs/blog/content/material/Jan_28_Blog_Apache_ShardingSphere_Enterprise_Applications.en.md
@@ -1,3 +1,9 @@
++++
+title = "Apache ShardingSphere Enterprise Applications"
+weight = 33
+chapter = true
++++
+
 # Apache ShardingSphere Enterprise Applications
 
 > To further understand application scenarios, enterprises’ needs, and improve dev teams’ understanding of Apache ShardingSphere, our community launched the “Enterprise Visits” series.
diff --git a/docs/blog/content/material/Jan_28_Blog_PG_Create_a_Distributed_Database_Solution_Based_on_PostgreSQL_&_openGauss.en.md b/docs/blog/content/material/Jan_28_Blog_PG_Create_a_Distributed_Database_Solution_Based_on_PostgreSQL_&_openGauss.en.md
index 924f7fafe9..b85b400006 100644
--- a/docs/blog/content/material/Jan_28_Blog_PG_Create_a_Distributed_Database_Solution_Based_on_PostgreSQL_&_openGauss.en.md
+++ b/docs/blog/content/material/Jan_28_Blog_PG_Create_a_Distributed_Database_Solution_Based_on_PostgreSQL_&_openGauss.en.md
@@ -1,18 +1,24 @@
++++
+title = "Create a Distributed Database Solution Based on PostgreSQL/openGauss"
+weight = 28
+chapter = true
++++
+
 # Create a Distributed Database Solution Based on PostgreSQL/openGauss
-
-As the MySQL ShardingSphere-Proxy is becoming mature and widely accepted, ShardingSphere is also focusing on the PostgreSQL ShardingSphere-Proxy.
-
-Compared with the alpha and beta, lots of improvements such as PostgreSQL agreement realization, SQL support and control, have been made in ShardingSphere-Proxy 5.0.0. This lays the foundation for full docking with the PostgreSQL ecosystem in the future. The ecosystem integration of ShardingSphere-Proxy and PostgreSQL provides users, on the basis of PostgreSQL database, with transparent and enhanced capabilities, such as: data sharding, read/write splitting, shadow database, data masking and data desensitization as well as distributed governance.
-
-Besides PostgreSQL, the open source database openGauss, which is developed by Huawei, is also gaining increasing popularity. With the capability and ecosystem of Shardingsphere openGauss, which enjoys outstanding standalone performance, it’ll be possible to create distributed database solutions that meet the needs of increasingly diversified scenarios.
-
-Currently, ShardingSphere PostgreSQL and openGauss Proxy supports most capabilities of the Apache ShardingSphere ecosystem, including data sharding, read/write splitting, shadow database, data masking/desensitization and distributed governance. Therefore, it’s almost as mature as the ShardingSphere MySQL Proxy.
-
+
+As the MySQL ShardingSphere-Proxy is becoming mature and widely accepted, ShardingSphere is also focusing on the PostgreSQL ShardingSphere-Proxy.
+
+Compared with the alpha and beta, lots of improvements such as PostgreSQL agreement realization, SQL support and control, have been made in ShardingSphere-Proxy 5.0.0. This lays the foundation for full docking with the PostgreSQL ecosystem in the future. The ecosystem integration of ShardingSphere-Proxy and PostgreSQL provides users, on the basis of PostgreSQL database, with transparent and enhanced capabilities, such as: data sharding, read/write splitting, shadow database, data masking and data desensitization as well as distributed governance.
+
+Besides PostgreSQL, the open source database openGauss, which is developed by Huawei, is also gaining increasing popularity. With the capability and ecosystem of Shardingsphere openGauss, which enjoys outstanding standalone performance, it’ll be possible to create distributed database solutions that meet the needs of increasingly diversified scenarios.
+
+Currently, ShardingSphere PostgreSQL and openGauss Proxy supports most capabilities of the Apache ShardingSphere ecosystem, including data sharding, read/write splitting, shadow database, data masking/desensitization and distributed governance. Therefore, it’s almost as mature as the ShardingSphere MySQL Proxy.
+
 This article will introduce improvements to the ShardingSphere-Proxy 5.0.0 built on PostgreSQL and its ecosystem integration with openGauss.
 
-## Introduction to ShardingSphere-Proxy
+## Introduction to ShardingSphere-Proxy
 
-ShardingSphere-Proxy is an adapter in the ShardingSphere ecosystem and is positioned as a transparent database proxy to users. ShardingSphere Proxy is not limited to Java. Instead, it realizes MySQL and PostgreSQL database protocols, and users can use various clients compatible with MySQL / PostgreSQL protocols to access and manipulate data.
+ShardingSphere-Proxy is an adapter in the ShardingSphere ecosystem and is positioned as a transparent database proxy to users. ShardingSphere Proxy is not limited to Java. Instead, it realizes MySQL and PostgreSQL database protocols, and users can use various clients compatible with MySQL / PostgreSQL protocols to access and manipulate data.
 
 ![](../../static/img/PostgreSQL_openGauss_img_1.png)
 
@@ -35,7 +41,7 @@ Protocol-wise, ShardingSphere PostgreSQL Proxy realizes most Extended Query prot
 However, since ShardingSphere-Proxy has an extra layer of network interaction compared to ShardingSphere-JDBC, the delay of SQL execution increases, and the loss is slightly higher than that of ShardingSphere-JDBC.
 
 ## ShardingSphere-Proxy and PostgreSQL Ecosystem Integration
-
+
 
 ![Be compatible with PostgreSQL Simple Query and Extended Query](../../static/img/PostgreSQL_openGauss_img_2.png)
 
@@ -99,8 +105,8 @@ ps.setInt(3, 54);
 ps.addBatch();
 ps.executeBatch();`
 
-At the PostgreSQL protocol layer, `Bind` can transfer one set of parameters to form Portal, and `Execute` can conduct one Portal each time.
-
+At the PostgreSQL protocol layer, `Bind` can transfer one set of parameters to form Portal, and `Execute` can conduct one Portal each time.
+
 Batch insertion could be realized through the repetition of `Bind` and `Execute`. The protocol interaction diagram is as follows:
 
 ![PostgreSQL Batch Insertion](../../static/img/PostgreSQL_openGauss_img_5.png)
@@ -123,16 +129,16 @@ In the picture below, when configuring logic database `sharding_db` and logic ta
 
 Currently, when executing `show schemas` and `show tables` languages in ShardingSphere MySQL Proxy, the query results are listed as logic database `sharding_db` and logic table `person`.
 
-When using `psql` to connect `PostgreSQL`, users could query databases and tables through `\l`, `\d` and other requests. 
-
+When using `psql` to connect `PostgreSQL`, users could query databases and tables through `\l`, `\d` and other requests. 
+
 However, different from MySQL, `show tables` is a language supported by MySQL, while `\d` used in `psql` actually corresponds to a more complicated SQL. Currently, when using ShardingSphere PostgreSQL Proxy, logic databases or logic tables cannot be queried.
 
 ###Describe Prepared Statement Supporting Extended Query
 
 There are two types of Describe message in PostgreSQL protocol, which are Describe Portal and Describe Prepared Statement. Currently, the ShardingSphere Proxy only supports Describe Portal.
 
-An example of the practical application of Describe Prepared Statement:
-
+An example of the practical application of Describe Prepared Statement:
+
 Get the MetaData of the result set before executing PreparedStatement.
 
 `PreparedStatement preparedStatement = connection.prepareStatement("select * from t_order limit ?");
@@ -142,29 +148,29 @@ The ecosystem integration of ShardingSphere and PostgreSQL and openGauss is stil
 
 
 **Reference**
-
-* https://www.postgresql.org/docs/current/protocol.html
-
-* https://gitee.com/opengauss/openGauss-connector-jdbc/blob/master/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java#L1722
-
-* https://gitee.com/opengauss/openGauss-connector-jdbc/blob/master/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java#L1722
-
-**Open Source Project Links:**
-
-ShardingSphere Github: https://github.com/apache/shardingsphere
-
-ShardingSphere Twitter: https://twitter.com/ShardingSphere
-
-ShardingSphere Slack Channel:https://join.slack.com/t/apacheshardingsphere/shared_invite/zt-sbdde7ie-SjDqo9~I4rYcR18bq0SYTg
-
-GitHub Issues: https://github.com/apache/shardingsphere/issues
-
-Contributor Guide:https://shardingsphere.apache.org/community/cn/contribute/
-
+
+* https://www.postgresql.org/docs/current/protocol.html
+
+* https://gitee.com/opengauss/openGauss-connector-jdbc/blob/master/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java#L1722
+
+* https://gitee.com/opengauss/openGauss-connector-jdbc/blob/master/pgjdbc/src/main/java/org/postgresql/core/v3/QueryExecutorImpl.java#L1722
+
+**Open Source Project Links:**
+
+ShardingSphere Github: https://github.com/apache/shardingsphere
+
+ShardingSphere Twitter: https://twitter.com/ShardingSphere
+
+ShardingSphere Slack Channel:https://join.slack.com/t/apacheshardingsphere/shared_invite/zt-sbdde7ie-SjDqo9~I4rYcR18bq0SYTg
+
+GitHub Issues: https://github.com/apache/shardingsphere/issues
+
+Contributor Guide:https://shardingsphere.apache.org/community/cn/contribute/
+
 GitHub: https://github.com/apache/shardingsphere
-
-###Author
-
->Apache ShardingSphere Committer & Middleware Engineer at SphereEx. Contributed to the development of Apache ShardingSphere and Apache ShardingSphere ElasticJob.
-
-![](../../static/img/Wu_Weijie_Photo.png)
+
+###Author
+
+>Apache ShardingSphere Committer & Middleware Engineer at SphereEx. Contributed to the development of Apache ShardingSphere and Apache ShardingSphere ElasticJob.
+
+![](../../static/img/Wu_Weijie_Photo.png)
diff --git a/docs/blog/content/material/Jan_28_Blog_X_How_to Develop_Your_Distributed_SQL_Statement_in_Apache_ShardingSphere.en.md b/docs/blog/content/material/Jan_28_Blog_X_How_to Develop_Your_Distributed_SQL_Statement_in_Apache_ShardingSphere.en.md
index fcc75871da..aab5c40149 100644
--- a/docs/blog/content/material/Jan_28_Blog_X_How_to Develop_Your_Distributed_SQL_Statement_in_Apache_ShardingSphere.en.md	
+++ b/docs/blog/content/material/Jan_28_Blog_X_How_to Develop_Your_Distributed_SQL_Statement_in_Apache_ShardingSphere.en.md	
@@ -1,10 +1,9 @@
-+++
-
-title = "How to Develop Your Distributed SQL Statement in 
-Apache ShardingSphere"
-weight = 
-chapter = true
-
++++
+
+title = "How to Develop Your Distributed SQL Statement in Apache ShardingSphere"
+weight = 30
+chapter = true
+
 +++
 
 # How to Develop Your Distributed SQL Statement in Apache ShardingSphere
diff --git a/docs/blog/content/material/Jan_28_Blog_X_Kernel_Optimizations_&_Upgrade_Guide_for_Apache_ShardingSphere_5.0.0_The_Ideal_Database_Management_Ecosystem.en.md b/docs/blog/content/material/Jan_28_Blog_X_Kernel_Optimizations_&_Upgrade_Guide_for_Apache_ShardingSphere_5.0.0_The_Ideal_Database_Management_Ecosystem.en.md
index a2e98cb9d5..5e26825091 100644
--- a/docs/blog/content/material/Jan_28_Blog_X_Kernel_Optimizations_&_Upgrade_Guide_for_Apache_ShardingSphere_5.0.0_The_Ideal_Database_Management_Ecosystem.en.md
+++ b/docs/blog/content/material/Jan_28_Blog_X_Kernel_Optimizations_&_Upgrade_Guide_for_Apache_ShardingSphere_5.0.0_The_Ideal_Database_Management_Ecosystem.en.md
@@ -1,7 +1,7 @@
 +++
 
 title = "Kernel Optimizations & Upgrade Guide for Apache ShardingSphere 5.0.0 — The Ideal Database Management Ecosystem"
-weight = 
+weight = 29
 chapter = true
 
 +++
diff --git "a/docs/blog/content/material/Jan_28_F6_Automobile_Technology\342\200\231s_Multimillion_Rows_of_Data_Sharding_Strategy_Based_on_Apache_ShardingS.md" "b/docs/blog/content/material/Jan_28_F6_Automobile_Technology\342\200\231s_Multimillion_Rows_of_Data_Sharding_Strategy_Based_on_Apache_ShardingS.md"
index e9f0685f76..f6f93ac48c 100644
--- "a/docs/blog/content/material/Jan_28_F6_Automobile_Technology\342\200\231s_Multimillion_Rows_of_Data_Sharding_Strategy_Based_on_Apache_ShardingS.md"
+++ "b/docs/blog/content/material/Jan_28_F6_Automobile_Technology\342\200\231s_Multimillion_Rows_of_Data_Sharding_Strategy_Based_on_Apache_ShardingS.md"
@@ -1,3 +1,9 @@
++++
+title = "F6 Automobile Technology’s Multimillion Rows of Data Sharding Strategy Based on Apache ShardingSphere"
+weight = 31
+chapter = true
++++
+
 # F6 Automobile Technology’s Multimillion Rows of Data Sharding Strategy Based on Apache ShardingSphere
 
 [F6 Automobile Technology](https://www.f6car.com/) is an Internet platform company focusing on the informatization of the automotive aftermarket. 
diff --git a/docs/blog/content/material/Jan_28_Full_Link_Online_Stress_Testing_for_Production_Database_Apache_ShardingSphere_Shadow_Database_Feature_Upgrade.en.md b/docs/blog/content/material/Jan_28_Full_Link_Online_Stress_Testing_for_Production_Database_Apache_ShardingSphere_Shadow_Database_Feature_Upgrade.en.md
index f6c5c1ee08..96adafe8fb 100644
--- a/docs/blog/content/material/Jan_28_Full_Link_Online_Stress_Testing_for_Production_Database_Apache_ShardingSphere_Shadow_Database_Feature_Upgrade.en.md
+++ b/docs/blog/content/material/Jan_28_Full_Link_Online_Stress_Testing_for_Production_Database_Apache_ShardingSphere_Shadow_Database_Feature_Upgrade.en.md
@@ -1,3 +1,9 @@
++++
+title = "Full Link Online Stress Testing for Production Database: Apache ShardingSphere Shadow Database Feature Upgrade"
+weight = 34
+chapter = true
++++
+
 # Full Link Online Stress Testing for Production Database: Apache ShardingSphere Shadow Database Feature Upgrade
 
 ## What is full link stress testing?
diff --git "a/docs/blog/content/material/Jan_28_YOUR_DETAILED_GUIDE_TO_APACHE_SHARDINGSPHERE\342\200\231S_OPERATING_MODES.en.md" "b/docs/blog/content/material/Jan_28_YOUR_DETAILED_GUIDE_TO_APACHE_SHARDINGSPHERE\342\200\231S_OPERATING_MODES.en.md"
index a2d29efddb..ac7f87f139 100644
--- "a/docs/blog/content/material/Jan_28_YOUR_DETAILED_GUIDE_TO_APACHE_SHARDINGSPHERE\342\200\231S_OPERATING_MODES.en.md"
+++ "b/docs/blog/content/material/Jan_28_YOUR_DETAILED_GUIDE_TO_APACHE_SHARDINGSPHERE\342\200\231S_OPERATING_MODES.en.md"
@@ -1,3 +1,9 @@
++++
+title = "Your Detailed Guide to Apache ShardingSphere’s Operating Modes"
+weight = 32
+chapter = true
++++
+
 # Your Detailed Guide to Apache ShardingSphere’s Operating Modes
 
 In [Apache ShardingSphere](https://shardingsphere.apache.org/) 5.0.0 GA version, we added the new concept Operating Mode and provided three configuration methods: Memory, Standalone, and Cluster. Why does ShardingSphere provide these operating modes? What are the differences between them in actual development scenarios?
