commit d89055e7ae699f34debee29326db9576ea04765a
Author: Raigor <raigor.jiang@gmail.com>
Date:   Tue Aug 17 17:52:37 2021 +0800

    For #11677, update documents of RAL (#11845)
    
    * For #11677, update documents of RAL
    
    * Optimize content.
    
    * actual SQL -> actual SQLs
    
    * Administrate -> Administration
    
    * fix error.

diff --git a/docs/blog/content/material/Jul_26_An_introduction_to_DistSQL.cn.md b/docs/blog/content/material/Jul_26_An_introduction_to_DistSQL.cn.md
index e47ac21a58..e5aeb2ef3a 100644
--- a/docs/blog/content/material/Jul_26_An_introduction_to_DistSQL.cn.md
+++ b/docs/blog/content/material/Jul_26_An_introduction_to_DistSQL.cn.md
@@ -41,7 +41,7 @@ DistSQL 在设计之初，就以面向标准为目标，充分考虑数据库开
 
 - RQL（Resource & Rule Query Language）：资源规则查询语言，用于资源和规则的查询和展现；
 
-- RAL（Resource & Rule Administrate Language）：资源规则管理语言，用于 Hint、事务类型切换、分片执行计划查询等增量功能操作。
+- RAL（Resource & Rule Administration Language）：资源规则管理语言，用于 Hint、事务类型切换、分片执行计划查询等增量功能操作。
 
 DistSQL 的语法体系为 ShardingSphere 迈向分布式数据库搭起了桥梁，目前还在持续完善中，随着更多的想法被实现，DistSQL 势必会越来越强大。也欢迎对此感兴趣的开发者加入 ShardingSphere，为 DistSQL 提供想法，贡献代码。
 
diff --git a/docs/blog/content/material/Jul_26_An_introduction_to_DistSQL.en.md b/docs/blog/content/material/Jul_26_An_introduction_to_DistSQL.en.md
index ab89066502..d8991a66a0 100644
--- a/docs/blog/content/material/Jul_26_An_introduction_to_DistSQL.en.md
+++ b/docs/blog/content/material/Jul_26_An_introduction_to_DistSQL.en.md
@@ -30,7 +30,7 @@ RDL (Resource & Rule Definition Language): Resource rule definition language for
 
 RQL (Resource & Rule Query Language): resource rule query language for querying and presenting resources and rules.
 
-RAL (Resource & Rule Administrate Language): resource rule administration language for incremental functional operations such as Hint, transaction type switching, and query of sharding execution plan.
+RAL (Resource & Rule Administration Language): resource rule administration language for incremental functional operations such as Hint, transaction type switching, and query of sharding execution plan.
 
 DistSQL's syntax builds a bridge for ShardingSphere to move towards a distributed database, and while it is still being improved as more ideas are implemented, DistSQL is bound to get more powerful. Developers who are interested are welcome to join ShardingSphere and contribute ideas and code to DistSQL.
 
diff --git a/docs/blog/content/material/solution.cn.md b/docs/blog/content/material/solution.cn.md
index 72854f3aef..7bca30ebfd 100644
--- a/docs/blog/content/material/solution.cn.md
+++ b/docs/blog/content/material/solution.cn.md
@@ -206,7 +206,7 @@ Apache ShardingSphere（Incubating）的目标是像使用一个数据库一样
 
 
 
-1.通过SCTL（sharding-ctl，即ShardingSphere提供的数据库管理命令）切换当前事务类型。以SQL执行的方式输入即可，适用于Sharding-JDBC和Sharding-Proxy。例如：SCTL:SET TRANSACTION_TYPE=BASE
+1.通过 RAL（Resource & Rule Administration Language）切换当前事务类型。以 SQL 执行的方式输入即可，适用于 Sharding-Proxy。例如：SET VARIABLE TRANSACTION_TYPE=BASE
 
 2.通过Threadlocal切换当前事务类型，适用于Sharding-JDBC。例如：TransactionTypeHolder.set (TransactionType.XA)
 
diff --git a/docs/blog/content/material/solution.en.md b/docs/blog/content/material/solution.en.md
index ac7caae504..c4ee1888a8 100644
--- a/docs/blog/content/material/solution.en.md
+++ b/docs/blog/content/material/solution.en.md
@@ -202,7 +202,7 @@ Since the native transaction interface does not support transaction types, Shard
 
 
 
-1.Switch the current transaction type through SCTL (sharding-ctl, the database management command provided by ShardingSphere). Just enter it in SQL execution mode, and it is applicable to Sharding-JDBC and Sharding-Proxy. For example: `SCTL:SET TRANSACTION_TYPE=BASE`.
+1.Switch the current transaction type through RAL (Resource & Rule Administration Language). Just enter it in SQL execution mode, and it is applicable to Sharding-Proxy. For example: `SET VARIABLE TRANSACTION_TYPE=BASE`.
 
 2.Switch the current transaction type through `Threadlocal`, suitable for Sharding-JDBC. For example: `TransactionTypeHolder.set (TransactionType.XA)`.
 
diff --git a/docs/blog/content/material/ss_5.0.0beta.cn.md b/docs/blog/content/material/ss_5.0.0beta.cn.md
index c14bc0ceb6..0c79383af7 100644
--- a/docs/blog/content/material/ss_5.0.0beta.cn.md
+++ b/docs/blog/content/material/ss_5.0.0beta.cn.md
@@ -39,11 +39,11 @@ SQL 是一种用于存取数据以及查询、更新和管理关系数据库系
 	
 DistSQL（Distributed SQL）是 Apache ShardingSphere 提出的，特有的一种内置 SQL 语言，能够提供标准 SQL 之外的增量功能操作能力。DistSQL 让用户可以像操作数据库一样操作 ShardingSphere，使其从面向开发人员的框架和中间件转变为面向运维人员的基础设施产品。
 	
-在 ShardingSphere 中， DistSQL 目前主要划分为 RDL、RQL 和 SCTL 三种具体类型：
+在 ShardingSphere 中， DistSQL 目前主要划分为 RDL、RQL 和 RAL 三种具体类型：
 	
 * RDL（Resource & Rule Definition Language）：资源和规则的创建、修改和删除；
 * RQL（Resource & Rule Query Language）：资源和规则的查询和展现； 
-* SCTL（ShardingSphere Control Language）：Hint、事务类型切换、分片执行计划查询等增量功能操作。
+* RAL（Resource & Rule Administration Language）：Hint、事务类型切换、分片执行计划查询等增量功能操作。
 	
 ShardingSphere 推出 Database Plus 理念，为传统数据库赋能，构建具备分布式、高安全、可管控等的数据库增强生态，打造兼具数据库且贴合实际业务需求的开源分布式数据库体系。与该分布式数据库体系搭配使用的分布式 SQL（Distributed SQL）将传统通过配置文件驱动的分布式数据库代理端 ShardingSphere-Proxy，变成真正意义上通过 SQL 驱动的“分布式数据库”。
 	
diff --git a/docs/blog/content/material/ss_5.0.0beta.en.md b/docs/blog/content/material/ss_5.0.0beta.en.md
index 010eae3095..1f11dc4316 100644
--- a/docs/blog/content/material/ss_5.0.0beta.en.md
+++ b/docs/blog/content/material/ss_5.0.0beta.en.md
@@ -1,74 +1,74 @@
-+++
-title = "Following 6 months of development Apache ShardingSphere 5.0.0-beta has been officially released!"
-weight = 14
-chapter = true
-+++
-
++++
+title = "Following 6 months of development Apache ShardingSphere 5.0.0-beta has been officially released!"
+weight = 14
+chapter = true
++++
+
 As an Apache top-level project, ShardingSphere goes through community verification, voting and many other steps before it can be released. Such steps ensure the release is compliant with the Apache Release License specifications, and meeting the users’ expectations set for the 5.0.0-beta milestone. The current version’s architecture has been completed and the version is officially available.
-
-## Release Features:
 
-### 1.	Highlight Features
+## Release Features:
+
+### 1.	Highlight Features
 
-#### DistSQL – A New SQL Type for a Distributed Database Ecosystem
+#### DistSQL – A New SQL Type for a Distributed Database Ecosystem
 
 SQL is a database query programming language for accessing, querying, updating, and managing relational database systems. Most of the existing general database systems tend to rewrite and extend SQL to better fit their own database system with higher flexibility and functionality.
 
 DistSQL (Distributed SQL) is a special built-in language proposed by Apache ShardingSphere providing additional functional operation capability in comparison to the standard SQL. Users can use ShardingSphere just like other database systems with DistSQL, therefore no longer positioning ShardingSphere as a middleware architecture for programmers, but also making it transferrable to an infrastructure product for operation and maintenance.
 
-ShardingSphere currently includes three types of DistSQL including RDL, RQL and SCTL:
+ShardingSphere currently includes three types of DistSQL including RDL, RQL and RAL:
 
-* RDL (Resource & Rule Definition Language): create, modify and delete resources and rules.
-* RQL (Resource & Rule Query Language): query and show resources and rules.
-* SCTL (ShardingSphere Control Language): hint, distributed transaction switching, distributed query execution plan and other incremental functions.
+* RDL (Resource & Rule Definition Language): create, modify and delete resources and rules.
+* RQL (Resource & Rule Query Language): query and show resources and rules.
+* RAL (Resource & Rule Administration Language): hint, distributed transaction switching, distributed query execution plan and other incremental functions.
 
 ShardingSphere proposes the concept of Database Plus, empowering traditional databases to build a highly secure & enhanced distributed database ecosystem, by leveraging open-source database system software such as MySQL and PostgreSQL, while at the same time meeting practical business needs. The distributed SQL used with this distributed database system converts ShardingSphere-Proxy from a YAML configuration driven middleware to a SQL driven distributed database system.
 
 In the 5.0.0-beta, users can easily initiate ShardingSphere-Proxy and use DistSQL to dynamically create, modify, delete sharding tables, encrypt tables, and dynamically inject instances of database resources, create read-write-splitting strategies, show all the configurations and distributed transaction types, engage in dynamic migration of distributed database tables etc.
-DistSQL allows users to query and manage all database resources and ShardingSphere’s distributed metadata in a standardized and familiar way. 
-
-In the future DistSQL will further redefine the boundary between Middleware and database, allowing users to leverage ShardingSphere as if they were using a database natively.
+DistSQL allows users to query and manage all database resources and ShardingSphere’s distributed metadata in a standardized and familiar way. 
 
-#### Full Join PostgreSQL Open-Source Ecosystem
+In the future DistSQL will further redefine the boundary between Middleware and database, allowing users to leverage ShardingSphere as if they were using a database natively.
+
+#### Full Join PostgreSQL Open-Source Ecosystem
 
 PostgreSQL is widely considered to be the most powerful enterprise-level open-source database.
-ShardingSphere clients include ShardingSphere-JDBC and ShardingSphere-Proxy, with ShardingSphere-Proxy containing both MySQL and PostgreSQL. As PostgreSQL has greatly matured and become increasingly adopted, the ShardingSphere team has directed its attention to the PostgreSQL proxy. 
-
+ShardingSphere clients include ShardingSphere-JDBC and ShardingSphere-Proxy, with ShardingSphere-Proxy containing both MySQL and PostgreSQL. As PostgreSQL has greatly matured and become increasingly adopted, the ShardingSphere team has directed its attention to the PostgreSQL proxy. 
+
 This release has greatly improved PostgreSQL in its SQL parsing and compatibility layers, protocol access and permission control layers. 
 The improved version of ShardingSphere-Proxy PostgreSQL is this release’s main feature and will be continuously improved in the future as it marks the beginning of compatibility with the open-source PostgreSQL.
-
+
 In the future, ShardingSphere PostgreSQL-Proxy will not only provide sharding and security distributed solutions to users, but also fine-grained authentication, data access control etc. 
-
-#### ShardingSphere Pluggable Architecture
+
+#### ShardingSphere Pluggable Architecture
 
 Pluggable architecture pursues the independence and non-awareness of each module through a highly flexible, pluggable and extensible kernel. These functions are combined in a super positional manner.
 
 In ShardingSphere, many functional implementation classes are loaded by inserting SPIs (Service Provider Interface). SPI APIs for third party implementation or extension, can be used for architecture extension or component substitution.
 
-Currently data sharding, Readwrite-splitting, data encryption, Shadow databases, instance exploration and other functions including the protocol implementations of MySQL, PostgreSQL, SQLServer, Oracle and other SQL and protocol support can be installed into ShardingSphere as plug-ins. ShardingSphere now offers dozens of SPIs as extension points for the system, and the number is still growing. 
+Currently data sharding, Readwrite-splitting, data encryption, Shadow databases, instance exploration and other functions including the protocol implementations of MySQL, PostgreSQL, SQLServer, Oracle and other SQL and protocol support can be installed into ShardingSphere as plug-ins. ShardingSphere now offers dozens of SPIs as extension points for the system, and the number is still growing. 
 
-Pluggable architecture’s improvement effectively evolves ShardingSphere into a distributed database ecosystem. The pluggable and extensible concepts provide a customized combinational database solution that can be built upon with Lego-like blocks. For example, traditional relational databases can be scaled out and encrypted at the same time, while distributed database solutions can be built independently.
+Pluggable architecture’s improvement effectively evolves ShardingSphere into a distributed database ecosystem. The pluggable and extensible concepts provide a customized combinational database solution that can be built upon with Lego-like blocks. For example, traditional relational databases can be scaled out and encrypted at the same time, while distributed database solutions can be built independently.
 
-### 2.	New Features
+### 2.	New Features
 
-#### New Open Observability
+#### New Open Observability
 
 ShardingSphere provides automated probes to effectively separate observability from the main functionality. This brings significant convenience for user-customized tracing, metrics, and logging. 
-OpenTracing, Jaegar, Zipkin based tracing probes and Prometheus Metrics probes, as well as a default logging implementation also have built-in implementations.
+OpenTracing, Jaegar, Zipkin based tracing probes and Prometheus Metrics probes, as well as a default logging implementation also have built-in implementations.
 
-### 3.	Enhancements
+### 3.	Enhancements
 
-#### Enhanced Distributed Query Capability
+#### Enhanced Distributed Query Capability
 
 Join and sub queries for cross-database instances are some of the most cumbersome issues. Using traditional database middleware could limit business level functionality - therefore SQL’s application scope needs to be considered by R&D personnel.
 
 This release enhances distributed query functionality which supports join queries and sub-queries across different database instances. At the same time it greatly improves compatibility between supported SQL cases for MySQL/PostgreSQL/Oracle/SQLServer in distributed scenarios through SQL parsing, routing, and execution level enhancements and bug fixing. 
-
+
 The improvements in this release allow users to achieve a smooth transition from a traditional database cluster to a distributed database cluster with low risk, high efficiency and zero transformation by introducing ShardingSphere. 
-
-Currently, distributed query capability enhancement is still in the POC stage, with room for improvement in terms of performance. The community is warmly encouraged to participate in the co-development.
 
-#### Enhanced Distributed User and Privilege Control
+Currently, distributed query capability enhancement is still in the POC stage, with room for improvement in terms of performance. The community is warmly encouraged to participate in the co-development.
+
+#### Enhanced Distributed User and Privilege Control
 
 User security and permission control some of the most important functions in a database field. Although simple password setting and database-level access control at the library level were already provided in the 5.0.0-alpha, these features have now been further upgraded. This update changes the password setting from using configuration file to using standard SQL online to create and update distributed users and their access permissions. 
 
@@ -76,34 +76,34 @@ Whether you were using MySQL, PostgreSQL or OpenGauss in your business scenario,
 
 In future releases, access control at the column level, view level, and even the possibility for functions to limit access for each row of data will be provided. ShardingSphere also provides access to third-party business systems or user-specific security systems, allowing ShardingSphere-Proxy to connect with third-party security control systems and provide the most standard database access management mode.
 
-The permission module is currently in the development stage, and the finalized functions will be presented in the next version.
+The permission module is currently in the development stage, and the finalized functions will be presented in the next version.
 
-#### Simplified API Changes Capabilities
+#### Simplified API Changes Capabilities
 
 ShardingSphere's pluggable architecture provides users with rich scalable capabilities with common functions already built-in, to increase ease of use. 
 For example, database and table sharding strategy is preset with hash sharding, time range sharding, module sharding and other strategies. 
 Data encryption is preset with AES, RC4, MD5 encryption. To further simplify operation, powerful new distSQL capability allows users to dynamically create a sharded or encrypted table online with a single SQL.
 
-To satisfy more complex scenarios, ShardingSphere also provides the strategy interfaces for related algorithms allowing users to implement more complicated functionalities for their own business scenarios. The coexistence philosophy of built-in strategies for users’ general needs, and specific scenarios’ corresponding interfaces has always been the architectural design philosophy of ShardingSphere.
+To satisfy more complex scenarios, ShardingSphere also provides the strategy interfaces for related algorithms allowing users to implement more complicated functionalities for their own business scenarios. The coexistence philosophy of built-in strategies for users’ general needs, and specific scenarios’ corresponding interfaces has always been the architectural design philosophy of ShardingSphere.
 
-### 4. Other Features
+### 4. Other Features
 
-#### Performance Improvements: Optimized Metadata Loading Performance
+#### Performance Improvements: Optimized Metadata Loading Performance
 
 Startup time issues could be encountered when launching ShardingSphere’s previous versions, especially in the occurrence involving thousands of servers - since ShardingSphere helps users manage all database instances and metadata information. 
-
-With this release, significant performance tuning and several architectural tweaks are introduced to specifically address the community's metadata loading issues. Differently from the original JDBC driver loading mode, the parallel SQL query mode for different database dialects takes out all metadata information at a single time, thus greatly improving startup performance.
 
-#### Usability: New Performance Testing System
+With this release, significant performance tuning and several architectural tweaks are introduced to specifically address the community's metadata loading issues. Differently from the original JDBC driver loading mode, the parallel SQL query mode for different database dialects takes out all metadata information at a single time, thus greatly improving startup performance.
+
+#### Usability: New Performance Testing System
 
-In the process of constantly improving and developing new functions, ShardingSphere had previously lacked a complete and comprehensive integration & performance testing system, which can ensure that every commit be compiled normally without affecting other modules and can observe upward and downward performance trends. 
+In the process of constantly improving and developing new functions, ShardingSphere had previously lacked a complete and comprehensive integration & performance testing system, which can ensure that every commit be compiled normally without affecting other modules and can observe upward and downward performance trends. 
 
 With this release, integration tests have also been included to ensure data sharding, data encryption, Readwrite-splitting, distributed management and control, access control, SQL support and other functions. The system provides basic guarantees for monitoring and tuning performance across databases, different sharding or encryption strategies, and different versions.
 With this release, relevant performance test reports and dashboard will also be developed for the community, allowing users to observe ShardingSphere’s performance changes. The entire test system source code will be made available to the community to facilitate user test deployment.
 
 In addition to above mentioned features, for a comprehensive list of enhancements, performance optimizations, bug fixes etc. please refer to the list below: 
 
-### Other New Features:
+### Other New Features:
 
 1.	New DistSQL for loading and presenting ShardingSphere’s configuration.
 2.	Support for join queries and sub-queries across different databased instances.
@@ -111,7 +111,7 @@ In addition to above mentioned features, for a comprehensive list of enhancement
 4.	Support create and modify user permission online or dynamically.
 5.	New automated probes module.
 
-### API Changes:
+### API Changes:
 
 1.	API in read and write splitting module configuration changed to read-write-splitting.
 2.	API for ShardingProxy user permission configuration changed to Authority.
@@ -120,7 +120,7 @@ In addition to above mentioned features, for a comprehensive list of enhancement
 5.	Removed ShardingProxy acceptor-size configuration option.
 6.	Added built-in shard algorithm SPI so users can set up the shard algorithm through class name like in the version 4.x.
 
-### Enhancements:
+### Enhancements:
 
 1.	Startup metadata loading performance has been significantly improved.
 2.	Greatly enhanced the parsing abilities for Oracle/SQLServer/PostgreSQL database.
@@ -139,14 +139,14 @@ In addition to above mentioned features, for a comprehensive list of enhancement
 15.	Supporting MySQL/PostgreSQL ALTER TABLE RENAME.
 16.	Supporting PostgreSQL protocol Close command.
 
-### Changes:
+### Changes:
 
 1.	New registry storage structure.
 2. Removed support for NACOS and Apollo's Configuration Centre.
 3. ShardingScaling introduces ElasticJob to handle migration tasks.
 4. Refactoring the storage and online update of the kernel metadata information.
 
-### Bug fixes:
+### Bug fixes:
 
 1.	Fixed issue where SELECT * wildcard SQL could not be used for read/write separation.
 2.	The custom sharding algorithm did not match the configuration type and the class instance did not meet expectations issue is fixed.
@@ -166,31 +166,31 @@ In addition to above mentioned features, for a comprehensive list of enhancement
 16.	Fixed the issue with incorrect Tag for PostgreSQL Proxy transactions related to Command Complete.
 17.	Fixed the issue that might return packets that were not expected by the client.
 
-**Download Link:** <https://shardingsphere.apache.org/document/current/en/downloads/>
+**Download Link:** <https://shardingsphere.apache.org/document/current/en/downloads/>
+
+**Update Logs:** <https://github.com/apache/shardingsphere/blob/master/RELEASE-NOTES.md>
 
-**Update Logs:** <https://github.com/apache/shardingsphere/blob/master/RELEASE-NOTES.md>
+**Project Address:** <https://shardingsphere.apache.org/>
 
-**Project Address:** <https://shardingsphere.apache.org/>
-
 **Mailing List:** <https://shardingsphere.apache.org/community/en/contribute/subscribe/>
 
-#### Community Contribution:
+#### Community Contribution:
 
-The release of Apache ShardingSphere 5.0.0-beta could not have happened without the outstanding support and contribution of the community. 
+The release of Apache ShardingSphere 5.0.0-beta could not have happened without the outstanding support and contribution of the community. 
 
 Since the 5.0.0-alpha release until now, 41 contributors have contributed 1574 PR, enhanced the optimization, iteration, and the release of ShardingSphere 5.0.0. 
 
-#### About the author:
-
-![](https://shardingsphere.apache.org/blog/img/ss_5.0.0beta1.jpg)
+#### About the author:
 
-> **Pan Juan | Trista**
->
->SphereEx co-founder, Apache member, Apache ShardingSphere PMC, Apache brpc (Incubating) mentor, Release manager. 
+![](https://shardingsphere.apache.org/blog/img/ss_5.0.0beta1.jpg)
+
+> **Pan Juan | Trista**
+>
+>SphereEx co-founder, Apache member, Apache ShardingSphere PMC, Apache brpc (Incubating) mentor, Release manager. 
 >
 >Senior DBA at JD Technology, she was responsible for the design and development of JD Digital Science and Technology's intelligent database platform. She now focuses on distributed database & middleware ecosystem, and the open-source community. 
-Recipient of the "2020 China Open-Source Pioneer" award, she is frequently invited to speak and share her insights at relevant conferences in the fields of database & database architecture.
->
+Recipient of the "2020 China Open-Source Pioneer" award, she is frequently invited to speak and share her insights at relevant conferences in the fields of database & database architecture.
+>
 >**GitHub:** <https://tristazero.github.io>
 
 
diff --git a/docs/document/content/features/dist-sql/_index.cn.md b/docs/document/content/features/dist-sql/_index.cn.md
index 0a13a6681b..e4fd6bd98e 100644
--- a/docs/document/content/features/dist-sql/_index.cn.md
+++ b/docs/document/content/features/dist-sql/_index.cn.md
@@ -16,11 +16,11 @@ DistSQL（Distributed SQL）是 Apache ShardingSphere 特有的内置 SQL 语言
 
 DistSQL 让用户可以像操作数据库一样操作 Apache ShardingSphere，使其从面向开发人员的框架和中间件转变为面向运维人员的基础设施产品。
 
-DistSQL 划分为 RDL、RQL 和 SCTL 这三种具体类型。
+DistSQL 划分为 RDL、RQL 和 RAL 这三种具体类型。
 
  - RDL（Resource & Rule Definition Language）负责资源和规则的创建、修改和删除；
  - RQL（Resource & Rule Query Language）负责资源和规则的查询和展现；
- - SCTL（ShardingSphere Control Language）负责Hint、事务类型切换、分片执行计划查询等增量功能的操作。
+ - RAL（Resource & Rule Administration Language）负责Hint、事务类型切换、分片执行计划查询等增量功能的操作。
 
 ## 目标
 
diff --git a/docs/document/content/features/dist-sql/_index.en.md b/docs/document/content/features/dist-sql/_index.en.md
index f6c15bd058..c138a3e064 100644
--- a/docs/document/content/features/dist-sql/_index.en.md
+++ b/docs/document/content/features/dist-sql/_index.en.md
@@ -16,11 +16,11 @@ However, the format of YAML and habits changed by using registry center are not
 
 DistSQL enables users to operate Apache ShardingSphere like a database, transforming it from a framework and middleware for developers to an infrastructure product for operators.
 
-DistSQL is divided into RDL, RQL and SCTL.
+DistSQL is divided into RDL, RQL and RAL.
 
- - RDL（Resource & Rule Definition Language）responsible for the definition of resources and rules;
- - RQL（Resource & Rule Query Language）responsible for the query of resources and rules;
- - SCTL（ShardingSphere Control Language）responsible for the added-on feature of hint, transaction type switch, sharding execute planning and so on.
+ - RDL (Resource & Rule Definition Language) responsible for the definition of resources and rules;
+ - RQL (Resource & Rule Query Language) responsible for the query of resources and rules;
+ - RAL (Resource & Rule Administration Language) responsible for the added-on feature of hint, transaction type switch, sharding execute planning and so on.
 
 ## Goal
 
diff --git a/docs/document/content/features/dist-sql/syntax/ral/_index.cn.md b/docs/document/content/features/dist-sql/syntax/ral/_index.cn.md
new file mode 100644
index 0000000000..5c796a8502
--- /dev/null
+++ b/docs/document/content/features/dist-sql/syntax/ral/_index.cn.md
@@ -0,0 +1,8 @@
++++
+pre = "<b>3.8.1.3 </b>"
+title = "RAL 语法"
+weight = 3
+chapter = true
++++
+
+本章节将对 RAL 的语法进行详细说明，并以实际的列子介绍 RAL 的使用。
diff --git a/docs/document/content/features/dist-sql/syntax/ral/_index.en.md b/docs/document/content/features/dist-sql/syntax/ral/_index.en.md
new file mode 100644
index 0000000000..168c6d44c6
--- /dev/null
+++ b/docs/document/content/features/dist-sql/syntax/ral/_index.en.md
@@ -0,0 +1,8 @@
++++
+pre = "<b>3.8.1.3 </b>"
+title = "RAL Syntax"
+weight = 3
+chapter = true
++++
+
+This chapter describes the syntax of RAL in detail, and introduces the use method of RAL in combination with use practices.
diff --git a/docs/document/content/features/dist-sql/syntax/ral/ral.cn.md b/docs/document/content/features/dist-sql/syntax/ral/ral.cn.md
new file mode 100644
index 0000000000..6aa31a762d
--- /dev/null
+++ b/docs/document/content/features/dist-sql/syntax/ral/ral.cn.md
@@ -0,0 +1,28 @@
++++
+title = "RAL"
+weight = 1
++++
+
+## 定义
+
+RAL (Resource & Rule Administration Language) 为 Apache ShardingSphere 的管理语言，负责Hint、事务类型切换、分片执行计划查询等增量功能的操作。
+
+## 使用实战
+
+| 语句                                                | 说明                                                           | 示例                                           |
+|:---------------------------------------------------|:--------------------------------------------------------------|:-----------------------------------------------|
+|set variable transaction_type = xx                  | 修改当前连接的事务类型, 支持LOCAL，XA，BASE                         | set variable transaction_type = XA            |  
+|show variable transaction_type                      | 查询当前连接的事务类型                                             | show variable transaction_type                |  
+|show variable cached_connections                    | 查询当前连接中缓存的物理数据库连接个数                                | show variable cached_connections              |  
+|preview SQL                                         | 预览实际 SQL                                                    | preview select * from t_order                 |  
+|set readwrite_splitting hint source = [auto / write]| 针对当前连接，设置读写分离的路由策略（自动路由或强制到写库）              | set readwrite_splitting hint source = write   |  
+|set sharding hint database_value = yy               | 针对当前连接，设置 hint 仅对数据库分片有效，并添加分片值，yy：数据库分片值 | set sharding hint database_value = 100        |  
+|add sharding hint database_value xx= yy             | 针对当前连接，为表 xx 添加分片值 yy，xx：逻辑表名称，yy：数据库分片值     | add sharding hint database_value t_order= 100 |  
+|add sharding hint table_value xx = yy               | 针对当前连接，为表 xx 添加分片值 yy，xx：逻辑表名称，yy：表分片值        | add sharding hint table_value t_order = 100   |  
+|clear hint                                          | 针对当前连接，清除 hint 所有设置                                    | clear hint                                    |  
+|clear [sharding hint / readwrite_splitting hint]    | 针对当前连接，清除 sharding 或 readwrite_splitting 的 hint 设置     | clear readwrite_splitting hint                |  
+|show [sharding / readwrite_splitting] hint status   | 针对当前连接，查询 sharding 或 readwrite_splitting 的 hint 设置     | show readwrite_splitting hint status          |  
+
+## 注意事项
+
+ShardingSphere-Proxy 默认不支持 hint，如需支持，请在 `conf/server.yaml` 中，将 `properties` 的属性 `proxy-hint-enabled` 设置为 true。
diff --git a/docs/document/content/features/dist-sql/syntax/ral/ral.en.md b/docs/document/content/features/dist-sql/syntax/ral/ral.en.md
new file mode 100644
index 0000000000..7b3293dc11
--- /dev/null
+++ b/docs/document/content/features/dist-sql/syntax/ral/ral.en.md
@@ -0,0 +1,28 @@
++++
+title = "RAL"
+weight = 1
++++
+
+## Definition
+
+RAL (Resource & Rule Administration Language) responsible for the added-on feature of hint, transaction type switch, sharding execute planning and so on.
+
+## Usage
+
+| Statement                                          | Function                                                                                                   | Example                                       |
+|:---------------------------------------------------|:-----------------------------------------------------------------------------------------------------------|:----------------------------------------------|
+|set variable transaction_type = xx                  | Modify transaction_type of the current connection, supports LOCAL, XA, BASE                                | set variable transaction_type = XA            |
+|show variable transaction_type                      | Query the transaction type of the current connection                                                       | show variable transaction_type                |
+|show variable cached_connections                    | Query the number of cached physical database connections in the current connection                         | show variable cached_connections              |
+|preview SQL                                         | Preview the actual SQLs                                                                                    | preview select * from t_order                 |
+|set readwrite_splitting hint source = [auto / write]| For current connection, set readwrite splitting routing strategy (automatic or forced to write data source)| set readwrite_splitting hint source = write   |
+|set sharding hint database_value = yy               | For current connection, set sharding value for database sharding only, yy: sharding value                  | set sharding hint database_value = 100        |
+|add sharding hint database_value xx= yy             | For current connection, add sharding value for table, xx: logic table, yy: database sharding value         | add sharding hint database_value t_order= 100 |
+|add sharding hint table_value xx = yy               | For current connection, add sharding value for table, xx: logic table, yy: table sharding value            | add sharding hint table_value t_order = 100   |
+|clear hint                                          | For current connection, clear all hint settings                                                            | clear hint                                    |
+|clear [sharding hint / readwrite_splitting hint]    | For current connection, clear hint settings of sharding or readwrite splitting                             | clear readwrite_splitting hint                |
+|show [sharding / readwrite_splitting] hint status   | For current connection, query hint settings of sharding or readwrite splitting                             | show readwrite_splitting hint status          |
+
+## Notice
+
+ShardingSphere-Proxy does not support hint by default, to support it, set `proxy-hint-enabled` to true in `conf/server.yaml`.
diff --git a/docs/document/content/features/dist-sql/syntax/sctl/_index.cn.md b/docs/document/content/features/dist-sql/syntax/sctl/_index.cn.md
deleted file mode 100644
index 0015ebfb73..0000000000
--- a/docs/document/content/features/dist-sql/syntax/sctl/_index.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-pre = "<b>3.8.1.3 </b>"
-title = "SCTL 语法"
-weight = 3
-chapter = true
-+++
-
-本章节将对 SCTL 的语法进行详细说明，并结合使用实战介绍 SCTL 的使用方法。
diff --git a/docs/document/content/features/dist-sql/syntax/sctl/_index.en.md b/docs/document/content/features/dist-sql/syntax/sctl/_index.en.md
deleted file mode 100644
index 1f1a82042d..0000000000
--- a/docs/document/content/features/dist-sql/syntax/sctl/_index.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-pre = "<b>3.8.1.3 </b>"
-title = "SCTL Syntax"
-weight = 3
-chapter = true
-+++
-
-This chapter describes the syntax of SCTL in detail, and introduces the use method of SCTL in combination with use practices.
diff --git a/docs/document/content/features/dist-sql/syntax/sctl/sctl.cn.md b/docs/document/content/features/dist-sql/syntax/sctl/sctl.cn.md
deleted file mode 100644
index 2ef9102fb9..0000000000
--- a/docs/document/content/features/dist-sql/syntax/sctl/sctl.cn.md
+++ /dev/null
@@ -1,28 +0,0 @@
-+++
-title = "SCTL"
-weight = 1
-+++
-
-## 定义
-
-SCTL (ShardingSphere Control Language) 为 Apache ShardingSphere 的控制语言，负责Hint、事务类型切换、分片执行计划查询等增量功能的操作。
-
-## 使用实战
-
-| 语句                                     | 说明                                                                                            |
-|:----------------------------------------|:----------------------------------------------------------------------------------------------- |
-|sctl:set transaction_type=XX             | 修改当前连接的事务类型, 支持LOCAL，XA，BASE。例：sctl:set transaction_type=XA                          |
-|sctl:show transaction_type               | 查询当前连接的事务类型                                                                              |
-|sctl:show cached_connections             | 查询当前连接中缓存的物理数据库连接个数                                                                 |
-|sctl:explain SQL                         | 查看逻辑 SQL 的执行计划，例：sctl:explain select * from t_order;                                    |
-|sctl:hint set PRIMARY_ONLY=true          | 针对当前连接，是否将数据库操作强制路由到主库                                                            |
-|sctl:hint set DatabaseShardingValue=yy   | 针对当前连接，设置 hint 仅对数据库分片有效，并添加分片值，yy：数据库分片值                                  |
-|sctl:hint addDatabaseShardingValue xx=yy | 针对当前连接，为表 xx 添加分片值 yy，xx：逻辑表名称，yy：数据库分片值                                      |
-|sctl:hint addTableShardingValue xx=yy    | 针对当前连接，为表 xx 添加分片值 yy，xx：逻辑表名称，yy：表分片值                                         |
-|sctl:hint clear                          | 针对当前连接，清除 hint 所有设置                                                                     |
-|sctl:hint show status                    | 针对当前连接，查询 hint 状态，primary_only:true/false，sharding_type:databases_only/databases_tables |
-|sctl:hint show table status              | 针对当前连接，查询逻辑表的 hint 分片值                                                                |
-
-## 注意事项
-
-ShardingSphere-Proxy 默认不支持 hint，如需支持，请在 `conf/server.yaml` 中，将 `properties` 的属性 `proxy-hint-enabled` 设置为 true。
diff --git a/docs/document/content/features/dist-sql/syntax/sctl/sctl.en.md b/docs/document/content/features/dist-sql/syntax/sctl/sctl.en.md
deleted file mode 100644
index 5eca6671b5..0000000000
--- a/docs/document/content/features/dist-sql/syntax/sctl/sctl.en.md
+++ /dev/null
@@ -1,28 +0,0 @@
-+++
-title = "SCTL"
-weight = 1
-+++
-
-## Definition
-
-SCTL（ShardingSphere Control Language）responsible for the added-on feature of hint, transaction type switch, sharding execute planning and so on.
-
-## Usage
-
-| Statement                               | Function                                                                                                          | Example                                        |
-|:----------------------------------------|:------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------|
-|sctl:set transaction_type=XX             | Modify transaction_type of the current connection, supports LOCAL, XA, BASE                                       | sctl:set transaction_type=XA                   |
-|sctl:show transaction_type               | Query the transaction type of the current connection                                                              | sctl:show transaction_type                     |
-|sctl:show cached_connections             | Query the number of cached physical database connections in the current connection                                | sctl:show cached_connections                   |
-|sctl:explain SQL                         | View the execution plan for logical SQL.                                                                          | sctl:explain select * from t_order             |
-|sctl:hint set PRIMARY_ONLY=true          | For current connection, set database operation force route to primary database only or not                        | sctl:hint set PRIMARY_ONLY=true                |
-|sctl:hint set DatabaseShardingValue=yy   | For current connection, set sharding value for database sharding only, yy: sharding value                         | sctl:hint set DatabaseShardingValue=100        |
-|sctl:hint addDatabaseShardingValue xx=yy | For current connection, add sharding value for database, xx: logic table, yy: sharding value                      | sctl:hint addDatabaseShardingValue t_order=100 |
-|sctl:hint addTableShardingValue xx=yy    | For current connection, add sharding value for table, xx: logic table, yy: sharding value                         | sctl:hint addTableShardingValue t_order=100    |
-|sctl:hint clear                          | For current connection, clear all hint settings                                                                   | sctl:hint clear                                |
-|sctl:hint show status                    | For current connection, query hint status, primary_only:true/false, sharding_type:databases_only/databases_tables | sctl:hint show status                          |
-|sctl:hint show table status              | For current connection, query sharding values of logic tables                                                     | sctl:hint show table status                    |
-
-## Notice
-
-ShardingSphere-Proxy does not support hint by default, to support it, set `proxy-hint-enabled` to true in `conf/server.yaml`.
