commit e4425be56d560c5977f715a20a63d41a195c93aa
Author: sunhangda <lwclover@126.com>
Date:   Fri Apr 22 00:03:42 2022 +0800

    Add NanoId doc (#16976)
    
    * Add nano id doc

diff --git a/docs/document/content/features/sharding/concept/key-generator.cn.md b/docs/document/content/features/sharding/concept/key-generator.cn.md
index 491c52c682..76689bbbc3 100644
--- a/docs/document/content/features/sharding/concept/key-generator.cn.md
+++ b/docs/document/content/features/sharding/concept/key-generator.cn.md
@@ -18,6 +18,10 @@ Apache ShardingSphere 不仅提供了内置的分布式主键生成器，例如
 
 采用 `UUID.randomUUID()` 的方式产生分布式主键。
 
+### NanoID
+
+生成长度为21的字符串分布式主键。
+
 ### SNOWFLAKE
 
 在分片规则配置模块可配置每个表的主键生成策略，默认使用雪花算法（snowflake）生成 64bit 的长整型数据。
diff --git a/docs/document/content/features/sharding/concept/key-generator.en.md b/docs/document/content/features/sharding/concept/key-generator.en.md
index a6c1981613..edd410f836 100644
--- a/docs/document/content/features/sharding/concept/key-generator.en.md
+++ b/docs/document/content/features/sharding/concept/key-generator.en.md
@@ -23,6 +23,10 @@ Besides, we have also extracted a key generator interface to make users implemen
 
 Use `UUID.randomUUID()` to generate the distributed key.
 
+### NanoID
+
+Generate a string of length 21 distributed key.
+
 ### SNOWFLAKE
 
 Users can configure the strategy of each table in sharding rule configuration module, with default snowflake algorithm generating 64bit long integral data.
