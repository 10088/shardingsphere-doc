commit 43cb5a85fd5008a56394d0e4fab2e0c19ec5f108
Author: Swastika Gupta <64654203+Swastyy@users.noreply.github.com>
Date:   Thu Mar 10 14:45:54 2022 +0530

    Spaces between words of chinese and english languages (#15971)
    
    * add spaces
    
    * Delete .gitpod.yml

diff --git a/docs/document/content/dev-manual/proxy.cn.md b/docs/document/content/dev-manual/proxy.cn.md
index e85727ddca..f97a2e9ea8 100644
--- a/docs/document/content/dev-manual/proxy.cn.md
+++ b/docs/document/content/dev-manual/proxy.cn.md
@@ -9,7 +9,7 @@ chapter = true
 
 | *SPI 名称*                       | *详细说明*                                      |
 | ------------------------------- | ---------------------------------------------- |
-| DatabaseProtocolFrontendEngine  | 用于ShardingSphere-Proxy解析与适配访问数据库的协议 |
+| DatabaseProtocolFrontendEngine  | 用于 ShardingSphere-Proxy 解析与适配访问数据库的协议 |
 
 | *已知实现类*              | *详细说明*                                      |
 | ------------------------ | ---------------------------------------------- |
diff --git a/docs/document/content/dev-manual/scaling.cn.md b/docs/document/content/dev-manual/scaling.cn.md
index e2888da8bb..c14f8da386 100644
--- a/docs/document/content/dev-manual/scaling.cn.md
+++ b/docs/document/content/dev-manual/scaling.cn.md
@@ -36,7 +36,7 @@ chapter = true
 | *已知实现类*                                  | *详细说明*                                            |
 | ------------------------------------------- | ---------------------------------------------------- |
 | DataMatchDataConsistencyCheckAlgorithm      | 基于数据匹配的一致性校验算法。类型名：DATA_MATCH。          |
-| CRC32MatchDataConsistencyCheckAlgorithm     | 基于数据CRC32匹配的一致性校验算法。类型名：CRC32_MATCH。    |
+| CRC32MatchDataConsistencyCheckAlgorithm     | 基于数据 CRC32 匹配的一致性校验算法。类型名：CRC32_MATCH。    |
 
 ## SingleTableDataCalculator
 
diff --git a/docs/document/content/dev-manual/sharding.cn.md b/docs/document/content/dev-manual/sharding.cn.md
index b72b625204..d83fbf8830 100644
--- a/docs/document/content/dev-manual/sharding.cn.md
+++ b/docs/document/content/dev-manual/sharding.cn.md
@@ -33,7 +33,7 @@ chapter = true
 | *已知实现类*                    | *详细说明*                  |
 | ----------------------------- | -------------------------- |
 | SnowflakeKeyGenerateAlgorithm | 基于雪花算法的分布式主键生成算法 |
-| UUIDKeyGenerateAlgorithm      | 基于UUID的分布式主键生成算法    |
+| UUIDKeyGenerateAlgorithm      | 基于 UUID 的分布式主键生成算法    |
 
 ## DatetimeService
 
diff --git a/docs/document/content/dev-manual/sql-check.cn.md b/docs/document/content/dev-manual/sql-check.cn.md
index 28162a5ec2..2896f68061 100644
--- a/docs/document/content/dev-manual/sql-check.cn.md
+++ b/docs/document/content/dev-manual/sql-check.cn.md
@@ -9,7 +9,7 @@ chapter = true
 
 | *SPI 名称*        | *详细说明* |
 | ---------------- | --------- |
-| SQLChecker       | SQL检查器  |
+| SQLChecker       | SQL 检查器  |
 
 | *已知实现类*       | *详细说明* |
 | ---------------- | --------- |
diff --git a/docs/document/content/dev-manual/sql-parser.cn.md b/docs/document/content/dev-manual/sql-parser.cn.md
index 990889813f..682e23ac25 100644
--- a/docs/document/content/dev-manual/sql-parser.cn.md
+++ b/docs/document/content/dev-manual/sql-parser.cn.md
@@ -9,16 +9,16 @@ chapter = true
 
 | *SPI 名称*                    | *详细说明*                            |
 | ---------------------------- | ----------------------------------- |
-| DatabaseTypedSQLParserFacade | 配置用于SQL解析的词法分析器和语法分析器入口 |
+| DatabaseTypedSQLParserFacade | 配置用于 SQL 解析的词法分析器和语法分析器入口 |
 
 | *Implementation Class* | *Description*            |
 | ---------------------- |--------------------------|
 | MySQLParserFacade      | 基于 MySQL 的 SQL 解析器入口     |
-| PostgreSQLParserFacade | 基于 PostgreSQL 的SQL 解析器入口 |
-| SQLServerParserFacade  | 基于 SQLServer 的SQL 解析器入口  |
-| OracleParserFacade     | 基于 Oracle 的SQL 解析器入口     |
-| SQL92ParserFacade      | 基于 SQL92 的SQL 解析器入口      |
-| OpenGaussParserFacade  | 基于 openGauss 的SQL 解析器入口  |
+| PostgreSQLParserFacade | 基于 PostgreSQL 的 SQL 解析器入口 |
+| SQLServerParserFacade  | 基于 SQLServer 的 SQL 解析器入口  |
+| OracleParserFacade     | 基于 Oracle 的 SQL 解析器入口     |
+| SQL92ParserFacade      | 基于 SQL92 的 SQL 解析器入口      |
+| OpenGaussParserFacade  | 基于 openGauss 的 SQL 解析器入口  |
 
 ## SQLVisitorFacade
 
diff --git a/docs/document/content/dev-manual/transaction.cn.md b/docs/document/content/dev-manual/transaction.cn.md
index c7b8cc54e9..058fafd2dc 100644
--- a/docs/document/content/dev-manual/transaction.cn.md
+++ b/docs/document/content/dev-manual/transaction.cn.md
@@ -20,7 +20,7 @@ chapter = true
 
 | *SPI 名称*                            | *详细说明*                        |
 | ------------------------------------ | -------------------------------- |
-| XATransactionManagerProvider         | XA分布式事务管理器                  |
+| XATransactionManagerProvider         | XA 分布式事务管理器                  |
 
 | *已知实现类*                           | *详细说明*                        |
 | ------------------------------------ | -------------------------------- |
diff --git a/docs/document/content/features/observability/_index.cn.md b/docs/document/content/features/observability/_index.cn.md
index 29d2dd9d43..a8d7d4ab48 100644
--- a/docs/document/content/features/observability/_index.cn.md
+++ b/docs/document/content/features/observability/_index.cn.md
@@ -26,8 +26,8 @@ Tracing 用于获取 SQL 解析与 SQL 执行的链路跟踪信息。Apache Shar
 
 - 使用 OpenTelemetry
 
-OpenTelemetry 在2019年由 OpenTracing 和 OpenCencus 合并而来。
-使用这种方式，只需要在agent配置文件中，根据 [OpenTelemetry SDK自动配置说明](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure) ，填写合适的配置即可。
+OpenTelemetry 在 2019 年由 OpenTracing 和 OpenCencus 合并而来。
+使用这种方式，只需要在 agent 配置文件中，根据 [OpenTelemetry SDK 自动配置说明](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure) ，填写合适的配置即可。
 
 - 使用 SkyWalking
   
@@ -35,7 +35,7 @@ OpenTelemetry 在2019年由 OpenTracing 和 OpenCencus 合并而来。
 
 - 使用 SkyWalking 的内置自动探针
 
-[Apache ShardingSphere](https://shardingsphere.apache.org) 团队与[Apache SkyWalking](https://skywalking.apache.org) 团队共同合作，在 SkyWalking 中实现了 Apache ShardingSphere 自动探针，可以将相关的应用性能数据自动发送到 SkyWalking 中。注意这种方式的自动探针不能与 Apache ShardingSphere 插件探针同时使用。
+[Apache ShardingSphere](https://shardingsphere.apache.org) 团队与 [Apache SkyWalking](https://skywalking.apache.org) 团队共同合作，在 SkyWalking 中实现了 Apache ShardingSphere 自动探针，可以将相关的应用性能数据自动发送到 SkyWalking 中。注意这种方式的自动探针不能与 Apache ShardingSphere 插件探针同时使用。
 
 Metrics 则用于收集和展示整个集群的统计指标。Apache ShardingSphere 默认提供了对 Prometheus 的支持。
 
diff --git a/docs/document/content/features/transaction/_index.cn.md b/docs/document/content/features/transaction/_index.cn.md
index dafcaf641f..a8867e7a6d 100644
--- a/docs/document/content/features/transaction/_index.cn.md
+++ b/docs/document/content/features/transaction/_index.cn.md
@@ -32,7 +32,7 @@ chapter = true
 
 XA协议最早的分布式事务模型是由 `X/Open` 国际联盟提出的 `X/Open Distributed Transaction Processing (DTP)` 模型，简称 XA 协议。
 
-基于XA协议实现的分布式事务对业务侵入很小。
+基于 XA 协议实现的分布式事务对业务侵入很小。
 它最大的优势就是对使用方透明，用户可以像使用本地事务一样使用基于XA协议的分布式事务。
 XA协议能够严格保障事务 ACID 特性。
 
diff --git a/docs/document/content/overview/_index.cn.md b/docs/document/content/overview/_index.cn.md
index 687aed154d..803202222a 100644
--- a/docs/document/content/overview/_index.cn.md
+++ b/docs/document/content/overview/_index.cn.md
@@ -27,7 +27,7 @@ Apache ShardingSphere 产品定位为 `Database Plus`，旨在构建异构数据
 - `增量`：获取数据库的访问流量，并提供流量重定向（数据分片、读写分离、影子库）、流量变形（数据加密、数据脱敏）、流量鉴权（安全、审计、权限）、流量治理（熔断、限流）以及流量分析（服务质量分析、可观察性）等透明化增量功能；
 - `可插拔`：项目采用微内核 + 三层可插拔模型，使内核、功能组件以及生态对接完全能够灵活的方式进行插拔式扩展，开发者能够像使用积木一样定制属于自己的独特系统。
 
-ShardingSphere 已于2020年4月16日成为 [Apache 软件基金会](https://apache.org/index.html#projects-list)的顶级项目。
+ShardingSphere 已于 2020 年 4 月 16 日成为 [Apache 软件基金会](https://apache.org/index.html#projects-list)的顶级项目。
 欢迎通过[邮件列表](mailto:dev@shardingsphere.apache.org)参与讨论。
 
 [![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
diff --git a/docs/document/content/quick-start/shardingsphere-proxy-quick-start.cn.md b/docs/document/content/quick-start/shardingsphere-proxy-quick-start.cn.md
index 3829a23f4d..43d8b56288 100644
--- a/docs/document/content/quick-start/shardingsphere-proxy-quick-start.cn.md
+++ b/docs/document/content/quick-start/shardingsphere-proxy-quick-start.cn.md
@@ -12,7 +12,7 @@ weight = 2
 
 > %SHARDINGSPHERE_PROXY_HOME% 为 Proxy 解压后的路径，例：/opt/shardingsphere-proxy-bin/
 
-详情请参见[配置手册](/cn/user-manual/shardingsphere-proxy/yaml-config/)。
+详情请参见 [配置手册](/cn/user-manual/shardingsphere-proxy/yaml-config/)。
 
 ## 引入依赖
 
@@ -38,7 +38,7 @@ sh %SHARDINGSPHERE_PROXY_HOME%/bin/start.sh ${proxy_port} ${proxy_conf_directory
 
 ## 使用 ShardingSphere-Proxy
 
-执行 MySQL 或 PostgreSQL的客户端命令直接操作 ShardingSphere-Proxy 即可。以 MySQL 举例：
+执行 MySQL 或 PostgreSQL 的客户端命令直接操作 ShardingSphere-Proxy 即可。以 MySQL 举例：
 
 ```bash
 mysql -u${proxy_username} -p${proxy_password} -h${proxy_host} -P${proxy_port}
diff --git a/docs/document/content/reference/encrypt/_index.cn.md b/docs/document/content/reference/encrypt/_index.cn.md
index fe1bcf04e3..bdb5d61671 100644
--- a/docs/document/content/reference/encrypt/_index.cn.md
+++ b/docs/document/content/reference/encrypt/_index.cn.md
@@ -27,9 +27,9 @@ Apache ShardingSphere 会将用户请求的明文进行加密后存储到底层
 
 **数据源配置**：指数据源配置。
 
-**加密算法配置**：指使用什么加密算法进行加解密。目前ShardingSphere内置了三种加解密算法：AES，MD5 和 RC4。用户还可以通过实现ShardingSphere提供的接口，自行实现一套加解密算法。
+**加密算法配置**：指使用什么加密算法进行加解密。目前 ShardingSphere 内置了三种加解密算法：AES，MD5 和 RC4。用户还可以通过实现 ShardingSphere 提供的接口，自行实现一套加解密算法。
 
-**加密表配置**：用于告诉ShardingSphere数据表里哪个列用于存储密文数据（cipherColumn）、哪个列用于存储明文数据（plainColumn）以及用户想使用哪个列进行SQL编写（logicColumn）。
+**加密表配置**：用于告诉 ShardingSphere 数据表里哪个列用于存储密文数据（cipherColumn）、哪个列用于存储明文数据（plainColumn）以及用户想使用哪个列进行 SQL 编写（logicColumn）。
 
 >  如何理解`用户想使用哪个列进行SQL编写（logicColumn）`？
 >
