commit 91b94dfd3c36bd9109582234851f1dbc0e297e13
Author: Liang Zhang <terrymanu@163.com>
Date:   Thu Nov 11 21:29:57 2021 +0800

    Update standard user-manual of shardingsphere-jdbc (#13560)
    
    * Update index of user-manual
    
    * Update index of user-manual
    
    * Update standard user-manual of shardingsphere-jdbc

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.cn.md
index 18067bb160..f7dc8be5a2 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.cn.md
@@ -65,13 +65,13 @@ dataSource1.setUsername("root");
 dataSource1.setPassword("");
 dataSourceMap.put("ds_1", dataSource1);
 
-// 配置第 n 个数据源
-HikariDataSource dataSourceN = new HikariDataSource();
-dataSourceN.setDriverClassName("com.mysql.jdbc.Driver");
-dataSourceN.setJdbcUrl("jdbc:mysql://localhost:3306/ds_n");
-dataSourceN.setUsername("root");
-dataSourceN.setPassword("");
-dataSourceMap.put("ds_n", dataSourceN);
+// 配置第 2 个数据源
+HikariDataSource dataSource2 = new HikariDataSource();
+dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
+dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
+dataSource2.setUsername("root");
+dataSource2.setPassword("");
+dataSourceMap.put("ds_2", dataSource2);
 ```
 
 ### 构建规则
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.en.md
index b66b5d356a..f2dfeaa765 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.en.md
@@ -65,14 +65,14 @@ dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
 dataSource1.setUsername("root");
 dataSource1.setPassword("");
 dataSourceMap.put("ds_1", dataSource1);
-
-// Configure the n data source
-HikariDataSource dataSourceN = new HikariDataSource();
-dataSourceN.setDriverClassName("com.mysql.jdbc.Driver");
-dataSourceN.setJdbcUrl("jdbc:mysql://localhost:3306/ds_n");
-dataSourceN.setUsername("root");
-dataSourceN.setPassword("");
-dataSourceMap.put("ds_n", dataSourceN);
+        
+// Configure the 2ND data source
+HikariDataSource dataSource2 = new HikariDataSource();
+dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
+dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
+dataSource2.setUsername("root");
+dataSource2.setPassword("");
+dataSourceMap.put("ds_2", dataSource2);
 ```
 
 ### Build Rules
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.cn.md
index 4f8d248085..34bea762d1 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.cn.md
@@ -19,42 +19,24 @@ weight = 3
 
 ```properties
 # 配置真实数据源
-spring.shardingsphere.datasource.names=ds0,ds1
+spring.shardingsphere.datasource.names=ds1,ds2
 
 # 配置第 1 个数据源
-spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0
-spring.shardingsphere.datasource.ds0.username=root
-spring.shardingsphere.datasource.ds0.password=
-
-# 配置第 2 个数据源
 spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
 spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
 spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
 spring.shardingsphere.datasource.ds1.username=root
 spring.shardingsphere.datasource.ds1.password=
 
-# 配置 t_order 表规则
-spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order$->{0..1}
-
-# 配置分库策略
-spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=database_inline
-
-# 配置分表策略
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=table_inline
+# 配置第 2 个数据源
+spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
+spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
+spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
+spring.shardingsphere.datasource.ds2.username=root
+spring.shardingsphere.datasource.ds2.password=
 
-# 省略配置 t_order_item 表规则...
+# 规则请参见具体配置
 # ...
-
-# 配置 分片算法
-spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.props.algorithm-expression=ds_${user_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.props.algorithm-expression=t_order_${order_id % 2}
-
 ```
 
 ### 使用 JNDI 数据源
@@ -64,20 +46,21 @@ spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.props.algo
 
 ```properties
 # 配置真实数据源
-spring.shardingsphere.datasource.names=ds0,ds1
+spring.shardingsphere.datasource.names=ds1,ds2
 
 # 配置第 1 个数据源
-spring.shardingsphere.datasource.ds0.jndi-name=java:comp/env/jdbc/ds0
-# 配置第 2 个数据源
 spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
+# 配置第 2 个数据源
+spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
 
-# 省略规则配置...
+# 规则请参见具体配置
 # ...
 ```
 
-## 在 Spring 中使用 ShardingSphereDataSource
+## 在 Spring 中使用 ShardingSphere 数据源
 
-直接通过注入的方式即可使用 ShardingSphereDataSource；或者将 ShardingSphereDataSource 配置在JPA， MyBatis 等 ORM 框架中配合使用。
+直接通过注入的方式即可使用 ShardingSphereDataSource；
+或者将 ShardingSphereDataSource 配置在 JPA、Hibernate、MyBatis 等 ORM 框架中配合使用。
 
 ```java
 @Resource
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.en.md
index 75082f43fb..c839a6da12 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.en.md
@@ -19,41 +19,24 @@ Note: The example connection pool is HikariCP, which can be replaced with other
 
 ```properties
 # Configure actual data sources
-spring.shardingsphere.datasource.names=ds0,ds1
+spring.shardingsphere.datasource.names=ds1,ds2
 
-# Configure the first data source
-spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0
-spring.shardingsphere.datasource.ds0.username=root
-spring.shardingsphere.datasource.ds0.password=
-
-# Configure the second data source
+# Configure the 1st data source
 spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
 spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
 spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
 spring.shardingsphere.datasource.ds1.username=root
 spring.shardingsphere.datasource.ds1.password=
 
-# Configure t_order table rule
-spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order$->{0..1}
-
-# Configure database sharding strategy
-spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=database_inline
-
-# Configure table sharding strategy
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
-spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=table_inline
+# Configure the 2nd data source
+spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
+spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
+spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
+spring.shardingsphere.datasource.ds2.username=root
+spring.shardingsphere.datasource.ds2.password=
 
-# Omit t_order_item table rule configuration ...
+# Please reference concentrate rule configurations
 # ...
-
-# Configure sharding algorithm
-spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.props.algorithm-expression=ds_${user_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.props.algorithm-expression=t_order_${order_id % 2}
 ```
 
 ### Use JNDI Data Source
@@ -64,23 +47,17 @@ For example:
 
 ```properties
 # Configure actual data sources
-spring.shardingsphere.datasource.names=ds0,ds1
+spring.shardingsphere.datasource.names=ds1,ds2
 
 # Configure the first data source
-spring.shardingsphere.datasource.ds0.jndi-name=java:comp/env/jdbc/ds0
-# Configure the second data source
 spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
+# Configure the second data source
+spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
 
-# Omit rule configurations ...
+# Please reference concentrate rule configurations
 # ...
 ```
 
-## Use ShardingSphereDataSource in Spring
+## Use ShardingSphere Data Source in Spring
 
-ShardingSphereDataSource can be used directly by injection; 
-or configure ShardingSphereDataSource in ORM frameworks such as JPA or MyBatis.
-
-```java
-@Resource
-private DataSource dataSource;
-```
+Same with Spring Boot Starter.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.cn.md
index d7da598f33..575c942d89 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.cn.md
@@ -3,7 +3,7 @@ title = "使用 Spring 命名空间"
 weight = 4
 +++
 
-## 引入Maven依赖
+## 引入 Maven 依赖
 
 ```xml
 <dependency>
@@ -20,81 +20,35 @@ weight = 4
 ```xml
 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-    xmlns:sharding="http://shardingsphere.apache.org/schema/shardingsphere/sharding" 
-    xsi:schemaLocation="http://www.springframework.org/schema/beans 
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
                         http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://shardingsphere.apache.org/schema/shardingsphere/sharding 
-                        http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd 
-                        ">
+                        http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                        http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd">
     <!-- 配置真实数据源 -->
     <!-- 配置第 1 个数据源 -->
-    <bean id="ds0" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
+    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
         <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds0" />
+        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
         <property name="username" value="root" />
         <property name="password" value="" />
     </bean>
     <!-- 配置第 2 个数据源 -->
-    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
+    <bean id="ds2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
         <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
+        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds2" />
         <property name="username" value="root" />
         <property name="password" value="" />
     </bean>
     
-    <!-- 配置分库策略 -->
-    <sharding:sharding-algorithm id="dbShardingAlgorithm" type="INLINE">
-        <props>
-            <prop key="algorithm-expression">ds$->{user_id % 2}</prop>
-        </props>
-    </sharding:sharding-algorithm>
-    <sharding:standard-strategy id="dbStrategy" sharding-column="user_id" algorithm-ref="dbShardingAlgorithm" />
-    
-    <!-- 配置分表策略 -->
-    <sharding:sharding-algorithm id="tableShardingAlgorithm" type="INLINE">
-        <props>
-            <prop key="algorithm-expression">t_order$->{order_id % 2}</prop>
-        </props>
-    </sharding:sharding-algorithm>
-    <sharding:standard-strategy id="tableStrategy" sharding-column="user_id" algorithm-ref="tableShardingAlgorithm" />
-
-    <!-- 配置分布式id生成策略 -->
-    <sharding:key-generate-algorithm id="snowflakeAlgorithm" type="SNOWFLAKE">
-           <props>
-               <prop key="worker-id">123</prop>
-           </props>
-    </sharding:key-generate-algorithm>   
-    <sharding:key-generate-strategy id="orderKeyGenerator" column="order_id" algorithm-ref="snowflakeAlgorithm" />
-
-    <!-- 配置sharding策略 -->
-    <sharding:rule id="shardingRule">
-        <sharding:table-rules>
-            <sharding:table-rule logic-table="t_order" actual-data-nodes="ds${0..1}.t_order_${0..1}" database-strategy-ref="dbStrategy" table-strategy-ref="tableStrategy" key-generate-strategy-ref="orderKeyGenerator" />
-        </sharding:table-rules>
-        <sharding:binding-table-rules>
-            <sharding:binding-table-rule logic-tables="t_order,t_order_item"/>
-        </sharding:binding-table-rules>
-        <sharding:broadcast-table-rules>
-            <sharding:broadcast-table-rule table="t_address"/>
-        </sharding:broadcast-table-rules>
-    </sharding:rule>
-    
-    <!-- 配置ShardingSphereDataSource -->
-    <shardingsphere:data-source id="shardingDataSource" data-source-names="ds0, ds1" rule-refs="shardingRule">
-        <props>
-            <prop key="sql-show">false</prop>
-        </props>
-    </shardingsphere:data-source>
+    <!-- 规则请参见具体配置 -->
     
+    <!-- 配置 ShardingSphereDataSource -->
+    <shardingsphere:data-source id="shardingDataSource" data-source-names="ds1, ds2" rule-refs="fooRule, barRule" />
 </beans>
 ```
 
-## 在 Spring 中使用 ShardingSphereDataSource
+## 在 Spring 中使用 ShardingSphere 数据源
 
-直接通过注入的方式即可使用 ShardingSphereDataSource；或者将 ShardingSphereDataSource 配置在JPA， MyBatis 等 ORM 框架中配合使用。
-
-```java
-@Resource
-private DataSource dataSource;
-```
+使用方式同 Spring Boot Starter。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.en.md
index 877f5495cd..8b3c4baf6e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.en.md
@@ -20,82 +20,35 @@ Note: The example connection pool is HikariCP, which can be replaced with other
 ```xml
 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-    xmlns:sharding="http://shardingsphere.apache.org/schema/shardingsphere/sharding" 
-    xsi:schemaLocation="http://www.springframework.org/schema/beans 
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
                         http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://shardingsphere.apache.org/schema/shardingsphere/sharding 
-                        http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd 
-                        ">
+                        http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                        http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd">
     <!-- Configure actual data sources -->
-    <!-- Configure the first data source -->
-    <bean id="ds0" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
+    <!-- Configure the 1st data source -->
+    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
         <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds0" />
+        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
         <property name="username" value="root" />
         <property name="password" value="" />
     </bean>
-    <!-- Configure the second data source -->
-    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
+    <!-- Configure the 2nd data source -->
+    <bean id="ds2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
         <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
+        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds2" />
         <property name="username" value="root" />
         <property name="password" value="" />
     </bean>
-    
-    <!-- Configure database sharding strategy -->
-    <sharding:sharding-algorithm id="dbShardingAlgorithm" type="INLINE">
-           <props>
-               <prop key="algorithm-expression">ds$->{user_id % 2}</prop>
-           </props>
-    </sharding:sharding-algorithm>
-    <sharding:standard-strategy id="dbStrategy" sharding-column="user_id" algorithm-ref="dbShardingAlgorithm" />
-       
-    <!-- Configure table sharding strategy -->
-    <sharding:sharding-algorithm id="tableShardingAlgorithm" type="INLINE">
-           <props>
-               <prop key="algorithm-expression">t_order$->{order_id % 2}</prop>
-           </props>
-    </sharding:sharding-algorithm>
-    <sharding:standard-strategy id="tableStrategy" sharding-column="user_id" algorithm-ref="tableShardingAlgorithm" />
-   
-    <!-- Configure distributed key-generate strategy -->
-    <sharding:key-generate-algorithm id="snowflakeAlgorithm" type="SNOWFLAKE">
-              <props>
-                  <prop key="worker-id">123</prop>
-              </props>
-    </sharding:key-generate-algorithm>   
-    <sharding:key-generate-strategy id="orderKeyGenerator" column="order_id" algorithm-ref="snowflakeAlgorithm" />
-   
-    <!-- Configure sharding rule -->
-    <sharding:rule id="shardingRule">
-           <sharding:table-rules>
-               <sharding:table-rule logic-table="t_order" actual-data-nodes="ds${0..1}.t_order_${0..1}" database-strategy-ref="dbStrategy" table-strategy-ref="tableStrategy" key-generate-strategy-ref="orderKeyGenerator" />
-           </sharding:table-rules>
-           <sharding:binding-table-rules>
-               <sharding:binding-table-rule logic-tables="t_order,t_order_item"/>
-           </sharding:binding-table-rules>
-           <sharding:broadcast-table-rules>
-               <sharding:broadcast-table-rule table="t_address"/>
-           </sharding:broadcast-table-rules>
-    </sharding:rule>
-       
-    <!-- Configure ShardingSphereDataSource -->
-    <shardingsphere:data-source id="shardingDataSource" data-source-names="ds0,ds1" rule-refs="shardingRule">
-           <props>
-               <prop key="sql-show">false</prop>
-           </props>
-    </shardingsphere:data-source>     
 
+    <!-- Please reference concentrate rule configurations -->
+
+    <!-- Configure ShardingSphereDataSource -->
+    <shardingsphere:data-source id="shardingDataSource" data-source-names="ds0, ds1" rule-refs="fooRule, barRule" />
 </beans>
 ```
 
-## Use ShardingSphereDataSource in Spring
+## Use ShardingSphere Data Source in Spring
 
-ShardingSphereDataSource can be used directly by injection; 
-or configure ShardingSphereDataSource in ORM frameworks such as JPA or MyBatis.
-
-```java
-@Resource
-private DataSource dataSource;
-```
+Same with Spring Boot Starter.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.cn.md
index 20e11056ba..b67c578832 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.cn.md
@@ -34,22 +34,22 @@ dataSources:
     jdbcUrl: jdbc:mysql://localhost:3306/ds_1
     username: root
     password:
-  # 配置第 n 个数据源
-  ds_n: !!com.zaxxer.hikari.HikariDataSource
+  # 配置第 2 个数据源
+  ds_2: !!com.zaxxer.hikari.HikariDataSource
     driverClassName: com.mysql.jdbc.Driver
-    jdbcUrl: jdbc:mysql://localhost:3306/ds_n
+    jdbcUrl: jdbc:mysql://localhost:3306/ds_2
     username: root
     password: 
 
 rules:
-- !XXX_1
+- !FOO_XXX
     ...
-- !XXX_N
+- !BAR_XXX
     ...
 
 props:
   key_1: value_1
-  key_n: value_n
+  key_2: value_2
 ```
 
 ### 构建 ShardingSphere 数据源
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.en.md
index 9b2b4e1697..b0ac5eb4dd 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.en.md
@@ -34,22 +34,22 @@ dataSources:
     jdbcUrl: jdbc:mysql://localhost:3306/ds_1
     username: root
     password:
-  # Configure nth data source
-  ds_n: !!com.zaxxer.hikari.HikariDataSource
+  # Configure 2nd data source
+  ds_2: !!com.zaxxer.hikari.HikariDataSource
     driverClassName: com.mysql.jdbc.Driver
-    jdbcUrl: jdbc:mysql://localhost:3306/ds_n
+    jdbcUrl: jdbc:mysql://localhost:3306/ds_2
     username: root
     password:
 
 rules:
-  - !XXX_1
+  - !FOO_XXX
     ...
-  - !XXX_N
+  - !BAR_XXX
     ...
 
 props:
   key_1: value_1
-  key_n: value_n
+  key_2: value_2
 ```
 
 ### Build ShardingSphere Data Source
