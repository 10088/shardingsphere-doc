commit 86307b2ea86f73021b80dcf1de16a94a2410f41a
Author: JingShang Lu <jingshanglu1@gmail.com>
Date:   Tue Jul 12 19:27:58 2022 +0800

    Format doc for core-feature-transaction (#19064)
    
    * add doc for core-feature-transaction
    
    * fix

diff --git a/docs/document/content/features/transaction/_index.cn.md b/docs/document/content/features/transaction/_index.cn.md
index a5de3743b65..7cfb6eb97e9 100644
--- a/docs/document/content/features/transaction/_index.cn.md
+++ b/docs/document/content/features/transaction/_index.cn.md
@@ -7,41 +7,49 @@ chapter = true
 
 ## 背景
 
-数据库事务需要满足 ACID（原子性、一致性、隔离性、持久性）四个特性。
+事务四个特性 ACID（原子性、一致性、隔离性、持久性）。
 
 - 原子性（Atomicity）指事务作为整体来执行，要么全部执行，要么全不执行；
 - 一致性（Consistency）指事务应确保数据从一个一致的状态转变为另一个一致的状态；
 - 隔离性（Isolation）指多个事务并发执行时，一个事务的执行不应影响其他事务的执行；
 - 持久性（Durability）指已提交的事务修改数据会被持久保存。
 
-在单一数据节点中，事务仅限于对单一数据库资源的访问控制，称之为本地事务。
-几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持。
-但是在基于微服务的分布式应用环境下，越来越多的应用场景要求对多个服务的访问及其相对应的多个数据库资源能纳入到同一个事务当中，分布式事务应运而生。
+在分布式的场景下，一个事务内，包含对多个数据节点的操作，分布式事务保证了在分布式场景下 ACID 的特性。
 
-关系型数据库虽然对本地事务提供了完美的 ACID 原生支持。
-但在分布式的场景下，它却成为系统性能的桎梏。
-如何让数据库在分布式场景下满足 ACID 的特性或找寻相应的替代方案，是分布式事务的重点工作。
+## 相关概念
 
-### 本地事务
+### XA 协议
 
-在不开启任何分布式事务管理器的前提下，让每个数据节点各自管理自己的事务。
-它们之间没有协调以及通信的能力，也并不互相知晓其他数据节点事务的成功与否。
-本地事务在性能方面无任何损耗，但在强一致性以及最终一致性方面则力不从心。
+XA 协议最早的分布式事务模型是由 `X/Open` 国际联盟提出的 `X/Open Distributed Transaction Processing (DTP)` 模型，简称 XA 协议。
 
-### 两阶段提交
+## 原理介绍
 
-XA 协议最早的分布式事务模型是由 `X/Open` 国际联盟提出的 `X/Open Distributed Transaction Processing (DTP)` 模型，简称 XA 协议。
+ShardingSphere 对外提供 begin/commit/rollback 传统事务接口，通过 LOCAL，XA，BASE 三种模式提供了分布式事务的能力，
+
+### LOCAL 事务
+
+LOCAL 模式基于 ShardingSphere 代理的数据库 `begin/commit/rolllback` 的接口实现，
+对于一条逻辑 SQL，ShardingSphere 通过 `begin` 指令在每个被代理的数据库开启事务，并执行实际 SQL，并执行 `commit/rollback`。
+由于每个数据节点各自管理自己的事务，它们之间没有协调以及通信的能力，也并不互相知晓其他数据节点事务的成功与否。
+在性能方面无任何损耗，但在强一致性以及最终一致性方面不能够保证。
+
+### XA 事务
+
+XA 事务采用的是 X/OPEN 组织所定义的 [DTP 模型](http://pubs.opengroup.org/onlinepubs/009680699/toc.pdf) 所抽象的 AP（应用程序）, TM（事务管理器）和 RM（资源管理器） 概念来保证分布式事务的强一致性。
+其中 TM 与 RM 间采用 XA 的协议进行双向通信，通过两阶段提交实现。
+与传统的本地事务相比，XA 事务增加了准备阶段，数据库除了被动接受提交指令外，还可以反向通知调用方事务是否可以被提交。
+`TM` 可以收集所有分支事务的准备结果，并于最后进行原子提交，以保证事务的强一致性。
+
+![两阶段提交模型](https://shardingsphere.apache.org/document/current/img/transaction/overview.png)
+
+XA 事务建立在 ShardingSphere 代理的数据库 xa start/end/prepare/commit/rollback/recover 的接口上。
 
-基于 XA 协议实现的分布式事务对业务侵入很小。
-它最大的优势就是对使用方透明，用户可以像使用本地事务一样使用基于XA协议的分布式事务。
-XA协议能够严格保障事务 ACID 特性。
+对于一条逻辑 SQL，ShardingSphere 通过 `xa begin` 指令在每个被代理的数据库开启事务，内部集成 TM，用于协调各分支事务，并执行 `xa commit/rollback`。
 
-严格保障事务 ACID 特性是一把双刃剑。
-事务执行在过程中需要将所需资源全部锁定，它更加适用于执行时间确定的短事务。
-对于长事务来说，整个事务进行期间对数据的独占，将导致对热点数据依赖的业务系统并发性能衰退明显。
-因此，在高并发的性能至上场景中，基于 XA 协议的分布式事务并不是最佳选择。
+基于 XA 协议实现的分布式事务，由于在执行的过程中需要对所需资源进行锁定，它更加适用于执行时间确定的短事务。
+对于长事务来说，整个事务进行期间对数据的独占，将会对并发场景下的性能产生一定的影响。
 
-### 柔性事务
+### BASE 事务
 
 如果将实现了 ACID 的事务要素的事务称为刚性事务的话，那么基于 BASE 事务要素的事务则称为柔性事务。
 BASE 是基本可用、柔性状态和最终一致性这三个要素的缩写。
@@ -55,28 +63,16 @@ BASE 是基本可用、柔性状态和最终一致性这三个要素的缩写。
 通过放宽对强一致性要求，来换取系统吞吐量的提升。
 
 基于 ACID 的强一致性事务和基于 BASE 的最终一致性事务都不是银弹，只有在最适合的场景中才能发挥它们的最大长处。
+Apache ShardingSphere 集成了 SEATA 作为柔性事务的使用方案。
 可通过下表详细对比它们之间的区别，以帮助开发者进行技术选型。
 
-|          | *本地事务*      | *两（三）阶段事务* | *柔性事务*     |
+|          | *LOCAL*       | *XA*              | *BASE*     |
 | -------- | ------------- | ---------------- | ------------ |
-| 业务改造  | 无             | 无               | 实现相关接口    |
-| 一致性    | 不支持          | 支持             | 最终一致       |
-| 隔离性    | 不支持          | 支持             | 业务方保证     |
-| 并发性能  | 无影响          | 严重衰退          | 略微衰退       |
-| 适合场景  | 业务方处理不一致  | 短事务 & 低并发   | 长事务 & 高并发 |
-
-## 挑战
-
-由于应用的场景不同，需要开发者能够合理的在性能与功能之间权衡各种分布式事务。
-
-强一致的事务与柔性事务的 API 和功能并不完全相同，在它们之间并不能做到自由的透明切换。
-在开发决策阶段，就不得不在强一致的事务和柔性事务之间抉择，使得设计和开发成本被大幅增加。
-
-基于 XA 的强一致事务使用相对简单，但是无法很好的应对互联网的高并发或复杂系统的长事务场景；
-柔性事务则需要开发者对应用进行改造，接入成本非常高，并且需要开发者自行实现资源锁定和反向补偿。
-
-## 目标
-
-**整合现有的成熟事务方案，为本地事务、两阶段事务和柔性事务提供统一的分布式事务接口，并弥补当前方案的不足，提供一站式的分布式事务解决方案是 Apache ShardingSphere 分布式事务模块的主要设计目标。**
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-kernel/shardingsphere-transaction**
+| 业务改造  | 无             | 无               | 需要 seata server|
+| 一致性    | 不支持         | 支持             | 最终一致       |
+| 隔离性    | 不支持         | 支持             | 业务方保证     |
+| 并发性能  | 无影响         | 严重衰退          | 略微衰退       |
+| 适合场景  | 业务方处理不一致 | 短事务 & 低并发   | 长事务 & 高并发 |
+
+## 相关参考
+- [分布式事务的YAML配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/)
diff --git a/docs/document/content/features/transaction/_index.en.md b/docs/document/content/features/transaction/_index.en.md
index 2d59d5e10c6..f91ab3f3fd6 100644
--- a/docs/document/content/features/transaction/_index.en.md
+++ b/docs/document/content/features/transaction/_index.en.md
@@ -7,77 +7,71 @@ chapter = true
 
 ## Background
 
-Database transactions should satisfy the features of ACID (atomicity, consistency, isolation and durability).
+Four properties of transactions: ACID （Atomicity、Consistency、Isolation、Durability).
 
-- Atomicity guarantees that each transaction is treated as a single unit, which either succeeds completely, or fails completely;
-- Consistency ensures that a transaction can only bring the database from one valid state to another, maintaining database invariants;
-- Isolation ensures that concurrent execution of transactions leaves the database in the same state that would have been obtained if the transactions were executed sequentially;
-- Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).
+- Atomicity: transactions are executed as a whole, and either all or none is executed.
+- Consistency: transactions should ensure that the state of data remains consistent after the transition.
+- Isolation: when multiple transactions execute concurrently, the execution of one transaction should not affect the execution of others.
+- Durability: when a transaction committed modifies data, the operation will be saved persistently.
 
-In single data node, transactions are only restricted to the access and control of single database resources, called local transactions. 
-Almost all the mature relational databases have provided native support for local transactions. 
-But in distributed application situations based on micro-services, more and more of them require to include multiple accesses to services and the corresponding database resources in the same transaction. 
-As a result, distributed transactions appear. 
+Distributed transactions guarantee the ACID properties in distributed scenarios, where a single transaction involves operations on multiple data nodes.
 
-Though the relational database has provided perfect native ACID support, it can become an obstacle to the system performance under distributed situations. 
-How to make databases satisfy ACID features under distributed situations or find a corresponding substitute solution, is the priority work of distributed transactions.
+## Related Concepts
 
-### Local Transaction
+### XA Protocol
 
-It means let each data node to manage their own transactions on the premise that any distributed transaction manager is not on. 
-They do not have any coordination and communication ability, or know other data nodes have succeeded or not. 
-Though without any consumption in performance, local transactions are not capable enough in high consistency and eventual consistency.
+The original distributed transaction model of XA protocol is the "X/Open Distributed Transaction Processing (DTP)" model, XA protocol for short, which was proposed by the X/Open international consortium.
 
-### 2PC Transaction
+## How it works
 
-The earliest distributed transaction model of XA standard is `X/Open Distributed Transaction Processing (DTP)` model brought up by `X/Open`, XA for short.
+ShardingSphere provides begin/ commit/rollback traditional transaction interfaces externally, and provides distributed transaction capabilities through LOCAL, XA and BASE modes.
 
-Distributed transaction based on XA standard has little intrusion to businesses. 
-Its biggest advantage is the transparency to users, who can use distributed transactions based on XA standard just as local transactions. 
-XA standard can strictly guarantee ACID features of transactions.
+### LOCAL Transaction
 
-That guarantee can be a double-edged sword. 
-It is more proper in the implementation of short transactions with fixed time, because it will lock all the resources needed during the implementation process. 
-For long transactions, data monopolization during its implementation will lead to an obvious concurrency performance recession for business systems depend on hot spot data. 
-Therefore, in high concurrency situations that take performance as the highest, distributed transaction based on XA standard is not the best choice.
+LOCAL mode is implemented based on ShardingSphere's proxy database interfaces, that is begin/commit/rolllback.
+For a logical SQL, ShardingSphere starts transactions on each proxied database with the begin directive, executes the actual SQL, and performs commit/rollback.
+Since each data node manages its own transactions, there is no coordination and communication between them, and they do not know whether other data node transactions succeed or not.
+There is no loss in performance, but strong consistency and final consistency cannot be guaranteed.
 
-### BASE Transaction
-
-If we call transactions that satisfy ACID features as hard transactions, then transactions based on BASE features are called soft transactions. 
-BASE is the abbreviation of basically available, soft state and eventually consistent those there factors.
+### XA Transanction
 
-- Basically available feature means not all the participants of distributed transactions have to be online at the same time.
-- Soft state feature permits some time delay in system renewal, which may not be noticed by users.
-- Eventually consistent feature of systems is usually guaranteed by message availability.
+XA transaction adopts the concepts including AP(application program), YM(transaction manager) and RM(resource manager) to ensure the strong consistency of distributed transactions. Those concepts are abstracted from [DTP mode](http://pubs.opengroup.org/onlinepubs/009680699/toc.pdf) which is defined by X/OPEN group.
+Among them, TM and RM use XA protocol to carry out both-way communication, which is realized through two-phase commit.
+Compared to traditional local transactions, XA transaction adds a preparation stage where the database can also inform the caller whether the transaction can be committed, in addition to passively accepting commit instructions.
+TM can collect the results of all branch transactions and make atomic commit at the end to ensure the strong consistency of transactions.
 
-There is a high requirement for isolation in ACID transactions: all the resources must be locked during the transaction implementation process. 
-The concept of BASE transactions is uplifting mutex operation from resource level to business level through business logic. 
-Broaden the requirement for high consistency to exchange the rise in system throughput.
+![Two-phase commit model](https://shardingsphere.apache.org/document/current/img/transaction/overview.png)
 
-Highly consistent transactions based on ACID and eventually consistent transactions based on BASE are not silver bullets, and they can only take the most effect in the most appropriate situations. 
-The detailed distinctions between them are illustrated in the following table to help developers to choose technically:
+XA transaction is implemented based on the interface of ShardingSphere's proxy database xa start/end/prepare/commit/rollback/recover.
 
-|                         | *Local transaction*                     | *2PC (3PC) transaction*             | *BASE transaction*                  |
-| ----------------------- | --------------------------------------- | :---------------------------------- | ----------------------------------- |
-| Business transformation | None                                    | None                                | Relevant interface                  |
-| Consistency             | Not support                             | Support                             | Eventual consistency                |
-| Isolation               | Not support                             | Support                             | Business-side guarantee             |
-| Concurrency performance | No influence                            | Serious recession                   | Minor recession                     |
-| Situation               | Inconsistent operation at business side | Short transaction & low concurrency | Long transaction & high concurrency |
+For a logical SQL, ShardingSphere starts transactions in each proxied database with the xa begin directive, integrates TM internally for coordinating branch transactions, and performs xa commit /rollback.
+Distributed transactions based on XA protocol are more suitable for short transactions with fixed execution time because the required resources need to be locked during execution.
+For long transactions, data exclusivity during the entire transaction will have an impact on performance in concurrent scenarios.
 
-## Challenge
+### BASE Transaction
 
-For different application situations, developers need to reasonably weight the performance and the function between all kinds of distributed transactions.
+If a transaction that implements ACID is called a rigid transaction, then a transaction based on a BASE transaction element is called a flexible transaction.
+BASE stands for basic availability, soft state, and eventual consistency.
 
-Highly consistent transactions do not have totally the same API and functions as soft transactions, and they cannot switch between each other freely and invisibly. 
-The choice between highly consistent transactions and soft transactions as early as development decision-making phase has sharply increased the design and development cost.
+- Basically Available: ensure that distributed transaction parties are not necessarily online at the same time.
+- Soft state: system status updates are allowed to have a certain delay, and the delay may not be recognized by customers.
+- Eventually consistent: guarantee the eventual consistency of the system by means of messaging.
 
-Highly consistent transactions based on XA is relatively easy to use, but is not good at dealing with long transaction and high concurrency situation of the Internet. 
-With a high access cost, soft transactions require developers to transform the application and realize resources lock and backward compensation.
+ACID transaction puts a high demand for isolation, where all resources must be locked during the execution of transactions.
+Flexible transaction is to move mutex operations from the resource level to the business level through business logic.
+Reduce the requirement for strong consistency in exchange for higher system throughput.
 
-## Goal
+ACID-based strong consistency transactions and BASE-based final consistency transactions are not a jack of all trades and can fully leverage their advantages in the most appropriate scenarios.
+Apache ShardingSphere integrates the operational scheme taking SEATA as the flexible transaction.
+The following table can be used for comparison to help developers choose the suitable technology.
 
-**The main design goal of the distributed transaction modular of Apache ShardingSphere is to integrate existing mature transaction cases to provide an unified distributed transaction interface for local transactions, 2PC transactions and soft transactions;
- compensate for the deficiencies of current solutions to provide a one-stop distributed transaction solution.**
+|          | *LOCAL*       | *XA*              | *BASE*     |
+| -------- | ------------- | ---------------- | ------------ |
+| Business transformation  | None            | None               | Seata server needed|
+| Consistency    | Not supported         | Not supported             | Final consistency       |
+| Isolation    | Not supported        | Supported           | Business side guaranteed  |
+| Concurrent performance | no loss        | severe loss          | slight loss       |
+| Applied scenarios  | Inconsistent processing by the business side | short transaction & low-level concurrency | long transaction & high concurrency |
 
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-kernel/shardingsphere-transaction**
+## Related reference
+- [YAML distributed transaction configuration](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/)
