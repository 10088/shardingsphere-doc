commit ddad91a7d4180f570a7585b870b46c6208e0bce6
Author: Zhengqiang Duan <duanzhengqiang@apache.org>
Date:   Wed Sep 29 18:00:26 2021 +0800

    update query optimization doc (#12815)
    
    * add query optimization doc
    
    * update doc
    
    * update picture
    
    * update doc

diff --git a/docs/document/content/features/sharding/principle/_index.cn.md b/docs/document/content/features/sharding/principle/_index.cn.md
index 10d12c6cde..2132a5ed1e 100644
--- a/docs/document/content/features/sharding/principle/_index.cn.md
+++ b/docs/document/content/features/sharding/principle/_index.cn.md
@@ -5,8 +5,9 @@ weight = 2
 chapter = true
 +++
 
-ShardingSphere 的 3 个产品的数据分片主要流程是完全一致的。
-核心由 `SQL 解析 => 执行器优化 => SQL 路由 => SQL 改写 => SQL 执行 => 结果归并`的流程组成。
+ShardingSphere 的 3 个产品的数据分片主要流程是完全一致的，按照是否进行查询优化，可以分为 Standard 内核流程和 Federation 执行引擎流程。 
+Standard 内核流程由 `SQL 解析 => SQL 路由 => SQL 改写 => SQL 执行 => 结果归并` 组成，主要用于处理标准分片场景下的 SQL 执行。
+Federation 执行引擎流程由 `SQL 解析 => 逻辑优化 => 物理优化 => 优化执行 => Standard 内核流程` 组成，Federation 执行引擎内部进行逻辑优化和物理优化，在优化执行阶段依赖 Standard 内核流程，对优化后的逻辑 SQL 进行路由、改写、执行和归并。
 
 ![分片架构图](https://shardingsphere.apache.org/document/current/img/sharding/sharding_architecture_cn.png)
 
@@ -16,10 +17,6 @@ ShardingSphere 的 3 个产品的数据分片主要流程是完全一致的。
 先通过词法解析器将 SQL 拆分为一个个不可再分的单词。再使用语法解析器对 SQL 进行理解，并最终提炼出解析上下文。
 解析上下文包括表、选择项、排序项、分组项、聚合函数、分页信息、查询条件以及可能需要修改的占位符的标记。
 
-## 执行器优化
-
-合并和优化分片条件，如 OR 等。
-
 ## SQL 路由
 
 根据解析上下文匹配用户配置的分片策略，并生成路由路径。目前支持分片路由和广播路由。
@@ -35,3 +32,7 @@ ShardingSphere 的 3 个产品的数据分片主要流程是完全一致的。
 ## 结果归并
 
 将多个执行结果集归并以便于通过统一的 JDBC 接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。
+
+## 查询优化
+
+由 Federation 执行引擎（开发中）提供支持，对关联查询、子查询等复杂查询进行优化，同时支持跨多个数据库实例的分布式查询，内部使用关系代数优化查询计划，通过最优计划查询出结果。
diff --git a/docs/document/content/features/sharding/principle/_index.en.md b/docs/document/content/features/sharding/principle/_index.en.md
index 9affef5c03..2f822d0193 100644
--- a/docs/document/content/features/sharding/principle/_index.en.md
+++ b/docs/document/content/features/sharding/principle/_index.en.md
@@ -5,7 +5,9 @@ weight = 2
 chapter = true
 +++
 
-The major sharding processes of all the three ShardingSphere products are identical. The core consists of `SQL parsing => query optimization => SQL route => SQL rewrite => SQL execution => result merger`.
+The major sharding processes of all the three ShardingSphere products are identical. According to whether query optimization is performed, they can be divided into standard kernel process and federation executor engine process.
+The standard kernel process consists of `SQL Parse => SQL Route => SQL Rewrite => SQL Execute => Result Merge`, which is used to process SQL execution in standard sharding scenarios.
+The federation executor engine process consists of `SQL Parse => Logical Plan Optimize => Physical Plan Optimize => Plan Execute => Standard Kernel Process`. The federation executor engine perform logical plan optimization and physical plan optimization. In the optimization execution phase, it relies on the standard kernel process to route, rewrite, execute, and merge the optimized logical SQL.
 
 ![Sharding Architecture Diagram](https://shardingsphere.apache.org/document/current/img/sharding/sharding_architecture_en.png)
 
@@ -13,10 +15,6 @@ The major sharding processes of all the three ShardingSphere products are identi
 
 It is divided into lexical parsing and syntactic parsing. The lexical parser will split SQL into inseparable words, and then the syntactic parser will analyze SQL and extract the parsing context, which can include tables, options, ordering items, grouping items, aggregation functions, pagination information, query conditions and placeholders that may be revised.
 
-## Query Optimization
-
-It merges and optimizes sharding conditions, such as OR.
-
 ## SQL Route
 
 It is the sharding strategy that matches users’ configurations according to the parsing context and the route path can be generated. It supports sharding route and broadcast route currently.
@@ -32,3 +30,7 @@ It rewrites SQL as statement that can be rightly executed in the real database,
 ## Result Merger
 
 It merges multiple execution result sets to output through unified JDBC interface. Result merger includes methods as stream merger, memory merger and addition merger using decorator merger.
+
+## Query Optimization
+
+Supported by federation executor engine(under development), optimization is performed on complex query such as join query and subquery. It also supports distributed query across multiple database instances. It uses relational algebra internally to optimize query plan, and then get query result through the best query plan.
diff --git a/docs/document/static/img/sharding/sharding_architecture_cn.png b/docs/document/static/img/sharding/sharding_architecture_cn.png
index 67796d4082..6883602873 100644
Binary files a/docs/document/static/img/sharding/sharding_architecture_cn.png and b/docs/document/static/img/sharding/sharding_architecture_cn.png differ
diff --git a/docs/document/static/img/sharding/sharding_architecture_en.png b/docs/document/static/img/sharding/sharding_architecture_en.png
index 53283b7c4e..8b9e9176c1 100644
Binary files a/docs/document/static/img/sharding/sharding_architecture_en.png and b/docs/document/static/img/sharding/sharding_architecture_en.png differ
