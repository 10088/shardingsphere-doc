commit f032e21fbb603d3d4714f28125abcc5426cf676d
Author: Mike0601 <40025573+Mike0601@users.noreply.github.com>
Date:   Tue Aug 9 22:17:42 2022 +0800

    find back background only sharding add application scenario and appendix (#20014)
    
    * find back background only sharding add application scenario and appendix
    
    * the feature shadow add application scenario

diff --git a/docs/document/content/features/db-compatibility/_index.cn.md b/docs/document/content/features/db-compatibility/_index.cn.md
deleted file mode 100644
index 5c290db4cf9..00000000000
--- a/docs/document/content/features/db-compatibility/_index.cn.md
+++ /dev/null
@@ -1,142 +0,0 @@
-+++
-pre = "<b>3.11. </b>"
-title = "数据库兼容"
-weight = 11
-chapter = true
-+++
-
-## 定义
-
-随着通信技术的革新，全新领域的应用层出不穷，推动和颠覆整个人类社会协作模式的革新。 数据存量随着应用的探索不断增加，数据的存储和计算模式无时无刻面临着创新。
-面向交易、大数据、关联分析、物联网等场景越来越细分，单一数据库再也无法适用于所有的应用场景。 与此同时，场景内部也愈加细化，相似场景使用不同数据库已成为常态。 由此可见，数据库碎片化的趋势已经不可逆转。
-数据库兼容，主要指的是针对众多的碎片化的数据库的语法、协议等等的兼容能力。
-
-## 相关概念
-
-### SQL （Structured Query Language 结构化查询语言）
-
-是用于管理数据库的语言 ，SQL 在 1986 年成为美国国家标准学会（ANSI）的一项标准，在 1987 年成为国际标准化组织（ISO）标准 [13]。此后，这一标准经过了一系列的增订，加入了大量新特性。虽然有这一标准的存在，然而大部分数据库不只会支持 SQL 标准，还会有一些自己独有的语言，这就导致根据具体的数据库系统不同，也可能会支持不同的方言。
-
-### 数据库协议
-
-可以部署数据产品后进行客户端和服务端通信，就像 SQL 一样，不同的数据库，甚至同一个数据库的不同版本也会支持不同的通信协议，因此同一种协议，是无法访问多种不同的数据库的。
-
-## 使用限制
-
-### SQL 解析
-
-SQL 是使用者与数据库交流的标准语言。 SQL 解析引擎负责将 SQL 字符串解析为抽象语法树，供 Apache ShardingSphere 理解并实现其增量功能。
-目前支持 MySQL, PostgreSQL, SQLServer, Oracle, openGauss 以及符合 SQL92 规范的 SQL 方言。 由于 SQL 语法的复杂性，目前仍然存在少量不支持的 SQL。
-本章节详细罗列出目前不支持的 SQL 种类，供使用者参考。
-其中有未涉及到的 SQL 欢迎补充，未支持的 SQL 也尽量会在未来的版本中支持。
-
-源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser
-
-#### MySQL
-
-MySQL 不支持的 SQL 清单如下：
-
-|SQL|
-|---|
-|CLONE LOCAL DATA DIRECTORY = ‘clone_dir’|
-|INSTALL COMPONENT ‘file://component1’, ‘file://component2’|
-|UNINSTALL COMPONENT ‘file://component1’, ‘file://component2’|
-|REPAIR TABLE t_order|
-|OPTIMIZE TABLE t_order|
-|CHECKSUM TABLE t_order|
-|CHECK TABLE t_order|
-|SET RESOURCE GROUP group_name|
-|DROP RESOURCE GROUP group_name|
-|CREATE RESOURCE GROUP group_name TYPE = SYSTEM|
-|ALTER RESOURCE GROUP rg1 VCPU = 0-63|
-
-源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql
-
-#### openGauss
-
-openGauss 不支持的 SQL 清单如下：
-
-|SQL|
-|---|
-|CREATE type avg_state AS (total bigint, count bigint);|
-|CREATE AGGREGATE my_avg(int4) (stype = avg_state, sfunc = avg_transfn, finalfunc = avg_finalfn)|
-|CREATE TABLE agg_data_2k AS SELECT g FROM generate_series(0, 1999) g;|
-|CREATE SCHEMA alt_nsp1;|
-|ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;|
-|CREATE CONVERSION alt_conv1 FOR ‘LATIN1’ TO ‘UTF8’ FROM iso8859_1_to_utf8;|
-|CREATE FOREIGN DATA WRAPPER alt_fdw1|
-|CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1|
-|CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler|
-|CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1|
-|CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple)|
-|CREATE RULE def_view_test_ins AS ON INSERT TO def_view_test DO INSTEAD INSERT INTO def_test SELECT new.*|
-|ALTER TABLE alterlock SET (toast.autovacuum_enabled = off)|
-|CREATE PUBLICATION pub1 FOR TABLE alter1.t1, ALL TABLES IN SCHEMA alter2|
-
-源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-opengauss
-
-#### PostgreSQL
-
-PostgreSQL 不支持的 SQL 清单如下：
-
-|SQL|
-|---|
-|CREATE type avg_state AS (total bigint, count bigint);|
-|CREATE AGGREGATE my_avg(int4) (stype = avg_state, sfunc = avg_transfn, finalfunc = avg_finalfn)|
-|CREATE TABLE agg_data_2k AS SELECT g FROM generate_series(0, 1999) g;|
-|CREATE SCHEMA alt_nsp1;|
-|ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;|
-|CREATE CONVERSION alt_conv1 FOR ‘LATIN1’ TO ‘UTF8’ FROM iso8859_1_to_utf8;|
-|CREATE FOREIGN DATA WRAPPER alt_fdw1|
-|CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1|
-|CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler|
-|CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1|
-|CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple)|
-|CREATE RULE def_view_test_ins AS ON INSERT TO def_view_test DO INSTEAD INSERT INTO def_test SELECT new.*|
-|ALTER TABLE alterlock SET (toast.autovacuum_enabled = off)|
-|CREATE PUBLICATION pub1 FOR TABLE alter1.t1, ALL TABLES IN SCHEMA alter2|
-
-源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql
-
-### 数据库协议
-
-Apache ShardingSphere 目前实现了 MySQL 和 PostgreSQL 协议。
-源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-db-protocol
-
-### 特性支持
-
-Apache ShardingSphere 为数据库提供了分布式协作的能力，同时将一部分数据库特性抽象到了上层，进行统一管理，以降低用户的使用难度。
-因此，对于统一提供的特性，原生的 SQL 将不再下发到数据库，并提示该操作不被支持，用户可使用 ShardingSphere 提供的的方式进行代替。
-本章节详细罗列出目前不支持的数据库特性和相关的 SQL 语句，供使用者参考。
-其中有未涉及到的 SQL 欢迎补充。
-
-#### MySQL
-
-MySQL 不支持的 SQL 清单如下：
-
-**用户和角色**
-
-|SQL|
-|---|
-|CREATE USER ‘finley’@‘localhost’ IDENTIFIED BY ‘password’|
-|ALTER USER ‘finley’@‘localhost’ IDENTIFIED BY ‘new_password’|
-|DROP USER ‘finley’@‘localhost’;|
-|CREATE ROLE ‘app_read’|
-|DROP ROLE ‘app_read’|
-|SHOW CREATE USER finley|
-|SET PASSWORD = ‘auth_string’|
-|SET ROLE DEFAULT;|
-
-**授权**
-
-|SQL|
-|---|
-|GRANT ALL ON db1.* TO ‘jeffrey’@‘localhost’|
-|GRANT SELECT ON world.* TO ‘role3’;|
-|GRANT ‘role1’, ‘role2’ TO ‘user1’@‘localhost’|
-|REVOKE INSERT ON . FROM ‘jeffrey’@‘localhost’|
-|REVOKE ‘role1’, ‘role2’ FROM ‘user1’@‘localhost’|
-|REVOKE ALL PRIVILEGES, GRANT OPTION FROM user_or_role|
-|SHOW GRANTS FOR ‘jeffrey’@‘localhost’|
-|SHOW GRANTS FOR CURRENT_USER|
-|FLUSH PRIVILEGES|
diff --git a/docs/document/content/features/db-compatibility/_index.en.md b/docs/document/content/features/db-compatibility/_index.en.md
deleted file mode 100644
index fc950ec8f22..00000000000
--- a/docs/document/content/features/db-compatibility/_index.en.md
+++ /dev/null
@@ -1,152 +0,0 @@
-+++
-pre = "<b>3.11. </b>"
-title = "DB Compatibility"
-weight = 11
-chapter = true
-+++
-
-## Definition
-
-Thanks to the innovation of information technology, and fast application iteration speed, data traffic is growing exponentially - ultimately continuously changing data storage and computation models. 
-
-Transaction-oriented, Big Data, IoT, and other scenarios are increasingly fragmented, indicating that a single database can no longer be applied to all circumstances. At the same time, things are getting more and more sophisticated, so it becomes the norm to use different databases for similar scenarios. This shows that database fragmentation has already become an irreversible trend.
-
-Database compatibility mainly refers to the compatibility of elements like syntax, and protocols for many fragmented databases. 
-
-## Relevant Concepts
-
-### SQL (Structured Query Language)
-
-SQL is a language used to manage databases and became an American National Standards Institute (ANSI) standard in 1986 and a standard established by International Organization for Standardization (ISO) standard in 1987 [13]. Since then, this standard has undergone a series of updates to include several new features. Despite its presence, most databases have their unique languages besides SQL, which may lead to different dialects depending on the specific database system. 
-
-### Database Protocols
-
-It is possible to deploy data products for client-server communication. Just like SQL, different databases, or even different versions of the same database, support different communication protocols, so accessing many different databases with the same protocol is impossible. 
-
-## Limitations
-
-### SQL Parsing
-
-SQL is the standard language for users to communicate with the database. The SQL parsing engine is responsible for parsing SQL strings into abstract syntax trees for Apache ShardingSphere to understand and implement its incremental functionality. 
-
-MySQL, PostgreSQL, SQLServer, Oracle, openGauss, and SQL92 compliant SQL dialects are currently supported. Due to the complexity of SQL syntax, there are still a few SQL currently not supported.
-
-This section lists those SQL types in detail for users' reference. 
-
-You are welcome to add anything not covered in the list, and we will work hard to support these in future versions as soon as possible. 
-
-Source code: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser
-
-#### MySQL
-
-SQL not supported are listed below:
-
-|SQL|
-|---|
-|CLONE LOCAL DATA DIRECTORY = ‘clone_dir’|
-|INSTALL COMPONENT ‘file://component1’, ‘file://component2’|
-|UNINSTALL COMPONENT ‘file://component1’, ‘file://component2’|
-|REPAIR TABLE t_order|
-|OPTIMIZE TABLE t_order|
-|CHECKSUM TABLE t_order|
-|CHECK TABLE t_order|
-|SET RESOURCE GROUP group_name|
-|DROP RESOURCE GROUP group_name|
-|CREATE RESOURCE GROUP group_name TYPE = SYSTEM|
-|ALTER RESOURCE GROUP rg1 VCPU = 0-63|
-
-Source Code：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql
-
-
-#### openGauss
-
-SQL not supported are listed below:
-
-|SQL|
-|---|
-|CREATE type avg_state AS (total bigint, count bigint);|
-|CREATE AGGREGATE my_avg(int4) (stype = avg_state, sfunc = avg_transfn, finalfunc = avg_finalfn)|
-|CREATE TABLE agg_data_2k AS SELECT g FROM generate_series(0, 1999) g;|
-|CREATE SCHEMA alt_nsp1;|
-|ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;|
-|CREATE CONVERSION alt_conv1 FOR ‘LATIN1’ TO ‘UTF8’ FROM iso8859_1_to_utf8;|
-|CREATE FOREIGN DATA WRAPPER alt_fdw1|
-|CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1|
-|CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler|
-|CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1|
-|CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple)|
-|CREATE RULE def_view_test_ins AS ON INSERT TO def_view_test DO INSTEAD INSERT INTO def_test SELECT new.*|
-|ALTER TABLE alterlock SET (toast.autovacuum_enabled = off)|
-|CREATE PUBLICATION pub1 FOR TABLE alter1.t1, ALL TABLES IN SCHEMA alter2|
-
-Source code：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-opengauss
-
-#### PostgreSQL
-
-SQL not supported are listed below:
-
-|SQL|
-|---|
-|CREATE type avg_state AS (total bigint, count bigint);|
-|CREATE AGGREGATE my_avg(int4) (stype = avg_state, sfunc = avg_transfn, finalfunc = avg_finalfn)|
-|CREATE TABLE agg_data_2k AS SELECT g FROM generate_series(0, 1999) g;|
-|CREATE SCHEMA alt_nsp1;|
-|ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;|
-|CREATE CONVERSION alt_conv1 FOR ‘LATIN1’ TO ‘UTF8’ FROM iso8859_1_to_utf8;|
-|CREATE FOREIGN DATA WRAPPER alt_fdw1|
-|CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1|
-|CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler|
-|CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1|
-|CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple)|
-|CREATE RULE def_view_test_ins AS ON INSERT TO def_view_test DO INSTEAD INSERT INTO def_test SELECT new.*|
-|ALTER TABLE alterlock SET (toast.autovacuum_enabled = off)|
-|CREATE PUBLICATION pub1 FOR TABLE alter1.t1, ALL TABLES IN SCHEMA alter2|
-
-Source Code: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql
-
-
-### Database Protocols
-
-Apache ShardingSphere currently implements MySQL and PostgreSQL protocols
-Source Code：https://github.com/apache/shardingsphere/tree/master/shardingsphere-db-protocol
-
-### Features Supported
-
-Apache ShardingSphere provides distributed collaboration capabilities for databases while abstracting some of the features of the database to the upper layer for integrated management to make it easier for users. 
-
-Therefore, for features provided universally, native SQL will no longer be sent down to the database and will send out a notice saying that the operation is not supported. Users can just rely on the methods provided by ShardingSphere instead. 
-
-This section provides a detailed list of currently unsupported database features and related SQL statements for further reference. 
-
-Feel free to add any SQL that is not covered in this section. 
-
-#### MySQL
-
-MySQL does not support this SQL listed below:
-
-**User&Role**
-
-|SQL|
-|---|
-|CREATE USER ‘finley’@‘localhost’ IDENTIFIED BY ‘password’|
-|ALTER USER ‘finley’@‘localhost’ IDENTIFIED BY ‘new_password’|
-|DROP USER ‘finley’@‘localhost’;|
-|CREATE ROLE ‘app_read’|
-|DROP ROLE ‘app_read’|
-|SHOW CREATE USER finley|
-|SET PASSWORD = ‘auth_string’|
-|SET ROLE DEFAULT;|
-
-**Permission**
-
-|SQL|
-|---|
-|GRANT ALL ON db1.* TO ‘jeffrey’@‘localhost’|
-|GRANT SELECT ON world.* TO ‘role3’;|
-|GRANT ‘role1’, ‘role2’ TO ‘user1’@‘localhost’|
-|REVOKE INSERT ON . FROM ‘jeffrey’@‘localhost’|
-|REVOKE ‘role1’, ‘role2’ FROM ‘user1’@‘localhost’|
-|REVOKE ALL PRIVILEGES, GRANT OPTION FROM user_or_role|
-|SHOW GRANTS FOR ‘jeffrey’@‘localhost’|
-|SHOW GRANTS FOR CURRENT_USER|
-|FLUSH PRIVILEGES|
diff --git a/docs/document/content/features/db-compatibility/db-protocol/_index.cn.md b/docs/document/content/features/db-compatibility/db-protocol/_index.cn.md
deleted file mode 100644
index 5e60bc0006e..00000000000
--- a/docs/document/content/features/db-compatibility/db-protocol/_index.cn.md
+++ /dev/null
@@ -1,9 +0,0 @@
-+++
-title = "数据库协议"
-weight = 2
-chapter = true
-+++
-
-Apache ShardingSphere 目前实现了 MySQL 和 PostgreSQL 协议。 
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-db-protocol**
diff --git a/docs/document/content/features/db-compatibility/db-protocol/_index.en.md b/docs/document/content/features/db-compatibility/db-protocol/_index.en.md
deleted file mode 100644
index fb79e88dc93..00000000000
--- a/docs/document/content/features/db-compatibility/db-protocol/_index.en.md
+++ /dev/null
@@ -1,9 +0,0 @@
-+++
-title = "DB Protocol"
-weight = 2
-chapter = true
-+++
-
-Apache ShardingSphere implements MySQL and PostgreSQL Protocol.
-
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-db-protocol**
diff --git a/docs/document/content/features/db-compatibility/feature-support/_index.cn.md b/docs/document/content/features/db-compatibility/feature-support/_index.cn.md
deleted file mode 100644
index bbe2cf3c79f..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/_index.cn.md
+++ /dev/null
@@ -1,13 +0,0 @@
-+++
-title = "特性支持"
-weight = 2
-chapter = true
-+++
-
-Apache ShardingSphere 为数据库提供了分布式协作的能力，同时将一部分数据库特性抽象到了上层，进行统一管理，以降低用户的使用难度。
-
-因此，对于统一提供的特性，原生的 SQL 将不再下发到数据库，并提示该操作不被支持，用户可使用 ShardingSphere 提供的的方式进行代替。
-
-本章节详细罗列出目前不支持的数据库特性和相关的 SQL 语句，供使用者参考。
-
-其中有未涉及到的 SQL 欢迎补充。
diff --git a/docs/document/content/features/db-compatibility/feature-support/_index.en.md b/docs/document/content/features/db-compatibility/feature-support/_index.en.md
deleted file mode 100644
index 54dbc33a447..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/_index.en.md
+++ /dev/null
@@ -1,14 +0,0 @@
-+++
-title = "Feature Support"
-weight = 2
-chapter = true
-+++
-
-Apache ShardingSphere provides the ability of distributed collaboration for the database, and abstracts part of the database features to the upper layer for unified management to reduce the difficulty of users.
-
-Therefore, for the unified provided features, the native SQL will no longer be transferred to the database, and it will be prompted that the operation is not supported.
-User can use the feature provided by ShardingSphere to replace it.
-
-This chapter has listed unsupported database features and related SQLs reference for users.
-
-There are some unsupported SQLs maybe missing, welcome to finish them.
diff --git a/docs/document/content/features/db-compatibility/feature-support/mysql.cn.md b/docs/document/content/features/db-compatibility/feature-support/mysql.cn.md
deleted file mode 100644
index 2f864514d19..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/mysql.cn.md
+++ /dev/null
@@ -1,31 +0,0 @@
-+++
-title = "MySQL"
-weight = 1
-+++
-
-MySQL 不支持的 SQL 清单如下：
-
-## 用户和角色
-| SQL                                                          |
-|--------------------------------------------------------------|
-| CREATE USER 'finley'@'localhost' IDENTIFIED BY 'password'    |
-| ALTER USER 'finley'@'localhost' IDENTIFIED BY 'new_password' |
-| DROP USER 'finley'@'localhost';                              |
-| CREATE ROLE 'app_read'                                       |
-| DROP ROLE 'app_read'                                         |
-| SHOW CREATE USER finley                                      |
-| SET PASSWORD = 'auth_string'                                 |
-| SET ROLE DEFAULT;                                            |
-
-## 授权
-| SQL                                                   |
-|-------------------------------------------------------|
-| GRANT ALL ON db1.* TO 'jeffrey'@'localhost'           |
-| GRANT SELECT ON world.* TO 'role3';                   |
-| GRANT 'role1', 'role2' TO 'user1'@'localhost'         |
-| REVOKE INSERT ON *.* FROM 'jeffrey'@'localhost'       |
-| REVOKE 'role1', 'role2' FROM 'user1'@'localhost'      |
-| REVOKE ALL PRIVILEGES, GRANT OPTION FROM user_or_role |
-| SHOW GRANTS FOR 'jeffrey'@'localhost'                 |
-| SHOW GRANTS FOR CURRENT_USER                          |
-| FLUSH PRIVILEGES                                      |
diff --git a/docs/document/content/features/db-compatibility/feature-support/mysql.en.md b/docs/document/content/features/db-compatibility/feature-support/mysql.en.md
deleted file mode 100644
index 3cfc6187cbf..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/mysql.en.md
+++ /dev/null
@@ -1,31 +0,0 @@
-+++
-title = "MySQL"
-weight = 1
-+++
-
-The unsupported SQL list for MySQL are as follows:
-
-## User & Role
-| SQL                                                          |
-|--------------------------------------------------------------|
-| CREATE USER 'finley'@'localhost' IDENTIFIED BY 'password'    |
-| ALTER USER 'finley'@'localhost' IDENTIFIED BY 'new_password' |
-| DROP USER 'finley'@'localhost';                              |
-| CREATE ROLE 'app_read'                                       |
-| DROP ROLE 'app_read'                                         |
-| SHOW CREATE USER finley                                      |
-| SET PASSWORD = 'auth_string'                                 |
-| SET ROLE DEFAULT;                                            |
-
-## Authorization
-| SQL                                                   |
-|-------------------------------------------------------|
-| GRANT ALL ON db1.* TO 'jeffrey'@'localhost'           |
-| GRANT SELECT ON world.* TO 'role3';                   |
-| GRANT 'role1', 'role2' TO 'user1'@'localhost'         |
-| REVOKE INSERT ON *.* FROM 'jeffrey'@'localhost'       |
-| REVOKE 'role1', 'role2' FROM 'user1'@'localhost'      |
-| REVOKE ALL PRIVILEGES, GRANT OPTION FROM user_or_role |
-| SHOW GRANTS FOR 'jeffrey'@'localhost'                 |
-| SHOW GRANTS FOR CURRENT_USER                          |
-| FLUSH PRIVILEGES                                      |
diff --git a/docs/document/content/features/db-compatibility/feature-support/oracle.cn.md b/docs/document/content/features/db-compatibility/feature-support/oracle.cn.md
deleted file mode 100644
index bc7c65d2171..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/oracle.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "Oracle"
-weight = 4
-+++
-
-Oracle 不支持的 SQL 清单如下：
-
-TODO
diff --git a/docs/document/content/features/db-compatibility/feature-support/oracle.en.md b/docs/document/content/features/db-compatibility/feature-support/oracle.en.md
deleted file mode 100644
index 58e2c2f79a8..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/oracle.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "Oracle"
-weight = 4
-+++
-
-The unsupported SQL list for Oracle are as follows:
-
-TODO
diff --git a/docs/document/content/features/db-compatibility/feature-support/postgresql.cn.md b/docs/document/content/features/db-compatibility/feature-support/postgresql.cn.md
deleted file mode 100644
index 9ce58f3a8d1..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/postgresql.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "PostgreSQL"
-weight = 2
-+++
-
-PostgreSQL 不支持的 SQL 清单如下：
-
-TODO
diff --git a/docs/document/content/features/db-compatibility/feature-support/postgresql.en.md b/docs/document/content/features/db-compatibility/feature-support/postgresql.en.md
deleted file mode 100644
index cafafb1c663..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/postgresql.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "PostgreSQL"
-weight = 2
-+++
-
-The unsupported SQL list for PostgreSQL are as follows:
-
-TODO
diff --git a/docs/document/content/features/db-compatibility/feature-support/sql92.cn.md b/docs/document/content/features/db-compatibility/feature-support/sql92.cn.md
deleted file mode 100644
index cefa40f7ca2..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/sql92.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "SQL92"
-weight = 5
-+++
-
-SQL92 不支持的 SQL 清单如下：
-
-TODO
diff --git a/docs/document/content/features/db-compatibility/feature-support/sql92.en.md b/docs/document/content/features/db-compatibility/feature-support/sql92.en.md
deleted file mode 100644
index a42ccfc2960..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/sql92.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "SQL92"
-weight = 5
-+++
-
-The unsupported SQL list for SQL92 are as follows:
-
-TODO
diff --git a/docs/document/content/features/db-compatibility/feature-support/sqlserver.cn.md b/docs/document/content/features/db-compatibility/feature-support/sqlserver.cn.md
deleted file mode 100644
index 736aeb67bb0..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/sqlserver.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "SQLServer"
-weight = 3
-+++
-
-SQLServer 不支持的 SQL 清单如下：
-
-TODO
diff --git a/docs/document/content/features/db-compatibility/feature-support/sqlserver.en.md b/docs/document/content/features/db-compatibility/feature-support/sqlserver.en.md
deleted file mode 100644
index 915bb3f170d..00000000000
--- a/docs/document/content/features/db-compatibility/feature-support/sqlserver.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-title = "SQLServer"
-weight = 3
-+++
-
-The unsupported SQL list for SQLServer are as follows:
-
-TODO
diff --git a/docs/document/content/features/db-compatibility/sql-parser/_index.cn.md b/docs/document/content/features/db-compatibility/sql-parser/_index.cn.md
deleted file mode 100644
index a4bd6bf29df..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/_index.cn.md
+++ /dev/null
@@ -1,17 +0,0 @@
-+++
-title = "SQL 解析"
-weight = 1
-chapter = true
-+++
-
-SQL 是使用者与数据库交流的标准语言。
-SQL 解析引擎负责将 SQL 字符串解析为抽象语法树，供 Apache ShardingSphere 理解并实现其增量功能。
-
-目前支持 MySQL, PostgreSQL, SQLServer, Oracle, openGauss 以及符合 SQL92 规范的 SQL 方言。
-由于 SQL 语法的复杂性，目前仍然存在少量不支持的 SQL。
-
-本章节详细罗列出目前不支持的 SQL 种类，供使用者参考。
-
-其中有未涉及到的 SQL 欢迎补充，未支持的 SQL 也尽量会在未来的版本中支持。
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/_index.en.md b/docs/document/content/features/db-compatibility/sql-parser/_index.en.md
deleted file mode 100644
index 0d2aa5be81e..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/_index.en.md
+++ /dev/null
@@ -1,18 +0,0 @@
-+++
-title = "SQL Parser"
-weight = 1
-chapter = true
-+++
-
-SQL is the standard operation language between users and databases.
-SQL Parse engine used to parse SQL into an abstract syntax tree to provide Apache ShardingSphere understand and implement the add-on features.
-
-It supports SQL dialect for MySQL, PostgreSQL, SQLServer, Oracle, openGauss and SQL that conform to the SQL92 specification.
-However, due to the complexity of SQL syntax, there are still a little of SQL do not support yet.
-
-This chapter has listed unsupported SQLs reference for users.
-
-There are some unsupported SQLs maybe missing, welcome to finish them.
-We will try best to support the unavailable SQLs in future versions.
-
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/mysql.cn.md b/docs/document/content/features/db-compatibility/sql-parser/mysql.cn.md
deleted file mode 100644
index 0ef3ae9b2fe..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/mysql.cn.md
+++ /dev/null
@@ -1,22 +0,0 @@
-+++
-title = "MySQL"
-weight = 1
-+++
-
-MySQL 不支持的 SQL 清单如下：
-
-| SQL                                                          |
-| ------------------------------------------------------------ |
-| CLONE LOCAL DATA DIRECTORY = 'clone_dir'                     |
-| INSTALL COMPONENT 'file://component1', 'file://component2'   |
-| UNINSTALL COMPONENT 'file://component1', 'file://component2' |
-| REPAIR TABLE t_order                                         |
-| OPTIMIZE TABLE t_order                                       |
-| CHECKSUM TABLE t_order                                       |
-| CHECK TABLE t_order                                          |
-| SET RESOURCE GROUP group_name                                |
-| DROP RESOURCE GROUP group_name                               |
-| CREATE RESOURCE GROUP group_name TYPE = SYSTEM               |
-| ALTER RESOURCE GROUP rg1 VCPU = 0-63                         |
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/mysql.en.md b/docs/document/content/features/db-compatibility/sql-parser/mysql.en.md
deleted file mode 100644
index d961bf3c7c5..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/mysql.en.md
+++ /dev/null
@@ -1,22 +0,0 @@
-+++
-title = "MySQL"
-weight = 1
-+++
-
-The unsupported SQL list for MySQL are as follows:
-
-| SQL                                                          |
-| ------------------------------------------------------------ |
-| CLONE LOCAL DATA DIRECTORY = 'clone_dir'                     |
-| INSTALL COMPONENT 'file://component1', 'file://component2'   |
-| UNINSTALL COMPONENT 'file://component1', 'file://component2' |
-| REPAIR TABLE t_order                                         |
-| OPTIMIZE TABLE t_order                                       |
-| CHECKSUM TABLE t_order                                       |
-| CHECK TABLE t_order                                          |
-| SET RESOURCE GROUP group_name                                |
-| DROP RESOURCE GROUP group_name                               |
-| CREATE RESOURCE GROUP group_name TYPE = SYSTEM               |
-| ALTER RESOURCE GROUP rg1 VCPU = 0-63                         |
-
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/openGauss.cn.md b/docs/document/content/features/db-compatibility/sql-parser/openGauss.cn.md
deleted file mode 100644
index 40eeb1854bf..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/openGauss.cn.md
+++ /dev/null
@@ -1,25 +0,0 @@
-+++
-title = "openGauss"
-weight = 2
-+++
-
-openGauss 不支持的 SQL 清单如下：
-
-| SQL                                                                                                       |
-| --------------------------------------------------------------------------------------------------------- |
-| CREATE type avg_state AS (total bigint, count bigint);                                                    |
-| CREATE AGGREGATE my_avg(int4) (stype = avg_state, sfunc = avg_transfn, finalfunc = avg_finalfn)           |
-| CREATE TABLE agg_data_2k AS SELECT g FROM generate_series(0, 1999) g;                                     |
-| CREATE SCHEMA alt_nsp1;                                                                                   |
-| ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;                                       |
-| CREATE CONVERSION alt_conv1 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;                                |
-| CREATE FOREIGN DATA WRAPPER alt_fdw1                                                                      |
-| CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1                                                    |
-| CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler                                                    |
-| CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1                                                    |
-| CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple)                                              |
-| CREATE RULE def_view_test_ins AS ON INSERT TO def_view_test DO INSTEAD INSERT INTO def_test SELECT new.*  |
-| ALTER TABLE alterlock SET (toast.autovacuum_enabled = off)                                                |
-| CREATE PUBLICATION pub1 FOR TABLE alter1.t1, ALL TABLES IN SCHEMA alter2                                  |
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-opengauss**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/openGauss.en.md b/docs/document/content/features/db-compatibility/sql-parser/openGauss.en.md
deleted file mode 100644
index c6565c31a8c..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/openGauss.en.md
+++ /dev/null
@@ -1,25 +0,0 @@
-+++
-title = "openGauss"
-weight = 2
-+++
-
-The unsupported SQL list for openGauss are as follows:
-
-| SQL                                                                                                       |
-| --------------------------------------------------------------------------------------------------------- |
-| CREATE type avg_state AS (total bigint, count bigint);                                                    |
-| CREATE AGGREGATE my_avg(int4) (stype = avg_state, sfunc = avg_transfn, finalfunc = avg_finalfn)           |
-| CREATE TABLE agg_data_2k AS SELECT g FROM generate_series(0, 1999) g;                                     |
-| CREATE SCHEMA alt_nsp1;                                                                                   |
-| ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;                                       |
-| CREATE CONVERSION alt_conv1 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;                                |
-| CREATE FOREIGN DATA WRAPPER alt_fdw1                                                                      |
-| CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1                                                    |
-| CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler                                                    |
-| CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1                                                    |
-| CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple)                                              |
-| CREATE RULE def_view_test_ins AS ON INSERT TO def_view_test DO INSTEAD INSERT INTO def_test SELECT new.*  |
-| ALTER TABLE alterlock SET (toast.autovacuum_enabled = off)                                                |
-| CREATE PUBLICATION pub1 FOR TABLE alter1.t1, ALL TABLES IN SCHEMA alter2                                  |
-
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-opengauss**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/oracle.cn.md b/docs/document/content/features/db-compatibility/sql-parser/oracle.cn.md
deleted file mode 100644
index 95d3c48fe71..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/oracle.cn.md
+++ /dev/null
@@ -1,10 +0,0 @@
-+++
-title = "Oracle"
-weight = 4
-+++
-
-Oracle 不支持的 SQL 清单如下：
-
-TODO
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/oracle.en.md b/docs/document/content/features/db-compatibility/sql-parser/oracle.en.md
deleted file mode 100644
index 4f2b403a8d5..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/oracle.en.md
+++ /dev/null
@@ -1,10 +0,0 @@
-+++
-title = "Oracle"
-weight = 4
-+++
-
-The unsupported SQL list for Oracle are as follows:
-
-TODO
-
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-oracle**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/postgresql.cn.md b/docs/document/content/features/db-compatibility/sql-parser/postgresql.cn.md
deleted file mode 100644
index 5d92f40e44b..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/postgresql.cn.md
+++ /dev/null
@@ -1,25 +0,0 @@
-+++
-title = "PostgreSQL"
-weight = 2
-+++
-
-PostgreSQL 不支持的 SQL 清单如下：
-
-| SQL                                                                                                       |
-| --------------------------------------------------------------------------------------------------------- |
-| CREATE type avg_state AS (total bigint, count bigint);                                                    |
-| CREATE AGGREGATE my_avg(int4) (stype = avg_state, sfunc = avg_transfn, finalfunc = avg_finalfn)           |
-| CREATE TABLE agg_data_2k AS SELECT g FROM generate_series(0, 1999) g;                                     |
-| CREATE SCHEMA alt_nsp1;                                                                                   |
-| ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;                                       |
-| CREATE CONVERSION alt_conv1 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;                                |
-| CREATE FOREIGN DATA WRAPPER alt_fdw1                                                                      |
-| CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1                                                    |
-| CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler                                                    |
-| CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1                                                    |
-| CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple)                                              |
-| CREATE RULE def_view_test_ins AS ON INSERT TO def_view_test DO INSTEAD INSERT INTO def_test SELECT new.*  |
-| ALTER TABLE alterlock SET (toast.autovacuum_enabled = off)                                                |
-| CREATE PUBLICATION pub1 FOR TABLE alter1.t1, ALL TABLES IN SCHEMA alter2                                  |
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/postgresql.en.md b/docs/document/content/features/db-compatibility/sql-parser/postgresql.en.md
deleted file mode 100644
index b5beaaf8eb6..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/postgresql.en.md
+++ /dev/null
@@ -1,25 +0,0 @@
-+++
-title = "PostgreSQL"
-weight = 2
-+++
-
-The unsupported SQL list for PostgreSQL are as follows:
-
-| SQL                                                                                                       |
-| --------------------------------------------------------------------------------------------------------- |
-| CREATE type avg_state AS (total bigint, count bigint);                                                    |
-| CREATE AGGREGATE my_avg(int4) (stype = avg_state, sfunc = avg_transfn, finalfunc = avg_finalfn)           |
-| CREATE TABLE agg_data_2k AS SELECT g FROM generate_series(0, 1999) g;                                     |
-| CREATE SCHEMA alt_nsp1;                                                                                   |
-| ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;                                       |
-| CREATE CONVERSION alt_conv1 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;                                |
-| CREATE FOREIGN DATA WRAPPER alt_fdw1                                                                      |
-| CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1                                                    |
-| CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler                                                    |
-| CREATE STATISTICS alt_stat1 ON a, b FROM alt_regress_1                                                    |
-| CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple)                                              |
-| CREATE RULE def_view_test_ins AS ON INSERT TO def_view_test DO INSTEAD INSERT INTO def_test SELECT new.*  |
-| ALTER TABLE alterlock SET (toast.autovacuum_enabled = off)                                                |
-| CREATE PUBLICATION pub1 FOR TABLE alter1.t1, ALL TABLES IN SCHEMA alter2                                  |
-
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/sql92.cn.md b/docs/document/content/features/db-compatibility/sql-parser/sql92.cn.md
deleted file mode 100644
index 2665b7e2bb8..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/sql92.cn.md
+++ /dev/null
@@ -1,10 +0,0 @@
-+++
-title = "SQL92"
-weight = 5
-+++
-
-SQL92 不支持的 SQL 清单如下：
-
-TODO
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/sql92.en.md b/docs/document/content/features/db-compatibility/sql-parser/sql92.en.md
deleted file mode 100644
index dbb86239025..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/sql92.en.md
+++ /dev/null
@@ -1,10 +0,0 @@
-+++
-title = "SQL92"
-weight = 5
-+++
-
-The unsupported SQL list for SQL92 are as follows:
-
-TODO
-
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sql92**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/sqlserver.cn.md b/docs/document/content/features/db-compatibility/sql-parser/sqlserver.cn.md
deleted file mode 100644
index 7a196c1ea70..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/sqlserver.cn.md
+++ /dev/null
@@ -1,10 +0,0 @@
-+++
-title = "SQLServer"
-weight = 3
-+++
-
-SQLServer 不支持的 SQL 清单如下：
-
-TODO
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver**
diff --git a/docs/document/content/features/db-compatibility/sql-parser/sqlserver.en.md b/docs/document/content/features/db-compatibility/sql-parser/sqlserver.en.md
deleted file mode 100644
index 0f9701c73a8..00000000000
--- a/docs/document/content/features/db-compatibility/sql-parser/sqlserver.en.md
+++ /dev/null
@@ -1,10 +0,0 @@
-+++
-title = "SQLServer"
-weight = 3
-+++
-
-The unsupported SQL list for SQLServer are as follows:
-
-TODO
-
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver**
diff --git a/docs/document/content/features/db-gateway/_index.cn.md b/docs/document/content/features/db-gateway/_index.cn.md
index f09d074ad27..3b3d0e4028c 100644
--- a/docs/document/content/features/db-gateway/_index.cn.md
+++ b/docs/document/content/features/db-gateway/_index.cn.md
@@ -5,28 +5,16 @@ weight = 5
 chapter = true
 +++
 
-## 定义
+## 背景
 
-随着数据库碎片化趋势的不可逆转，多种类型数据库的共存已渐成常态。使用一种 SQL 方言访问异构数据库的场景在不断增加。多样化的数据库的存在，使访问数据库的 SQL 方言难于标准化，工程师需要针对不同种类的数据库使用不同的方言，缺乏统一化的查询平台。
+随着数据库碎片化趋势的不可逆转，多种类型数据库的共存已渐成常态。使用一种 SQL 方言访问异构数据库的场景在不断增加。
 
-数据库网关能够将不同类型的数据库方言自动翻译为后端数据库所使用的方言，天然屏蔽用户使用底层异构数据库的复杂性。
+## 挑战
 
-## 相关概念
+多样化的数据库的存在，使访问数据库的 SQL 方言难于标准化，工程师需要针对不同种类的数据库使用不同的方言，缺乏统一化的查询平台。
 
-### SQL 方言
+将不同类型的数据库方言自动翻译为后端数据库所使用的方言，让工程师可以使用任意一种数据库方言访问所有的后端异构数据库，可以极大的降低开发和维护成本。
 
-SQL 方言也就是数据库方言，指的是某些数据库产品除了支持 SQL 之外，还会有一些自己独有的语法，这就称之为方言，不同的数据库产品，也可能会有不同的 SQL 方言。
+## 目标
 
-## 对系统的影响
-
-通过数据库网关，工程师可以使用任意一种数据库方言访问所有的后端异构数据库，可以极大的降低开发和维护成本。
-
-## 使用限制
-
-Apache ShardingSphere 的 SQL 方言翻译处于实验阶段。
-
-目前仅支持 MySQL/PostgreSQL 的方言自动翻译，工程师可以使用 MySQL 的方言和协议，访问 PostgreSQL 数据库，反之亦然。
-
-## 相关参考
-
-**源码：https://github.com/apache/shardingsphere/tree/master/shardingsphere-kernel/shardingsphere-sql-translator**
+SQL 方言的自动翻译，是 Apache ShardingSphere 数据库网关希望达成的主要目标。
diff --git a/docs/document/content/features/db-gateway/_index.en.md b/docs/document/content/features/db-gateway/_index.en.md
index e1fdf6dfc70..5ef89d58f8b 100644
--- a/docs/document/content/features/db-gateway/_index.en.md
+++ b/docs/document/content/features/db-gateway/_index.en.md
@@ -5,28 +5,16 @@ weight = 5
 chapter = true
 +++
 
-## Definition
+## Background
 
-As database fragmentation is an irreversible trend, the coexistence of multiple types of databases has been normal. An increasing number of scenarios use an SQL dialect to access heterogeneous databases. Diversified databases make it difficult to standardize SQL dialects for accessing databases. Engineers need to use different dialects for different kinds of databases, and a unified query platform is needed.
+With the trend of database fragmentation, using multiple types of databases together has become the norm. The scenario of using one SQL dialect to access all heterogeneous databases is increasing.
 
-The database gateway can automatically translate different types of database dialects into the dialects used by the back-end database, making it much easier for users to use the underlying heterogeneous database.
+## Challenges
 
-## Related Concepts
+The existence of diversified databases makes it difficult to standardize the SQL dialect accessing the database. Engineers need to use different dialects for different kinds of databases, and there is no unified query platform.
 
-### SQL Dialect
+Automatically translate different types of database dialects into the dialects used by the database, so that engineers can use any database dialect to access all heterogeneous databases, which can reduce development and maintenance cost greatly.
 
-SQL dialect means database dialect, and it indicates that some database projects have their own unique syntax in addition to SQL, which are also called dialects. Different database projects may have different SQL dialects.
+## Goal
 
-## Impact on the System
-
-Through database gateway, engineers can use any database dialect to access all back-end heterogeneous databases, which can greatly reduce development and maintenance costs.
-
-## Limitations
-
-The SQL dialect translation of Apache ShardingSphere is experimental.
-
-Currently, only MySQL/PostgreSQL dialects can be automatically translated. Engineers can use MySQL dialects and protocols to access PostgreSQL databases and vice versa.
-
-## Related References
-
-Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-kernel/shardingsphere-sql-translator
+The goal of database gateway for Apache ShardingSphere is translating SQL automatically among various databases.
diff --git a/docs/document/content/features/db-gateway/concept.cn.md b/docs/document/content/features/db-gateway/concept.cn.md
new file mode 100644
index 00000000000..16c7062937e
--- /dev/null
+++ b/docs/document/content/features/db-gateway/concept.cn.md
@@ -0,0 +1,8 @@
++++
+title = "核心概念"
+weight = 1
++++
+
+## SQL 方言
+
+SQL 方言也就是数据库方言，指的是某些数据库产品除了支持 SQL 之外，还会有一些自己独有的语法，这就称之为方言，不同的数据库产品，也可能会有不同的 SQL 方言。
diff --git a/docs/document/content/features/db-gateway/concept.en.md b/docs/document/content/features/db-gateway/concept.en.md
new file mode 100644
index 00000000000..21c33745586
--- /dev/null
+++ b/docs/document/content/features/db-gateway/concept.en.md
@@ -0,0 +1,8 @@
++++
+title = "Core Concept"
+weight = 1
++++
+
+## SQL Dialect
+
+SQL dialect means database dialect, and it indicates that some database projects have their own unique syntax in addition to SQL, which are also called dialects. Different database projects may have different SQL dialects.
diff --git a/docs/document/content/features/db-gateway/limitations.cn.md b/docs/document/content/features/db-gateway/limitations.cn.md
new file mode 100644
index 00000000000..ba0ab720f8f
--- /dev/null
+++ b/docs/document/content/features/db-gateway/limitations.cn.md
@@ -0,0 +1,8 @@
++++
+title = "使用限制"
+weight = 2
++++
+
+Apache ShardingSphere 的 SQL 方言翻译处于实验阶段。
+
+目前仅支持 MySQL/PostgreSQL 的方言自动翻译，工程师可以使用 MySQL 的方言和协议，访问 PostgreSQL 数据库，反之亦然。
diff --git a/docs/document/content/features/db-gateway/limitations.en.md b/docs/document/content/features/db-gateway/limitations.en.md
new file mode 100644
index 00000000000..61542711f6f
--- /dev/null
+++ b/docs/document/content/features/db-gateway/limitations.en.md
@@ -0,0 +1,8 @@
++++
+title = "Limitations"
+weight = 2
++++
+
+The SQL dialect translation of Apache ShardingSphere is experimental.
+
+Currently, only MySQL/PostgreSQL dialects can be automatically translated. Engineers can use MySQL dialects and protocols to access PostgreSQL databases and vice versa.
diff --git a/docs/document/content/features/encrypt/_index.cn.md b/docs/document/content/features/encrypt/_index.cn.md
index 4c38ddf5f69..cd18a51cc44 100644
--- a/docs/document/content/features/encrypt/_index.cn.md
+++ b/docs/document/content/features/encrypt/_index.cn.md
@@ -5,16 +5,27 @@ weight = 8
 chapter = true
 +++
 
-## 定义
+## 背景
 
-数据加密是指对某些敏感信息通过加密规则进行数据的变形，实现敏感隐私数据的可靠保护。
-涉及客户安全数据或者一些商业性敏感数据，如身份证号、手机号、卡号、客户号等个人信息按照相关部门规定，都需要进行数据加密。
+安全控制一直是治理的重要环节，数据加密属于安全控制的范畴。 无论对互联网公司还是传统行业来说，数据安全一直是极为重视和敏感的话题。 数据加密是指对某些敏感信息通过加密规则进行数据的变形，实现敏感隐私数据的可靠保护。 涉及客户安全数据或者一些商业性敏感数据，如身份证号、手机号、卡号、客户号等个人信息按照相关部门规定，都需要进行数据加密。
 
-## 对系统的影响
+对于数据加密的需求，在现实的业务场景中一般分为两种情况：
 
-在真实业务场景中，相关业务开发团队则往往需要针对公司安全部门需求，自行实行并维护一套加解密系统。
-而当加密场景发生改变时，自行维护的加密系统往往又面临着重构或修改风险。
-此外，对于已经上线的业务，在不修改业务逻辑和 SQL 的情况下，透明化、安全低风险地实现无缝进行加密改造也相对复杂。
+1. 新业务上线，安全部门规定需将涉及用户敏感信息，例如银行、手机号码等进行加密后存储到数据库，在使用的时候再进行解密处理。因为是全新系统，因而没有存量数据清洗问题，所以实现相对简单。
+
+1. 已上线业务，之前一直将明文存储在数据库中。相关部门突然需要对已上线业务进行加密整改。这种场景一般需要处理 3 个问题：
+
+- 历史数据需要如何进行加密处理，即洗数。
+- 如何能在不改动业务 SQL 和逻辑情况下，将新增数据进行加密处理，并存储到数据库；在使用时，再进行解密取出。
+- 如何较为安全、无缝、透明化地实现业务系统在明文与密文数据间的迁移。
+
+## 挑战
+
+在真实业务场景中，相关业务开发团队则往往需要针对公司安全部门需求，自行实行并维护一套加解密系统。 而当加密场景发生改变时，自行维护的加密系统往往又面临着重构或修改风险。 此外，对于已经上线的业务，在不修改业务逻辑和 SQL 的情况下，透明化、安全低风险地实现无缝进行加密改造也相对复杂。
+
+## 目标
+
+根据业界对加密的需求及业务改造痛点，提供了一套完整、安全、透明化、低改造成本的数据加密整合解决方案，是 Apache ShardingSphere 数据加密模块的主要设计目标。
 
 ## 相关参考
 
diff --git a/docs/document/content/features/encrypt/_index.en.md b/docs/document/content/features/encrypt/_index.en.md
index f34b4a599f7..cbfff87dc26 100644
--- a/docs/document/content/features/encrypt/_index.en.md
+++ b/docs/document/content/features/encrypt/_index.en.md
@@ -5,13 +5,27 @@ weight = 8
 chapter = true
 +++
 
-## Definition
+## Background
 
-Data encryption refers to the modification of some sensitive information through encryption rules in order to offer reliable protection to sensitive private data. Data related to customer security or some sensitive commercial data, such as ID number, mobile phone number, card number, customer number, and other personal information, shall be encrypted according to the regulations of respective regulations.
+Security control has always been a crucial link of data governance, data encryption falls into this category. For both Internet enterprises and traditional sectors, data security has always been a highly valued and sensitive topic. Data encryption refers to transforming some sensitive information through encrypt rules to safely protect the private data. Data involves client’s security or business sensibility, such as ID number, phone number, card number, client number and other personal information, requires data encryption according to relevant regulations.
 
-## Impact on the system
+The demand for data encryption is generally divided into two situations in real business scenarios:
 
-In real business scenarios, service development teams need to implement and maintain a set of encryption and decryption systems based on the requirements of the security department. When the encryption scenario changes, the self-maintained encryption system often faces the risk of reconstruction or modification. Additionally, for services that have been launched, it is relatively complicated to achieve seamless encrypted transformation in a transparent and secure manner without modifying business logic and SQL.
+1. When the new business start to launch, and the security department stipulates that the sensitive information related to users, such as banks and mobile phone numbers, should be encrypted and stored in the database, and then decrypted when used. Because it is a brand new system, there is no inventory data cleaning problem, so the implementation is relatively simple.
+
+1. For the service has been launched, and plaintext has been stored in the database before. The relevant department suddenly needs to encrypt the data from the on-line business. This scenario generally needs to deal with three issues as followings:
+
+- How to encrypt the historical data, a.k.a.s data clean.
+- How to encrypt the newly added data and store it in the database without changing the business SQL and logic; then decrypt the taken out data when use it.
+- How to securely, seamlessly and transparently migrate plaintext and ciphertext data between business systems.
+
+## Challenges
+
+In the real business scenario, the relevant business development team often needs to implement and maintain a set of encryption and decryption system according to the needs of the company’s security department. When the encryption scenario changes, the encryption system often faces the risk of reconstruction or modification. In addition, for the online business system, it is relatively complex to realize seamless encryption transformation with transparency, security and low risk without modifying the business logic and SQL.
+
+## Goal
+
+Provides a security and transparent data encryption solution, which is the main design goal of Apache ShardingSphere data encryption module.
 
 ## Related References
 
diff --git a/docs/document/content/features/ha/_index.cn.md b/docs/document/content/features/ha/_index.cn.md
index 41bf941598a..6c8954f3d41 100644
--- a/docs/document/content/features/ha/_index.cn.md
+++ b/docs/document/content/features/ha/_index.cn.md
@@ -5,22 +5,24 @@ weight = 4
 chapter = true
 +++
 
-## 定义
+## 背景
 
 高可用是现代系统的最基本诉求，作为系统基石的数据库，对于高可用的要求也是必不可少的。
 
-在存算分离的分布式数据库体系中，存储节点和计算节点的高可用方案是不同的。
-对于有状态的存储节点来说，需要其自身具备数据一致性同步、探活、主节点选举等能力；
-对于无状态的计算节点来说，需要感知存储节点的变化的同时，还需要独立架设负载均衡器，并具备服务发现和请求分发的能力。
+在存算分离的分布式数据库体系中，存储节点和计算节点的高可用方案是不同的。 对于有状态的存储节点来说，需要其自身具备数据一致性同步、探活、主节点选举等能力； 对于无状态的计算节点来说，需要感知存储节点的变化的同时，还需要独立架设负载均衡器，并具备服务发现和请求分发的能力。
 
-尽可能的保证 7X24 小时不间断的数据库服务，是 Apache ShardingSphere 高可用模块的主要设计目标。
+Apache ShardingSphere 自身提供计算节点，并通过数据库作为存储节点。 因此，它采用的高可用方案是利用数据库自身的高可用方案做存储节点高可用，并自动识别其变化。
 
-## 原理介绍
+## 挑战
 
-Apache ShardingSphere 提供的高可用方案，允许用户进行二次定制开发及实现扩展，主要分为四个步骤 : 前置检查、动态发现主库、动态发现从库、同步配置。
+Apache ShardingSphere 需要自动感知多样化的存储节点高可用方案的同时，也能够动态集成对读写分离方案，是实现的主要挑战。
 
 ![概述](https://shardingsphere.apache.org/document/current/img/discovery/overview.cn.png)
 
+## 目标
+
+尽可能的保证 7*24 小时不间断的数据库服务，是 Apache ShardingSphere 高可用模块的主要设计目标。
+
 ## 相关参考
 
 [Java API](/cn/user-manual/shardingsphere-jdbc/java-api/rules/ha)\
diff --git a/docs/document/content/features/ha/_index.en.md b/docs/document/content/features/ha/_index.en.md
index 8c601a32115..002c6303a88 100644
--- a/docs/document/content/features/ha/_index.en.md
+++ b/docs/document/content/features/ha/_index.en.md
@@ -5,21 +5,24 @@ weight = 4
 chapter = true
 +++
 
-## Definition
+## Background
 
-High availability is the most basic requirement for modern systems. It is also an essential element of the database, which in turn is the cornerstone of any system.
-In a distributed database system, storage nodes and compute nodes are different in terms of their high availability schemes.
-Stateful storage nodes are required to have capabilities such as data consistency and synchronization, liveness probe, and primary-node election.
-Stateless compute nodes need to sense storage nodes' changes, setup load balancers independently, and enable service discovery and request distribution.
-Apache ShardingSphere' high availability module (HA) is mainly designed to ensure a 24/7 database service as much as possible.
+High availability is the most basic requirement of modern systems. As the cornerstone of the system, the database is also essential for high availability.
 
-## How it works
+In the distributed database system with storage-compute splitting, the high availability solution of storage node and compute node are different. The stateful storage nodes need to pay attention to data consistency, health detection, primary node election and so on; The stateless compute nodes need to detect the changes of storage nodes, they also need to set up an independent load balancer and have the ability of service discovery and request distribution.
 
-The high availability solution provided by Apache ShardingSphere allows you to carry out secondary custom development and achieve expansion, 
-which is mainly divided into four steps: pre-check, primary database dynamic discovery, secondary database dynamic discovery and configuration synchronization.
+Apache ShardingSphere provides compute nodes and reuse database as storage nodes. Therefore, the high availability solution it adopts is to use the high availability solution of the database itself as the high availability of the storage node, and detect the changes automatically.
+
+## Challenges
+
+Apache ShardingSphere needs to detect high availability solution of diversified storage nodes automatically, and can also integrate the readwrite splitting dynamically, which is the main challenge of implementation.
 
 ![Overview](https://shardingsphere.apache.org/document/current/img/discovery/overview.en.png)
 
+## Goal
+
+The main goal of Apache ShardingSphere high availability module which is ensuring 7 * 24-hour uninterrupted database service as much as possible.
+
 ## Related References
 
 [Java API](/en/user-manual/shardingsphere-jdbc/java-api/rules/ha)\
diff --git a/docs/document/content/features/management/_index.cn.md b/docs/document/content/features/management/_index.cn.md
index 154da7630cc..513ba18a5a8 100644
--- a/docs/document/content/features/management/_index.cn.md
+++ b/docs/document/content/features/management/_index.cn.md
@@ -1,6 +1,6 @@
 +++
 pre = "<b>3.6. </b>"
-title = "集群管控"
+title = "流量治理"
 weight = 6
 chapter = true
 +++
@@ -20,4 +20,4 @@ chapter = true
 
 ## 目标
 
-**实现从数据库到计算节点打通的一体化管理能力，在故障中为组件提供细粒度的控制能力，并尽可能的提供自愈的可能，是 Apache ShardingSphere 管控模块的主要设计目标。**
+实现从数据库到计算节点打通的一体化管理能力，在故障中为组件提供细粒度的控制能力，并尽可能的提供自愈的可能，是 Apache ShardingSphere 管控模块的主要设计目标。
diff --git a/docs/document/content/features/management/_index.en.md b/docs/document/content/features/management/_index.en.md
index 3cabbe28fcf..4ed136f33e3 100644
--- a/docs/document/content/features/management/_index.en.md
+++ b/docs/document/content/features/management/_index.en.md
@@ -1,6 +1,6 @@
 +++
 pre = "<b>3.6. </b>"
-title = "Cluster Management"
+title = "Traffic Governance"
 weight = 6
 chapter = true
 +++
diff --git a/docs/document/content/features/observability/_index.cn.md b/docs/document/content/features/observability/_index.cn.md
index db25625234d..89ec5a857b3 100644
--- a/docs/document/content/features/observability/_index.cn.md
+++ b/docs/document/content/features/observability/_index.cn.md
@@ -4,11 +4,39 @@ title = "可观察性"
 weight = 10
 +++
 
-## 定义
+## 背景
 
-如何观测集群的运行状态，使运维人员可以快速掌握当前系统现状，并进行进一步的维护工作，是分布式系统的全新挑战。
-登录到具体服务器的点对点运维方式，无法适用于面向大量分布式服务器的场景。
-通过对可系统观察性数据的遥测是分布式系统推荐的运维方式。
+如何观测集群的运行状态，使运维人员可以快速掌握当前系统现状，并进行进一步的维护工作，是分布式系统的全新挑战。 登录到具体服务器的点对点运维方式，无法适用于面向大量分布式服务器的场景。 通过对可系统观察性数据的遥测是分布式系统推荐的运维方式。 Tracing（链路跟踪）、 Metrics（指标监控）和 Logging （日志）是系统运行状况的可观察性数据重要的获取手段。
+
+APM（应用性能监控） 是通过对系统可观察性数据进行采集、存储和分析，进行系统的性能监控与诊断，主要功能包括性能指标监控、调用链分析，应用拓扑图等。
+
+Apache ShardingSphere 并不负责如何采集、存储以及展示应用性能监控的相关数据，而是为应用监控系统提供必要的指标数据。 换句话说，Apache ShardingSphere 仅负责产生具有价值的数据，并通过标准协议或插件化的方式递交给相关系统。
+
+Tracing 用于获取 SQL 解析与 SQL 执行的链路跟踪信息。Apache ShardingSphere 默认提供了对 SkyWalking，Zipkin，Jaeger 和 OpenTelemetry 的支持，也支持用户通过插件化的方式开发自定义的 Tracing 组件。
+
+- 使用 Zipkin 和 Jaeger
+通过在agent配置文件中开启对应的插件，并配置好 Zipkin 或者 Jaeger 服务器信息即可。
+
+- 使用 OpenTelemetry
+OpenTelemetry 在 2019 年由 OpenTracing 和 OpenCencus 合并而来。 使用这种方式，只需要在 agent 配置文件中，根据 OpenTelemetry SDK 自动配置说明 ，填写合适的配置即可。
+
+- 使用 SkyWalking
+需要在 agent 配置中配置启用对应插件，并且需要同时配置使用 SkyWalking 的 apm-toolkit 工具。
+
+- 使用 SkyWalking 的内置自动探针
+Apache ShardingSphere 团队与 Apache SkyWalking 团队共同合作，在 SkyWalking 中实现了 Apache ShardingSphere 自动探针，可以将相关的应用性能数据自动发送到 SkyWalking 中。注意这种方式的自动探针不能与 Apache ShardingSphere 插件探针同时使用。
+
+Metrics 则用于收集和展示整个集群的统计指标。Apache ShardingSphere 默认提供了对 Prometheus 的支持。
+
+![概述](https://shardingsphere.apache.org/document/current/img/apm/overview_v3.png)
+
+## 挑战
+
+Tracing 和 Metrics 需要通过埋点来收集系统信息。 大量的埋点使项目核心代码支离破碎，难于维护，且不易定制化统计指标。
+
+## 目标
+
+提供尽量多的性能和统计指标，并隔离核心代码和埋点代码，是 Apache ShardingSphere 可观察性模块的设计目标。
 
 ## 相关参考
 
diff --git a/docs/document/content/features/observability/_index.en.md b/docs/document/content/features/observability/_index.en.md
index 7e087e96a1f..733a0a133b3 100644
--- a/docs/document/content/features/observability/_index.en.md
+++ b/docs/document/content/features/observability/_index.en.md
@@ -4,13 +4,37 @@ title = "Observability"
 weight = 10
 +++
 
-## Definition
+## Background
 
-Observing a cluster's operation status in order to quickly grasp the system's current status and efficiently be able to carry out maintenance work, represents a new challenge for distributed systems.
+In order to grasp the distributed system status, observe running state of the cluster is a new challenge. The point-to-point operation mode of logging in to a specific server cannot suite to large number of distributed servers. Telemetry through observable data is the recommended operation and maintenance mode for them. Tracking, metrics and logging are important ways to obtain observable data of system status.
 
-The point-to-point operation and maintenance method of logging into a specific server cannot be applied to scenarios facing a large number of distributed servers.
+APM (application performance monitoring) is to monitor and diagnose the performance of the system by collecting, storing and analyzing the observable data of the system. Its main functions include performance index monitoring, call stack analysis, service topology, etc.
 
-Telemetry of system-observable data is the recommended way of operating and maintaining distributed systems.
+Apache ShardingSphere is not responsible for gathering, storing and demonstrating APM data, but provides the necessary information for the APM. In other words, Apache ShardingSphere is only responsible for generating valuable data and submitting it to relevant systems through standard protocols or plug-ins. Tracing is to obtain the tracking information of SQL parsing and SQL execution. Apache ShardingSphere provides support for SkyWalking, Zipkin, Jaeger and OpenTelemetry by default. It also supports users to develop customized components through plug-in.
+
+- Use Zipkin or Jaeger
+Just provides correct Zipkin or Jaeger server information in the agent configuration file.
+
+- Use OpenTelemetry
+OpenTelemetry was merged by OpenTracing and OpenCencus in 2019. In this way, you only need to fill in the appropriate configuration in the agent configuration file according to OpenTelemetry SDK Autoconfigure Guide.
+
+- Use SkyWalking
+Enable the SkyWalking plug-in in configuration file and need to configure the SkyWalking apm-toolkit.
+
+- Use SkyWalking’s automatic monitor probe
+Cooperating with [Apache SkyWalking](https://skywalking.apache.org/) team, Apache ShardingSphere team has realized ShardingSphere automatic monitor probe to automatically send performance data to SkyWalking. Note that automatic probe in this way cannot be used together with Apache ShardingSphere plug-in probe.
+
+Metrics used to collect and display statistical indicator of cluster. Apache ShardingSphere supports Prometheus by default.
+
+![Overview](https://shardingsphere.apache.org/document/current/img/apm/overview_v3.png)
+
+## Challenges
+
+Tracing and metrics need to collect system information through event tracking. Lots of events tracking make kernel code mess, difficult to maintain, and difficult to customize extend.
+
+## Goal
+
+The goal of Apache ShardingSphere observability module is providing as many performance and statistical indicators as possible and isolating kernel code and embedded code.
 
 ## Related References
 
diff --git a/docs/document/content/features/readwrite-splitting/_index.cn.md b/docs/document/content/features/readwrite-splitting/_index.cn.md
index 3a4f4235460..c91ca869d6e 100644
--- a/docs/document/content/features/readwrite-splitting/_index.cn.md
+++ b/docs/document/content/features/readwrite-splitting/_index.cn.md
@@ -5,20 +5,27 @@ weight = 3
 chapter = true
 +++
 
-## 定义
+## 背景
 
-读写分离也就是将数据库拆分为主库和从库，即主库负责处理事务性的增删改操作，从库负责处理查询操作的数据库架构。
+面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。 对于同一时刻有大量并发读操作和较少写操作类型的应用系统来说，将数据库拆分为主库和从库，主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。
 
-## 对系统的影响
+通过一主多从的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。 使用多主多从的方式，不但能够提升系统的吞吐量，还能够提升系统的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。
 
-用户的系统中可能存在着复杂的主从关系数据库集群，因此应用程序需要接入多个数据源，这种方式就增加了系统维护的成本和业务开发的难度。ShardingSphere 通过读写分离功能，可以让用户像使用一个数据库一样去使用数据库集群，透明化读写分离带来的影响。
+与将数据根据分片键打散至各个数据节点的水平分片不同，读写分离则是根据 SQL 语义的分析，将读操作和写操作分别路由至主库与从库。
 
-## 原理介绍
+![背景](https://shardingsphere.apache.org/document/current/img/readwrite-splitting/background.png)
 
-ShardingSphere 的读写分离主要依赖内核的相关功能。包括解析引擎和路由引擎。解析引擎将用户的 SQL 转化为 ShardingSphere 可以识别的 Statement 信息，路由引擎根据 SQL 的读写类型以及事务的状态来做 SQL 的路由。
-在从库的路由中支持多种负载均衡算法，包括轮询算法、随机访问算法、权重访问算法等，用户也可以依据 SPI 机制自行扩展所需算法。如下图所示，ShardingSphere 识别到读操作和写操作，分别会路由至不同的数据库实例。
+读写分离的数据节点中的数据内容是一致的，而水平分片的每个数据节点的数据内容却并不相同。将水平分片和读写分离联合使用，能够更加有效的提升系统性能。
 
-![原理介绍](https://shardingsphere.apache.org/document/current/img/readwrite-splitting/background.png)
+## 挑战
+
+读写分离虽然可以提升系统的吞吐量和可用性，但同时也带来了数据不一致的问题。 这包括多个主库之间的数据一致性，以及主库与从库之间的数据一致性的问题。 并且，读写分离也带来了与数据分片同样的问题，它同样会使得应用开发和运维人员对数据库的操作和运维变得更加复杂。 下图展现了将数据分片与读写分离一同使用时，应用程序与数据库集群之间的复杂拓扑关系。
+
+![挑战](https://shardingsphere.apache.org/document/current/img/readwrite-splitting/challenges.png)
+
+## 目标
+
+透明化读写分离所带来的影响，让使用方尽量像使用一个数据库一样使用主从数据库集群，是 Apache ShardingSphere 读写分离模块的主要设计目标。
 
 ## 相关参考
 
diff --git a/docs/document/content/features/readwrite-splitting/_index.en.md b/docs/document/content/features/readwrite-splitting/_index.en.md
index 67822acca77..f26f213be47 100644
--- a/docs/document/content/features/readwrite-splitting/_index.en.md
+++ b/docs/document/content/features/readwrite-splitting/_index.en.md
@@ -5,24 +5,27 @@ weight = 3
 chapter = true
 +++
 
-## Definition
+## Background
 
-Read/write splitting is to split the database into primary and secondary databases. The primary database is responsible for handling transactional operations including additions, deletions and changes.
-And the secondary database is responsible for the query operation of database architecture.
+Database throughput has faced the bottleneck with increasing TPS. For the application with massive concurrence read but less write in the same time, we can divide the database into a primary database and a replica database. The primary database is responsible for the insert, delete and update of transactions, while the replica database is responsible for queries. It can significantly improve the query performance of the whole system by effectively avoiding row locks.
 
-## Impact on the System
+One primary database with multiple replica databases can further enhance processing capacity by distributing queries evenly into multiple data replicas. Multiple primary databases with multiple replica databases can enhance not only throughput but also availability. Therefore, the system can still run normally, even though any database is down or physical disk destroyed.
 
-There may be complex primary-secondary relational database clusters in users' systems, so applications need to access multiple data sources, which increases the cost of system maintenance and the
-difficulty of business development. ShardingSphere enables users to use database clusters like a database through read/write splitting function, and the impact of read/write splitting will be transparent to users.
+Different from the sharding that separates data to all nodes according to sharding keys, readwrite-splitting routes read and write separately to primary database and replica databases according SQL analysis.
 
-## How it works
+![background](https://shardingsphere.apache.org/document/current/img/readwrite-splitting/background.png)
 
-ShardingSphere's read/write splitting mainly relies on the related functions of its kernel, including a parsing engine and a routing engine.
-The parsing engine converts the user's SQL into Statement information that can be identified by ShardingSphere, and the routing engine performs SQL routing according to the read/write type of SQL and transactional status.
-The routing from the secondary database supports a variety of load balancing algorithms, including polling algorithm, random access algorithm, weight access algorithm, etc.
-Users can also expand the required algorithm according to the SPI mechanism. As shown in the figure below, ShardingSphere identifies read and write operations and routes them to different database instances respectively.
+Data in readwrite-splitting nodes are consistent, whereas that in shards is not. The combined use of sharding and readwrite-splitting will effectively enhance the system performance.
 
-![implementation](https://shardingsphere.apache.org/document/current/img/readwrite-splitting/background.png)
+## Challenges
+
+Though readwrite-splitting can enhance system throughput and availability, it also brings inconsistent data, including that among multiple primary databases and among primary databases and replica databases. What’s more, it also brings the same problem as data sharding, complicating developer and operator’s maintenance and operation. The following diagram has shown the complex topological relations between applications and database groups when sharding used together with readwrite-splitting.
+
+![chanllenges](https://shardingsphere.apache.org/document/current/img/readwrite-splitting/chanllenges.png)
+
+## Goal
+
+The main design goal of readwrite-splitting of Apache ShardingSphere is to try to reduce the influence of readwrite-splitting, in order to let users use primary-replica database group like one database.
 
 ## Related References
 
diff --git a/docs/document/content/features/scaling/_index.en.md b/docs/document/content/features/scaling/_index.en.md
index 6e3d231df2e..748525bd447 100644
--- a/docs/document/content/features/scaling/_index.en.md
+++ b/docs/document/content/features/scaling/_index.en.md
@@ -11,5 +11,5 @@ Data migration refers to the preparation of data extraction from one storage clu
 
 ## Related References
 
-[Configurations of data migration ](/en/user-manual/shardingsphere-proxy/scaling/)
-[Reference of data migration](/en/reference/scaling/)
\ No newline at end of file
+- [Configurations of data migration ](/en/user-manual/shardingsphere-proxy/scaling/)
+- [Reference of data migration](/en/reference/scaling/)
\ No newline at end of file
diff --git a/docs/document/content/features/shadow/_index.cn.md b/docs/document/content/features/shadow/_index.cn.md
index 8f42cad3779..d52070216e7 100644
--- a/docs/document/content/features/shadow/_index.cn.md
+++ b/docs/document/content/features/shadow/_index.cn.md
@@ -4,55 +4,21 @@ title = "影子库"
 weight = 9
 +++
 
-## 定义
-Apache ShardingSphere 全链路在线压测场景下，在数据库层面对于压测数据治理的解决方案。
-
-## 相关概念
-
-### 生产库
-生产环境使用的数据库。
-
-### 影子库
-压测数据隔离的影子数据库，与生产数据库应当使用相同的配置。
-
-### 影子算法
-影子算法和业务实现紧密相关，目前提供 2 种类型影子算法。
-
-- 基于列的影子算法
-  通过识别 SQL 中的数据，匹配路由至影子库的场景。
-  适用于由压测数据名单驱动的压测场景。
-  
-- 基于 Hint 的影子算法
-  通过识别 SQL 中的注释，匹配路由至影子库的场景。
-  适用于由上游系统透传标识驱动的压测场景。
-  
-## 使用限制
-
-### 基于 Hint 的影子算法
-* 无。
-
-### 基于列的影子算法
-* 不支持 DDL；
-* 不支持范围、分组和子查询，如：BETWEEN、GROUP BY ... HAVING 等。
-  SQL 支持列表：
-  - INSERT
-  
-  |  *SQL*  |  *是否支持*  |
-  | ------- | ------------ |
-  | INSERT INTO table (column,...) VALUES (value,...)   |  支持  |
-  | INSERT INTO table (column,...) VALUES (value,...),(value,...),...   |  支持   |
-  | INSERT INTO table (column,...) SELECT column1 from table1 where column1 = value1 |  不支持  |
-  
-  - SELECT/UPDATE/DELETE
-  
-  |  *条件类型*  |  *SQL*   |  *是否支持*  |
-  | ------------ | -------- | ----------- |
-  | =  | SELECT/UPDATE/DELETE ... WHERE column = value   | 支持 |
-  | LIKE/NOT LIKE | SELECT/UPDATE/DELETE ... WHERE column LIKE/NOT LIKE value  | 支持  |                        
-  | IN/NOT IN | SELECT/UPDATE/DELETE ... WHERE column IN/NOT IN (value1,value2,...)  | 支持 |
-  | BETWEEN | SELECT/UPDATE/DELETE ... WHERE column BETWEEN value1 AND value2  | 不支持  |
-  | GROUP BY ... HAVING... | SELECT/UPDATE/DELETE ... WHERE ... GROUP BY column HAVING column > value  | 不支持     |
-  | 子查询  | SELECT/UPDATE/DELETE ... WHERE column = (SELECT column FROM table WHERE column = value) | 不支持  |
+## 背景
+
+在基于微服务的分布式应用架构下，业务需要多个服务是通过一系列的服务、中间件的调用来完成，所以单个服务的压力测试已无法代表真实场景。 在测试环境中，如果重新搭建一整套与生产环境类似的压测环境，成本过高，并且往往无法模拟线上环境的复杂度以及流量。 因此，业内通常选择全链路压测的方式，即在生产环境进行压测，这样所获得的测试结果能够准确地反应系统真实容量和性能水平。
+
+## 挑战
+
+全链路压测是一项复杂而庞大的工作。 需要各个微服务、中间件之间配合与调整，以应对不同流量以及压测标识的透传。 通常会搭建一整套压测平台以适用不同测试计划。 在数据库层面需要做好数据隔离，为了保证生产数据的可靠性与完整性，需要将压测产生的数据路由到压测环境数据库，防止压测数据对生产数据库中真实数据造成污染。 这就要求业务应用在执行 SQL 前，能够根据透传的压测标识，做好数据分类，将相应的 SQL 路由到与之对应的数据源。
+
+## 目标
+
+Apache ShardingSphere 关注于全链路压测场景下，数据库层面的解决方案。 将压测数据自动路由至用户指定的数据库，是 Apache ShardingSphere 影子库模块的主要设计目标。
+
+## 应用场景
+
+在基于微服务的分布式应用架构下，为了提升系统压力测试的准确性，降低测试成本。通常选择在生产环境进行压力测试。测试中风险也会大大提高。通过 ShardingSphere 影子库功能，结合影子算法灵活的配置。可以解决数据污染，数据库性能等问题，满足复杂业务场景的在线压力测试需求。
 
 ## 相关参考
 
diff --git a/docs/document/content/features/shadow/_index.en.md b/docs/document/content/features/shadow/_index.en.md
index ed7123813e9..70ccc3ab428 100644
--- a/docs/document/content/features/shadow/_index.en.md
+++ b/docs/document/content/features/shadow/_index.en.md
@@ -4,9 +4,31 @@ title = "Shadow"
 weight = 9
 +++
 
-## Definition
+## Background
 
-Solution for stress testing data governance at the database level, under the online full link stress testing scenario of Apache ShardingSphere.
+Under the distributed application architecture based on microservices, business requires multiple services to be completed through a series of services and middleware calls. The pressure testing of a single service can no longer reflect the real scenario.
+
+In the test environment, the cost of rebuild complete set of pressure test environment similar to the production environment is too high. It is usually impossible to simulate the complexity and data of the production environment.
+
+So, it is the better way to use the production environment for pressure test. The test results obtained real capacity and performance of the system accurately.
+
+## Challenges
+
+pressure testing on production environment is a complex and huge task. Coordination and adjustments between microservices and middlewares required to cope with the transparent transmission of different flow rates and pressure test tags. Usually we will build a complete set of pressure testing platform for different test plans.
+
+Data isolation have to be done at the database-level, in order to ensure the reliability and integrity of the production data, data generated by pressure testing routed to test database. Prevent test data from polluting the real data in the production database.
+
+This requires business applications to perform data classification based on the transparently transmitted pressure test identification before executing SQL, and route the corresponding SQL to the corresponding data source.
+
+## Goal
+
+Apache ShardingSphere focuses on data solutions in pressure testing on production environment.
+
+The main goal of the Apache ShardingSphere shadow Database module is routing pressure testing data to user defined database automatically.
+
+## Application Scenario
+
+In order to improve the accuracy of stress testing and reduce the testing cost under the distributed application architecture based on microservices, stress testing is usually carried out in production environments, which will notably increase testing risks. However, the ShardingSphere shadow DB function, combined with the flexible configuration of the shadow algorithm, can address data pollution, improve database performance, and meet the requirements of online stress testing in complex business scenarios.
 
 ## Related References
 
diff --git a/docs/document/content/features/sharding/_index.cn.md b/docs/document/content/features/sharding/_index.cn.md
index 0b88a2289e2..aeaca20fe26 100644
--- a/docs/document/content/features/sharding/_index.cn.md
+++ b/docs/document/content/features/sharding/_index.cn.md
@@ -5,7 +5,17 @@ weight = 1
 chapter = true
 +++
 
-## 定义
+## 背景
+
+传统的将数据集中存储至单一节点的解决方案，在性能、可用性和运维成本这三方面已经难于满足海量数据的场景。
+
+从性能方面来说，由于关系型数据库大多采用 B+ 树类型的索引，在数据量超过阈值的情况下，索引深度的增加也将使得磁盘访问的 IO 次数增加，进而导致查询性能的下降； 同时，高并发访问请求也使得集中式数据库成为系统的最大瓶颈。
+
+从可用性的方面来讲，服务化的无状态性，能够达到较小成本的随意扩容，这必然导致系统的最终压力都落在数据库之上。 而单一的数据节点，或者简单的主从架构，已经越来越难以承担。数据库的可用性，已成为整个系统的关键。
+
+从运维成本方面考虑，当一个数据库实例中的数据达到阈值以上，对于 DBA 的运维压力就会增大。 数据备份和恢复的时间成本都将随着数据量的大小而愈发不可控。一般来讲，单一数据库实例的数据的阈值在 1TB 之内，是比较合理的范围。
+
+在传统的关系型数据库无法满足互联网场景需要的情况下，将数据存储至原生支持分布式的 NoSQL 的尝试越来越多。 但 NoSQL 对 SQL 的不兼容性以及生态圈的不完善，使得它们在与关系型数据库的博弈中始终无法完成致命一击，而关系型数据库的地位却依然不可撼动。
 
 数据分片指按照某个维度将存放在单一数据库中的数据分散地存放至多个数据库或表中以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行分库和分表。分库和分表均可以有效的避免由数据量超过可承受阈值而产生的查询瓶颈。 除此之外，分库还能够用于有效的分散对数据库单点的访问量；分表虽然无法缓解数据库压力，但却能够提供尽量将分布式事务转化为本地事务的可能，一旦涉及到跨库的更新操作，分布式事务往往会使问题变得复杂。 使用多主多从的分片方式，可以有效的避免数据单点，从而提升数据架构的可用性。
 
@@ -32,7 +42,7 @@ chapter = true
 
 水平分片从理论上突破了单机数据量处理的瓶颈，并且扩展相对自由，是数据分片的标准解决方案。
 
-## 对系统的影响
+## 挑战
 
 虽然数据分片解决了性能、可用性以及单点备份恢复等问题，但分布式的架构在获得了收益的同时，也引入了新的问题。
 
@@ -42,6 +52,20 @@ chapter = true
 
 跨库事务也是分布式的数据库集群要面对的棘手事情。 合理采用分表，可以在降低单表数据量的情况下，尽量使用本地事务，善于使用同库不同表可有效避免分布式事务带来的麻烦。 在不能避免跨库事务的场景，有些业务仍然需要保持事务的一致性。 而基于 XA 的分布式事务由于在并发度高的场景中性能无法满足需要，并未被互联网巨头大规模使用，他们大多采用最终一致性的柔性事务代替强一致事务。
 
+## 目标
+
+尽量透明化分库分表所带来的影响，让使用方尽量像使用一个数据库一样使用水平分片之后的数据库集群，是 Apache ShardingSphere 数据分片模块的主要设计目标。
+
+## 应用场景
+
+### 海量数据高并发的 OLTP 场景
+
+由于关系型数据库大多采用 B+ 树类型的索引，在数据量超过阈值的情况下，索引深度的增加也将使得磁盘访问的 IO 次数增加，进而导致查询性能的下降。通过 ShardingSphere 数据分片，按照某个业务维度，将存放在单一数据库中的数据分散地存放至多个数据库或表中，可以达到提升性能的效果。通过使用 ShardingSphere-JDBC 接入端，可以满足高并发的 OLTP 场景下的性能要求。
+
+### 海量数据实时分析 OLAP 场景
+
+在传统的数据库架构中，如果用户想要进行数据分析，需要先使用 ETL 工具，将数据同步至数据平台中，然后再进行数据分析，使用 ETL 工具会导致数据分析的实效性大打折扣。ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于实时分析的 OLAP 场景。
+
 ## 相关参考
 
 - [数据分片的配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/)
diff --git a/docs/document/content/features/sharding/_index.en.md b/docs/document/content/features/sharding/_index.en.md
index b74ea2c5d1d..a403f42c758 100644
--- a/docs/document/content/features/sharding/_index.en.md
+++ b/docs/document/content/features/sharding/_index.en.md
@@ -5,15 +5,21 @@ weight = 1
 chapter = true
 +++
 
-## Definition
+## Background
 
-Data sharding refers to distributing the data stored in a single database to be stored in multiple databases or tables on a certain dimension to improve and extend limits of performance and improve availability. 
+The traditional solution that stores all the data in one concentrated node has hardly satisfied the requirement of massive data scenario in three aspects, performance, availability and operation cost.
 
-An effective way of data fragmentation is to splitting the relational database into libraries and tables. Both database and table splitting can effectively avoid query bottlenecks caused by data flow exceeding the determined threshold. 
+In performance, the relational database mostly uses B+ tree index. When the data amount exceeds the threshold, deeper index will increase the disk IO access number, and thereby, weaken the performance of query. In the same time, high concurrency requests also make the centralized database to be the greatest limitation of the system.
 
-Library splitting can also be used to effectively distribute access to a single point of the database. Although table splitting cannot relieve the pressure on the database, it can convert distributed transactions into local transactions as much as possible, which often compounds the problem once cross-library update operations are involved. The use of multi-primary multi-secondary sharding can effectively avoid too much pressure on a single data point, improving the availability of data architecture.
+In availability, capacity can be expanded at a relatively low cost and any extent with stateless service, which can make all the pressure, at last, fall on the database. But the single data node or simple primary-replica structure has been harder and harder to take these pressures. Therefore, database availability has become the key to the whole system.
 
-By library and table data sharding, the data volume of each table can be kept below the threshold and traffic can be channeled to cope with high access volume, which is an effective means to cope with high concurrency and massive data. The data sharding method consists of vertical sharding and horizontal sharding.
+From the aspect of operation costs, when the data in a database instance has reached above the threshold, DBA’s operation pressure will also increase. The time cost of data backup and data recovery will be more uncontrollable with increasing amount of data. Generally, it is a relatively reasonable range for the data in single database case to be within 1TB.
+
+Under the circumstance that traditional relational databases cannot satisfy the requirement of the Internet, there are more and more attempts to store the data in native distributed NoSQL. But its incompatibility with SQL and imperfection in ecosystem block it from defeating the relational database in the competition, so the relational database still holds an unshakable position.
+
+Sharding refers to splitting the data in one database and storing them in multiple tables and databases according to some certain standard, so that the performance and availability can be improved. Both methods can effectively avoid the query limitation caused by data exceeding affordable threshold. What’s more, database sharding can also effectively disperse TPS. Table sharding, though cannot ease the database pressure, can provide possibilities to transfer distributed transactions to local transactions, since cross-database upgrades are once involved, distributed transactions can turn pretty tricky sometimes. The use of multiple primary-replica sharding method can effectively avoid the data concentrating on one node and increase the architecture availability.
+
+Splitting data through database sharding and table sharding is an effective method to deal with high TPS and mass amount data system, because it can keep the data amount lower than the threshold and evacuate the traffic. Sharding method can be divided into vertical sharding and horizontal sharding.
 
 ### Vertical Sharding
 
@@ -31,7 +37,7 @@ Horizontal sharding is also called transverse sharding. Compared with the catego
 
 Theoretically, horizontal sharding has overcome the limitation of data processing volume in single machine and can be extended relatively freely, so it can be taken as a standard solution to database sharding and table sharding.
 
-## Impact on the system
+## Challenges
 
 Although data sharding solves problems regarding performance, availability, and backup recovery of single points, the distributed architecture has introduced new problems while gaining benefits.
 
@@ -41,6 +47,22 @@ Another challenge is that SQL that works correctly in one single-node database d
 
 Cross-library transactions are also tricky for a distributed database cluster. Reasonable use of table splitting can minimize the use of local transactions while reducing the amount of data in a single table, and appropriate use of different tables in the same database can effectively avoid the trouble caused by distributed transactions. In scenarios where cross-library transactions cannot be avoided, some businesses might still be in the need to maintain transaction consistency. The XA-based distributed transactions are not used by Internet giants on a large scale because their performance cannot meet the needs in scenarios with high concurrency, and most of them use flexible transactions with ultimate consistency instead of strong consistent transactions.
 
+## Goal
+
+The main design goal of the data sharding modular of Apache ShardingSphere is to try to reduce the influence of sharding, in order to let users use horizontal sharding database group like one database.
+
+## Application Scenarios
+
+### Mass data high concurrency in OLTP scenarios
+
+Most relational databases use B+ tree indexes, but when the amount of data exceeds the threshold, the increase in index depth will also increase the number of I/O in accessing the disk, which will lower the query performance. 
+Data sharding through ShardingSphere enables data stored in a single database to be dispersed into multiple databases or tables according to a business dimension, which improves performance. The ShardingSphere-JDBC access port can meet the performance requirements of high concurrency in OLTP scenarios.
+
+### Mass data real-time analysis in OLAP scenarios
+
+In traditional database architecture, if users want to analyze data, they need to use ETL tools first, synchronize the data to the data platform, and then perform data analysis. 
+However, ETL tools will greatly reduce the effectiveness of data analysis. ShardingSphere-Proxy provides support for static entry and heterogeneous languages, independent of application deployment, which is suitable for real-time analysis in OLAP scenarios.
+
 ## Related References
 
 - User Guide: [sharding](https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/)
diff --git a/docs/document/content/features/sharding/appendix.cn.md b/docs/document/content/features/sharding/appendix.cn.md
new file mode 100644
index 00000000000..c5e9daf0138
--- /dev/null
+++ b/docs/document/content/features/sharding/appendix.cn.md
@@ -0,0 +1,12 @@
++++
+title = "附录"
+weight = 3
++++
+
+不支持的 SQL：
+
+- CASE WHEN 中包含子查询
+- CASE WHEN 中使用逻辑表名（请使用表别名）
+- INSERT INTO tbl_name (col1, col2, …) SELECT * FROM tbl_name WHERE col3 = ?（SELECT 子句不支持 * 和内置分布式主键生成器）
+- REPLACE INTO tbl_name (col1, col2, …) SELECT * FROM tbl_name WHERE col3 = ?（SELECT 子句不支持 * 和内置分布式主键生成器）
+- SELECT MAX(tbl_name.col1) FROM tbl_name（查询列是函数表达式时，查询列前不能使用表名，可以使用表别名）
diff --git a/docs/document/content/features/sharding/appendix.en.md b/docs/document/content/features/sharding/appendix.en.md
new file mode 100644
index 00000000000..a7b43971d3d
--- /dev/null
+++ b/docs/document/content/features/sharding/appendix.en.md
@@ -0,0 +1,12 @@
++++
+title = "Appendix with SQL operator"
+weight = 3
++++
+
+Unsupported SQL:
+
+- CASE WHEN contains sub-query
+- Logical table names are used in CASE WHEN( Please use an alias)
+- INSERT INTO tbl_name (col1, col2, …) SELECT * FROM tbl_name WHERE col3 = ?（The SELECT clause does not support * and the built-in distributed primary key generator）
+- REPLACE INTO tbl_name (col1, col2, …) SELECT * FROM tbl_name WHERE col3 = ?（The SELECT clause does not support * and the built-in distributed primary key generator）
+- SELECT MAX(tbl_name.col1) FROM tbl_name (If the query column is a function expression, use the table alias instead of the table name）
diff --git a/docs/document/content/features/transaction/_index.cn.md b/docs/document/content/features/transaction/_index.cn.md
index 7e74565aafd..1f90e025add 100644
--- a/docs/document/content/features/transaction/_index.cn.md
+++ b/docs/document/content/features/transaction/_index.cn.md
@@ -5,16 +5,30 @@ weight = 2
 chapter = true
 +++
 
-## 定义
+## 背景
 
-事务四个特性 ACID（原子性、一致性、隔离性、持久性）。
+数据库事务需要满足 ACID（原子性、一致性、隔离性、持久性）四个特性。
 
 - 原子性（Atomicity）指事务作为整体来执行，要么全部执行，要么全不执行；
 - 一致性（Consistency）指事务应确保数据从一个一致的状态转变为另一个一致的状态；
 - 隔离性（Isolation）指多个事务并发执行时，一个事务的执行不应影响其他事务的执行；
 - 持久性（Durability）指已提交的事务修改数据会被持久保存。
 
-在分布式的场景下，一个事务内，包含对多个数据节点的操作，分布式事务保证了在分布式场景下 ACID 的特性。
+在单一数据节点中，事务仅限于对单一数据库资源的访问控制，称之为本地事务。 几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持。 但是在基于微服务的分布式应用环境下，越来越多的应用场景要求对多个服务的访问及其相对应的多个数据库资源能纳入到同一个事务当中，分布式事务应运而生。
+
+关系型数据库虽然对本地事务提供了完美的 ACID 原生支持。 但在分布式的场景下，它却成为系统性能的桎梏。 如何让数据库在分布式场景下满足 ACID 的特性或找寻相应的替代方案，是分布式事务的重点工作。
+
+## 挑战
+
+由于应用的场景不同，需要开发者能够合理的在性能与功能之间权衡各种分布式事务。
+
+强一致的事务与柔性事务的 API 和功能并不完全相同，在它们之间并不能做到自由的透明切换。 在开发决策阶段，就不得不在强一致的事务和柔性事务之间抉择，使得设计和开发成本被大幅增加。
+
+基于 XA 的强一致事务使用相对简单，但是无法很好的应对互联网的高并发或复杂系统的长事务场景； 柔性事务则需要开发者对应用进行改造，接入成本非常高，并且需要开发者自行实现资源锁定和反向补偿。
+
+## 目标
+
+整合现有的成熟事务方案，为本地事务、两阶段事务和柔性事务提供统一的分布式事务接口，并弥补当前方案的不足，提供一站式的分布式事务解决方案是 Apache ShardingSphere 分布式事务模块的主要设计目标。
 
 ## 原理介绍
 
diff --git a/docs/document/content/features/transaction/_index.en.md b/docs/document/content/features/transaction/_index.en.md
index 3d7f88eaf95..7eeb2be5e8d 100644
--- a/docs/document/content/features/transaction/_index.en.md
+++ b/docs/document/content/features/transaction/_index.en.md
@@ -5,16 +5,30 @@ weight = 2
 chapter = true
 +++
 
-## Definition
+## Background
 
-Four properties of transactions: ACID （Atomicity、Consistency、Isolation、Durability).
+Database transactions should satisfy the features of ACID (atomicity, consistency, isolation and durability).
 
 - Atomicity: transactions are executed as a whole, and either all or none is executed.
 - Consistency: transactions should ensure that the state of data remains consistent after the transition.
 - Isolation: when multiple transactions execute concurrently, the execution of one transaction should not affect the execution of others.
 - Durability: when a transaction committed modifies data, the operation will be saved persistently.
 
-Distributed transactions guarantee the ACID properties in distributed scenarios, where a single transaction involves operations on multiple data nodes.
+In single data node, transactions are only restricted to the access and control of single database resources, called local transactions. Almost all the mature relational databases have provided native support for local transactions. But in distributed application situations based on micro-services, more and more of them require to include multiple accesses to services and the corresponding database resources in the same transaction. As a result, distributed transactions appear.
+
+Though the relational database has provided perfect native ACID support, it can become an obstacle to the system performance under distributed situations. How to make databases satisfy ACID features under distributed situations or find a corresponding substitute solution, is the priority work of distributed transactions.
+
+## Challenge
+
+For different application situations, developers need to reasonably weight the performance and the function between all kinds of distributed transactions.
+
+Highly consistent transactions do not have totally the same API and functions as soft transactions, and they cannot switch between each other freely and invisibly. The choice between highly consistent transactions and soft transactions as early as development decision-making phase has sharply increased the design and development cost.
+
+Highly consistent transactions based on XA is relatively easy to use, but is not good at dealing with long transaction and high concurrency situation of the Internet. With a high access cost, soft transactions require developers to transform the application and realize resources lock and backward compensation.
+
+## Goal
+
+The main design goal of the distributed transaction modular of Apache ShardingSphere is to integrate existing mature transaction cases to provide an unified distributed transaction interface for local transactions, 2PC transactions and soft transactions; compensate for the deficiencies of current solutions to provide a one-stop distributed transaction solution.
 
 ## How it works
 
diff --git a/docs/document/static/img/apm/overview_v4.png b/docs/document/static/img/apm/overview_v3.png
similarity index 100%
rename from docs/document/static/img/apm/overview_v4.png
rename to docs/document/static/img/apm/overview_v3.png
