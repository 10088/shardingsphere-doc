commit d58fe900cd05f52766e5cbd3cc164438e6c31c19
Author: Liang Zhang <terrymanu@163.com>
Date:   Tue Jan 19 20:11:43 2021 +0800

    Update parse-test-engine page (#9094)

diff --git a/docs/document/content/features/test-engine/parse-test-engine.cn.md b/docs/document/content/features/test-engine/parse-test-engine.cn.md
index a975fc32b3..2d203da6c4 100644
--- a/docs/document/content/features/test-engine/parse-test-engine.cn.md
+++ b/docs/document/content/features/test-engine/parse-test-engine.cn.md
@@ -6,20 +6,20 @@ weight = 3
 
 ## 数据准备
 
-SQL解析不需要真实的测试环境，开发者只需定义好待测试的SQL，以及解析后的断言数据即可：
+SQL 解析无需真实的测试环境，开发者只需定义好待测试的 SQL，以及解析后的断言数据即可：
 
 ### SQL数据
 
-在集成测试的部分提到过`sql-case-id`，其对应的SQL，可以在不同模块共享。开发者只需要在`/sharding-sql-test/src/main/resources/sql/sharding/SQL-TYPE/*.xml` 添加待测试的SQL即可。
+在集成测试的部分提到过`sql-case-id`，其对应的SQL，可以在不同模块共享。开发者只需要在`shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/resources/sql/supported/${SQL-TYPE}/*.xml` 添加待测试的 SQL 即可。
 
-### 断言解析数据
+### 断言数据
 
-断言的解析数据保存在 `/sharding-core/sharding-core-parse/sharding-core-parse-test/src/test/resources/sharding/SQL-TYPE/*.xml`
+断言的解析数据保存在 `shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/resources/case/${SQL-TYPE}/*.xml`
 在`xml`文件中，可以针对表名，token，SQL条件等进行断言，例如如下的配置：
 
 ```xml
 <parser-result-sets>
-<parser-result sql-case-id="insert_with_multiple_values">
+    <parser-result sql-case-id="insert_with_multiple_values">
         <tables>
             <table name="t_order" />
         </tables>
@@ -48,4 +48,4 @@ SQL解析不需要真实的测试环境，开发者只需定义好待测试的SQ
 </parser-result-sets>
 ```
 
-设置好上面两类数据，开发者就可以通过 `sharding-core-parse-test` 下对应的engine启动SQL解析的测试了。
+设置好上面两类数据，开发者就可以通过 `shardingsphere-sql-parser/shardingsphere-sql-parser-test` 下对应的测试引擎启动 SQL 解析的测试了。
diff --git a/docs/document/content/features/test-engine/parse-test-engine.en.md b/docs/document/content/features/test-engine/parse-test-engine.en.md
index 90aacd5a76..cb74eb23d3 100644
--- a/docs/document/content/features/test-engine/parse-test-engine.en.md
+++ b/docs/document/content/features/test-engine/parse-test-engine.en.md
@@ -10,16 +10,16 @@ Not like Integration test, SQL parse test does not need a specific database envi
 
 ### SQL Data
 
-As mentioned `sql-case-id` in Integration test，test-case-id could be shared in different module to test, and the file is at `/sharding-sql-test/src/main/resources/sql/sharding/SQL-TYPE/*.xml` 
+As mentioned `sql-case-id` in Integration test，test-case-id could be shared in different module to test, and the file is at `shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/resources/sql/supported/${SQL-TYPE}/*.xml` 
 
-### Parser Assert Data
+### Assert Data
 
-The assert data is at `/sharding-core/sharding-core-parse/sharding-core-parse-test/src/test/resources/sharding/SQL-TYPE/*.xml`
+The assert data is at `shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/resources/case/${SQL-TYPE}/*.xml`
 in that xml file, it could assert against the table name, token or sql condition and so on. For example:
 
 ```xml
 <parser-result-sets>
-<parser-result sql-case-id="insert_with_multiple_values">
+    <parser-result sql-case-id="insert_with_multiple_values">
         <tables>
             <table name="t_order" />
         </tables>
@@ -48,4 +48,4 @@ in that xml file, it could assert against the table name, token or sql condition
 </parser-result-sets>
 ```
 
-When these configs are ready, launch the test engine in sharding-core-parse-test to test SQL parse. 
+When these configs are ready, launch the test engine in `shardingsphere-sql-parser/shardingsphere-sql-parser-test` to test SQL parse. 
