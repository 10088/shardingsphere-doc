commit d309c0d62429ee46ac56dbcc1b1bc8ec14db462f
Author: Liang Zhang <terrymanu@163.com>
Date:   Thu Oct 28 21:14:51 2021 +0800

    Update data node document (#13337)

diff --git a/docs/document/content/features/sharding/concept/configuration.cn.md b/docs/document/content/features/sharding/concept/configuration.cn.md
deleted file mode 100644
index 27fe7421cd..0000000000
--- a/docs/document/content/features/sharding/concept/configuration.cn.md
+++ /dev/null
@@ -1,77 +0,0 @@
-+++
-title = "配置"
-weight = 3
-+++
-
-## 分片规则
-
-分片规则配置的总入口。包含数据源配置、表配置、绑定表配置以及读写分离配置等。
-
-## 数据源配置
-
-真实数据源列表。
-
-## 表配置
-
-逻辑表名称、数据节点与分表规则的配置。
-
-## 数据节点配置
-
-用于配置逻辑表与真实表的映射关系。可分为均匀分布和自定义分布两种形式。
-
-- 均匀分布
-
-指数据表在每个数据源内呈现均匀分布的态势，例如：
-
-```
-db0
-  ├── t_order0 
-  └── t_order1 
-db1
-  ├── t_order0 
-  └── t_order1
-```
-
-那么数据节点的配置如下：
-
-```
-db0.t_order0, db0.t_order1, db1.t_order0, db1.t_order1
-```
-
-- 自定义分布
-
-指数据表呈现有特定规则的分布，例如：
-
-```
-db0
-  ├── t_order0 
-  └── t_order1 
-db1
-  ├── t_order2
-  ├── t_order3
-  └── t_order4
-```
-
-那么数据节点的配置如下：
-
-```
-db0.t_order0, db0.t_order1, db1.t_order2, db1.t_order3, db1.t_order4
-```
-
-## 分片策略配置
-
-对于分片策略存有数据源分片策略和表分片策略两种维度。
-
-- 数据源分片策略
-
-对应于 DatabaseShardingStrategy。用于配置数据被分配的目标数据源。
-
-- 表分片策略
-
-对应于 TableShardingStrategy。用于配置数据被分配的目标表，该目标表存在于该数据的目标数据源内。故表分片策略是依赖于数据源分片策略的结果的。
-
-两种策略的 API 完全相同。
-
-## 自增主键生成策略
-
-通过在客户端生成自增主键替换以数据库原生自增主键的方式，做到分布式主键无重复。
diff --git a/docs/document/content/features/sharding/concept/configuration.en.md b/docs/document/content/features/sharding/concept/configuration.en.md
deleted file mode 100644
index afa692973a..0000000000
--- a/docs/document/content/features/sharding/concept/configuration.en.md
+++ /dev/null
@@ -1,78 +0,0 @@
-+++
-title = "Configuration"
-weight = 3
-+++
-
-## Sharding Rule
-
-The main entrance for Sharding rules includes the configurations of data source, tables, binding tables and readwrite-splitting.
-
-## Data Sources Configuration
-
-Real data sources list.
-
-## Tables Configuration
-
-Configurations of logic table names, data node and table sharding rules.
-
-## Data Node Configuration
-
-It is used in the configurations of the mapping relationship between logic tables and actual tables and can be divided into two kinds: uniform distribution and user-defined distribution.
-
-- Uniform distribution
-
-It means that data tables are evenly distributed in each data source, for example: 
-
-```
-db0
-  ├── t_order0 
-  └── t_order1 
-db1
-  ├── t_order0 
-  └── t_order1
-```
-
-So the data node configurations will be as follows:
-
-```
-db0.t_order0, db0.t_order1, db1.t_order0, db1.t_order1
-```
-
-- User-defined distribution
-
-It means that data tables are distributed with certain rules, for example:
-
-```
-db0
-  ├── t_order0 
-  └── t_order1 
-db1
-  ├── t_order2
-  ├── t_order3
-  └── t_order4
-```
-
-So the data node configurations will be as follows:
-
-```
-db0.t_order0, db0.t_order1, db1.t_order2, db1.t_order3, db1.t_order4
-```
-
-## Sharding Strategy Configuration
-
-There are two dimensions of sharding strategies, database sharding and table sharding.
-
-- Database sharding strategy
-
-`DatabaseShardingStrategy` is used to configure data in the targeted database.
-
-- Table sharding strategy
-
-`TableShardingStrategy` is used to configure data in the targeted table that exists in the database. 
-So the table sharding strategy relies on the result of the database sharding strategy.
-
-API of those two kinds of strategies are totally same.
-
-## Auto-increment Key Generation Strategy
-
-Replacing the original database auto-increment key with that generated in the server can make distributed key not repeat.
\ No newline at end of file
diff --git a/docs/document/content/features/sharding/concept/datanode.cn.md b/docs/document/content/features/sharding/concept/datanode.cn.md
new file mode 100644
index 0000000000..6e4fd04cea
--- /dev/null
+++ b/docs/document/content/features/sharding/concept/datanode.cn.md
@@ -0,0 +1,50 @@
++++
+title = "数据节点"
+weight = 3
++++
+
+数据分片的最小单元，由数据源名称和真实表组成。
+例：`ds_0.t_order_0`。
+
+逻辑表与真实表的映射关系，可分为均匀分布和自定义分布两种形式。
+
+## 均匀分布
+
+指数据表在每个数据源内呈现均匀分布的态势，
+例如：
+
+```
+db0
+  ├── t_order0
+  └── t_order1
+db1
+  ├── t_order0
+  └── t_order1
+```
+
+数据节点的配置如下：
+
+```
+db0.t_order0, db0.t_order1, db1.t_order0, db1.t_order1
+```
+
+## 自定义分布
+
+指数据表呈现有特定规则的分布，
+例如：
+
+```
+db0
+  ├── t_order0
+  └── t_order1
+db1
+  ├── t_order2
+  ├── t_order3
+  └── t_order4
+```
+
+数据节点的配置如下：
+
+```
+db0.t_order0, db0.t_order1, db1.t_order2, db1.t_order3, db1.t_order4
+```
diff --git a/docs/document/content/features/sharding/concept/datanode.en.md b/docs/document/content/features/sharding/concept/datanode.en.md
new file mode 100644
index 0000000000..7a04eabb1f
--- /dev/null
+++ b/docs/document/content/features/sharding/concept/datanode.en.md
@@ -0,0 +1,47 @@
++++
+title = "Configuration"
+weight = 3
++++
+
+As the atomic unit of sharding, it consists of data source name and actual table name, e.g. `ds_0.t_order_0`.
+
+Mapping relationship between logic tables and actual tables and can be divided into two kinds: uniform topology and user-defined topology.
+
+## Uniform topology
+
+It means that tables are evenly distributed in each data source, for example: 
+
+```
+db0
+  ├── t_order0
+  └── t_order1
+db1
+  ├── t_order0
+  └── t_order1
+```
+
+The data node configurations will be as follows:
+
+```
+db0.t_order0, db0.t_order1, db1.t_order0, db1.t_order1
+```
+
+## User-defined topology
+
+It means that tables are distributed with certain rules, for example:
+
+```
+db0
+  ├── t_order0 
+  └── t_order1 
+db1
+  ├── t_order2
+  ├── t_order3
+  └── t_order4
+```
+
+The data node configurations will be as follows:
+
+```
+db0.t_order0, db0.t_order1, db1.t_order2, db1.t_order3, db1.t_order4
+```
diff --git a/docs/document/content/features/sharding/concept/table.cn.md b/docs/document/content/features/sharding/concept/table.cn.md
index 81f79dc003..ae1337afd9 100644
--- a/docs/document/content/features/sharding/concept/table.cn.md
+++ b/docs/document/content/features/sharding/concept/table.cn.md
@@ -16,11 +16,6 @@ Apache ShardingSphere 通过提供多样化的表类型，适配不同场景下
 在水平拆分的数据库中真实存在的物理表。
 即上个示例中的 `t_order_0` 到 `t_order_9`。
 
-## 数据节点
-
-数据分片的最小单元，由数据源名称和真实表组成。
-例：`ds_0.t_order_0`。
-
 ## 绑定表
 
 指分片规则一致的主表和子表。
diff --git a/docs/document/content/features/sharding/concept/table.en.md b/docs/document/content/features/sharding/concept/table.en.md
index 8624f8d86c..406cb242dd 100644
--- a/docs/document/content/features/sharding/concept/table.en.md
+++ b/docs/document/content/features/sharding/concept/table.en.md
@@ -15,10 +15,6 @@ For instance, the data of order is divided into 10 tables according to the last
 
 The physical table that really exists in the horizontal sharding database, i.e., `t_order_0` to `t_order_9` in the instance above.
 
-## Data Node
-
-As the atomic unit of sharding, it consists of data source name and actual table name, e.g. `ds_0.t_order_0`.
-
 ## Binding Table
 
 It refers to the primary table and the joiner table with the same sharding rules.
