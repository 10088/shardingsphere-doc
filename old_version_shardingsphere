commit 57e60b416cea6843ea4148a5ae0e14ce83ff109e
Author: Mike0601 <40025573+Mike0601@users.noreply.github.com>
Date:   Fri Jul 22 11:19:24 2022 +0800

    Update _index.en.md (#19459)

diff --git a/docs/document/content/features/db-gateway/_index.en.md b/docs/document/content/features/db-gateway/_index.en.md
index 432ab7171d5..2e45b876d18 100644
--- a/docs/document/content/features/db-gateway/_index.en.md
+++ b/docs/document/content/features/db-gateway/_index.en.md
@@ -5,27 +5,28 @@ weight = 2
 chapter = true
 +++
 
-## Background
+## Definition
 
-With the trend of database fragmentation, using multiple types of databases together has become the norm. 
-The scenario of using one SQL dialect to access all heterogeneous databases is increasing.
+As database fragmentation is an irreversible trend, the coexistence of multiple types of databases has been normal. An increasing number of scenarios use an SQL dialect to access heterogeneous databases. Diversified databases make it difficult to standardize SQL dialects for accessing databases. Engineers need to use different dialects for different kinds of databases, and a unified query platform is needed.
 
-## Challenges
+The database gateway can automatically translate different types of database dialects into the dialects used by the back-end database, making it much easier for users to use the underlying heterogeneous database.
 
-The existence of diversified databases makes it difficult to standardize the SQL dialect accessing the database.
-Engineers need to use different dialects for different kinds of databases, and there is no unified query platform.
+## Related Concepts
 
-Automatically translate different types of database dialects into the dialects used by the database, 
-so that engineers can use any database dialect to access all heterogeneous databases, which can reduce development and maintenance cost greatly.
+### SQL Dialect
 
-## Goal
+SQL dialect means database dialect, and it indicates that some database projects have their own unique syntax in addition to SQL, which are also called dialects. Different database projects may have different SQL dialects.
 
-**The goal of database gateway for Apache ShardingSphere is translating SQL automatically among various databases.**
+## Impact on the System
 
-## Current State
+Through database gateway, engineers can use any database dialect to access all back-end heterogeneous databases, which can greatly reduce development and maintenance costs.
 
-SQL translation in Apache ShardingSphere is in the **experimental stage** currently.
+## Limitations
 
-It has supported auto translation with MySQL/PostgreSQL, engineers can use the SQL and protocol of MySQL to access PostgreSQL, vice versa.
+The SQL dialect translation of Apache ShardingSphere is experimental.
 
-**Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-kernel/shardingsphere-sql-translator**
+Currently, only MySQL/PostgreSQL dialects can be automatically translated. Engineers can use MySQL dialects and protocols to access PostgreSQL databases and vice versa.
+
+## Related References
+
+Source Codes: https://github.com/apache/shardingsphere/tree/master/shardingsphere-kernel/shardingsphere-sql-translator
