commit 174ae173f5567b33c5a4f60745b7ad66a6a3998c
Author: Liang Zhang <terrymanu@163.com>
Date:   Tue Nov 2 20:51:07 2021 +0800

    Move observability doc into top level of feature (#13416)

diff --git a/docs/document/content/features/governance/_index.cn.md b/docs/document/content/features/governance/_index.cn.md
index 43d8ca89d1..82c5b42a9f 100644
--- a/docs/document/content/features/governance/_index.cn.md
+++ b/docs/document/content/features/governance/_index.cn.md
@@ -7,28 +7,19 @@ chapter = true
 
 ## 背景
 
-随着数据规模的不断膨胀，使用多节点集群的分布式方式逐渐成为趋势。在这种情况下，如何高效、自动化管理集群节点，实现不同节点的协同工作，配置一致性，状态一致性，高可用性，可观测性等，就成为一个重要的挑战。
-
-本部分包括三个模块：治理、可观测性、集群管理（计划中）。
+随着数据规模的不断膨胀，使用多节点集群的分布式方式逐渐成为趋势。
+在这种情况下，如何高效、自动化管理集群节点，实现不同节点的协同工作，配置一致性，状态一致性，高可用性等，就成为一个重要的挑战。
 
 ## 挑战
 
-分布式治理的挑战，主要在于集群管理的复杂性，以及如何以统一和标准的方式对接各种第三方集成组件。
+分布式治理的挑战，主要在于集群管理的复杂性。
 
 集成管理的复杂性体现在，一方面我们需要把所有的节点，不管是底层数据库节点，还是中间件或者业务系统节点，它们的状态都统一管理起来，并且能够实时的探测到最新的变动情况，进一步为集群的控制和调度提供依据。这方面我们使用集群拓扑状态图来管理集群状态，同时使用心跳检测机制实现状态检测与更新。
 
 另一方面，不同节点节点之间的统一协调，策略与规则的同步，也需要我们能够设计一套在分布式情况下，进行全局事件通知机制，以及独占性操作的分布式协调锁机制。这方面，我们使用 Zookeeper/Etcd 等实现配置的同步，状态变更的通知，以及分布式锁来控制排他性操作。
 
-同时，由于治理功能本身可以采用合适的第三方组件作为基础服务，需要我们抽象统一的接口，统一各种不同的组件的标准调用API，对接到治理功能模块。
-
-最后对于可管理性和可观测性的要求，我们需要完善通过UI查询、操作和控制系统的功能，进一步完善对于 tracing 和 APM 的支持。
+同时，由于治理功能本身可以采用合适的第三方组件作为基础服务，需要我们抽象统一的接口，统一各种不同的组件的标准调用 API，对接到治理功能模块。
 
 ## 目标
 
-对于治理功能，目标如下：
-
-- 支持 Zookeeper/etcd，管理数据源、规则和策略的配置，管理各个 Proxy 实例的状态。
-
-对于可观测性，目标如下：
-
-- 支持 OpenTracing/Skywalking 集成，实现调用链的跟踪；
+支持 Zookeeper/etcd，管理数据源、规则和策略的配置，管理各个 Proxy 实例的状态。
diff --git a/docs/document/content/features/governance/_index.en.md b/docs/document/content/features/governance/_index.en.md
index fe036b89d6..1751113cd8 100644
--- a/docs/document/content/features/governance/_index.en.md
+++ b/docs/document/content/features/governance/_index.en.md
@@ -7,28 +7,21 @@ chapter = true
 
 ## Background
 
-As the scale of data continues to expand, a distributed approach using multi-node clusters has gradually become a trend. In this case, how to efficiently and automatically manage cluster nodes, realize the collaborative work of different nodes, configuration consistency, state consistency, high availability, observability, etc., has become a challenge.
-
-This section includes three modules: governance, observability and cluster management(in plan).
+As the scale of data continues to expand, a distributed approach using multi-node clusters has gradually become a trend.
+In this case, how to efficiently and automatically manage cluster nodes, realize the collaborative work of different nodes, configuration consistency, state consistency, high availability, etc., has become a challenge.
 
 ## Challenges
 
-The challenges of distributed governance mainly lie in the complexity of cluster management and how to connect various third-party integrated components in a unified and standard manner.
+The challenges of distributed governance mainly lie in the complexity of cluster management.
 
-The complexity of integrated management is reflected in that on the one hand, we need to manage the status of all nodes in a unified manner and can detect the latest changes in real time, whether it is the underlying database node, middleware or business system node, to further provide the basis for the control and scheduling of the cluster. In this regard, we use the cluster topology state diagram to manage the cluster state and the heartbeat detection mechanism to achieve state detection and update.
+The complexity of integrated management is reflected in that on the one hand, we need to manage the status of all nodes in a unified manner and can detect the latest changes in real time, whether it is the underlying database node, middleware or business system node, to further provide the basis for the control and scheduling of the cluster.
+In this regard, we use the cluster topology state diagram to manage the cluster state and the heartbeat detection mechanism to achieve state detection and update.
 
-On the other hand, the unified coordination and the synchronization of policies and rules between different nodes also require us to design a set of global event notification mechanisms and distributed coordination lock mechanisms for exclusive operations in distributed situations. In this regard, we use Zookeeper/Etcd to achieve configuration synchronization, notification of state changes and distributed locks to control exclusive operations.
+On the other hand, the unified coordination and the synchronization of policies and rules between different nodes also require us to design a set of global event notification mechanisms and distributed coordination lock mechanisms for exclusive operations in distributed situations.
+In this regard, we use Zookeeper/Etcd to achieve configuration synchronization, notification of state changes and distributed locks to control exclusive operations.
 
 At the same time, since the governance function itself can use appropriate third-party components as basic services, we need to abstract a unified interface, unify the standard calling APIs of various components and dock to the governance function module.
 
-Finally, for the requirements of manageability and observability, we need to improve the functions of querying, operating and controlling the system through the UI, further improving the support for tracing and APM.
-
 ## Goal
 
-For the governance function, the goals are as follows:
-
-- support Zookeeper/etcd, manage the configuration of data sources, rules and policies, manage the status of each Proxy instances.
-
-For observability, the goals are as follows:
-
-- Support OpenTracing/Skywalking integration and realize call chain tracking.
\ No newline at end of file
+Support Zookeeper/etcd, manage the configuration of data sources, rules and policies, manage the status of each Proxy instances.
diff --git a/docs/document/content/features/governance/observability/_index.cn.md b/docs/document/content/features/governance/observability/_index.cn.md
deleted file mode 100644
index 8564b671bd..0000000000
--- a/docs/document/content/features/governance/observability/_index.cn.md
+++ /dev/null
@@ -1,11 +0,0 @@
-+++
-title = "可观察性"
-weight = 2
-chapter = true
-+++
-
-## 导览
-
-本小节主要介绍 Apache ShardingSphere 可观察性的相关功能
-
-* 应用性能监控集成
diff --git a/docs/document/content/features/governance/observability/_index.en.md b/docs/document/content/features/governance/observability/_index.en.md
deleted file mode 100644
index 2ac75b2f11..0000000000
--- a/docs/document/content/features/governance/observability/_index.en.md
+++ /dev/null
@@ -1,11 +0,0 @@
-+++
-title = "Observability"
-weight = 2
-chapter = true
-+++
-
-## Navigation
-
-This chapter mainly introduces the features of the observability:
-
-* APM Integration
diff --git a/docs/document/content/features/observability/_index.cn.md b/docs/document/content/features/observability/_index.cn.md
new file mode 100644
index 0000000000..277193f24a
--- /dev/null
+++ b/docs/document/content/features/observability/_index.cn.md
@@ -0,0 +1,22 @@
++++
+pre = "<b>4.9. </b>"
+title = "可观察性"
+weight = 9
+chapter = true
++++
+
+## 背景
+
+如何观测集群的运行状态，使运维人员可以快速掌握当前系统现状，并进行进一步的维护工作，是分布式系统的全新挑战。
+登录到具体服务器的点对点运维方式，无法适用于面向大量分布式服务器的场景。
+可观察性和遥测是分布式系统推荐的运维方式。
+APM（应用性能监控）和 Metrics（统计指标监控）是系统运行状况和健康度的重要可观察性指标。
+
+## 挑战
+
+APM 和 Metrics 需要通过埋点来收集系统信息。
+大量的埋点使项目核心代码支离破碎，难于维护，且不易定制化统计指标。
+
+## 目标
+
+提供尽量多的性能和统计指标，并隔离核心代码和埋点代码，是 Apache ShardingSphere 可观察性模块的设计目标。
diff --git a/docs/document/content/features/observability/_index.en.md b/docs/document/content/features/observability/_index.en.md
new file mode 100644
index 0000000000..89472b17fe
--- /dev/null
+++ b/docs/document/content/features/observability/_index.en.md
@@ -0,0 +1,22 @@
++++
+pre = "<b>4.9. </b>"
+title = "Observability"
+weight = 9
+chapter = true
++++
+
+## Background
+
+In order to grasp the distributed system status, observe running state of the cluster is a new challenge.
+The point-to-point operation mode of logging in to a specific server cannot suite to large number of distributed servers.
+Observability and telemetry are the recommended operation way for them.
+APM (application performance monitoring) and metrics (statistical indicator monitoring) are important system health indicators.
+
+## Challenges
+
+APM and metrics need to collect system information through event tracking.
+Lots of events tracking make kernel code mess, difficult to maintain, and difficult to customize extend.
+
+## Goal
+
+The goal of Apache ShardingSphere observability module is providing as many performance and statistical indicators as possible and isolating kernel code and embedded code.
diff --git a/docs/document/content/features/governance/observability/agent.cn.md b/docs/document/content/features/observability/agent.cn.md
similarity index 100%
rename from docs/document/content/features/governance/observability/agent.cn.md
rename to docs/document/content/features/observability/agent.cn.md
diff --git a/docs/document/content/features/governance/observability/agent.en.md b/docs/document/content/features/observability/agent.en.md
similarity index 100%
rename from docs/document/content/features/governance/observability/agent.en.md
rename to docs/document/content/features/observability/agent.en.md
diff --git a/docs/document/content/features/governance/observability/apm-integration.cn.md b/docs/document/content/features/observability/apm-integration.cn.md
similarity index 100%
rename from docs/document/content/features/governance/observability/apm-integration.cn.md
rename to docs/document/content/features/observability/apm-integration.cn.md
diff --git a/docs/document/content/features/governance/observability/apm-integration.en.md b/docs/document/content/features/observability/apm-integration.en.md
similarity index 100%
rename from docs/document/content/features/governance/observability/apm-integration.en.md
rename to docs/document/content/features/observability/apm-integration.en.md
diff --git a/docs/document/content/features/shadow/use-norms.cn.md b/docs/document/content/features/shadow/use-norms.cn.md
index 0349ed4200..9347c1a6a4 100644
--- a/docs/document/content/features/shadow/use-norms.cn.md
+++ b/docs/document/content/features/shadow/use-norms.cn.md
@@ -16,7 +16,7 @@ weight = 2
 
 ### 基于列的影子算法
 
-* 不支持 DDL 语句；
+* 不支持 DDL；
 * 不支持范围、分组和子查询，如：BETWEEN、GROUP BY ... HAVING 等。
 
 SQL 支持列表：
