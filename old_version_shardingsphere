commit 40a66dd8a6a5cb1707ca004c81ab6cbdfc0e9cbf
Author: Kunshuai Zhu <jookunshuai@gmail.com>
Date:   Fri Jul 16 12:53:51 2021 +0800

    Update observability page in document (#11314)
    
    * Update observability page in document
    
    * Remove redundant blank lines
    
    * Add a space

diff --git a/docs/document/content/features/governance/observability/_index.cn.md b/docs/document/content/features/governance/observability/_index.cn.md
index b99f43eb61..26cfed1dda 100644
--- a/docs/document/content/features/governance/observability/_index.cn.md
+++ b/docs/document/content/features/governance/observability/_index.cn.md
@@ -10,4 +10,3 @@ chapter = true
 本小节主要介绍 Apache ShardingSphere 可观察性的相关功能
 
 * 应用性能监控集成
-
diff --git a/docs/document/content/features/governance/observability/agnet.cn.md b/docs/document/content/features/governance/observability/agent.cn.md
similarity index 77%
rename from docs/document/content/features/governance/observability/agnet.cn.md
rename to docs/document/content/features/governance/observability/agent.cn.md
index 9b384d52f1..bf6c0d4131 100644
--- a/docs/document/content/features/governance/observability/agnet.cn.md
+++ b/docs/document/content/features/governance/observability/agent.cn.md
@@ -16,7 +16,6 @@ ShardingSphere-Agent 是独立自主设计，基于`Bytebuddy`字节码增加的
 ```
  > cd shardingsphere/shardingsphere-agent
  > mvn clean install
-
 ```
 
 ### 远程下载(暂未发布)
@@ -24,13 +23,12 @@ ShardingSphere-Agent 是独立自主设计，基于`Bytebuddy`字节码增加的
 ```
  > weget http://xxxxx/shardingsphere-agent.tar.gz
  > tar -zxvcf shardingsphere-agent.tar.gz
-
 ```
 
 启动时添加参数
 
 ```
--javaagent: \absolute path\shardingsphere-agent.jar
+-javaagent:\absolute path\shardingsphere-agent.jar
 ```
 
 ## Agent配置
@@ -44,6 +42,7 @@ ignoredPluginNames: #忽略的插件集合，表示集合里面的插件不生
   - Jaeger
   - Zipkin
   - Prometheus
+  - OpenTelemetry
   - Logging
 
 plugins:
@@ -67,10 +66,17 @@ plugins:
     props:
       SERVICE_NAME: "shardingsphere-agent"
       URL_VERSION: "/api/v2/spans" #zipkin服务的抓取span的uri
+  Opentracing:
+    props:
+      OPENTRACING_TRACER_CLASS_NAME: "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer"
+  OpenTelemetry:
+    props:
+      otel.resource.attributes: "service.name=shardingsphere-agent" #opentelemetry的Resource信息，多个配置可用','分隔
+      otel.traces.exporter: "zipkin" #traces数据的导出器
   Logging:
     props:
       LEVEL: "INFO" #打印的日志级别
 
-``
+```
 
 以上为agent的所有配置，注意：当配置 ignoredPluginNames时候，表示集合里面的插件会被忽略！
\ No newline at end of file
diff --git a/docs/document/content/features/governance/observability/agnet.en.md b/docs/document/content/features/governance/observability/agent.en.md
similarity index 80%
rename from docs/document/content/features/governance/observability/agnet.en.md
rename to docs/document/content/features/governance/observability/agent.en.md
index 0307cfe46b..7ba551265a 100644
--- a/docs/document/content/features/governance/observability/agnet.en.md
+++ b/docs/document/content/features/governance/observability/agent.en.md
@@ -15,7 +15,6 @@ There are currently Log, metrics, APM and other observability capabilities avail
 ```
  > cd  shardingsphere/shardingsphere-agent
  > mvn clean install
-
 ```
 
 ### Remote download（No release）
@@ -23,7 +22,6 @@ There are currently Log, metrics, APM and other observability capabilities avail
 ```
  > weget http://xxxxx/shardingsphere-agent.tar.gz
  > tar -zxvcf shardingsphere-agent.tar.gz
-
 ```
 
 Add startup arguments
@@ -43,6 +41,7 @@ ignoredPluginNames: # A collection of ignored plugins, indicating that the plugi
   - Jaeger
   - Zipkin
   - Prometheus
+  - OpenTelemetry
   - Logging
 
 plugins:
@@ -66,10 +65,17 @@ plugins:
     props:
       SERVICE_NAME: "shardingsphere-agent"
       URL_VERSION: "/api/v2/spans" #zipkin uri
+  Opentracing:
+    props:
+      OPENTRACING_TRACER_CLASS_NAME: "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer"
+  OpenTelemetry:
+    props:
+      otel.resource.attributes: "service.name=shardingsphere-agent" #Resource information of opentelemetry, multiple configurations can be separated by ','
+      otel.traces.exporter: "zipkin" #the exporter of traces
   Logging:
     props:
       LEVEL: "INFO" #log level
 
-``
+```
 
  When ignoredPluginNames is configured, plugins in the collection are ignored!
\ No newline at end of file
diff --git a/docs/document/content/features/governance/observability/apm-integration.cn.md b/docs/document/content/features/governance/observability/apm-integration.cn.md
index 145ec12b44..4603bdfddc 100644
--- a/docs/document/content/features/governance/observability/apm-integration.cn.md
+++ b/docs/document/content/features/governance/observability/apm-integration.cn.md
@@ -8,7 +8,7 @@ weight = 1
 APM 是应用性能监控的缩写。目前 APM 的主要功能着眼于分布式系统的性能诊断，其主要功能包括调用链展示，应用拓扑分析等。
 
 Apache ShardingSphere 并不负责如何采集、存储以及展示应用性能监控的相关数据，而是将 SQL 解析与 SQL 执行这两块数据分片的最核心的相关信息发送至应用性能监控系统，并交由其处理。
-换句话说，Apache ShardingSphere 仅负责产生具有价值的数据，并通过标准协议递交至相关系统。Apache ShardingSphere 可以通过两种方式对接应用性能监控系统。
+换句话说，Apache ShardingSphere 仅负责产生具有价值的数据，并通过标准协议递交至相关系统。Apache ShardingSphere 可以通过三种方式对接应用性能监控系统。
 
 第一种方式是使用 OpenTracing API 发送性能追踪数据。面向 OpenTracing 协议的 APM 产品都可以与 Apache ShardingSphere 自动对接，比如 SkyWalking，Zipkin 和 Jaeger。
 使用这种方式只需要在启动时配置 OpenTracing 协议的实现者即可。
@@ -18,6 +18,9 @@ Apache ShardingSphere 并不负责如何采集、存储以及展示应用性能
 第二种方式是使用 SkyWalking 的自动探针。
 [Apache ShardingSphere](https://shardingsphere.apache.org) 团队与[Apache SkyWalking](https://skywalking.apache.org) 团队共同合作，在 SkyWalking 中实现了 Apache ShardingSphere 自动探针，可以将相关的应用性能数据自动发送到 SkyWalking 中。
 
+第三种方式是使用 OpenTelemetry 发送性能追踪数据。OpenTelemetry 在2019年由 OpenTracing 和 OpenCencus 合并而来。
+使用这种方式，只需要在agent配置文件中，根据 [OpenTelemetry SDK自动配置说明](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure) ，填写合适的配置即可。
+
 ## 使用方法
 
 ### 使用 OpenTracing 协议
@@ -48,6 +51,18 @@ ShardingTracer.init(new SkywalkingTracer());
 
 请参考 [SkyWalking 部署手册](https://github.com/apache/skywalking/blob/5.x/docs/cn/Quick-start-CN.md)。
 
+### 使用 OpenTelemetry
+
+在agent.yaml中填写好配置即可，例如将 Traces 数据导出到 Zipkin 。
+
+```yaml
+OpenTelemetry:
+    props:
+      otel.resource.attributes: "service.name=shardingsphere-agent"
+      otel.traces.exporter: "zipkin"
+      otel.exporter.zipkin.endpoint: "http://127.0.0.1:9411/api/v2/spans"
+```
+
 ## 效果展示
 
 无论使用哪种方式，都可以方便的将APM信息展示在对接的系统中，以下以 SkyWalking 为例。
diff --git a/docs/document/content/features/governance/observability/apm-integration.en.md b/docs/document/content/features/governance/observability/apm-integration.en.md
index b231e3727a..3f23591b57 100644
--- a/docs/document/content/features/governance/observability/apm-integration.en.md
+++ b/docs/document/content/features/governance/observability/apm-integration.en.md
@@ -10,7 +10,7 @@ Currently, main APM functions lie in the performance diagnosis of distributed sy
 
 Apache ShardingSphere is not responsible for gathering, storing and demonstrating APM data, but sends the core information of SQL parsing and enforcement to APM to process. 
 In other words, Apache ShardingSphere is only responsible for generating valuable data and submitting it to relevant systems through standard protocol. 
-It can connect to APM systems in two ways.
+It can connect to APM systems in three ways.
 
 The first way is to send performance tracing data by OpenTracing API. 
 APM products facing OpenTracing protocol can all automatically connect to Apache ShardingSphere, like SkyWalking, Zipkin and Jaeger. 
@@ -23,6 +23,9 @@ The second way is to use SkyWalking's automatic monitor agent.
 Cooperating with [Apache SkyWalking](https://skywalking.apache.org/) team, 
 Apache ShardingSphere team has realized `ShardingSphere` automatic monitor agent to automatically send application performance data to `SkyWalking`.
 
+The third way is to send performance tracing data by OpenTelemetry. OpenTelemetry was merged by OpenTracing and OpenCencus in 2019.
+In this way, you only need to fill in the appropriate configuration in the agent configuration file according to [OpenTelemetry SDK Autoconfigure Guide](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure).
+
 ## Usage
 
 ### Use OpenTracing
@@ -53,6 +56,18 @@ ShardingTracer.init(new SkywalkingTracer());
 
 Please refer to [SkyWalking Manual](https://github.com/apache/skywalking/blob/5.x/docs/en/Quick-start.md).
 
+### Use OpenTelemetry
+
+Just fill in the configuration in `agent.yaml`. For example, export Traces data to Zipkin.
+
+```yaml
+OpenTelemetry:
+    props:
+      otel.resource.attributes: "service.name=shardingsphere-agent"
+      otel.traces.exporter: "zipkin"
+      otel.exporter.zipkin.endpoint: "http://127.0.0.1:9411/api/v2/spans"
+```
+
 ## Result Demonstration
 
 No matter in which way, it is convenient to demonstrate APM information in the connected system. Take SkyWalking for example:
