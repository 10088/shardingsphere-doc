commit b73b46389fcbebd6dfe1f99412bee09bbedbeaca
Author: Mike0601 <40025573+Mike0601@users.noreply.github.com>
Date:   Tue Aug 16 14:28:15 2022 +0800

    add application scenarios (#20213)

diff --git a/docs/document/content/features/encrypt/_index.cn.md b/docs/document/content/features/encrypt/_index.cn.md
index cd18a51cc44..504b822fbf5 100644
--- a/docs/document/content/features/encrypt/_index.cn.md
+++ b/docs/document/content/features/encrypt/_index.cn.md
@@ -27,6 +27,16 @@ chapter = true
 
 根据业界对加密的需求及业务改造痛点，提供了一套完整、安全、透明化、低改造成本的数据加密整合解决方案，是 Apache ShardingSphere 数据加密模块的主要设计目标。
 
+## 应用场景
+
+### 新上线业务
+
+对于想要快速上线新业务，同时又需要完成安全部门的加密规定的场景，接入 ShardingSphere encrypt 功能，可以快速完成数据的合规化加密，客户无需自行开发复杂的加密系统，同时 ShardingSphere encrypt 的灵活性，也能够帮助客户避免加密场景变更带来的复杂重构和修改风险。
+
+### 成熟业务
+
+对于已经上线的成熟业务，用户不仅需要考虑历史数据的清洗，还需要考虑新旧功能的切换。接入 ShardingSphere encrypt, 用户就可以方便地完成系统的加密改造，它还能够帮助用户安全快速地切换新旧功能。用户无需改动任何业务逻辑和 SQL 就能够透明化地使用加解密功能。
+
 ## 相关参考
 
 - [配置：数据加密](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/encrypt/)
diff --git a/docs/document/content/features/encrypt/_index.en.md b/docs/document/content/features/encrypt/_index.en.md
index cbfff87dc26..7378be848c1 100644
--- a/docs/document/content/features/encrypt/_index.en.md
+++ b/docs/document/content/features/encrypt/_index.en.md
@@ -27,6 +27,20 @@ In the real business scenario, the relevant business development team often need
 
 Provides a security and transparent data encryption solution, which is the main design goal of Apache ShardingSphere data encryption module.
 
+## Application Scenarios
+
+### Newly launched services
+
+For scenarios requiring the quick launch of new services while respecting encryption regulations. The ShardingSphere encryption feature can be used to quickly achieve compliant data encryption, without requiring users to develop complex encryption systems. 
+
+At the same time, its flexibility can also help users avoid complex rebuilding and modification risks caused by encryption scenario changes.
+
+### Existing services
+
+For mature services that have already been launched, users need to consider the historical data cleansing and the switchover between old and new features. 
+
+By accessing ShardingSphere encrypt, users can easily complete the encryption transformation of the system, and it can also help users securely and quickly switch between old and new features. Users can transparently use encryption and decryption features without changing any business logic and SQL.
+
 ## Related References
 
 - [Configuration: Data Encryption](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/encrypt/)
diff --git a/docs/document/content/features/encrypt/appendix.cn.md b/docs/document/content/features/encrypt/appendix.cn.md
new file mode 100644
index 00000000000..8ac1f49b980
--- /dev/null
+++ b/docs/document/content/features/encrypt/appendix.cn.md
@@ -0,0 +1,10 @@
++++
+title = "附录"
+weight = 3
++++
+
+不支持的 SQL：
+
+- 加密字段无法支持查询不区分大小写功能；
+- 加密字段无法支持比较操作，如：大于、小于、ORDER BY、BETWEEN、LIKE 等；
+- 加密字段无法支持计算操作，如：AVG、SUM 以及计算表达式。
diff --git a/docs/document/content/features/encrypt/appendix.en.md b/docs/document/content/features/encrypt/appendix.en.md
new file mode 100644
index 00000000000..4b79a97185c
--- /dev/null
+++ b/docs/document/content/features/encrypt/appendix.en.md
@@ -0,0 +1,10 @@
++++
+title = "Appendix with SQL operator"
+weight = 3
++++
+
+Unsupported SQL：
+
+- The case-insensitive queries are not supported by encrypted fields.
+- Comparison operations are not supported for encrypted fields, such as GREATER THAN, LESS THAN, ORDER BY, BETWEEN, LIKE.
+- Calculation operations are not supported for encrypted fields, such as AVG, SUM, and computation expressions.
diff --git a/docs/document/content/features/observability/_index.cn.md b/docs/document/content/features/observability/_index.cn.md
index 89ec5a857b3..a792dbdfa3a 100644
--- a/docs/document/content/features/observability/_index.cn.md
+++ b/docs/document/content/features/observability/_index.cn.md
@@ -38,6 +38,28 @@ Tracing 和 Metrics 需要通过埋点来收集系统信息。 大量的埋点
 
 提供尽量多的性能和统计指标，并隔离核心代码和埋点代码，是 Apache ShardingSphere 可观察性模块的设计目标。
 
+## 应用场景
+
+ShardingSphere 通过 Agent 模块为应用提供可观察性的能力，可适用于以下场景：
+
+### 监控仪表盘
+
+将系统静态信息（如应用版本）和动态信息（如线程数、SQL 处理信息）等 Metrics 指标，使用标准接口方式暴露给第三方应用（如 Prometheus），管理员能够通过可视化的方式监控系统实时状态。
+
+### 应用性能监控
+
+在 ShardingSphere 中，一条 SQL 语句要经历解析、路由、改写、执行、结果归并等流程才能最终执行完成，并输出响应。如果 SQL 语句复杂，整体执行耗时过长，如何知道哪一步存在优化空间呢？
+
+通过 Agent + Tracing，管理员可以了解 SQL 执行过程中每一步的耗时情况，轻松定位性能风险，从而能够有针对性的制定 SQL 优化方案。
+
+### 应用链路追踪
+
+在分布式应用 + 数据分片的场景下，SQL 语句是哪个节点发出的，最终在哪些数据源执行？这是一个非常棘手的问题。如果 SQL 执行过程中发生异常，如何定位发生异常的节点呢？
+
+Agent + Tracing，能够帮助用户解决以上问题。
+
+通过对 SQL 执行过程的完整链路追踪，用户可以得到 “SQL 从哪里来，发到哪里去” 这样的完整信息，还能够通过生成的拓扑图来直观的观察 SQL 路由情况，运筹帷幄，同时获得快速定位问题根源的能力。
+
 ## 相关参考
 
 - [可观察性的使用](/cn/user-manual/shardingsphere-proxy/observability/)
diff --git a/docs/document/content/features/observability/_index.en.md b/docs/document/content/features/observability/_index.en.md
index 733a0a133b3..be7c2cc2259 100644
--- a/docs/document/content/features/observability/_index.en.md
+++ b/docs/document/content/features/observability/_index.en.md
@@ -36,6 +36,30 @@ Tracing and metrics need to collect system information through event tracking. L
 
 The goal of Apache ShardingSphere observability module is providing as many performance and statistical indicators as possible and isolating kernel code and embedded code.
 
+## Application Scenarios
+
+ShardingSphere provides observability for applications through the Agent module, and this feature applies to the following scenarios:
+
+### Monitoring panel
+
+The system's static information (such as application version) and dynamic information (such as the number of threads and SQL processing information) are exposed to a third-party application (such as Prometheus) using a standard interface. Administrators can visually monitor the real-time system status.
+
+### Monitoring application performance
+
+In ShardingSphere, a SQL statement needs to go through the processes of parsing, routing, rewriting, execution, and result merging before it is finally executed and the response can be output. If a SQL statement is complex and the overall execution takes a long time, how do we know which procedure has room for optimization?
+
+Through Agent plus Tracing, administrators can learn about the time consumption of each step of SQL execution. Thus, they can easily locate performance risks and formulate targeted SQL optimization schemes.
+
+### Tracing application links
+
+In a distributed application plus data sharding scenario, it is tricky to figure out which node the SQL statement is issued from and which data source the statement is finally executed on. If an exception occurs during SQL execution, how do we locate the node where the exception occurred?
+
+Agent + Tracing can help users solve the above problems.
+
+Through tracing the full link of the SQL execution process, users can get complete information such as "where the SQL comes from and where it is sent to". 
+
+They can also visually observe the SQL routing situation through the generated topological graph, make timely responses, and quickly locate the root cause of problems.
+
 ## Related References
 
 - [Usage of observability](/en/user-manual/shardingsphere-proxy/observability/)
diff --git a/docs/document/content/features/readwrite-splitting/_index.cn.md b/docs/document/content/features/readwrite-splitting/_index.cn.md
index c91ca869d6e..4a9d5cbbc5e 100644
--- a/docs/document/content/features/readwrite-splitting/_index.cn.md
+++ b/docs/document/content/features/readwrite-splitting/_index.cn.md
@@ -27,6 +27,12 @@ chapter = true
 
 透明化读写分离所带来的影响，让使用方尽量像使用一个数据库一样使用主从数据库集群，是 Apache ShardingSphere 读写分离模块的主要设计目标。
 
+## 应用场景
+
+### 复杂的主从数据库架构
+
+许多系统通过采用主从数据库架构的配置来提高整个系统的吞吐量，但是主从的配置也给业务的使用带来了一定的复杂性。接入 ShardingSphere，可以利用读写分离功能管理主从数据库，实现透明化的读写分离功能，让用户像使用一个数据库一样使用主从架构的数据库。
+
 ## 相关参考
 
 [Java API](/cn/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting)\
diff --git a/docs/document/content/features/readwrite-splitting/_index.en.md b/docs/document/content/features/readwrite-splitting/_index.en.md
index 6a2a507c517..af97a730a97 100644
--- a/docs/document/content/features/readwrite-splitting/_index.en.md
+++ b/docs/document/content/features/readwrite-splitting/_index.en.md
@@ -27,6 +27,14 @@ Though readwrite-splitting can enhance system throughput and availability, it al
 
 The main design goal of readwrite-splitting of Apache ShardingSphere is to try to reduce the influence of readwrite-splitting, in order to let users use primary-replica database group like one database.
 
+## Application Scenarios
+
+### Complex primary-secondary database architecture
+
+Many systems rely on the configuration of primary-secondary database architecture to improve the throughput of the whole system. Nevertheless, this configuration can make it more complex to use services. 
+
+After accessing ShardingSphere, the read/write splitting feature can be used to manage primary-secondary databases and achieve transparent read/write splitting, enabling users to use databases with primary/secondary architecture just like using one single database.
+
 ## Related References
 
 [Java API](/en/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting)\
