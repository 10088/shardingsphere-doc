commit 09ce87f780977f0c4a566c74b33c5bb9dfb1e290
Author: Liang Zhang <terrymanu@163.com>
Date:   Fri Sep 10 06:49:31 2021 +0800

    Split compute_nodes and storage_nodes, make the concept more clear. (#12323)
    
    * Rename datanodes to storage_nodes
    
    * Rename proxynodes to compute_nodes

diff --git a/docs/document/content/features/governance/management/registry-center.cn.md b/docs/document/content/features/governance/management/registry-center.cn.md
index ccccd38025..3aba8b0053 100644
--- a/docs/document/content/features/governance/management/registry-center.cn.md
+++ b/docs/document/content/features/governance/management/registry-center.cn.md
@@ -30,12 +30,12 @@ namespace
    ├      ├      ├──dataSources                 # 数据源配置
    ├      ├      ├──rules                       # 规则配置
    ├      ├      ├──schema                      # 表结构配置
-   ├──states
-   ├    ├──proxynodes
+   ├──status
+   ├    ├──compute_nodes
    ├    ├     ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}
    ├    ├     ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID}
    ├    ├     ├──....
-   ├    ├──datanodes
+   ├    ├──storage_nodes
    ├    ├     ├──${schema_1}
    ├    ├     ├      ├──${ds_0}
    ├    ├     ├      ├──${ds_1}
@@ -144,13 +144,13 @@ tables:                                       # 表
         primaryKey: false
 ```
 
-### /states/proxynodes
+### /status/compute_nodes
 
 数据库访问对象运行实例信息，子节点是当前运行实例的标识。
 运行实例标识由运行服务器的 IP 地址和 PID 构成。运行实例标识均为临时节点，当实例上线时注册，下线时自动清理。
 注册中心监控这些节点的变化来治理运行中实例对数据库的访问等。
 
-### /states/datanodes
+### /status/storage_nodes
 
 可以治理读写分离从库，可动态添加删除以及禁用。
 
@@ -167,7 +167,7 @@ tables:                                       # 表
 Zookeeper 命令如下：
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/proxynodes/${your_instance_ip_a}@${your_instance_pid_x}@${UUID} DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/status/compute_nodes/${your_instance_ip_a}@${your_instance_pid_x}@${UUID} DISABLED
 ```
 
 ### 禁用从库
@@ -177,5 +177,5 @@ Zookeeper 命令如下：
 Zookeeper 命令如下：
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/datanodes/${your_schema_name}/${your_replica_datasource_name} DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/status/storage_nodes/${your_schema_name}/${your_replica_datasource_name} DISABLED
 ```
diff --git a/docs/document/content/features/governance/management/registry-center.en.md b/docs/document/content/features/governance/management/registry-center.en.md
index c536cdbfbe..b247232b77 100644
--- a/docs/document/content/features/governance/management/registry-center.en.md
+++ b/docs/document/content/features/governance/management/registry-center.en.md
@@ -15,7 +15,7 @@ weight = 1
 
 ## Data Structure in Registry Center
 
-Under defined namespace, `rules`, `props` and `metadata` nodes persist in YAML, modifying nodes can dynamically refresh configurations. `states` node persist the runtime node of database access object, to distinguish different database access instances.
+Under defined namespace, `rules`, `props` and `metadata` nodes persist in YAML, modifying nodes can dynamically refresh configurations. `status` node persist the runtime node of database access object, to distinguish different database access instances.
 
 ```
 namespace
@@ -30,12 +30,12 @@ namespace
    ├      ├      ├──dataSources                 # Datasource configuration
    ├      ├      ├──rules                       # Rule configuration
    ├      ├      ├──schema                      # Table configuration
-   ├──states
-   ├    ├──proxynodes
+   ├──status
+   ├    ├──compute_nodes
    ├    ├     ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}
    ├    ├     ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID}
    ├    ├     ├──....
-   ├    ├──datanodes
+   ├    ├──storage_nodes
    ├    ├     ├──${schema_1}
    ├    ├     ├      ├──${ds_0}
    ├    ├     ├      ├──${ds_1}
@@ -144,11 +144,11 @@ tables:                                       # Tables
         primaryKey: false
 ```
 
-### /states/proxynodes
+### /status/compute_nodes
 
 It includes running instance information of database access object, with sub-nodes as the identifiers of currently running instance, which consist of IP and PID. Those identifiers are temporary nodes, which are registered when instances are on-line and cleared when instances are off-line. The registry center monitors the change of those nodes to govern the database access of running instances and other things.
 
-### /states/datanodes
+### /status/storage_nodes
 
 It is able to orchestrate replica database, delete or disable data dynamically.
 
@@ -165,7 +165,7 @@ Write `DISABLED` (case insensitive) to `IP@PID@UUID` to disable that instance; d
 Zookeeper command is as follows:
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/proxynodes/${your_instance_ip_a}@${your_instance_pid_x}@${UUID} DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/status/compute_nodes/${your_instance_ip_a}@${your_instance_pid_x}@${UUID} DISABLED
 ```
 
 ### Disable Replica Database
@@ -175,5 +175,5 @@ Under replica query scenarios, users can write `DISABLED` (case insensitive) to
 Zookeeper command is as follows:
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/datanodes/${your_schema_name}/${your_replica_datasource_name} DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/status/storage_nodes/${your_schema_name}/${your_replica_datasource_name} DISABLED
 ```
