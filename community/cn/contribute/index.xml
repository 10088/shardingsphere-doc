<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>参与和贡献 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/community/cn/contribute/</link>
    <description>Recent content in 参与和贡献 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/community/cn/contribute/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>订阅指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/subscribe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/subscribe/</guid>
      <description>在使用ShardingSphere的过程中，如果您发现任何问题，有新的想法、建议都可以通过Apache邮件列表参与到ShardingSphere的社区建设中。
  发送订阅邮件。 用自己的邮箱向dev-subscribe@shardingsphere.apache.org发送一封邮件，主题和内容任意。
  接收确认邮件并回复。 完成步骤1后，您将收到一封来自dev-help@shardingsphere.apache.org的确认邮件（如未收到，请确认该邮件是否已被拦截，或已经被自动归入订阅邮件、垃圾邮件、推广邮件等文件夹）。直接回复该邮件，或点击邮件里的链接快捷回复即可，主题和内容任意。
  接收欢迎邮件。 完成以上步骤后，您会收到一封主题为WELCOME to dev@shardingsphere.apache.org的欢迎邮件，至此您已成功订阅Apache ShardingSphere的邮件列表。
  至此，您可以通过订阅的邮箱接收及回复邮件，或通过查看归档邮件来跟踪邮件对话。
  </description>
    </item>
    
    <item>
      <title>搭建项目及环境指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/establish-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/establish-project/</guid>
      <description>软件环境    软件 JDK Idea     版本 &amp;gt;=1.8 最新版本即可    安装步骤（ Mac 为例） 1.JDK 安装  下方链接获取适合自己环境的安装包（ mac 选取 .dmg 格式） https://www.oracle.com/java  下载完成后直接安装即可  2.设置环境变量 vim ~/.zprofile  在下方添加环境变量：  #jdk环境通过 .dmg 方式安装后默认为下方路径 JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home PATH=$JAVA_HOME/bin:$PATH:. CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:. export JAVA_HOME export PATH export CLASSPATH source ~/.zprofile 3.Idea 下载安装  下方链接获取适合自己环境的安装包 https://www.jetbrains.com/idea/download/#section=mac 下载后直接安装  4.Idea clone 代码  进入 Idea 工具栏&amp;ndash;&amp;gt;Git&amp;ndash;&amp;gt;Clone&amp;ndash;&amp;gt;Url(https://github.com/apache/shardingsphere.git)  等待结束就有刚刚克隆的最新的代码了  5.项目编译 #假设项目路径为 /Users/hanmeimei/IdeaProjects/shardingsphere/ cd /Users/hanmeimei/IdeaProjects/shardingsphere/ 编译环境 .</description>
    </item>
    
    <item>
      <title>贡献者指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/contributor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/contributor/</guid>
      <description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。
提交issue  在提交issue之前，请经过充分的搜索，确定该issue不是通过简单的检索即可以解决的问题。 查看issue列表，确定该issue不是一个重复的问题。 新建一个issue并选择您的issue类型。 使用一个清晰并有描述性的标题来定义issue。 根据模板填写必要信息。 在提交issue之后，对该issue分配合适的标签。如：bug，enhancement，discussion等。 请对自己提交的issue保持关注，在讨论中进一步提供必要信息。  开发流程 1. 准备仓库
到 ShardingSphere GitHub Repo fork 仓库到你的 GitHub 账号。
克隆到本地。
git clone https://github.com/(your_github_name)/shardingsphere.git 添加 ShardingSphere 远程仓库。
git remote add apache https://github.com/apache/shardingsphere.git git remote -v 2. 选择issue
 请在选择您要修改的issue。如果是您新发现的问题或想提供issue中没有的功能增强，请先新建一个issue并设置正确的标签。 在选中相关的issue之后，请回复以表明您当前正在这个issue上工作。并在回复的时候为自己设置一个deadline，添加至回复内容中。 在开发者列表中找到一个导师，导师会在设计与功能实现上给予即时的反馈。  3. 创建分支
 切换到fork的master分支，拉取最新代码，创建本次的分支。  git checkout master git fetch apache git rebase apache/master git push origin master # 可选操作 git checkout -b issueNo 注意 ：PR 会按照 squash 的方式进行 merge。如果不创建新分支，本地和远程的提交记录将不能保持同步。</description>
    </item>
    
    <item>
      <title>提交者指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/committer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/committer/</guid>
      <description>提交者提名 ShardingSphere 社区遵循Apache Community’s process 来接收新的提交者。 当您积极地参与 ShardingSphere 社区之后，项目管理委员会和项目官方提交者会根据您的表现发起吸纳您成为官方提交者和项目管理委员会成员的流程。
提交者责任  开发新功能； 代码重构； 及时和可靠的评审 Pull Request； 思考和接纳新特性请求； 解答问题； 维护文档和代码示例； 改进流程和工具； 引导新的参与者融入社区。  日常工作  Committer 需要每天查看社区待处理的 Pull Request 和 Issue 列表，负责问题的处理：   包括标记 issue，回复 issue，关闭 issue 等； 将 issue 分配至熟悉该模块的贡献者；  Assignee 在被分配 issue 后，需要进行如下判断：   判断是否是长期 issue，如是，则标记为 pending； 判断 issue 类型，如：bug，enhancement，discussion 等； 标记 Milestone。   Committer 提交的 PR，需要根据 PR 类型和当前发布的周期标注 Label 和 Milestone。
  Committer review PR 时，可以进行 squash and merge to master 的操作, 如果有问题可以加上 change request 或者@相关人员协助处理。</description>
    </item>
    
    <item>
      <title>开发规范</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/code-conduct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/code-conduct/</guid>
      <description>以下行为准则以完全遵循 Apache软件基金会行为准则为前提。
开发理念  用心 保持责任心和敬畏心，以工匠精神持续雕琢。 可读 代码无歧义，通过阅读而非调试手段浮现代码意图。 整洁 认同《重构》和《代码整洁之道》的理念，追求整洁优雅代码。 一致 代码风格、命名以及使用方式保持完全一致。 精简 极简代码，以最少的代码表达最正确的意思。高度复用，无重复代码和配置。及时删除无用代码。 抽象 层次划分清晰，概念提炼合理。保持方法、类、包以及模块处于同一抽象层级。 极致 拒绝随意，保证任何一行代码、任何一个字母、任何一个空格都有其存在价值。  代码提交行为规范  确保通过全部测试用例，确保执行 ./mvnw -T 1C clean install 可以编译和测试通过。 确保覆盖率不低于 master 分支。 确保使用 Checkstyle 检查代码，违反验证规则的需要有特殊理由。模板位置在https://github.com/apache/shardingsphere/blob/master/src/resources/checkstyle.xml，请使用 checkstyle 8.8 运行规则。 应尽量将设计精细化拆分；做到小幅度修改，多次数提交，但应保证提交的完整性。 确保遵守编码规范。 如果您使用 IDEA，可导入推荐的 Settings。  编码规范  使用 linux 换行符。 缩进（包含空行）和上一行保持一致。 类声明后与下面的变量或方法之间需要空一行。 不应有无意义的空行。请提炼私有方法，代替方法体过长或代码段逻辑闭环而采用的空行间隔。 类、方法和变量的命名要做到顾名思义，避免使用缩写。 返回值变量使用 result 命名；循环中使用 each 命名循环变量；map 中使用 entry 代替 each。 捕获的异常名称命名为 ex ；捕获异常且不做任何事情，异常名称命名为 ignored 。 配置文件使用 Spinal Case 命名（一种使用-分割单词的特殊 Snake Case）。 需要注释解释的代码尽量提成小方法，用方法名称解释。 equals 和 == 条件表达式中，常量在左，变量在右；大于小于等条件表达式中，变量在左，常量在右。 除了构造器入参与全局变量名称相同的赋值语句外，避免使用 this 修饰符。 除了用于继承的抽象类之外，尽量将类设计为 final。 嵌套循环尽量提成方法。 成员变量定义顺序以及参数传递顺序在各个类和方法中保持一致。 优先使用卫语句。 类和方法的访问权限控制为最小。 方法所用到的私有方法应紧跟该方法，如果有多个私有方法，书写私有方法应与私有方法在原方法的出现顺序相同。 方法入参和返回值不允许为 null。 优先使用三目运算符代替 if else 的返回和赋值语句。 优先使用 lombok 代替构造器，getter, setter 方法和 log 变量。 优先考虑使用 LinkedList，只有在需要通过下标获取集合中元素值时再使用 ArrayList。 ArrayList，HashMap 等可能产生扩容的集合类型必须指定集合初始大小，避免扩容。 日志与注释一律使用英文。 注释只能包含 javadoc，todo 和 fixme。 公开的类和方法必须有 javadoc，其他类和方法以及覆盖自父类的方法无需 javadoc。 条件运算符（&amp;lt;表达式1&amp;gt; ?</description>
    </item>
    
    <item>
      <title>Issue 提交与处理规范</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/issue-conduct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/issue-conduct/</guid>
      <description>Issue 提交规范  Issue 列表以可读和可检索为目标。提交者有义务将标题总结的有意义和易于检索，并保持内容的正确和完整性； 请在经过充分的检索之后，确定无相关的已存在 Issue，再提交新的 Issue； Issue 类型划分为缺陷报告、新功能请求和问题，请在提交 Issue 时选择正确的模板并根据模板填写其内容； 由配置不确定等产生的问题，请将相关的可重现代码提交至 Github，以便于社区贡献者定位和确定问题； 请在 Issue 得到解决之后，回复该 Issue，形成闭环，为其他浏览此 Issue 的读者提供有效信息； 请及时关注已提交的 Issue，长时间无反馈的 Issue 将定期关闭； 为保证社区多元化，请使用英文参与交流。  Issue 处理规范  对于标题不明晰的 Issue，由处理人引导提交者将标题修改完善后再行处理； 对于内容缺失模板必要信息的 Issue，由处理人引导提交者将所需信息提供完善后再行处理； 涉及到缺陷修复、功能提升等与代码相关的 Issue，都将标记正确的标签以及完成此 Issue 的项目版本； 处理人将定期关闭长时间无反馈的 Issue； 无参考和检索价值的 Issue 将被标记为 status:invalid，读者无需关注。  </description>
    </item>
    
    <item>
      <title>官方文档贡献指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/document-contributor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/document-contributor/</guid>
      <description>如果您想帮助贡献 ShardingSphere 文档或网站，我们很乐意为您提供帮助！任何人都可以贡献，无论您是刚接触项目还是已经使用 ShardingSphere 很长时间，无论是自我认同的开发人员、最终用户，还是那些无法忍受错别字的人，都可以对文档或者网站进行贡献。
在贡献者指南里，已经提到如何提交 Issues 与 Pull Request，这里我们将要介绍如何给官方文档提交 Pull Request。
前置条件  熟悉 官方网站 熟悉 GitHub 协同开发流程 熟练掌握 Markdown 熟悉 Hugo  Fork 文档项目 Fork ShardingSphere 的 master 分支。
目录结构说明 shardingsphere ├─docs ├─community │ ├─archetypes │ ├─content │ │ ├─contribute │ │ ├─powered-by │ │ ├─security │ │ └─team │ ├─layouts │ ├─static │ └─themes ├─document │ ├─archetypes │ ├─content │ │ ├─concepts │ │ │ ├─adaptor │ │ │ ├─distsql │ │ │ ├─mode │ │ │ └─pluggable │ │ ├─dev-manual │ │ ├─downloads │ │ ├─features │ │ │ ├─encrypt │ │ │ ├─governance │ │ │ ├─readwrite-splitting │ │ │ ├─scaling │ │ │ ├─shadow │ │ │ ├─sharding │ │ │ │ ├─concept │ │ │ │ ├─principle │ │ │ │ └─use-norms │ │ │ ├─test-engine │ │ │ └─transaction │ │ │ ├─concept │ │ │ ├─principle │ │ │ └─use-norms │ │ ├─others │ │ │ ├─api-change-history │ │ │ └─faq │ │ ├─overview │ │ ├─quick-start │ │ ├─user-manual │ │ │ ├─shardingsphere-jdbc │ │ │ │ ├─configuration │ │ │ │ └─usage │ │ │ ├─shardingsphere-proxy │ │ │ ├─shardingsphere-sidecar │ │ │ └─shardingsphere-scaling │ ├─i18n │ ├─layouts │ ├─static │ └─themes 文档基础知识 ShardingSphere 文档使用 Markdown 编写，并使用 Hugo 进行处理生成 html，部署于 asf-site 分支，源代码位于 Github 。</description>
    </item>
    
    <item>
      <title>ShardingSphere 发布指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/release/</guid>
      <description>准备工作 1. 确认 Release Note
Release Note 需提供中文/英文两种版本，确认中文描述是否明确，英文翻译是否准确，并按以下标签进行分类：
 新功能 API 变更 功能增强 重构 漏洞修复  2. 确认 Issue 列表
打开 Github Issues ，过滤 Milestone 为 ${RELEASE.VERSION} 且状态为打开的 Issue:
 关闭已完成的 Issue 未完成的 Issue 与负责人进行沟通，如果不影响本次发版，修改 Milestone 为下一个版本 确认发布版本的 Milestone 下没有打开状态的 Issue  3. 确认 Pull request 列表
打开 Github Pull requests ，过滤 Milestone 为 ${RELEASE.VERSION} 且状态为打开的 Pull request:
 对打开的 Pull request 进行 Review 并且 Merge 无法 Merge 且不影响本次发版的 Pull request，修改 Milestone 为下一个版本 确认发布版本的 Milestone 下没有打开状态的 Pull request  4.</description>
    </item>
    
    <item>
      <title>ElasticJob 发布指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/release-elasticjob/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/release-elasticjob/</guid>
      <description>发布准备 GPG 设置 详情请参见发布指南。
设置 settings.xml 文件 将以下模板添加到 ~/.m2/settings.xml 中，所有密码需要加密后再填入。 加密设置可参考这里。
&amp;lt;settings&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.snapshots.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.releases.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;/settings&amp;gt; Apache Snapshot 发布 部署到 Apache Snapshot 仓库 1. 确保本地构建项目正常
./mvnw clean install 2. 部署 Snapshot 仓库
./mvnw deploy -DrepositoryId=apache.snapshots.https -T1C 3. 检查 Snapshot 仓库上传结果</description>
    </item>
    
    <item>
      <title>ElasticJob-UI发布指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/release-elasticjob-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/release-elasticjob-ui/</guid>
      <description>GPG设置 详情请参见发布指南。
发布Apache Maven中央仓库 1. 设置settings.xml文件
将以下模板添加到 ~/.m2/settings.xml中，所有密码需要加密后再填入。 加密设置可参考这里。
&amp;lt;settings&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.snapshots.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;apache.releases.https&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt; &amp;lt;!-- APACHE LDAP 用户名 --&amp;gt; &amp;lt;/username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;!-- APACHE LDAP 加密后的密码 --&amp;gt; &amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;/settings&amp;gt; 2. 更新版本说明
https://github.com/apache/shardingsphere-elasticjob-ui/blob/master/RELEASE-NOTES.md 3. 创建发布分支
假设从github下载的ElasticJob-UI源代码在~/elasticjob-ui/目录；假设即将发布的版本为${RELEASE.VERSION}。 创建${RELEASE.VERSION}-release分支，接下来的操作都在该分支进行。
## ${name}为源码所在分支，如：master，dev-4.x git clone --branch ${name} https://github.com/apache/shardingsphere-elasticjob-ui.git ~/elasticjob-ui cd ~/elasticjob-ui/ git pull git checkout -b ${RELEASE.VERSION}-release git push origin ${RELEASE.</description>
    </item>
    
    <item>
      <title>2FA</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/2fa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/2fa/</guid>
      <description>双因素认证(2FA) 双因子验证（2FA）是指结合密码以及实物（信用卡、SMS手机、令牌或指纹等生物标志）两种条件对用户进行认证的方法。 为保证提交者账户的安全，我们需要您在GitHub上启用2FA来验证登录用户、并贡献代码。
具体内容可参考2FA。
 注意：若您不启用2FA，您将会从本项目中除名，并且无法访问我们的仓库以及来自我们私有仓库的fork仓库。
 在GitHub上启用2FA 具体操作，请参考使用TOTP启用双因素认证。
当您开启2FA验证后，您需要使用用户名/密码 + 手机认证码的方式来登录GitHub。
提示：若无法通过页面链接下载对应APP，可在手机的应用市场或是APP Store里搜索并下载Google Authenticator。
如何提交代码 当启用2FA认证后，您需要生成私有访问Token来进行git提交等操作。此时，您将使用用户名 + 私有访问Token 来代替 用户名 + 密码的方式 进行代码的提交。
具体操作，请参考创建私有Token。</description>
    </item>
    
    <item>
      <title>签署iCLA指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/icla/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/icla/</guid>
      <description>Apache ICLA 签署流程指南 Apache CLA 全称 Apache Contributor License Agreement，签署ICLA的目的是定义向ASF贡献的文档，保护知识产权，避免后续法律纠纷。ICLA在官方存档后生效，贡献者方可参与Apache项目。
当我们需要签署ICLA时步骤如下:
1. 打开链接 官网Licenses 在Contributor License Agreements 下找到CLAs并进入页面。
2. 在页面上方我们可以看到两个下载链接，选择ICLA(个人CLA)并下载文件。
3. 打开PDF，ICLA需要填写的是两个部分，均需要全英文填写。
 注意事项:
 姓名需要填写拼音，姓与名之间空一格，首字母均为大写，名在前姓氏在后。 Committer相关的签署，则preferred Apache id(s)是必填项。   4.文件最下方的署名。 官方只接受手写或者gpg签名，这里只建议用手写的方式，可以打印文件进行手写签名或者使用电子笔进行签字。
提交文件  如果您是新Committer，请扫描签署后文件的所有页合并到一个PDF的文档，发送email 到 secretary@apache.org。 其他情况，请联系需要您签署ICLA文档的负责人。  </description>
    </item>
    
    <item>
      <title>提交者选举流程指南</title>
      <link>https://shardingsphere.apache.org/community/cn/contribute/vote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/community/cn/contribute/vote/</guid>
      <description>提交者选举流程 1. 在 @private 邮件列表讨论并投票，投票由现有的PMC成员发起，邮件内容主要陈述提名者的活动和社区贡献。
例如： To：private@shardingsphere.apache.org Title： [VOTE] New committer: (提名者) Content： Hi, everyone This is ^a formal vote^ about inviting (提名者) as our new committer. He/She really made an effort to improve ShardingSphere Parser and fix many issues. The following links will direct you to his/her work. https://github.com/apache/shardingsphere/pull/6319 https://github.com/apache/shardingsphere/pull/6293 https://github.com/apache/shardingsphere/pull/6259 https://github.com/apache/shardingsphere/pull/6211 [^ means these words are subject to change in different case] 2. 等待3*24h社区Committer投票。
3. PMC成员总结社区投票结果并发布邮件。
例如： To: private@shardingsphere.</description>
    </item>
    
  </channel>
</rss>