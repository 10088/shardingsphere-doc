1,3c1,3
< commit 90de24c7a2f39d9b2cff21d0ec2d28598f8ddf66
< Author: yang-7777 <67564630+yang-7777@users.noreply.github.com>
< Date:   Sat Nov 7 13:52:02 2020 +0800
---
> commit faa4ff60876f5e403e61547d415364b43b238613
> Author: Zhengqiang Duan <strongduanmu@gmail.com>
> Date:   Sat Nov 7 16:15:41 2020 +0800
5,27c5
<     Update the video section in english (#8056)
<     
<     * Create Newfeature.cn.md
<     
<     add video resource
<     
<     * Create Newfeature.en.md
<     
<     add video source
<     
<     * Update OpenSource.en.md
<     
<     * Update Newfeature.cn.md
<     
<     * Update Newfeature.en.md
<     
<     * Update build.en.md
<     
<     * Update ecosystem.en.md
<     
<     * Update evolution.en.md
<     
<     * Update new_SQL.en.md
---
>     update the subquery document (#8064)
29,121c7,68
< diff --git a/docs/blog/content/videos/Newfeature.cn.md b/docs/blog/content/videos/Newfeature.cn.md
< new file mode 100644
< index 0000000000..a46ffedc21
< --- /dev/null
< +++ b/docs/blog/content/videos/Newfeature.cn.md
< @@ -0,0 +1,9 @@
< ++++
< +title = "Apache ShardingSphere 5.x 的新功能"
< +weight = 6
< +chapter = true
< ++++
< +
< +Apache ShardingSphere 5.x 的首个版本发布在即。Apache ShardingSphere 从架构设计理念到产品定位都有重大革新。采用了可插拔的方式，使其具备高度灵活、可插拔和可扩展的能力;在产品定位方面，不再以数据分片为内核，而是转向分布式数据库生态的打造。5.x 版本将数据分片、分布式事务、数据库治理等核心功能从项目内核中完全抽离，成为其可插拔生态的一部分。并且通过 SPI 的方式完全开放其生态，将数据迁移、弹性调度、数据加密、影子表等功能完全融入至产品生态中。
< +
< +{{< bilibili BV1Qa4y1s7WK >}}
< diff --git a/docs/blog/content/videos/Newfeature.en.md b/docs/blog/content/videos/Newfeature.en.md
< new file mode 100644
< index 0000000000..95633d0a25
< --- /dev/null
< +++ b/docs/blog/content/videos/Newfeature.en.md
< @@ -0,0 +1,9 @@
< ++++
< +title = "New feature of Apache ShardingSphere 5.x"
< +weight = 6
< +chapter = true
< ++++
< +
< +The first version of Apache ShardingSphere 5.x will be released soon. In version 5.x, Apache ShardingSphere has made significant innovations from architecture design to product scope. Apache ShardingSphere 5.x follow pluggable architecture design concept to build a flexible, embeddable and extensible project. Apache ShardingSphere 5. X no longer takes data sharding as kernel, but turns to building distributed database ecosystem. In the new version, core functions such as data sharding, distributed transaction and database governance are completely separated from the kernel and become a part of its pluggable component. Through SPI, the ecosystem is fully opened, and the functions of data migration, elastic scheduling, data encryption, shadow table are fully integrated into the product ecology. This presentation will comprehensively introduce the new features of Apache ShardingSphere 5.x.
< +
< +{{< bilibili BV1Qa4y1s7WK >}}
< diff --git a/docs/blog/content/videos/OpenSource.en.md b/docs/blog/content/videos/OpenSource.en.md
< index e1465074e6..8076d7c50d 100644
< --- a/docs/blog/content/videos/OpenSource.en.md
< +++ b/docs/blog/content/videos/OpenSource.en.md
< @@ -4,4 +4,6 @@ weight = 1
<  chapter = true
<  +++
<  
< -## TODO
< \ No newline at end of file
< +Apache sharingsphere is the only database middleware project of Apache foundation. It is mainly used in distributed database related scenarios such as data fragmentation, distributed transaction and distributed governance. This live broadcast will share why we want to participate in open source; the Apache software foundation, the core principles of Apache shardingsphere and how to embark on the road of open source.
< +
< +{{< bilibili BV16K4y1b7CZ >}}
< diff --git a/docs/blog/content/videos/build.en.md b/docs/blog/content/videos/build.en.md
< index df063beacf..c085344c98 100644
< --- a/docs/blog/content/videos/build.en.md
< +++ b/docs/blog/content/videos/build.en.md
< @@ -4,4 +4,6 @@ weight = 2
<  chapter = true
<  +++
<  
< -## TODO
< +Apache shardingsphere VP: Liang Zhang gives a wonderful explanation of shardingsphere project and open source. Liang Zhang, architecture expert of Technical Center, JD Digital Technology(JD.com), Apache ShardingSphere PMC Chair. Shardingsphere has entered the Apache incubator. It is the first open source project of JD to enter the Apache software foundation, and it is also the first distributed database of Apache software foundation.
< +
< +{{< bilibili BV1aC4y1W7DA >}}
< diff --git a/docs/blog/content/videos/ecosystem.en.md b/docs/blog/content/videos/ecosystem.en.md
< index a60f873c08..991ebea77b 100644
< --- a/docs/blog/content/videos/ecosystem.en.md
< +++ b/docs/blog/content/videos/ecosystem.en.md
< @@ -4,4 +4,6 @@ weight = 5
<  chapter = true
<  +++
<  
< -## TODO
< \ No newline at end of file
< +With the rapid development of the Internet, the scale of Internet data is also explosive growth. In this scenario, how to transform and upgrade the traditional database to meet the data needs of the new Internet? How to build an ecosystem of distributed database cluster with the help of NewSQL concept to meet the business needs of query performance, large amount of data storage, data security, elastic expansion, etc? This sharing will analyze these problems in detail and provide a relatively complete NewSQL solution.
< +
< +{{< bilibili BV19z411e743 >}}
< diff --git a/docs/blog/content/videos/evolution.en.md b/docs/blog/content/videos/evolution.en.md
< index aa67d5b142..301cbaa6ea 100644
< --- a/docs/blog/content/videos/evolution.en.md
< +++ b/docs/blog/content/videos/evolution.en.md
< @@ -4,4 +4,6 @@ weight = 4
<  chapter = true
<  +++
<  
< -## TODO
< \ No newline at end of file
< +This sharing will start with NewSQL, focusing on the evolution and planning of ShardingSphere architecture, and fall into the relationship and development between open source and contributors. From the perspective of product ecology, open source power, personal growth and development, it brings us interpretation and sharing.
< +
< +{{< bilibili BV1av41167ny >}}
< diff --git a/docs/blog/content/videos/new_SQL.en.md b/docs/blog/content/videos/new_SQL.en.md
< index bef68d990d..b6cd483c15 100644
< --- a/docs/blog/content/videos/new_SQL.en.md
< +++ b/docs/blog/content/videos/new_SQL.en.md
< @@ -4,4 +4,6 @@ weight = 3
<  chapter = true
<  +++
<  
< -## TODO
< +NewSQL is popular in recent years, and companies all over the world have different interpretations of NewSQL. This sharing will bring you the interpretation of NewSQL concept and product architecture around the world. The architecture, characteristics, planning and open source community of Apache ShardingSphere, a popular open source distributed database middleware service platform, are analyzed in detail from the perspective of NewSQL.
< +
< +{{< bilibili BV12t4y117GC >}}
---
> diff --git a/docs/document/content/features/sharding/use-norms/sql.cn.md b/docs/document/content/features/sharding/use-norms/sql.cn.md
> index 7d1d4d8601..4cfa3f0df7 100644
> --- a/docs/document/content/features/sharding/use-norms/sql.cn.md
> +++ b/docs/document/content/features/sharding/use-norms/sql.cn.md
> @@ -55,20 +55,23 @@ tbl_name [AS] alias] [index_hint_list]
>  不支持 HAVING、UNION (ALL)
>  
>  部分支持子查询
> -* 子查询中必须包含分片键，且分片键必须和父查询中的分片键一致
> +* 子查询中使用WHERE条件时，必须包含分片键，当外层查询中也包含分片键时，子查询和外层查询中的分片键必须保持一致
>  
>  除了分页子查询的支持之外(详情请参考[分页](/cn/features/sharding/use-norms/pagination))，也支持同等模式的子查询。无论嵌套多少层，ShardingSphere都可以解析至第一个包含数据表的子查询，一旦在下层嵌套中再次找到包含数据表的子查询将直接抛出解析异常。
>  
>  例如，以下子查询可以支持：
>  
>  ```sql
> -SELECT COUNT(*) FROM (SELECT * FROM t_order o where id>10) where id>10;
> +SELECT COUNT(*) FROM (SELECT * FROM t_order) o;
> +SELECT COUNT(*) FROM (SELECT * FROM t_order WHERE order_id = 1) o;
> +SELECT COUNT(*) FROM (SELECT * FROM t_order WHERE order_id = 1) o WHERE o.order_id = 1;
>  ```
>  
>  以下子查询不支持：
>  
>  ```sql
> -SELECT COUNT(*) FROM (SELECT * FROM t_order o)
> +SELECT COUNT(*) FROM (SELECT * FROM t_order WHERE product_id = 1) o;
> +SELECT COUNT(*) FROM (SELECT * FROM t_order WHERE order_id = 1) o WHERE o.order_id = 2;
>  ```
>  
>  简单来说，通过子查询进行非功能需求，在大部分情况下是可以支持的。比如分页、统计总数等；而通过子查询实现业务查询当前并不能支持。
> diff --git a/docs/document/content/features/sharding/use-norms/sql.en.md b/docs/document/content/features/sharding/use-norms/sql.en.md
> index fc7eb13da6..4d9a9bf04d 100644
> --- a/docs/document/content/features/sharding/use-norms/sql.en.md
> +++ b/docs/document/content/features/sharding/use-norms/sql.en.md
> @@ -55,20 +55,23 @@ Partially support CASE WHEN
>  
>  Do not support HAVING and UNION (ALL) 
>  Partly available sub-query
> -* If there is a subquery, it needs sharding key condition and be consistent with the parent query.
> +* If subquery contains `WHERE` condition, the sharding key must be included. If the outer query also contains the sharding key, the sharding key in subquery and outer query must be consistent.
>  
>  Support not only pagination sub-query (see [pagination](https://shardingsphere.apache.org/document/current/cn/features/sharding/usage-standard/pagination) for more details), but also sub-query with the same mode. No matter how many layers are nested, ShardingSphere can parse to the first sub-query that contains data table. Once it finds another sub-query of this kind in the sub-level nested, it will directly throw a parsing exception.
>  
>  For example, the following sub-query is available:
>  
>  ```sql
> -SELECT COUNT(*) FROM (SELECT * FROM t_order o where id>10) where id>10;
> +SELECT COUNT(*) FROM (SELECT * FROM t_order) o;
> +SELECT COUNT(*) FROM (SELECT * FROM t_order WHERE order_id = 1) o;
> +SELECT COUNT(*) FROM (SELECT * FROM t_order WHERE order_id = 1) o WHERE o.order_id = 1;
>  ```
>  
>  The following sub-query is unavailable:
>  
>  ```sql
> -SELECT COUNT(*) FROM (SELECT * FROM t_order o)
> +SELECT COUNT(*) FROM (SELECT * FROM t_order WHERE product_id = 1) o;
> +SELECT COUNT(*) FROM (SELECT * FROM t_order WHERE order_id = 1) o WHERE o.order_id = 2;
>  ```
>  
>  To be simple, through sub-query, non-functional requirements are available in most cases, such as pagination, sum count and so on; but functional requirements are unavailable for now.
