1,3c1,3
< commit ad4a1e46608b5ca4e27bc77080266b78fc58092d
< Author: Yanjie Zhou <zhouyanjie@aliyun.com>
< Date:   Thu Oct 22 10:21:39 2020 +0800
---
> commit 4896e2262abd4a3c46e401a21815a02817bb3f54
> Author: wwj <2219962313@qq.com>
> Date:   Fri Oct 23 14:36:07 2020 +0800
5c5,9
<     Revise usage of error-handler document (#1635)
---
>     No empty elasticJobType and elasticJob (#1640)
>     
>     * No empty elasticJobType and elasticJob
>     
>     * revise document
7,17c11,20
< diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md
< index f7a3b63ea..4e6455fbd 100644
< --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md
< +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md
< @@ -216,7 +216,7 @@ public class JobDemo {
<      private static JobConfiguration createScheduleJobConfiguration() {
<          // 创建定时作业配置， 并且使用邮件通知策略
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("EMAIL").build();
< -        setEmailConfiguration(jobConfig);
< +        setEmailProperties(jobConfig);
<          return jobConfig;
---
> diff --git a/docs/content/features/elastic.cn.md b/docs/content/features/elastic.cn.md
> index 8f1225468..2cc239397 100644
> --- a/docs/content/features/elastic.cn.md
> +++ b/docs/content/features/elastic.cn.md
> @@ -73,7 +73,7 @@ ElasticJob-Lite 并无作业调度中心节点，而是基于部署作业框架
>  ### 注册中心数据结构
>  
>  注册中心在定义的命名空间下，创建作业名称节点，用于区分不同作业，所以作业一旦创建则不能修改作业名称，如果修改名称将视为新的作业。
> -作业名称节点下又包含4个数据子节点，分别是 config, instances, sharding, servers 和 leader。
> +作业名称节点下又包含5个数据子节点，分别是 config, instances, sharding, servers 和 leader。
19,27c22
<      }
< @@ -224,13 +224,18 @@ public class JobDemo {
<      private static JobConfiguration createOneOffJobConfiguration() {
<          // 创建一次性作业配置， 并且使用邮件通知策略
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("EMAIL").build();
< -        setEmailConfiguration(jobConfig);
< +        setEmailProperties(jobConfig);
<          return jobConfig;
<      }
---
>  ### config 节点
29,469d23
< -    private static void setEmailConfiguration(final JobConfiguration jobConfig) {
< +    private static void setEmailProperties(final JobConfiguration jobConfig) {
<          // 设置邮件的配置
< -        jobConfig.getExtraConfigurations().add(EmailConfiguration.newBuilder("host", 465, "username", "password", "from@xxx.xx", "to1@xxx.xx,to2xxx.xx").build());
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.HOST, "host");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.PORT, "465");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.USERNAME, "username");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.PASSWORD, "password");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.FROM, "from@xxx.xx");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.TO, "to1@xxx.xx,to1@xxx.xx");
<      }
<  
<      private static CoordinatorRegistryCenter createRegistryCenter() {
< @@ -265,7 +270,7 @@ public class JobDemo {
<      private static JobConfiguration createScheduleJobConfiguration() {
<          // 创建定时作业配置， 并且使用企业微信通知策略
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("WECHAT").build();
< -        setWechatConfiguration(jobConfig);
< +        setWechatProperties(jobConfig);
<          return jobConfig;
<  
<      }
< @@ -273,13 +278,13 @@ public class JobDemo {
<      private static JobConfiguration createOneOffJobConfiguration() {
<          // 创建一次性作业配置， 并且使用企业微信通知策略
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("WECHAT").build();
< -        setWechatConfiguration(jobConfig);
< +        setWechatProperties(jobConfig);
<          return jobConfig;
<      }
<  
< -    private static void setWechatConfiguration(final JobConfiguration jobConfig) {
< +    private static void setWechatProperties(final JobConfiguration jobConfig) {
<          // 设置企业微信的配置
< -        jobConfig.getExtraConfigurations().add(WechatConfiguration.newBuilder("you_webhook").build());
< +        jobConfig.getProps().setProperty(WechatPropertiesConstants.WEBHOOK, "you_webhook");
<      }
<  
<      private static CoordinatorRegistryCenter createRegistryCenter() {
< @@ -315,21 +320,23 @@ public class JobDemo {
<      private static JobConfiguration createScheduleJobConfiguration() {
<          // 创建定时作业配置， 并且使用企业微信通知策略
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("DINGTALK").build();
< -        setWechatConfiguration(jobConfig);
< +        setDingtalkProperties(jobConfig);
<          return jobConfig;
<  
<      }
<  
<      private static JobConfiguration createOneOffJobConfiguration() {
< -        // 创建一次性作业配置， 并且使用企业微信通知策略
< +        // 创建一次性作业配置， 并且使用钉钉通知策略
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("DINGTALK").build();
< -        setWechatConfiguration(jobConfig);
< +        setDingtalkProperties(jobConfig);
<          return jobConfig;
<      }
<  
< -    private static void setDingtalkConfiguration(final JobConfiguration jobConfig) {
< +    private static void setDingtalkProperties(final JobConfiguration jobConfig) {
<          // 设置钉钉的配置
< -        jobConfig.getExtraConfigurations().add(DingtalkConfiguration.newBuilder("you_webhook").keyword("keyword").secret("secret").build());
< +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.WEBHOOK, "you_webhook");
< +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.KEYWORD, "you_keyword");
< +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.SECRET, "you_secret");
<      }
<  
<      private static CoordinatorRegistryCenter createRegistryCenter() {
< diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
< index 793c843b4..ef02e097a 100644
< --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
< +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
< @@ -215,7 +215,7 @@ public class JobDemo {
<      private static JobConfiguration createScheduleJobConfiguration() {
<          // Create scheduling job configuration, and the use of email notification strategy.
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("EMAIL").build();
< -        setEmailConfiguration(jobConfig);
< +        setEmailProperties(jobConfig);
<          return jobConfig;
<  
<      }
< @@ -223,13 +223,18 @@ public class JobDemo {
<      private static JobConfiguration createOneOffJobConfiguration() {
<          // Create one-time job configuration, and the use of email notification strategy.
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("EMAIL").build();
< -        setEmailConfiguration(jobConfig);
< +        setEmailProperties(jobConfig);
<          return jobConfig;
<      }
<  
< -    private static void setEmailConfiguration(final JobConfiguration jobConfig) {
< +    private static void setEmailProperties(final JobConfiguration jobConfig) {
<          // Set the mail configuration.
< -        jobConfig.getExtraConfigurations().add(EmailConfiguration.newBuilder("host", 465, "username", "password", "from@xxx.xx", "to1@xxx.xx,to2xxx.xx").build());
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.HOST, "host");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.PORT, "465");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.USERNAME, "username");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.PASSWORD, "password");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.FROM, "from@xxx.xx");
< +        jobConfig.getProps().setProperty(EmailPropertiesConstants.TO, "to1@xxx.xx,to1@xxx.xx");
<      }
<  
<      private static CoordinatorRegistryCenter createRegistryCenter() {
< @@ -264,7 +269,7 @@ public class JobDemo {
<      private static JobConfiguration createScheduleJobConfiguration() {
<          // Create scheduling job configuration, and the use of wechat enterprise notification strategy.
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("WECHAT").build();
< -        setWechatConfiguration(jobConfig);
< +        setWechatProperties(jobConfig);
<          return jobConfig;
<  
<      }
< @@ -272,13 +277,13 @@ public class JobDemo {
<      private static JobConfiguration createOneOffJobConfiguration() {
<          // Create one-time job configuration, and the use of wechat enterprise notification strategy.
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("WECHAT").build();
< -        setWechatConfiguration(jobConfig);
< +        setWechatProperties(jobConfig);
<          return jobConfig;
<      }
<  
< -    private static void setWechatConfiguration(final JobConfiguration jobConfig) {
< +    private static void setWechatProperties(final JobConfiguration jobConfig) {
<          // Set the configuration for the enterprise wechat.
< -        jobConfig.getExtraConfigurations().add(WechatConfiguration.newBuilder("you_webhook").build());
< +        jobConfig.getProps().setProperty(WechatPropertiesConstants.WEBHOOK, "you_webhook");
<      }
<  
<      private static CoordinatorRegistryCenter createRegistryCenter() {
< @@ -311,23 +316,25 @@ public class JobDemo {
<      }
<      
<      private static JobConfiguration createScheduleJobConfiguration() {
< -        // Create scheduling job configuration, and the use of wechat enterprise notification strategy.
< +        // Create scheduling job configuration, and the use of dingtalk  notification strategy.
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("DINGTALK").build();
< -        setWechatConfiguration(jobConfig);
< +        setDingtalkProperties(jobConfig);
<          return jobConfig;
<  
<      }
<  
<      private static JobConfiguration createOneOffJobConfiguration() {
< -        // Create one-time job configuration, and the use of wechat enterprise notification strategy.
< +        // Create one-time job configuration, and the use of dingtalk notification strategy.
<          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("DINGTALK").build();
< -        setWechatConfiguration(jobConfig);
< +        setDingtalkProperties(jobConfig);
<          return jobConfig;
<      }
<  
< -    private static void setDingtalkConfiguration(final JobConfiguration jobConfig) {
< +    private static void setDingtalkProperties(final JobConfiguration jobConfig) {
<          // Set the configuration of the dingtalk.
< -        jobConfig.getExtraConfigurations().add(DingtalkConfiguration.newBuilder("you_webhook").keyword("keyword").secret("secret").build());
< +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.WEBHOOK, "you_webhook");
< +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.KEYWORD, "you_keyword");
< +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.SECRET, "you_secret");
<      }
<  
<      private static CoordinatorRegistryCenter createRegistryCenter() {
< diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md
< index e87e02f4f..ed8e3210e 100644
< --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md
< +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md
< @@ -99,3 +99,136 @@ public class OneOffJobController {
<  }
<  ```
<  
< +
< +## 配置错误处理策略
< +
< +使用 ElasticJob-Lite 过程中当作业发生异常后，可采用以下错误处理策略。
< +
< +| *错误处理策略名称*         | *说明*                            |  *是否内置* | *是否默认*| *是否需要额外配置* |
< +| ----------------------- | --------------------------------- |  -------  |  --------|  -------------  |
< +| 记录日志策略              | 记录作业异常日志，但不中断作业执行     |   是       |     是   |                 |
< +| 抛出异常策略              | 抛出系统异常并中断作业执行            |   是       |         |                 |
< +| 忽略异常策略              | 忽略系统异常且不中断作业执行          |   是       |          |                 |
< +| 邮件通知策略              | 发送邮件消息通知，但不中断作业执行     |            |          |      是         |
< +| 企业微信通知策略           | 发送企业微信消息通知，但不中断作业执行 |            |          |      是          |
< +| 钉钉通知策略              | 发送钉钉消息通知，但不中断作业执行     |            |          |      是          |
< +
< +### 记录日志策略
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: LOG 
< +```
< +
< +### 抛出异常策略
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: THROW 
< +```
< +
< +
< +### 忽略异常策略
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: IGNORE 
< +```
< +
< +### 邮件通知策略
< +
< +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#邮件通知策略) 了解更多。
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-email</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: EMAIL 
< +  props:
< +    email:
< +      host: host
< +      port: 465
< +      username: username
< +      password: password
< +      useSsl: true
< +      subject: ElasticJob error message
< +      from: from@xxx.xx
< +      to: to1@xxx.xx,to2@xxx.xx
< +      cc: cc@xxx.xx
< +      bcc: bcc@xxx.xx
< +      debug: false
< +```
< +
< +### 企业微信通知策略
< +
< +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#企业微信通知策略) 了解更多。
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-wechat</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: WECHAT 
< +  props:
< +    wechat:
< +      webhook: you_webhook
< +      connectTimeout: 3000
< +      readTimeout: 5000
< +```
< +
< +
< +### 钉钉通知策略
< +
< +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#钉钉通知策略) 了解更多。
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: DINGTALK 
< +  props:
< +    dingtalk:
< +       webhook: you_webhook
< +       keyword: you_keyword
< +       secret: you_secret
< +       connectTimeout: 3000
< +       readTimeout: 5000
< +```
< diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md
< index da60a9d33..10c4399a9 100644
< --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md
< +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md
< @@ -100,3 +100,134 @@ public class OneOffJobController {
<      }
<  }
<  ```
< +
< +## Configuration error handler strategy
< +
< +In the process of using ElasticJob-Lite, when the job is abnormal, the following error handling strategies can be used.
< +
< +| *Error handler strategy name*            | *Description*                                                 |  *Built-in*  | *Default*| *Extra config*   |
< +| ---------------------------------------- | ------------------------------------------------------------- |  -------     |  --------|  --------------  |
< +| Log Strategy                             | Log error and do not interrupt job                            |   Yes        |     Yes  |                  |
< +| Throw Strategy                           | Throw system exception and interrupt job                      |   Yes        |          |                  |
< +| Ignore Strategy                          | Ignore exception and do not interrupt job                     |   Yes        |          |                  |
< +| Email Notification Strategy              | Send email message notification and do not interrupt job      |              |          |    Yes           |
< +| Wechat Enterprise Notification Strategy  | Send wechat message notification and do not interrupt job     |              |          |    Yes           |
< +| Dingtalk Notification Strategy           | Send dingtalk message notification and do not interrupt job   |              |          |    Yes           |
< +
< +### Log Strategy
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: LOG 
< +```
< +
< +### Throw Strategy
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: THROW 
< +```
< +
< +### Ignore Strategy
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: IGNORE 
< +```
< +
< +### Email Notification Strategy
< +
< +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#email-notification-strategy) for more details.
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-email</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: EMAIL 
< +  props:
< +    email:
< +      host: host
< +      port: 465
< +      username: username
< +      password: password
< +      useSsl: true
< +      subject: ElasticJob error message
< +      from: from@xxx.xx
< +      to: to1@xxx.xx,to2@xxx.xx
< +      cc: cc@xxx.xx
< +      bcc: bcc@xxx.xx
< +      debug: false
< +```
< +
< +### Wechat Enterprise Notification Strategy
< +
< +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#wechat-enterprise-notification-strategy) for more details.
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-wechat</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: WECHAT 
< +  props:
< +    wechat:
< +      webhook: you_webhook
< +      connectTimeout: 3000
< +      readTimeout: 5000
< +```
< +
< +### Dingtalk Notification Strategy
< +
< +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#dingtalk-notification-strategy) for more details.
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```yaml
< +elasticjob:
< +  regCenter:
< +    ...
< +  jobs:
< +    ...
< +    jobErrorHandlerType: DINGTALK 
< +  props:
< +    dingtalk:
< +       webhook: you_webhook
< +       keyword: you_keyword
< +       secret: you_secret
< +       connectTimeout: 3000
< +       readTimeout: 5000
< +```
