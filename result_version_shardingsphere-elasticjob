1,3c1,3
< commit 93c221ef72c33c13be70bf42a880822c310232d4
< Author: Liang Zhang <terrymanu@163.com>
< Date:   Wed Oct 21 23:18:29 2020 +0800
---
> commit ad4a1e46608b5ca4e27bc77080266b78fc58092d
> Author: Yanjie Zhou <zhouyanjie@aliyun.com>
> Date:   Thu Oct 22 10:21:39 2020 +0800
5,11c5
<     Revise connectTimeoutMillisecond and readTimeoutMillisecond with end of s (#1632)
<     
<     * Revise connectTimeoutMillisecond and readTimeoutMillisecond with end of s
<     
<     * For checkstyle
<     
<     * Fix compile error
---
>     Revise usage of error-handler document (#1635)
13,90c7,469
< diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.cn.md b/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.cn.md
< index f2bc0e108..192f2e456 100644
< --- a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.cn.md
< +++ b/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.cn.md
< @@ -81,11 +81,11 @@ Maven 坐标：
<  
<  可配置属性：
<  
< -| 属性名                            | 说明                                | 是否必填    | 默认值    |
< -| -------------------------------- |:----------------------------------- |:--------- |:--------- |
< -| wechat.webhook                   | 企业微信机器人的 webhook 地址         | 是         | -         |
< -| wechat.connectTimeoutMillisecond | 与企业微信服务器建立连接的超时时间      | 否         | 3000 毫秒 |
< -| wechat.readTimeoutMillisecond    | 从企业微信服务器读取到可用资源的超时时间 | 否         | 5000 毫秒 |
< +| 属性名                             | 说明                                | 是否必填    | 默认值    |
< +| --------------------------------- |:----------------------------------- |:--------- |:--------- |
< +| wechat.webhook                    | 企业微信机器人的 webhook 地址         | 是         | -         |
< +| wechat.connectTimeoutMilliseconds | 与企业微信服务器建立连接的超时时间      | 否         | 3000 毫秒 |
< +| wechat.readTimeoutMilliseconds    | 从企业微信服务器读取到可用资源的超时时间 | 否         | 5000 毫秒 |
<  
<  ## 钉钉通知策略
<  
< @@ -107,10 +107,10 @@ Maven 坐标：
<  
<  可配置属性：
<  
< -| 属性名                              | 说明                              | 是否必填 | 默认值    |
< -| ---------------------------------- |:----------------------------------|:------- |:-------- |
< -| dingtalk.webhook                   | 钉钉机器人的 webhook 地址           | 是       | -       |
< -| dingtalk.keyword                   | 自定义关键词                       | 否       | null     |
< -| dingtalk.secret                    | 签名的密钥                         | 否       | null     |
< -| dingtalk.connectTimeoutMillisecond | 与钉钉服务器建立连接的超时时间       | 否       | 3000 毫秒 |
< -| dingtalk.readTimeoutMillisecond    | 从钉钉服务器读取到可用资源的超时时间  | 否       | 5000 毫秒 |
< +| 属性名                               | 说明                              | 是否必填 | 默认值    |
< +| ----------------------------------- |:----------------------------------|:------- |:-------- |
< +| dingtalk.webhook                    | 钉钉机器人的 webhook 地址           | 是       | -       |
< +| dingtalk.keyword                    | 自定义关键词                       | 否       | null     |
< +| dingtalk.secret                     | 签名的密钥                         | 否       | null     |
< +| dingtalk.connectTimeoutMilliseconds | 与钉钉服务器建立连接的超时时间       | 否       | 3000 毫秒 |
< +| dingtalk.readTimeoutMilliseconds    | 从钉钉服务器读取到可用资源的超时时间  | 否       | 5000 毫秒 |
< diff --git a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.en.md b/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.en.md
< index 50943e95a..f10b5259e 100644
< --- a/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.en.md
< +++ b/docs/content/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler.en.md
< @@ -81,11 +81,11 @@ Maven POM:
<  
<  Configuration: 
<  
< -| Name                             | Description                                                               | Required | Default Value     |
< -| -------------------------------- |:------------------------------------------------------------------------- |:-------- |:----------------- |
< -| wechat.webhook                   | The webhook address of the wechat robot                                   | Yes      | -                 |
< -| wechat.connectTimeoutMillisecond | The timeout period for establishing a connection with the wechat server   | No       | 3000 milliseconds |
< -| wechat.readTimeoutMillisecond    | The timeout period for reading available resources from the wechat server | No       | 5000 milliseconds |
< +| Name                              | Description                                                               | Required | Default Value     |
< +| --------------------------------- |:------------------------------------------------------------------------- |:-------- |:----------------- |
< +| wechat.webhook                    | The webhook address of the wechat robot                                   | Yes      | -                 |
< +| wechat.connectTimeoutMilliseconds | The timeout period for establishing a connection with the wechat server   | No       | 3000 milliseconds |
< +| wechat.readTimeoutMilliseconds    | The timeout period for reading available resources from the wechat server | No       | 5000 milliseconds |
<  
<  ## Dingtalk Notification Strategy
<  
< @@ -107,10 +107,10 @@ Maven POM:
<  
<  Configuration: 
<  
< -| Name                               | Description                                                                 | Required | Default Value     |
< -| ---------------------------------- |:--------------------------------------------------------------------------- |:-------- |:----------------- |
< -| dingtalk.webhook                   | The webhook address of the dingtalk robot                                   | Yes      | -                 |
< -| dingtalk.keyword                   | Custom keywords                                                             | No       | null              |
< -| dingtalk.secret                    | Secret for dingtalk robot                                                   | No       | null              |
< -| dingtalk.connectTimeoutMillisecond | The timeout period for establishing a connection with the dingtalk server   | No       | 3000 milliseconds |
< -| dingtalk.readTimeoutMillisecond    | The timeout period for reading available resources from the dingtalk server | No       | 5000 milliseconds |
< +| Name                                | Description                                                                 | Required | Default Value     |
< +| ----------------------------------- |:--------------------------------------------------------------------------- |:-------- |:----------------- |
< +| dingtalk.webhook                    | The webhook address of the dingtalk robot                                   | Yes      | -                 |
< +| dingtalk.keyword                    | Custom keywords                                                             | No       | null              |
< +| dingtalk.secret                     | Secret for dingtalk robot                                                   | No       | null              |
< +| dingtalk.connectTimeoutMilliseconds | The timeout period for establishing a connection with the dingtalk server   | No       | 3000 milliseconds |
< +| dingtalk.readTimeoutMilliseconds    | The timeout period for reading available resources from the dingtalk server | No       | 5000 milliseconds |
---
> diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md
> index f7a3b63ea..4e6455fbd 100644
> --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md
> +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.cn.md
> @@ -216,7 +216,7 @@ public class JobDemo {
>      private static JobConfiguration createScheduleJobConfiguration() {
>          // 创建定时作业配置， 并且使用邮件通知策略
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("EMAIL").build();
> -        setEmailConfiguration(jobConfig);
> +        setEmailProperties(jobConfig);
>          return jobConfig;
>  
>      }
> @@ -224,13 +224,18 @@ public class JobDemo {
>      private static JobConfiguration createOneOffJobConfiguration() {
>          // 创建一次性作业配置， 并且使用邮件通知策略
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("EMAIL").build();
> -        setEmailConfiguration(jobConfig);
> +        setEmailProperties(jobConfig);
>          return jobConfig;
>      }
>  
> -    private static void setEmailConfiguration(final JobConfiguration jobConfig) {
> +    private static void setEmailProperties(final JobConfiguration jobConfig) {
>          // 设置邮件的配置
> -        jobConfig.getExtraConfigurations().add(EmailConfiguration.newBuilder("host", 465, "username", "password", "from@xxx.xx", "to1@xxx.xx,to2xxx.xx").build());
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.HOST, "host");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.PORT, "465");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.USERNAME, "username");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.PASSWORD, "password");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.FROM, "from@xxx.xx");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.TO, "to1@xxx.xx,to1@xxx.xx");
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> @@ -265,7 +270,7 @@ public class JobDemo {
>      private static JobConfiguration createScheduleJobConfiguration() {
>          // 创建定时作业配置， 并且使用企业微信通知策略
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("WECHAT").build();
> -        setWechatConfiguration(jobConfig);
> +        setWechatProperties(jobConfig);
>          return jobConfig;
>  
>      }
> @@ -273,13 +278,13 @@ public class JobDemo {
>      private static JobConfiguration createOneOffJobConfiguration() {
>          // 创建一次性作业配置， 并且使用企业微信通知策略
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("WECHAT").build();
> -        setWechatConfiguration(jobConfig);
> +        setWechatProperties(jobConfig);
>          return jobConfig;
>      }
>  
> -    private static void setWechatConfiguration(final JobConfiguration jobConfig) {
> +    private static void setWechatProperties(final JobConfiguration jobConfig) {
>          // 设置企业微信的配置
> -        jobConfig.getExtraConfigurations().add(WechatConfiguration.newBuilder("you_webhook").build());
> +        jobConfig.getProps().setProperty(WechatPropertiesConstants.WEBHOOK, "you_webhook");
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> @@ -315,21 +320,23 @@ public class JobDemo {
>      private static JobConfiguration createScheduleJobConfiguration() {
>          // 创建定时作业配置， 并且使用企业微信通知策略
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("DINGTALK").build();
> -        setWechatConfiguration(jobConfig);
> +        setDingtalkProperties(jobConfig);
>          return jobConfig;
>  
>      }
>  
>      private static JobConfiguration createOneOffJobConfiguration() {
> -        // 创建一次性作业配置， 并且使用企业微信通知策略
> +        // 创建一次性作业配置， 并且使用钉钉通知策略
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("DINGTALK").build();
> -        setWechatConfiguration(jobConfig);
> +        setDingtalkProperties(jobConfig);
>          return jobConfig;
>      }
>  
> -    private static void setDingtalkConfiguration(final JobConfiguration jobConfig) {
> +    private static void setDingtalkProperties(final JobConfiguration jobConfig) {
>          // 设置钉钉的配置
> -        jobConfig.getExtraConfigurations().add(DingtalkConfiguration.newBuilder("you_webhook").keyword("keyword").secret("secret").build());
> +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.WEBHOOK, "you_webhook");
> +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.KEYWORD, "you_keyword");
> +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.SECRET, "you_secret");
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
> index 793c843b4..ef02e097a 100644
> --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
> +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
> @@ -215,7 +215,7 @@ public class JobDemo {
>      private static JobConfiguration createScheduleJobConfiguration() {
>          // Create scheduling job configuration, and the use of email notification strategy.
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("EMAIL").build();
> -        setEmailConfiguration(jobConfig);
> +        setEmailProperties(jobConfig);
>          return jobConfig;
>  
>      }
> @@ -223,13 +223,18 @@ public class JobDemo {
>      private static JobConfiguration createOneOffJobConfiguration() {
>          // Create one-time job configuration, and the use of email notification strategy.
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("EMAIL").build();
> -        setEmailConfiguration(jobConfig);
> +        setEmailProperties(jobConfig);
>          return jobConfig;
>      }
>  
> -    private static void setEmailConfiguration(final JobConfiguration jobConfig) {
> +    private static void setEmailProperties(final JobConfiguration jobConfig) {
>          // Set the mail configuration.
> -        jobConfig.getExtraConfigurations().add(EmailConfiguration.newBuilder("host", 465, "username", "password", "from@xxx.xx", "to1@xxx.xx,to2xxx.xx").build());
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.HOST, "host");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.PORT, "465");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.USERNAME, "username");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.PASSWORD, "password");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.FROM, "from@xxx.xx");
> +        jobConfig.getProps().setProperty(EmailPropertiesConstants.TO, "to1@xxx.xx,to1@xxx.xx");
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> @@ -264,7 +269,7 @@ public class JobDemo {
>      private static JobConfiguration createScheduleJobConfiguration() {
>          // Create scheduling job configuration, and the use of wechat enterprise notification strategy.
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("WECHAT").build();
> -        setWechatConfiguration(jobConfig);
> +        setWechatProperties(jobConfig);
>          return jobConfig;
>  
>      }
> @@ -272,13 +277,13 @@ public class JobDemo {
>      private static JobConfiguration createOneOffJobConfiguration() {
>          // Create one-time job configuration, and the use of wechat enterprise notification strategy.
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("WECHAT").build();
> -        setWechatConfiguration(jobConfig);
> +        setWechatProperties(jobConfig);
>          return jobConfig;
>      }
>  
> -    private static void setWechatConfiguration(final JobConfiguration jobConfig) {
> +    private static void setWechatProperties(final JobConfiguration jobConfig) {
>          // Set the configuration for the enterprise wechat.
> -        jobConfig.getExtraConfigurations().add(WechatConfiguration.newBuilder("you_webhook").build());
> +        jobConfig.getProps().setProperty(WechatPropertiesConstants.WEBHOOK, "you_webhook");
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> @@ -311,23 +316,25 @@ public class JobDemo {
>      }
>      
>      private static JobConfiguration createScheduleJobConfiguration() {
> -        // Create scheduling job configuration, and the use of wechat enterprise notification strategy.
> +        // Create scheduling job configuration, and the use of dingtalk  notification strategy.
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("DINGTALK").build();
> -        setWechatConfiguration(jobConfig);
> +        setDingtalkProperties(jobConfig);
>          return jobConfig;
>  
>      }
>  
>      private static JobConfiguration createOneOffJobConfiguration() {
> -        // Create one-time job configuration, and the use of wechat enterprise notification strategy.
> +        // Create one-time job configuration, and the use of dingtalk notification strategy.
>          JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("DINGTALK").build();
> -        setWechatConfiguration(jobConfig);
> +        setDingtalkProperties(jobConfig);
>          return jobConfig;
>      }
>  
> -    private static void setDingtalkConfiguration(final JobConfiguration jobConfig) {
> +    private static void setDingtalkProperties(final JobConfiguration jobConfig) {
>          // Set the configuration of the dingtalk.
> -        jobConfig.getExtraConfigurations().add(DingtalkConfiguration.newBuilder("you_webhook").keyword("keyword").secret("secret").build());
> +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.WEBHOOK, "you_webhook");
> +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.KEYWORD, "you_keyword");
> +        jobConfig.getProps().setProperty(DingtalkPropertiesConstants.SECRET, "you_secret");
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md
> index e87e02f4f..ed8e3210e 100644
> --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md
> +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.cn.md
> @@ -99,3 +99,136 @@ public class OneOffJobController {
>  }
>  ```
>  
> +
> +## 配置错误处理策略
> +
> +使用 ElasticJob-Lite 过程中当作业发生异常后，可采用以下错误处理策略。
> +
> +| *错误处理策略名称*         | *说明*                            |  *是否内置* | *是否默认*| *是否需要额外配置* |
> +| ----------------------- | --------------------------------- |  -------  |  --------|  -------------  |
> +| 记录日志策略              | 记录作业异常日志，但不中断作业执行     |   是       |     是   |                 |
> +| 抛出异常策略              | 抛出系统异常并中断作业执行            |   是       |         |                 |
> +| 忽略异常策略              | 忽略系统异常且不中断作业执行          |   是       |          |                 |
> +| 邮件通知策略              | 发送邮件消息通知，但不中断作业执行     |            |          |      是         |
> +| 企业微信通知策略           | 发送企业微信消息通知，但不中断作业执行 |            |          |      是          |
> +| 钉钉通知策略              | 发送钉钉消息通知，但不中断作业执行     |            |          |      是          |
> +
> +### 记录日志策略
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: LOG 
> +```
> +
> +### 抛出异常策略
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: THROW 
> +```
> +
> +
> +### 忽略异常策略
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: IGNORE 
> +```
> +
> +### 邮件通知策略
> +
> +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#邮件通知策略) 了解更多。
> +
> +Maven POM:
> +```xml
> +<dependency>
> +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
> +    <artifactId>elasticjob-error-handler-email</artifactId>
> +    <version>${latest.release.version}</version>
> +</dependency>
> +```
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: EMAIL 
> +  props:
> +    email:
> +      host: host
> +      port: 465
> +      username: username
> +      password: password
> +      useSsl: true
> +      subject: ElasticJob error message
> +      from: from@xxx.xx
> +      to: to1@xxx.xx,to2@xxx.xx
> +      cc: cc@xxx.xx
> +      bcc: bcc@xxx.xx
> +      debug: false
> +```
> +
> +### 企业微信通知策略
> +
> +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#企业微信通知策略) 了解更多。
> +
> +Maven POM:
> +```xml
> +<dependency>
> +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
> +    <artifactId>elasticjob-error-handler-wechat</artifactId>
> +    <version>${latest.release.version}</version>
> +</dependency>
> +```
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: WECHAT 
> +  props:
> +    wechat:
> +      webhook: you_webhook
> +      connectTimeout: 3000
> +      readTimeout: 5000
> +```
> +
> +
> +### 钉钉通知策略
> +
> +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#钉钉通知策略) 了解更多。
> +
> +Maven POM:
> +```xml
> +<dependency>
> +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
> +    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
> +    <version>${latest.release.version}</version>
> +</dependency>
> +```
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: DINGTALK 
> +  props:
> +    dingtalk:
> +       webhook: you_webhook
> +       keyword: you_keyword
> +       secret: you_secret
> +       connectTimeout: 3000
> +       readTimeout: 5000
> +```
> diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md
> index da60a9d33..10c4399a9 100644
> --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md
> +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter.en.md
> @@ -100,3 +100,134 @@ public class OneOffJobController {
>      }
>  }
>  ```
> +
> +## Configuration error handler strategy
> +
> +In the process of using ElasticJob-Lite, when the job is abnormal, the following error handling strategies can be used.
> +
> +| *Error handler strategy name*            | *Description*                                                 |  *Built-in*  | *Default*| *Extra config*   |
> +| ---------------------------------------- | ------------------------------------------------------------- |  -------     |  --------|  --------------  |
> +| Log Strategy                             | Log error and do not interrupt job                            |   Yes        |     Yes  |                  |
> +| Throw Strategy                           | Throw system exception and interrupt job                      |   Yes        |          |                  |
> +| Ignore Strategy                          | Ignore exception and do not interrupt job                     |   Yes        |          |                  |
> +| Email Notification Strategy              | Send email message notification and do not interrupt job      |              |          |    Yes           |
> +| Wechat Enterprise Notification Strategy  | Send wechat message notification and do not interrupt job     |              |          |    Yes           |
> +| Dingtalk Notification Strategy           | Send dingtalk message notification and do not interrupt job   |              |          |    Yes           |
> +
> +### Log Strategy
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: LOG 
> +```
> +
> +### Throw Strategy
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: THROW 
> +```
> +
> +### Ignore Strategy
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: IGNORE 
> +```
> +
> +### Email Notification Strategy
> +
> +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#email-notification-strategy) for more details.
> +
> +Maven POM:
> +```xml
> +<dependency>
> +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
> +    <artifactId>elasticjob-error-handler-email</artifactId>
> +    <version>${latest.release.version}</version>
> +</dependency>
> +```
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: EMAIL 
> +  props:
> +    email:
> +      host: host
> +      port: 465
> +      username: username
> +      password: password
> +      useSsl: true
> +      subject: ElasticJob error message
> +      from: from@xxx.xx
> +      to: to1@xxx.xx,to2@xxx.xx
> +      cc: cc@xxx.xx
> +      bcc: bcc@xxx.xx
> +      debug: false
> +```
> +
> +### Wechat Enterprise Notification Strategy
> +
> +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#wechat-enterprise-notification-strategy) for more details.
> +
> +Maven POM:
> +```xml
> +<dependency>
> +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
> +    <artifactId>elasticjob-error-handler-wechat</artifactId>
> +    <version>${latest.release.version}</version>
> +</dependency>
> +```
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: WECHAT 
> +  props:
> +    wechat:
> +      webhook: you_webhook
> +      connectTimeout: 3000
> +      readTimeout: 5000
> +```
> +
> +### Dingtalk Notification Strategy
> +
> +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#dingtalk-notification-strategy) for more details.
> +
> +Maven POM:
> +```xml
> +<dependency>
> +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
> +    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
> +    <version>${latest.release.version}</version>
> +</dependency>
> +```
> +```yaml
> +elasticjob:
> +  regCenter:
> +    ...
> +  jobs:
> +    ...
> +    jobErrorHandlerType: DINGTALK 
> +  props:
> +    dingtalk:
> +       webhook: you_webhook
> +       keyword: you_keyword
> +       secret: you_secret
> +       connectTimeout: 3000
> +       readTimeout: 5000
> +```
