1c1
< commit 0e8fc56e5fdd8205809275b7d0bf2304b9772761
---
> commit 9e34992b720cbc2decdd035e4663c41151bb94b5
3c3
< Date:   Tue Oct 20 19:37:50 2020 +0800
---
> Date:   Wed Oct 21 11:54:11 2020 +0800
5c5
<     Add usage for java API (#1619)
---
>     Add usage of  error-handler  for spring-namespace  (#1623)
7c7
<     * Add usage error-handler for java API document
---
>     * Revise java-api then error handler configuration to build
9c9
<     * Optimize usage error-handler for java API document
---
>     * Add error handel docs for spring-namespace.*.md
12c12
< index 7506d5ba9..22356c193 100644
---
> index 22356c193..f7a3b63ea 100644
15c15,40
< @@ -91,3 +91,252 @@ public class JobMain {
---
> @@ -230,8 +230,7 @@ public class JobDemo {
>  
>      private static void setEmailConfiguration(final JobConfiguration jobConfig) {
>          // 设置邮件的配置
> -        jobConfig.getExtraConfigurations().add(new EmailConfiguration(
> -                "host", 465, "username", "password", true, "Test elasticJob error message", "from@xxx.com", "to1@xxx.com,to2xxx.com", "cc@xxx.com", "bcc@xxx.com", false));
> +        jobConfig.getExtraConfigurations().add(EmailConfiguration.newBuilder("host", 465, "username", "password", "from@xxx.xx", "to1@xxx.xx,to2xxx.xx").build());
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> @@ -280,7 +279,7 @@ public class JobDemo {
>  
>      private static void setWechatConfiguration(final JobConfiguration jobConfig) {
>          // 设置企业微信的配置
> -        jobConfig.getExtraConfigurations().add(new WechatConfiguration("webhook", 3000, 5000));
> +        jobConfig.getExtraConfigurations().add(WechatConfiguration.newBuilder("you_webhook").build());
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> @@ -330,8 +329,7 @@ public class JobDemo {
>  
>      private static void setDingtalkConfiguration(final JobConfiguration jobConfig) {
>          // 设置钉钉的配置
> -        jobConfig.getExtraConfigurations().add(new DingtalkConfiguration("webhook", 
> -                "keyword", "secret", 3000, 5000));
> +        jobConfig.getExtraConfigurations().add(DingtalkConfiguration.newBuilder("you_webhook").keyword("keyword").secret("secret").build());
17c42,83
<  }
---
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
> index 3c1125b8c..793c843b4 100644
> --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
> +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
> @@ -229,8 +229,7 @@ public class JobDemo {
>  
>      private static void setEmailConfiguration(final JobConfiguration jobConfig) {
>          // Set the mail configuration.
> -        jobConfig.getExtraConfigurations().add(new EmailConfiguration(
> -                "host", 465, "username", "password", true, "Test elasticJob error message", "from@xxx.com", "to1@xxx.com,to2xxx.com", "cc@xxx.com", "bcc@xxx.com", false));
> +        jobConfig.getExtraConfigurations().add(EmailConfiguration.newBuilder("host", 465, "username", "password", "from@xxx.xx", "to1@xxx.xx,to2xxx.xx").build());
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> @@ -279,7 +278,7 @@ public class JobDemo {
>  
>      private static void setWechatConfiguration(final JobConfiguration jobConfig) {
>          // Set the configuration for the enterprise wechat.
> -        jobConfig.getExtraConfigurations().add(new WechatConfiguration("webhook", 3000, 5000));
> +        jobConfig.getExtraConfigurations().add(WechatConfiguration.newBuilder("you_webhook").build());
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> @@ -328,8 +327,7 @@ public class JobDemo {
>  
>      private static void setDingtalkConfiguration(final JobConfiguration jobConfig) {
>          // Set the configuration of the dingtalk.
> -        jobConfig.getExtraConfigurations().add(new DingtalkConfiguration("webhook", 
> -                "keyword", "secret", 3000, 5000));
> +        jobConfig.getExtraConfigurations().add(DingtalkConfiguration.newBuilder("you_webhook").keyword("keyword").secret("secret").build());
>      }
>  
>      private static CoordinatorRegistryCenter createRegistryCenter() {
> diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.cn.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.cn.md
> index eb2f98f80..a10cb2c3b 100644
> --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.cn.md
> +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.cn.md
> @@ -70,3 +70,69 @@ ElasticJob-Lite 提供自定义的 Spring 命名空间，可以与 Spring 容器
>      <elasticjob:snapshot id="jobSnapshot" registry-center-ref="regCenter" dump-port="9999" />    
>  </beans>
34,117c100
< +### 记录日志策略
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  定时调度作业
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // 一次性调度作业
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // 创建定时作业配置， 并且使用记录日志策略
< +        return JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("LOG").build();
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // 创建一次性作业配置， 并且使用记录日志策略
< +        return JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("LOG").build();
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // 配置注册中心
< +        ...
< +    }
< +}
< +```
< +
< +### 抛出异常策略
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  定时调度作业
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // 一次性调度作业
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // 创建定时作业配置， 并且使用抛出异常策略
< +        return JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("THROW").build();
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // 创建一次性作业配置， 并且使用抛出异常策略
< +        return JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("THROW").build();
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // 配置注册中心
< +        ...
< +    }
< +}
< +```
< +
< +
< +### 忽略异常策略
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  定时调度作业
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // 一次性调度作业
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // 创建定时作业配置， 并且使用忽略异常策略
< +        return JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("IGNORE").build();
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // 创建一次性作业配置， 并且使用忽略异常策略
< +        return JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("IGNORE").build();
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // 配置注册中心
< +        ...
< +    }
< +}
< +```
---
> +以下示例用于展示如何通过 Spring 命名空间配置错误处理策略。
119d101
< +### 邮件通知策略
121,123d102
< +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#邮件通知策略) 了解更多。
< +
< +Maven POM:
125,217c104,146
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-email</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  定时调度作业
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // 一次性调度作业
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // 创建定时作业配置， 并且使用邮件通知策略
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("EMAIL").build();
< +        setEmailConfiguration(jobConfig);
< +        return jobConfig;
< +
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // 创建一次性作业配置， 并且使用邮件通知策略
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("EMAIL").build();
< +        setEmailConfiguration(jobConfig);
< +        return jobConfig;
< +    }
< +
< +    private static void setEmailConfiguration(final JobConfiguration jobConfig) {
< +        // 设置邮件的配置
< +        jobConfig.getExtraConfigurations().add(new EmailConfiguration(
< +                "host", 465, "username", "password", true, "Test elasticJob error message", "from@xxx.com", "to1@xxx.com,to2xxx.com", "cc@xxx.com", "bcc@xxx.com", false));
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // 配置注册中心
< +        ...
< +    }
< +}
< +```
< +
< +### 企业微信通知策略
< +
< +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#企业微信通知策略) 了解更多。
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-wechat</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  定时调度作业
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // 一次性调度作业
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // 创建定时作业配置， 并且使用企业微信通知策略
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("WECHAT").build();
< +        setWechatConfiguration(jobConfig);
< +        return jobConfig;
< +
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // 创建一次性作业配置， 并且使用企业微信通知策略
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("WECHAT").build();
< +        setWechatConfiguration(jobConfig);
< +        return jobConfig;
< +    }
< +
< +    private static void setWechatConfiguration(final JobConfiguration jobConfig) {
< +        // 设置企业微信的配置
< +        jobConfig.getExtraConfigurations().add(new WechatConfiguration("webhook", 3000, 5000));
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // 配置注册中心
< +        ...
< +    }
< +}
< +```
< +
---
> +<?xml version="1.0" encoding="UTF-8"?>
> +<beans xmlns="http://www.springframework.org/schema/beans"
> +       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
> +       xmlns:elasticjob="http://shardingsphere.apache.org/schema/elasticjob"
> +       xsi:schemaLocation="http://www.springframework.org/schema/beans
> +                           http://www.springframework.org/schema/beans/spring-beans.xsd
> +                           http://shardingsphere.apache.org/schema/elasticjob
> +                           http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd
> +                         ">
> +    
> +    <!-- 记录日志策略 -->
> +    <elasticjob:job  ... job-error-handler-type="LOG"   />
> +
> +    <!-- 抛出异常策略 -->
> +    <elasticjob:job  ... job-error-handler-type="THROW"   />
> +
> +    <!-- 忽略异常策略 -->
> +    <elasticjob:job  ... job-error-handler-type="IGNORE"   />
> +
> +    <!-- 邮件通知策略 -->
> +    <elasticjob:email-error-handler id="emailErrorHandlerConfig" host="host" port="465" username="username"
> +                                    password="password" use-ssl="true" subject="ElasticJob error message"
> +                                    from="from@xxx.com" to="to1@xxx.com,to2@xxx.com"
> +                                    cc="cc@xxx.com" bcc="bcc@xxx.com"
> +                                    debug="false"/>
> +
> +    <elasticjob:job  ... job-error-handler-type="EMAIL"  error-handler-config-ref="emailErrorHandlerConfig" />
> +
> +
> +    <!-- 企业微信通知策略 -->
> +    <elasticjob:wechat-error-handler id="wechatErrorHandlerConfig"
> +                                        webhook="you_webhook"
> +                                        connect-timeout-millisecond="3000"
> +                                        read-timeout-millisecond="5000"/>
> +
> +    <elasticjob:job  ... job-error-handler-type="WECHAT"  error-handler-config-ref="wechatErrorHandlerConfig" />
> +
> +    <!-- 钉钉通知策略 -->
> +    <elasticjob:dingtalk-error-handler id="dingtalkErrorHandlerConfig"
> +                                       webhook="you_webhook"
> +                                       keyword="keyword" secret="secret"
> +                                       connect-timeout-millisecond="3000"
> +                                       read-timeout-millisecond="5000"/>
219,266c148,149
< +### 钉钉通知策略
< +
< +请参考 [这里](/cn/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#钉钉通知策略) 了解更多。
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  定时调度作业
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // 一次性调度作业
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // 创建定时作业配置， 并且使用企业微信通知策略
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("DINGTALK").build();
< +        setWechatConfiguration(jobConfig);
< +        return jobConfig;
< +
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // 创建一次性作业配置， 并且使用企业微信通知策略
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("DINGTALK").build();
< +        setWechatConfiguration(jobConfig);
< +        return jobConfig;
< +    }
< +
< +    private static void setDingtalkConfiguration(final JobConfiguration jobConfig) {
< +        // 设置钉钉的配置
< +        jobConfig.getExtraConfigurations().add(new DingtalkConfiguration("webhook", 
< +                "keyword", "secret", 3000, 5000));
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // 配置注册中心
< +        ...
< +    }
< +}
---
> +    <elasticjob:job  ... job-error-handler-type="DINGTALK"  error-handler-config-ref="dingtalkErrorHandlerConfig" />
> +</beans>
269,273c152,156
< diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
< index 21fe72726..3c1125b8c 100644
< --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
< +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/java-api.en.md
< @@ -79,20 +79,262 @@ Please refer to [Operation Manual](/en/user-manual/elasticjob-lite/operation/dum
---
> diff --git a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.en.md b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.en.md
> index f49c0708e..7b0f1473c 100644
> --- a/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.en.md
> +++ b/docs/content/user-manual/elasticjob-lite/usage/job-api/spring-namespace.en.md
> @@ -53,15 +53,85 @@ Please refer to [Operation Manual](/en/user-manual/elasticjob-lite/operation/dum
275c158
<  The example below is how to configure spring namespace for open listener port to dump.
---
>  The example below is how to configure SnapshotService for open listener port to dump.
277,288c160,186
< +```java
< +public class JobMain {
< +    
< +    public static void main(final String[] args) {
< +        SnapshotService snapshotService = new SnapshotService(regCenter, 9888).listen();
< +    }
< +    
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // create registry center
< +    }
< +}
< +```
---
> -```java
> -public class JobMain {
> -    
> -    public static void main(final String[] args) {
> -        SnapshotService snapshotService = new SnapshotService(regCenter, 9888).listen();
> -    }
> +```xml
> +<?xml version="1.0" encoding="UTF-8"?>
> +<beans xmlns="http://www.springframework.org/schema/beans"
> +       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
> +       xmlns:elasticjob="http://shardingsphere.apache.org/schema/elasticjob"
> +       xsi:schemaLocation="http://www.springframework.org/schema/beans
> +                           http://www.springframework.org/schema/beans/spring-beans.xsd
> +                           http://shardingsphere.apache.org/schema/elasticjob
> +                           http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd
> +                         ">
> +    <!--Create registry center -->
> +    <elasticjob:zookeeper id="regCenter" server-lists="yourhost:2181" namespace="dd-job" base-sleep-time-milliseconds="1000" max-sleep-time-milliseconds="3000" max-retries="3" />
>      
> -    private static CoordinatorRegistryCenter createRegistryCenter() {
> -        // Create registry center
> -    }
> -}
> +    <!--Configure the task snapshot export service -->
> +    <elasticjob:snapshot id="jobSnapshot" registry-center-ref="regCenter" dump-port="9999" />    
> +</beans>
>  ```
303,358c201
< +### Log Strategy
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  Scheduling Jobs
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // One-time Scheduling Jobs
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // Create scheduling job configuration, and the use of log strategy
< +        return JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("LOG").build();
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // Create one-time job configuration, and the use of log strategy
< +        return JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("LOG").build();
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // create registry center
< +        ...
< +    }
< +}
< +```
< +
< +### Throw Strategy
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  Scheduling Jobs
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // One-time Scheduling Jobs
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // Create scheduling job configuration, and the use of throw strategy.
< +        return JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("THROW").build();
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // Create one-time job configuration, and the use of throw strategy
< +        return JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("THROW").build();
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // create registry center
< +        ...
< +    }
< +}
< +```
< +
---
> +The following example shows how to configure the error-handling policy through the Spring namespace.
360,453d202
< +### Ignore Strategy
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  Scheduling Jobs
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // One-time Scheduling Jobs
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // Create scheduling job configuration, and the use of ignore strategy.
< +        return JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("IGNORE").build();
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // Create one-time job configuration, and the use of ignore strategy.
< +        return JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("IGNORE").build();
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // create registry center.
< +        ...
< +    }
< +}
< +```
< +
< +### Email Notification Strategy
< +
< +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#email-notification-strategy) for more details.
< +
< +Maven POM:
<  ```xml
< -<?xml version="1.0" encoding="UTF-8"?>
< -<beans xmlns="http://www.springframework.org/schema/beans"
< -       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
< -       xmlns:elasticjob="http://shardingsphere.apache.org/schema/elasticjob"
< -       xsi:schemaLocation="http://www.springframework.org/schema/beans
< -                           http://www.springframework.org/schema/beans/spring-beans.xsd
< -                           http://shardingsphere.apache.org/schema/elasticjob
< -                           http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd
< -                         ">
< -    <!--Configure register center -->
< -    <elasticjob:zookeeper id="regCenter" server-lists="yourhost:2181" namespace="dd-job" base-sleep-time-milliseconds="1000" max-sleep-time-milliseconds="3000" max-retries="3" />
< -    
< -    <!--Configure snapshot for dump service -->
< -    <elasticjob:snapshot id="jobSnapshot" registry-center-ref="regCenter" dump-port="9999" />    
< -</beans>
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-email</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
<  ```
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  Scheduling Jobs
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // One-time Scheduling Jobs
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // Create scheduling job configuration, and the use of email notification strategy.
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("EMAIL").build();
< +        setEmailConfiguration(jobConfig);
< +        return jobConfig;
< +
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // Create one-time job configuration, and the use of email notification strategy.
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("EMAIL").build();
< +        setEmailConfiguration(jobConfig);
< +        return jobConfig;
< +    }
< +
< +    private static void setEmailConfiguration(final JobConfiguration jobConfig) {
< +        // Set the mail configuration.
< +        jobConfig.getExtraConfigurations().add(new EmailConfiguration(
< +                "host", 465, "username", "password", true, "Test elasticJob error message", "from@xxx.com", "to1@xxx.com,to2xxx.com", "cc@xxx.com", "bcc@xxx.com", false));
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // create registry center.
< +        ...
< +    }
< +}
< +```
< +
< +### Wechat Enterprise Notification Strategy
455,457d203
< +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#wechat-enterprise-notification-strategy) for more details.
< +
< +Maven POM:
459,502c205,247
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-wechat</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  Scheduling Jobs.
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // One-time Scheduling Jobs.
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // Create scheduling job configuration, and the use of wechat enterprise notification strategy.
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("WECHAT").build();
< +        setWechatConfiguration(jobConfig);
< +        return jobConfig;
< +
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // Create one-time job configuration, and the use of wechat enterprise notification strategy.
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("WECHAT").build();
< +        setWechatConfiguration(jobConfig);
< +        return jobConfig;
< +    }
< +
< +    private static void setWechatConfiguration(final JobConfiguration jobConfig) {
< +        // Set the configuration for the enterprise wechat.
< +        jobConfig.getExtraConfigurations().add(new WechatConfiguration("webhook", 3000, 5000));
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // create registry center.
< +        ...
< +    }
< +}
< +```
< +
< +### Dingtalk Notification Strategy
---
> +<?xml version="1.0" encoding="UTF-8"?>
> +<beans xmlns="http://www.springframework.org/schema/beans"
> +       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
> +       xmlns:elasticjob="http://shardingsphere.apache.org/schema/elasticjob"
> +       xsi:schemaLocation="http://www.springframework.org/schema/beans
> +                           http://www.springframework.org/schema/beans/spring-beans.xsd
> +                           http://shardingsphere.apache.org/schema/elasticjob
> +                           http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd
> +                         ">
> +    
> +    <!-- Log Strategy -->
> +    <elasticjob:job  ... job-error-handler-type="LOG"   />
> +
> +    <!-- Throw Strategy -->
> +    <elasticjob:job  ... job-error-handler-type="THROW"   />
> +
> +    <!-- Ignore Strategy -->
> +    <elasticjob:job  ... job-error-handler-type="IGNORE"   />
> +
> +    <!-- Email Notification Strategy  -->
> +    <elasticjob:email-error-handler id="emailErrorHandlerConfig" host="host" port="465" username="username"
> +                                    password="password" use-ssl="true" subject="ElasticJob error message"
> +                                    from="from@xxx.com" to="to1@xxx.com,to2@xxx.com"
> +                                    cc="cc@xxx.com" bcc="bcc@xxx.com"
> +                                    debug="false"/>
> +
> +    <elasticjob:job  ... job-error-handler-type="EMAIL"  error-handler-config-ref="emailErrorHandlerConfig" />
> +
> +
> +    <!-- Wechat Enterprise Notification Strategy -->
> +    <elasticjob:wechat-error-handler id="wechatErrorHandlerConfig"
> +                                        webhook="you_webhook"
> +                                        connect-timeout-millisecond="3000"
> +                                        read-timeout-millisecond="5000"/>
> +
> +    <elasticjob:job  ... job-error-handler-type="WECHAT"  error-handler-config-ref="wechatErrorHandlerConfig" />
> +
> +    <!-- Dingtalk Notification Strategy  -->
> +    <elasticjob:dingtalk-error-handler id="dingtalkErrorHandlerConfig"
> +                                       webhook="you_webhook"
> +                                       keyword="keyword" secret="secret"
> +                                       connect-timeout-millisecond="3000"
> +                                       read-timeout-millisecond="5000"/>
504,549c249,250
< +Please refer to [here](/en/user-manual/elasticjob-lite/configuration/built-in-strategy/error-handler/#dingtalk-notification-strategy) for more details.
< +
< +Maven POM:
< +```xml
< +<dependency>
< +    <groupId>org.apache.shardingsphere.elasticjob</groupId>
< +    <artifactId>elasticjob-error-handler-dingtalk</artifactId>
< +    <version>${latest.release.version}</version>
< +</dependency>
< +```
< +```java
< +public class JobDemo {
< +    
< +    public static void main(String[] args) {
< +        //  Scheduling Jobs.
< +        new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createScheduleJobConfiguration()).schedule();
< +        // One-time Scheduling Jobs.
< +        new OneOffJobBootstrap(createRegistryCenter(), new MyJob(), createOneOffJobConfiguration()).execute();
< +    }
< +    
< +    private static JobConfiguration createScheduleJobConfiguration() {
< +        // Create scheduling job configuration, and the use of wechat enterprise notification strategy.
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myScheduleJob", 3).cron("0/5 * * * * ?").jobErrorHandlerType("DINGTALK").build();
< +        setWechatConfiguration(jobConfig);
< +        return jobConfig;
< +
< +    }
< +
< +    private static JobConfiguration createOneOffJobConfiguration() {
< +        // Create one-time job configuration, and the use of wechat enterprise notification strategy.
< +        JobConfiguration jobConfig = JobConfiguration.newBuilder("myOneOffJob", 3).jobErrorHandlerType("DINGTALK").build();
< +        setWechatConfiguration(jobConfig);
< +        return jobConfig;
< +    }
< +
< +    private static void setDingtalkConfiguration(final JobConfiguration jobConfig) {
< +        // Set the configuration of the dingtalk.
< +        jobConfig.getExtraConfigurations().add(new DingtalkConfiguration("webhook", 
< +                "keyword", "secret", 3000, 5000));
< +    }
< +
< +    private static CoordinatorRegistryCenter createRegistryCenter() {
< +        // create registry center.
< +        ...
< +    }
< +}
---
> +    <elasticjob:job  ... job-error-handler-type="DINGTALK"  error-handler-config-ref="dingtalkErrorHandlerConfig" />
> +</beans>
