commit 6e1a9d7648f2393ad9c1104eb60acde9bcaf7d72
Author: Haoran Meng <menghaoranss@gmail.com>
Date:   Wed Sep 9 21:34:14 2020 +0800

    Refactor document for governance (#7361)

diff --git a/docs/document/content/features/governance/_index.cn.md b/docs/document/content/features/governance/_index.cn.md
index b481e4c01f..03da76aa1e 100644
--- a/docs/document/content/features/governance/_index.cn.md
+++ b/docs/document/content/features/governance/_index.cn.md
@@ -29,7 +29,6 @@ chapter = true
 
 - 实现配置中心：支持 Zookeeper/etcd/Apollo/Nacos，管理数据源、规则和策略的配置。
 - 实现注册中心：支持 Zookeeper/etcd，管理各个 Proxy 示例的状态。
-- 实现元数据中心：支持 Zookeeper/etcd，管理 LogicSchema 的元数据。
 
 对于可观测性，目标如下：
 
diff --git a/docs/document/content/features/governance/_index.en.md b/docs/document/content/features/governance/_index.en.md
index 2c00871f50..ab845d6d41 100644
--- a/docs/document/content/features/governance/_index.en.md
+++ b/docs/document/content/features/governance/_index.en.md
@@ -29,7 +29,6 @@ For the governance function, the goals are as follows:
 
 - Realize the configuration center: support Zookeeper/etcd/Apollo/Nacos, manage the configuration of data sources, rules and policies.
 - Realize the registration center: support Zookeeper/etcd, manage the status of each Proxy example.
-- Implement metadata center: support Zookeeper/etcd, manage metadata of LogicSchema.
 
 For observability, the goals are as follows:
 
diff --git a/docs/document/content/features/governance/management/_index.cn.md b/docs/document/content/features/governance/management/_index.cn.md
index d233b1ea51..9272af762c 100644
--- a/docs/document/content/features/governance/management/_index.cn.md
+++ b/docs/document/content/features/governance/management/_index.cn.md
@@ -11,5 +11,4 @@ chapter = true
 
 * 配置中心
 * 注册中心
-* 元数据中心
 * 第三方组件依赖
diff --git a/docs/document/content/features/governance/management/config-center.cn.md b/docs/document/content/features/governance/management/config-center.cn.md
index c0a3d0cd1d..3c1b717dfe 100644
--- a/docs/document/content/features/governance/management/config-center.cn.md
+++ b/docs/document/content/features/governance/management/config-center.cn.md
@@ -11,22 +11,24 @@ weight = 1
 
 ## 配置中心数据结构
 
-配置中心在定义的命名空间的 `config` 节点下，以 YAML 格式存储，包括数据源信息，规则信息、权限配置和属性配置，可通过修改节点来实现对于配置的动态管理。
+配置中心在定义的命名空间下，以 YAML 格式存储，包括数据源信息，规则信息、权限配置和属性配置，可通过修改节点来实现对于配置的动态管理。
 
 ```
-config
+namespace
     ├──authentication                            # 权限配置
     ├──props                                     # 属性配置
-    ├──schema                                    # Schema 配置
-    ├      ├──schema_1                           # Schema 名称1
+    ├──schemas                                   # Schema 配置
+    ├      ├──${schema_1}                        # Schema 名称1
     ├      ├      ├──datasource                  # 数据源配置
     ├      ├      ├──rule                        # 规则配置
-    ├      ├──schema_2                           # Schema 名称2
+    ├      ├      ├──table                       # 表结构配置
+    ├      ├──${schema_2}                        # Schema 名称2
     ├      ├      ├──datasource                  # 数据源配置
     ├      ├      ├──rule                        # 规则配置
+    ├      ├      ├──table                       # 表结构配置
 ```
 
-### config/authentication
+### /authentication
 
 权限配置，可配置访问 ShardingSphere-Proxy 的用户名和密码。
 
@@ -35,7 +37,7 @@ username: root
 password: root
 ```
 
-### config/props
+### /props
 
 属性配置，详情请参见[配置手册](/cn/user-manual/shardingsphere-jdbc/configuration/)。
 
@@ -44,7 +46,7 @@ executor.size: 20
 sql.show: true
 ```
 
-### config/schema/schemeName/datasource
+### /schemas/${schemeName}/datasource
 
 多个数据库连接池的集合，不同数据库连接池属性自适配（例如：DBCP，C3P0，Druid, HikariCP）。
 
@@ -76,7 +78,7 @@ dataSources:
       maxLifetimeMilliseconds: 1800000
 ```
 
-### config/schema/schemeName/rule
+### /schemas/${schemeName}/rule
 
 规则配置，可包括数据分片、读写分离、数据加密、影子库压测、多副本等配置。
 
@@ -92,6 +94,70 @@ rules:
   xxx
 ```
 
+### /schemas/${schemeName}/table
+
+表结构配置，暂不支持动态修改。
+
+```yaml
+configuredSchemaMetaData:                       # 配置了分片规则的表结构
+  tables:                                       # 表
+    t_order:                                    # 表名
+      columns:                                  # 列
+        id:                                     # 列名
+          caseSensitive: false
+          dataType: 0
+          generated: false
+          name: id
+          primaryKey: trues
+        order_id:
+          caseSensitive: false
+          dataType: 0
+          generated: false
+          name: order_id
+          primaryKey: false
+      indexs:                                   # 索引
+        t_user_order_id_index:                  # 索引名
+          name: t_user_order_id_index
+    t_order_item:
+      columns:
+        order_id:
+          caseSensitive: false
+          dataType: 0
+          generated: false
+          name: order_id
+          primaryKey: false
+unconfiguredSchemaMetaDataMap:                  # 没有配置分片规则的表结构
+  ds_0:                                         # 数据源
+    tables:                                     # 表
+      t_user:                                   # 表名
+        columns:                                # 列
+          user_id:                              # 列名
+            caseSensitive: false
+            dataType: 0
+            generated: false
+            name: user_id
+            primaryKey: false
+          id:
+            caseSensitive: false
+            dataType: 0
+            generated: false
+            name: id
+            primaryKey: true
+          order_id:
+            caseSensitive: false
+            dataType: 0
+            generated: false
+            name: order_id
+            primaryKey: false
+        indexes:                                # 索引
+          t_user_order_id_index:                # 索引名
+            name: t_user_order_id_index
+          t_user_user_id_index:
+            name: t_user_user_id_index
+          primary:
+            name: PRIMARY
+```
+
 ## 动态生效
 
 在配置中心上修改、删除、新增相关配置，会动态推送到生产环境并立即生效。
\ No newline at end of file
diff --git a/docs/document/content/features/governance/management/config-center.en.md b/docs/document/content/features/governance/management/config-center.en.md
index 5b115e46b7..b20796c007 100644
--- a/docs/document/content/features/governance/management/config-center.en.md
+++ b/docs/document/content/features/governance/management/config-center.en.md
@@ -11,22 +11,24 @@ weight = 1
 
 ## Structure in Configuration Center
 
-Under defined namespace `config` node, configuration center stores data sources, rule configurations, authentication configuration, and properties in YAML. Modifying nodes can dynamically refresh configurations.
+Under defined namespace, configuration center stores data sources, rule configurations, authentication configuration, and properties in YAML. Modifying nodes can dynamically refresh configurations.
 
 ```
-config
+namespace
     ├──authentication                            # Authentication configuration
     ├──props                                     # Properties configuration
-    ├──schema                                    # Schema configuration
-    ├      ├──schema_1                           # Schema name 1
+    ├──schemas                                   # Schema configuration
+    ├      ├──${schema_1}                        # Schema name 1
     ├      ├      ├──datasource                  # Datasource configuration
     ├      ├      ├──rule                        # Rule configuration
-    ├      ├──schema_2                           # Schema name 2
+    ├      ├      ├──table                       # Table configuration
+    ├      ├──${schema_2}                        # Schema name 2
     ├      ├      ├──datasource                  # Datasource configuration
     ├      ├      ├──rule                        # Rule configuration
+    ├      ├      ├──table                       # Table configuration
 ```
 
-### config/authentication
+### /authentication
 
 Authentication configuration. Can configure username and password for ShardingSphere-Proxy.
 
@@ -35,7 +37,7 @@ username: root
 password: root
 ```
 
-### config/props
+### /props
 
 Properties configuration. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-jdbc/configuration/) for more details.
 
@@ -44,7 +46,7 @@ executor.size: 20
 sql.show: true
 ```
 
-### config/schema/schemeName/datasource
+### /schemas/${schemeName}/datasource
 
 A collection of multiple database connection pools, whose properties (e.g. DBCP, C3P0, Druid and HikariCP) are configured by users themselves.
 
@@ -76,7 +78,7 @@ dataSources:
       maxLifetimeMilliseconds: 1800000
 ```
 
-### config/schema/schemeName/rule
+### /schemas/${schemeName}/rule
 
 Rule configurations, including sharding, read-write split, data encryption, shadow DB, multi replica configurations.
 
@@ -92,6 +94,70 @@ rules:
   xxx
 ```
 
+### /schemas/${schemeName}/table
+
+Dynamic modification of metadata content is not supported currently.
+
+```yaml
+configuredSchemaMetaData:                       # Tables of configured with sharding rules
+  tables:                                       # Tables
+    t_order:                                    # table_name
+      columns:                                  # Columns
+        id:                                     # column_name
+          caseSensitive: false
+          dataType: 0
+          generated: false
+          name: id
+          primaryKey: trues
+        order_id:
+          caseSensitive: false
+          dataType: 0
+          generated: false
+          name: order_id
+          primaryKey: false
+      indexs:                                   # Indexes
+        t_user_order_id_index:                  # index_name
+          name: t_user_order_id_index
+    t_order_item:
+      columns:
+        order_id:
+          caseSensitive: false
+          dataType: 0
+          generated: false
+          name: order_id
+          primaryKey: false
+unconfiguredSchemaMetaDataMap:                  # Tables of no sharding rules configured
+  ds_0:                                         # DataSources
+    tables:                                     # Tables
+      t_user:                                   # table_name
+        columns:                                # Columns
+          user_id:                              # column_name
+            caseSensitive: false
+            dataType: 0
+            generated: false
+            name: user_id
+            primaryKey: false
+          id:
+            caseSensitive: false
+            dataType: 0
+            generated: false
+            name: id
+            primaryKey: true
+          order_id:
+            caseSensitive: false
+            dataType: 0
+            generated: false
+            name: order_id
+            primaryKey: false
+        indexes:                                # Indexes
+          t_user_order_id_index:                # index_name
+            name: t_user_order_id_index
+          t_user_user_id_index:
+            name: t_user_user_id_index
+          primary:
+            name: PRIMARY
+```
+
 ## Dynamic Effectiveness
 
 Modification, deletion and insertion of relevant configurations in the config center will immediately take effect in the producing environment.
diff --git a/docs/document/content/features/governance/management/dependency.cn.md b/docs/document/content/features/governance/management/dependency.cn.md
index 38631f3a26..11813d52a9 100644
--- a/docs/document/content/features/governance/management/dependency.cn.md
+++ b/docs/document/content/features/governance/management/dependency.cn.md
@@ -3,13 +3,13 @@ title = "第三方组件依赖"
 weight = 4
 +++
 
-Apache ShardingSphere 在数据库治理模块使用 SPI 方式载入数据到配置中心/注册/元数据中心，进行实例熔断和数据库禁用。
+Apache ShardingSphere 在数据库治理模块使用 SPI 方式载入数据到配置中心和注册中心，进行实例熔断和数据库禁用。
 目前，Apache ShardingSphere 内部支持 ZooKeeper，Etcd，Apollo 和 Nacos 等常用的配置中心/注册中心。
-此外，开发者可以使用其他第三方组件，并通过 SPI 的方式注入到 Apache ShardingSphere，从而使用该配置中心/注册/元数据中心，实现数据库治理功能。
+此外，开发者可以使用其他第三方组件，并通过 SPI 的方式注入到 Apache ShardingSphere，从而使用该配置中心和注册中心，实现数据库治理功能。
 
-|                                               | *实现驱动*                                            | *版本*  | *配置中心* | *注册中心* | *元数据中心* |
-| --------------------------------------------- | ---------------------------------------------------- | ------ | ---------- | --------- | ----------- |
-| [Zookeeper](https://zookeeper.apache.org/)    | [Apache Curator](http://curator.apache.org/)         | 3.6.x  | 支持       | 支持       | 支持         |
-| [Etcd](https://etcd.io/)                      | [jetcd](https://github.com/etcd-io/jetcd)            | v3     | 支持       | 支持       | 支持         |
-| [Apollo](https://github.com/ctripcorp/apollo) | [Apollo Client](https://github.com/ctripcorp/apollo) | 1.5.0  | 支持       | 不支持     | 不支持       |
-| [Nacos](https://nacos.io/zh-cn/docs/sdk.html) | [Nacos Client](https://nacos.io/zh-cn/docs/sdk.html) | 1.0.0  | 支持       | 不支持     | 不支持       |
+|                                               | *实现驱动*                                            | *版本*  | *配置中心* | *注册中心* |
+| --------------------------------------------- | ---------------------------------------------------- | ------ | ---------- | --------- |
+| [Zookeeper](https://zookeeper.apache.org/)    | [Apache Curator](http://curator.apache.org/)         | 3.6.x  | 支持       | 支持       |
+| [Etcd](https://etcd.io/)                      | [jetcd](https://github.com/etcd-io/jetcd)            | v3     | 支持       | 支持       |
+| [Apollo](https://github.com/ctripcorp/apollo) | [Apollo Client](https://github.com/ctripcorp/apollo) | 1.5.0  | 支持       | 不支持     |
+| [Nacos](https://nacos.io/zh-cn/docs/sdk.html) | [Nacos Client](https://nacos.io/zh-cn/docs/sdk.html) | 1.0.0  | 支持       | 不支持     |
diff --git a/docs/document/content/features/governance/management/dependency.en.md b/docs/document/content/features/governance/management/dependency.en.md
index c917b01f4f..aa940a5567 100644
--- a/docs/document/content/features/governance/management/dependency.en.md
+++ b/docs/document/content/features/governance/management/dependency.en.md
@@ -3,9 +3,9 @@ title = "Third-party Components"
 weight = 4
 +++
 
-Apache ShardingSphere uses SPI to load data to the config center/registry/metadata center and disable instances and databases. 
+Apache ShardingSphere uses SPI to load data to the config center and registry center and disable instances and databases. 
 Currently, Apache ShardingSphere supports frequently used registry centers, Zookeeper, Etcd, Apollo and Nacos. 
-In addition, by injecting them to ShardingSphere with SPI, users can use other third-party config/registry/metadata centers to enable databases governance.
+In addition, by injecting them to ShardingSphere with SPI, users can use other third-party config and registry centers to enable databases governance.
 
 |                                               | *Driver*                                             | *Version* | *Config Center* | *Registry Center* | *Metadata Center* |
 | --------------------------------------------- | ---------------------------------------------------- | --------- | --------------- | ----------------- | ----------------- |
diff --git a/docs/document/content/features/governance/management/metadata-center.cn.md b/docs/document/content/features/governance/management/metadata-center.cn.md
deleted file mode 100644
index 828525ae12..0000000000
--- a/docs/document/content/features/governance/management/metadata-center.cn.md
+++ /dev/null
@@ -1,103 +0,0 @@
-+++
-title = "元数据中心"
-weight = 3
-+++
-
-## 实现动机
-
-- 元数据是 ShardingSphere 所使用的数据源的表、列和索引等核心数据，元数据保障 ShardingSphere 各个组件能够正确运行。
-
-- 元数据中心对元数据进行统一组织和管理，实现元数据的统一加载、变更通知和数据同步。
-
-## 元数据中心数据结构
-
-元数据中心在定义的命名空间和治理节点的 `metadata` 节点下，以 YAML 格式存储，每个逻辑数据源独立存储。
-
-```
-├─governance-name
-│   ├──metadata
-│   │    ├──schema_1
-│   │    │    ├── [YAML text contents]
-│   │    ├──schema_2
-│   │    │    ├── [YAML text contents]
-│   │    ├──....
-```
-
-## YAML Text Contents
-
-在元数据中心中，元数据分为 `configuredSchemaMetaData` 和 `unconfiguredSchemaMetaDataMap` 两部分。
-
-元数据内容目前不支持动态修改。
-
-```
-configuredSchemaMetaData:
-  tables:                                       # 表
-    t_order:                                    # 表名
-      columns:                                  # 列
-        id:                                     # 列名
-          caseSensitive: false
-          dataType: 0
-          generated: false
-          name: id
-          primaryKey: trues
-        order_id:
-          caseSensitive: false
-          dataType: 0
-          generated: false
-          name: order_id
-          primaryKey: false
-      indexs:                                   # 索引
-        t_user_order_id_index:                  # 索引名
-          name: t_user_order_id_index
-    t_order_item:
-      columns:
-        order_id:
-          caseSensitive: false
-          dataType: 0
-          generated: false
-          name: order_id
-          primaryKey: false
-unconfiguredSchemaMetaDataMap:
-  ds_0:                                         # 数据源
-    tables:                                     # 表
-      t_user:                                   # 表名
-        columns:                                # 列
-          user_id:                              # 列名
-            caseSensitive: false
-            dataType: 0
-            generated: false
-            name: user_id
-            primaryKey: false
-          id:
-            caseSensitive: false
-            dataType: 0
-            generated: false
-            name: id
-            primaryKey: true
-          order_id:
-            caseSensitive: false
-            dataType: 0
-            generated: false
-            name: order_id
-            primaryKey: false
-        indexes:                                # 索引
-          t_user_order_id_index:                # 索引名
-            name: t_user_order_id_index
-          t_user_user_id_index:
-            name: t_user_user_id_index
-          primary:
-            name: PRIMARY
-```
-
-### configuredSchemaMetaData
-
-存储所有配置了分片规则的数据源的元数据。
-
-### unconfiguredSchemaMetaDataMap
-
-存储没有配置分片规则的数据源的元数据。
-
-## 变更通知
-
-通过某一个 ShardingSphere 实例执行 DDL 之后，
-ShardingSphere 先将新的元数据存储到元数据中心，然后通过事件广播机制，通知其它 ShardingSphere 实例从元数据中心同步元数据，保证元数据一致。
diff --git a/docs/document/content/features/governance/management/metadata-center.en.md b/docs/document/content/features/governance/management/metadata-center.en.md
deleted file mode 100644
index cd4ddaec42..0000000000
--- a/docs/document/content/features/governance/management/metadata-center.en.md
+++ /dev/null
@@ -1,102 +0,0 @@
-+++
-title = "Metadata Center"
-weight = 3
-+++
-
-## Motivation
-
-- Metadata is the core data of the data source used by ShardingSphere, which contains tables, columns, and indexes, etc. Metadata ensures that each component of ShardingSphere can run correctly.
-
-- The metadata center organizes and manages the metadata in a unified manner to realize the unified loading of metadata, change notifications and data synchronization.
-
-## Data Structure in Metadata Center
-
-The metadata center stores metadata in YAML under the metadata node of the defined governance node, and each logical data source is stored independently.
-
-```
-├─governance-name
-│   ├──metadata
-│   │    ├──schema1
-│   │    │    ├── [YAML text contents]     
-│   │    ├──schema2
-│   │    │    ├── [YAML text contents]    
-│   │    ├──....
-```
-
-## YAML text contents
-
-In the metadata center, metadata is divided into two parts: `configuredSchemaMetaData` and` unconfiguredSchemaMetaDataMap`.
-
-Dynamic modification of metadata content is not supported currently.
-
-```
-configuredSchemaMetaData:
-  tables:                                       # Tables
-    t_order:                                    # table_name
-      columns:                                  # Columns
-        id:                                     # column_name
-          caseSensitive: false
-          dataType: 0
-          generated: false
-          name: id
-          primaryKey: trues
-        order_id:
-          caseSensitive: false
-          dataType: 0
-          generated: false
-          name: order_id
-          primaryKey: false
-      indexs:                                   # Indexes
-        t_user_order_id_index:                  # index_name
-          name: t_user_order_id_index
-    t_order_item:
-      columns:
-        order_id:
-          caseSensitive: false
-          dataType: 0
-          generated: false
-          name: order_id
-          primaryKey: false
-unconfiguredSchemaMetaDataMap:
-  ds_0:                                         # DataSources
-    tables:                                     # Tables
-      t_user:                                   # table_name
-        columns:                                # Columns
-          user_id:                              # column_name
-            caseSensitive: false
-            dataType: 0
-            generated: false
-            name: user_id
-            primaryKey: false
-          id:
-            caseSensitive: false
-            dataType: 0
-            generated: false
-            name: id
-            primaryKey: true
-          order_id:
-            caseSensitive: false
-            dataType: 0
-            generated: false
-            name: order_id
-            primaryKey: false
-        indexes:                                # Indexes
-          t_user_order_id_index:                # index_name
-            name: t_user_order_id_index
-          t_user_user_id_index:
-            name: t_user_user_id_index
-          primary:
-            name: PRIMARY
-```
-
-### configuredSchemaMetaData
-
-Store metadata for all data sources configured with sharding rules.
-
-### unconfiguredSchemaMetaDataMap
-
-Store metadata for data sources that no sharding rules configured.
-
-## Change Notifications
-
-After DDL is executed through a certain Proxy instance, ShardingSphere stores new metadata in the metadata center first, and then notifies other Proxy instances to synchronize metadata from the metadata center by event broadcast mechanism to ensure metadata consistency.
diff --git a/docs/document/content/features/governance/management/registry-center.cn.md b/docs/document/content/features/governance/management/registry-center.cn.md
index 82977fecee..74469971af 100644
--- a/docs/document/content/features/governance/management/registry-center.cn.md
+++ b/docs/document/content/features/governance/management/registry-center.cn.md
@@ -11,30 +11,32 @@ weight = 2
 
 ## 注册中心数据结构
 
-注册中心在定义的命名空间的 `registry` 节点下，创建数据库访问对象运行节点，用于区分不同数据库访问实例。包括 `instances` 和 `datasources` 节点。
+注册中心在定义的命名空间的 `states` 节点下，创建数据库访问对象运行节点，用于区分不同数据库访问实例。包括 `proxynodes` 和 `datanodes` 节点。
 
 ```
-instances
-    ├──your_instance_ip_a@-@your_instance_pid_x
-    ├──your_instance_ip_b@-@your_instance_pid_y
-    ├──....
-datasources
-    ├──schema_1
-    ├      ├──ds_0
-    ├      ├──ds_1
-    ├──schema_2
-    ├      ├──ds_0
-    ├      ├──ds_1
-    ├──....
+namespace
+   ├──states
+        ├──proxynodes
+              ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}
+              ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID}
+              ├──....
+        ├──datanodes
+              ├──${schema_1}
+              ├      ├──${ds_0}
+              ├      ├──${ds_1}
+              ├──${schema_2}
+              ├      ├──${ds_0}
+              ├      ├──${ds_1}
+              ├──....
 ```
 
-### registry/instances
+### /proxynodes
 
 数据库访问对象运行实例信息，子节点是当前运行实例的标识。
 运行实例标识由运行服务器的 IP 地址和 PID 构成。运行实例标识均为临时节点，当实例上线时注册，下线时自动清理。
 注册中心监控这些节点的变化来治理运行中实例对数据库的访问等。
 
-### registry/datasources
+### /datanodes
 
 可以治理读写分离从库，可动态添加删除以及禁用。
 
@@ -42,12 +44,12 @@ datasources
 
 ### 熔断实例
 
-可在 `IP地址@-@PID` 节点写入 `DISABLED`（忽略大小写）表示禁用该实例，删除 `DISABLED` 表示启用。
+可在 `IP地址@PID@UUID` 节点写入 `DISABLED`（忽略大小写）表示禁用该实例，删除 `DISABLED` 表示启用。
 
 Zookeeper 命令如下：
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/registry/instances/your_instance_ip_a@-@your_instance_pid_x DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/proxynodes/${your_instance_ip_a}@${your_instance_pid_x}@${UUID} DISABLED
 ```
 
 ### 禁用从库
@@ -57,5 +59,5 @@ Zookeeper 命令如下：
 Zookeeper 命令如下：
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/registry/datasources/your_schema_name/your_slave_datasource_name DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/datanodes/${your_schema_name}/${your_slave_datasource_name} DISABLED
 ```
diff --git a/docs/document/content/features/governance/management/registry-center.en.md b/docs/document/content/features/governance/management/registry-center.en.md
index bd7da91939..6476beca4c 100644
--- a/docs/document/content/features/governance/management/registry-center.en.md
+++ b/docs/document/content/features/governance/management/registry-center.en.md
@@ -11,30 +11,30 @@ weight = 2
 
 ## Data Structure in Registry Center
 
-The registry center can create running node of database access object under `registry` in defined namespace, to distinguish different database access instances, including `instances` and `datasources` nodes.
+The registry center can create running node of database access object under `states` in defined namespace, to distinguish different database access instances, including `proxynodes` and `datanodes` nodes.
 
 ```
-instances
-    ├──your_instance_ip_a@-@your_instance_pid_x
-    ├──your_instance_ip_b@-@your_instance_pid_y
-    ├──....
-datasources
-    ├──schema_1
-    ├      ├──ds_0
-    ├      ├──ds_1
-    ├──schema_2
-    ├      ├──ds_0
-    ├      ├──ds_1
-    ├──....
+namespace
+   ├──states
+        ├──proxynodes
+              ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}
+              ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID}
+              ├──....
+        ├──datanodes
+              ├──${schema_1}
+              ├      ├──${ds_0}
+              ├      ├──${ds_1}
+              ├──${schema_2}
+              ├      ├──${ds_0}
+              ├      ├──${ds_1}
+              ├──....
 ```
 
-ShardingSphere-Proxy can support multiple logical data sources, so `datasources` sub-nodes are named `schema_name.data_source_name`.
-
-### registry/instances
+### /proxynodes
 
 It includes running instance information of database access object, with sub-nodes as the identifiers of currently running instance, which consist of IP and PID. Those identifiers are temporary nodes, which are registered when instances are on-line and cleared when instances are off-line. The registry center monitors the change of those nodes to govern the database access of running instances and other things.
 
-### registry/datasources
+### /datanodes
 
 It is able to orchestrate read-write split slave database, delete or disable data dynamically.
 
@@ -42,12 +42,12 @@ It is able to orchestrate read-write split slave database, delete or disable dat
 
 ### Circuit Breaker
 
-Write `DISABLED` (case insensitive) to `IP@-@PID` to disable that instance; delete `DISABLED` to enable the instance.
+Write `DISABLED` (case insensitive) to `IP@PID@UUID` to disable that instance; delete `DISABLED` to enable the instance.
 
 Zookeeper command is as follows:
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/registry/instances/your_instance_ip_a@-@your_instance_pid_x DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/proxynodes/${your_instance_ip_a}@${your_instance_pid_x}@${UUID} DISABLED
 ```
 
 ### Disable Slave Database
@@ -57,5 +57,5 @@ Under read-write split scenarios, users can write `DISABLED` (case insensitive)
 Zookeeper command is as follows:
 
 ```
-[zk: localhost:2181(CONNECTED) 0] set /your_zk_namespace/registry/datasources/your_schema_name/your_slave_datasource_name DISABLED
+[zk: localhost:2181(CONNECTED) 0] set /${your_zk_namespace}/states/datanodes/${your_schema_name}/${your_slave_datasource_name} DISABLED
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/_index.cn.md
index d005f0930c..a52b89e01f 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/_index.cn.md
@@ -4,5 +4,5 @@ weight = 3
 chapter = true
 +++
 
-使用治理功能需要指定配置中心、注册中心和元数据中心。
+使用治理功能需要指定配置中心和注册中心。
 配置将全部存入配置中心，可以在每次启动时使用本地配置覆盖配置中心配置，也可以只通过配置中心读取配置。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/_index.en.md
index 5f1724bb42..e5fea0ea1b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/_index.en.md
@@ -4,5 +4,5 @@ weight = 3
 chapter = true
 +++
 
-Using governance requires designating a config center, registry center & metadata center, in which all the configurations are saved. 
+Using governance requires designating a registry center in which all the configurations are saved. 
 Users can either use local configurations to cover config center configurations or read configurations from config center.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
index f691055455..b43acca425 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
@@ -35,7 +35,7 @@ weight = 1
 // 省略配置数据源以及规则
 // ...
 
-// 配置配置/注册/元数据中心
+// 配置配置/注册中心
 GovernanceCenterConfiguration configuration = new GovernanceCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
 
 // 配置治理
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
index 28aef670d0..a41c1ad05a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
@@ -35,7 +35,7 @@ Using ZooKeeper as config center and registry center for example.
 // Omit configure data sources and rule configurations
 // ...
 
-// Configure config/registry/metadata center
+// Configure registry center
 GovernanceCenterConfiguration configuration = new GovernanceCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
 
 // Configure governance
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.cn.md
index 2c0f2dde9c..2b55ff2f4f 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.cn.md
@@ -7,7 +7,7 @@ ShardingSphere-Proxy 支持使用 SPI 方式接入[分布式治理](/cn/features
 
 ## Zookeeper
 
-ShardingSphere-Proxy 默认提供了 Zookeeper 解决方案，实现了配置中心、注册中心和元数据中心功能。
+ShardingSphere-Proxy 默认提供了 Zookeeper 解决方案，实现了配置中心和注册中心功能。
 [配置规则](/cn/user-manual/shardingsphere-jdbc/configuration/yaml/governance/)同 ShardingSphere-JDBC YAML 保持一致。
 
 ## 其他第三方组件
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.en.md
index baeb30f2d2..9b312acfed 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/governance.en.md
@@ -7,7 +7,7 @@ ShardingSphere-Proxy use SPI to support [Governance](/en/features/governance/man
 
 ## Zookeeper
 
-ShardingSphere-Proxy has provided the solution of Zookeeper in default, which implements the functions of config center, registry center and metadata center.
+ShardingSphere-Proxy has provided the solution of Zookeeper in default, which implements the functions of config center, registry center.
 [Configuration Rules](/en/user-manual/shardingsphere-jdbc/configuration/yaml/governance/) consistent with ShardingSphere-JDBC YAML.
 
 ## Other Third Party Components
