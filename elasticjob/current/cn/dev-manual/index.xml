<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发者手册 on ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/current/cn/dev-manual/</link>
    <description>Recent content in 开发者手册 on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/current/cn/dev-manual/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>作业分片策略</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/dev-manual/job-sharding-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/dev-manual/job-sharding-strategy/</guid>
      <description>框架提供的分片策略 AverageAllocationJobShardingStrategy 全路径：
AverageAllocationJobShardingStrategy
策略说明：
基于平均分配算法的分片策略，也是默认的分片策略。
如果分片不能整除，则不能整除的多余分片将依次追加到序号小的服务器。如：
如果有3台服务器，分成9片，则每台服务器分到的分片是：1=[0,1,2], 2=[3,4,5], 3=[6,7,8]
如果有3台服务器，分成8片，则每台服务器分到的分片是：1=[0,1,6], 2=[2,3,7], 3=[4,5]
如果有3台服务器，分成10片，则每台服务器分到的分片是：1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]
OdevitySortByNameJobShardingStrategy 全路径：
OdevitySortByNameJobShardingStrategy
策略说明：
根据作业名的哈希值奇偶数决定IP升降序算法的分片策略。
作业名的哈希值为奇数则IP升序。
作业名的哈希值为偶数则IP降序。
用于不同的作业平均分配负载至不同的服务器。
AverageAllocationJobShardingStrategy的缺点是，一旦分片数小于作业服务器数，作业将永远分配至IP地址靠前的服务器，导致IP地址靠后的服务器空闲。而OdevitySortByNameJobShardingStrategy则可以根据作业名称重新分配服务器负载。如：
如果有3台服务器，分成2片，作业名称的哈希值为奇数，则每台服务器分到的分片是：1=[0], 2=[1], 3=[]
如果有3台服务器，分成2片，作业名称的哈希值为偶数，则每台服务器分到的分片是：3=[0], 2=[1], 1=[]
RotateServerByNameJobShardingStrategy 全路径：
org.apache.shardingsphere.elasticjob.lite.handler.sharding.impl.RotateServerByNameJobShardingStrategy
策略说明：
根据作业名的哈希值对服务器列表进行轮转的分片策略。
自定义分片策略 实现JobShardingStrategy接口并实现sharding方法，接口方法参数为作业服务器IP列表和分片策略选项，分片策略选项包括作业名称，分片总数以及分片序列号和个性化参数对照表，可以根据需求定制化自己的分片策略。
欢迎将分片策略以插件的形式贡献至org.apache.shardingsphere.elasticjob.lite.handler.sharding包。
配置分片策略 与配置通常的作业属性相同，在spring命名空间或者JobConfiguration中配置jobShardingStrategyType属性，属性值是作业分片策略类的全路径。</description>
    </item>
    
    <item>
      <title>定制化处理</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/dev-manual/customized-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/dev-manual/customized-hook/</guid>
      <description>ElasticJob 在配置中提供了 JobHandler，用于定制化处理，目前支持自定义异常处理及作业处理线程池。
异常处理 可扩展 JobErrorHandler 接口，默认实现是记录日志但不抛出异常。
作业处理线程池 可扩展 JobExecutorServiceHandler 接口，定制线程池。</description>
    </item>
    
    <item>
      <title>线路规划</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/dev-manual/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/dev-manual/roadmap/</guid>
      <description>Core  Unified Job Config API  Core Config Type Config Root Config   Job Types  Simple Dataflow Script Http   Event Trace  Event Publisher Database Event Listener Other Event Listener   Unified Schedule API Unified Resource API  ElasticJob-Lite  Distributed Features  High Availability Elastic scale in/out Failover Misfire Idempotency Reconcile   Registry Center  Zookeeper Other Registry Center Supported   Lifecycle Management  Add/Remove Pause/Resume Disable/Enable Shutdown Restful API Web Console   Job Dependency  Listener DAG   Spring Integrate  Namespace Bean Injection Spring Boot Starter    ElasticJob-Cloud  Transient Job  High Availability Elastic scale in/out Failover Misfire Idempotency   Daemon Job  High Availability Elastic scale in/out Failover Misfire Idempotency   Mesos Scheduler  High Availability Reconcile Redis Based Queue Improvement Http Driver   Mesos Executor  Executor Reuse Pool Progress Reporting Health Detection Log Redirect   Lifecycle Management  Job Add/Remove Job Pause/Resume Job Disable/Enable Job Shutdown App Add/Remove App Disable/Enable Restful API Web Console   Job Dependency  Listener Workflow DAG   Job Distribution  Mesos Based Distribution Docker Based Distribution   Resources Management  Resources Allocate Cross Data Center A/B Test   Spring Integrate  Bean Injection    </description>
    </item>
    
  </channel>
</rss>