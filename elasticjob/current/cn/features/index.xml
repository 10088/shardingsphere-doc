<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概念 &amp; 功能 on ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/current/cn/features/</link>
    <description>Recent content in 概念 &amp; 功能 on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/current/cn/features/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>弹性调度</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/features/elastic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/features/elastic/</guid>
      <description>分片 任务的分布式执行，需要将一个任务拆分为多个独立的任务项，然后由分布式的服务器分别执行某一个或几个分片项。
例如：有一个遍历数据库某张表的作业，现有 2 台服务器。为了快速的执行作业，那么每台服务器应执行作业的 50%。 为满足此需求，可将作业分成 2 片，每台服务器执行 1 片。作业遍历数据的逻辑应为：服务器 A 遍历 ID 以奇数结尾的数据；服务器 B 遍历 ID 以偶数结尾的数据。 如果分成 10 片，则作业遍历数据的逻辑应为：每片分到的分片项应为 ID % 10，而服务器A被分配到分片项 0,1,2,3,4；服务器B被分配到分片项 5,6,7,8,9，直接的结果就是服务器A遍历 ID 以 0-4 结尾的数据；服务器 B 遍历 ID 以 5-9 结尾的数据。
分片项与业务处理解耦 ElasticJob 并不直接提供数据处理的功能，框架只会将分片项分配至各个运行中的作业服务器，开发者需要自行处理分片项与真实数据的对应关系。
个性化参数 个性化参数即 shardingItemParameter，可以和分片项匹配对应关系，用于将分片项的数字转换为更加可读的业务代码。
例如：按照地区水平拆分数据库，数据库A是北京的数据；数据库 B 是上海的数据；数据库 C 是广州的数据。 如果仅按照分片项配置，开发者需要了解 0 表示北京；1 表示上海；2 表示广州。 合理使用个性化参数可以让代码更可读，如果配置为 0=北京,1=上海,2=广州，那么代码中直接使用北京，上海，广州的枚举值即可完成分片项和业务逻辑的对应关系。
分布式调度 ElasticJob Lite 并无作业调度中心节点，而是基于部署作业框架的程序在到达相应时间点时各自触发调度。
注册中心仅用于作业注册和监控信息存储。而主作业节点仅用于处理分片和清理等功能。
高可用 ElasticJob Lite 提供最安全的方式执行作业。将分片总数设置为 1，并使用多于 1 台的服务器执行作业，作业将会以 1 主 n 从的方式执行。</description>
    </item>
    
    <item>
      <title>资源分配</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/features/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/features/resource/</guid>
      <description>资源分配功能为 ElasticJob Cloud 所特有的功能。
作业运行模式 ElasticJob Cloud 分为瞬时作业和常驻作业 2 种运行模式。
瞬时作业 在每一次作业执行完毕后立刻释放资源，保证利用现有资源错峰执行。 资源分配和容器启动均占用一定时长，且作业执行时资源不一定充足，因此作业执行会有延迟。 瞬时作业适用于间隔时间长，资源消耗多且对执行时间无严格要求的作业。
常驻作业 无论在运行时还是等待运行时，均一直占用分配的资源，可节省过多容器启动和资源分配的开销，适用于间隔时间短，资源需求量稳定的作业。
调度器 ElasticJob Cloud 基于 Mesos 的 Framework 开发，用于资源调度和应用分发，需要独立启动并提供服务。
作业应用 指作业打包部署后的应用，描述了作业启动需要用到的 CPU、内存、启动脚本及应用下载路径等基本信息。 每个作业应用可以包含一个或多个作业。
作业 即实际运行的具体任务，和 ElasticJob Lite 共用同样的作业生态。 在注册作业之前必须先注册作业应用。
资源 指作业启动或运行需要用到的 CPU、内存。 配置在作业应用维度表示整个应用启动需要用的资源； 配置在作业维度表示每个作业运行需要的资源。 作业启动需要的资源为指定作业应用需要的资源与作业需要资源的总和。</description>
    </item>
    
    <item>
      <title>失效转移</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/features/failover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/features/failover/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>错过任务重执行</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/features/misfired/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/features/misfired/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>作业开放生态</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/features/jobt-ype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/features/jobt-ype/</guid>
      <description>TODO</description>
    </item>
    
  </channel>
</rss>