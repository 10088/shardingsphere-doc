<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ElasticJob-Cloud on ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/</link>
    <description>Recent content in ElasticJob-Cloud on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>开发指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/dev-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/dev-guide/</guid>
      <description>0. 环境需求 Java 请使用JDK1.7及其以上版本。详情参见
Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
Maven 请使用Maven 3.0.4及其以上版本。详情参见
Mesos 请使用Mesos 0.28.0及其以上版本。详情参见
1. 作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
a. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0  break; case 1: // do something by sharding item 1  break; case 2: // do something by sharding item 2  break; // case n: .</description>
    </item>
    
    <item>
      <title>部署指南</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/deploy-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/deploy-guide/</guid>
      <description>Scheduler部署步骤   启动Elastic-Job-Cloud-Scheduler和Mesos指定注册中心的Zookeeper。
  启动Mesos Master和Mesos Agent。
  解压elastic-job-cloud-scheduler-${version}.tar.gz。可通过源码mvn install编译获取。
  执行bin\start.sh脚本启动elastic-job-cloud-scheduler。
  作业部署步骤   确保Zookeeper, Mesos Master/Agent以及Elastic-Job-Cloud-Scheduler已启动。
  将打包之后的作业tar.gz文件放至网络可访问的位置，如：ftp或http。打包的tar.gz文件中Main方法需要调用Elastic-Job-Cloud提供的JobBootstrap.execute方法。
  使用curl命令调用REST API注册APP及作业，详情参见：RESTful API。
  附录  配置：修改conf\elastic-job-cloud-scheduler.properties文件。配置项说明如下：     属性名称 必填 默认值 描述     hostname 是  服务器真实的IP或hostname，不能是127.0.0.1或localhost   user 否  Mesos framework使用的用户名称   mesos_url 是 zk://127.0.0.1:2181/mesos Mesos所使用的Zookeeper地址   zk_servers 是 127.</description>
    </item>
    
    <item>
      <title>RESTful API</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/restful-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/restful-api/</guid>
      <description>Elastic-Job-Cloud提供APP发布及作业注册等RESTful API可通过curl操作。
发布作业应用 url：app
方法：POST
参数类型：application/json
参数列表：
   属性名 类型 是否必填 缺省值 描述     appName String 是  作业应用名称。为Elastic-Job-Cloud的作业应用唯一标识   appURL String 是  作业应用所在路径。必须是可以通过网络访问到的路径   cpuCount double 否 1 作业应用启动所需要的CPU数量   memoryMB double 否 128 作业应用启动所需要的内存MB   bootstrapScript String 是  启动脚本，如：bin\start.sh   appCacheEnable bool 否 true 每次执行作业时是否从缓存中读取应用。禁用则每次执行任务均从应用仓库下载应用至本地   eventTraceSamplingCount int 否 0 常驻作业事件采样率统计条数，默认不采样全部记录。为避免数据量过大，可对频繁调度的常驻作业配置采样率，即作业每执行N次，才会记录作业执行及追踪相关数据    curl -l -H &amp;#34;Content-type: application/json&amp;#34; -X POST -d &amp;#39;{&amp;#34;appName&amp;#34;:&amp;#34;foo_app&amp;#34;,&amp;#34;appURL&amp;#34;:&amp;#34;http://app_host:8080/foo-job.</description>
    </item>
    
    <item>
      <title>高可用</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/high-availability/</guid>
      <description>介绍 调度器的高可用是通过运行几个指向同一个ZooKeeper集群的Elastic-Job-Cloud-Scheduler实例来实现的。ZooKeeper用于在当前主Elastic-Job-Cloud-Scheduler实例失败的情况下执行领导者选举。通过至少两个调度器实例来构成集群，集群中只有一个调度器实例提供服务，其他实例处于&amp;quot;待命&amp;quot;状态。当该实例失败时，集群会选举剩余实例中的一个来继续提供服务。
配置 每个Elastic-Job-Cloud-Scheduler实例必须使用相同的ZooKeeper集群。 例如，如果Zookeeper的Quorum为zk://1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181/elastic-job-cloud，则elastic-job-cloud-scheduler.properties中Zookeeper相关配置为：
# Elastic-Job-Cloud&#39;s zookeeper address zk_servers=1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181 # Elastic-Job-Cloud&#39;s zookeeper namespace zk_namespace=elastic-job-cloud </description>
    </item>
    
    <item>
      <title>运维平台</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/web-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/web-console/</guid>
      <description>运维平台内嵌于elastic-job-cloud-scheduler的jar包中, 无需额外启动WEB付服务器, 可通过修改配置文件中http_port参数来调整启动端口,默认端口为8899，访问地址为http://{your_scheduler_ip}:8899。
登录 提供两种账户，管理员及访客，管理员拥有全部操作权限，访客仅拥有察看权限。默认管理员用户名和密码是root/root，访客用户名和密码是guest/guest，可通过conf\auth.properties修改管理员及访客用户名及密码。
功能列表   作业APP管理（发布、修改、查看）
  作业管理（注册、修改、查看以及删除）
  作业状态查看（待运行、运行中、待失效转移）
  作业历史查看（运行轨迹、执行状态、历史dashboard）
  设计理念 运维平台采用纯静态HTML+JS方式与后台的RESTful API交互，通过读取作业注册中心展示作业配置和状态，数据库展现作业运行轨迹及执行状态，或更新作业注册中心数据修改作业配置。</description>
    </item>
    
    <item>
      <title>本地运行模式</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/local-executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/elasticjob-cloud/local-executor/</guid>
      <description>在开发Elastic-Job-Cloud作业时，开发人员可以脱离Mesos环境，在本地运行和调试作业。可以利用本地运行模式充分的调试业务功能以及单元测试，完成之后再部署至Mesos集群。
本地运行作业无需安装Mesos环境。
配置 使用io.elasticjob.cloud.executor.local.LocalCloudJobConfiguration配置本地作业。
LocalCloudJobConfiguration config = new LocalCloudJobConfiguration( new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(&amp;#34;FooJob&amp;#34;, &amp;#34;*/2 * * * * ?&amp;#34;, 3) //1  .shardingItemParameters(&amp;#34;0=Beijing,1=Shanghai,2=Guangzhou&amp;#34;) .jobParameter(&amp;#34;dbName=dangdang&amp;#34;).build(), &amp;#34;com.xxx.foo.FooJob&amp;#34;), 1, //2  &amp;#34;testSimpleJob&amp;#34; , &amp;#34;applicationContext.xml&amp;#34;); //3  配置作业类型和作业基本信息。 配置当前运行的作业是第几个分片。 配置Spring相关参数。  运行 使用io.elasticjob.cloud.executor.local.LocalTaskExecutor运行作业。
new LocalTaskExecutor(localJobConfig).execute(); </description>
    </item>
    
  </channel>
</rss>