<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/current/en/</link>
    <description>Recent content on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/current/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy Guide</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/operation/deploy-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/operation/deploy-guide/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Deploy Guide</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/deploy-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/deploy-guide/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Dev Guide</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/usage/dev-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/usage/dev-guide/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>ElasticJob-Lite</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/quick-start/elasticjob-lite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/quick-start/elasticjob-lite/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere.elasticjob&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elasticjob-lite-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Develop Job public class MyJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0  break; case 1: // do something by sharding item 1  break; case 2: // do something by sharding item 2  break; // case n: ...  } } } Configure Job JobConfiguration jobConfig = JobConfiguration.</description>
    </item>
    
    <item>
      <title>Job Configuration</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/configuration/job-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/configuration/job-config/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Job Development</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-api/job-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-api/job-interface/</guid>
      <description>ElasticJob-Lite and ElasticJob-Cloud provide a unified job interface, developers need to develop business jobs only once, and then they can be deployed to different environments according to different configurations and deployments.
ElasticJob has two kinds of job types: Class-based job and Type-based job. Class-based jobs require developers to weave business logic by implementing interfaces; Type-based jobs don&amp;rsquo;t need coding, just need to provide the corresponding configuration.
The method parameter shardingContext of the class-based job interface contains job configuration, slice and runtime information.</description>
    </item>
    
    <item>
      <title>Listener Development</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-listener/listener-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-listener/listener-interface/</guid>
      <description>Common Listener If the job processes the files of the job server and deletes the files after the processing is completed, consider using each node to perform the cleaning task. This type of task is simple to implement, and there is no need to consider whether the global distributed task is completed. You should try to use this type of listener.
public class MyJobListener implements ElasticJobListener { @Override public void beforeJobExecuted(ShardingContexts shardingContexts) { // do something .</description>
    </item>
    
    <item>
      <title>Operation API</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/operation-api/operation-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/operation-api/operation-api/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Principle</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/dev-manual/lite-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/dev-manual/lite-design/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>RESTful API</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/configuration/restful-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/configuration/restful-api/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Schedule Model</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/schedule-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/schedule-model/</guid>
      <description>Unlike most job platforms, ElasticJob&amp;rsquo;s scheduling model is divided into in-process scheduling ElasticJob Lite that supports thread-level scheduling, and ElasticJob Cloud for process-level scheduling.
In-process scheduling ElasticJob Lite is a thread-level scheduling framework for in-process. Through it, Job can be transparently combined with business application systems. It can be easily used in conjunction with Java frameworks such as Spring and Dubbo. Spring DI (Dependency Injection) Beans can be freely used in Job, such as data source connection pool and Dubbo remote service, etc.</description>
    </item>
    
    <item>
      <title>Use Java API</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/event-trace/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/event-trace/java-api/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Dump Job Runtime Info</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/dump/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Elastic Schedule</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/elastic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/elastic/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>ElasticJob-Cloud</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/quick-start/elasticjob-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/quick-start/elasticjob-cloud/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere.elasticjob&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elasticjob-cloud-executor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Develop Job Details public class MyJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0  break; case 1: // do something by sharding item 1  break; case 2: // do something by sharding item 2  break; // case n: ...  } } } Develop Job Bootstrap Define main method and call JobBootstrap.</description>
    </item>
    
    <item>
      <title>High Available</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/operation/high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/operation/high-availability/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Job Sharding Strategy</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/dev-manual/job-sharding-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/dev-manual/job-sharding-strategy/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Local Executor</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/usage/local-executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/usage/local-executor/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/event-trace/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/event-trace/spring-boot-starter/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Use Java API</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-api/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-api/java-api/</guid>
      <description>Job configuration ElasticJob-Lite uses the builder mode to create job configuration objects. The code example is as follows:
JobConfiguration jobConfig = JobConfiguration.newBuilder(&amp;#34;myJob&amp;#34;, 3).cron(&amp;#34;0/5 * * * * ?&amp;#34;).shardingItemParameters(&amp;#34;0=Beijing,1=Shanghai,2=Guangzhou&amp;#34;).build(); Job start ElasticJob-Lite scheduler is divided into two types: timed scheduling and one-time scheduling. Each scheduler needs three parameters: registry configuration, job object (or job type), and job configuration when it starts.
Timed scheduling public class JobDemo { public static void main(String[] args) { // Class-based Scheduling Jobs  new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createJobConfiguration()).</description>
    </item>
    
    <item>
      <title>Use Java API</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-listener/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-listener/java-api/</guid>
      <description>Common Listener public class JobMain { public static void main(String[] args) { new ScheduleJobBootstrap(createRegistryCenter(), createJobConfiguration(), new MyElasticJobListener()).schedule(); } private static CoordinatorRegistryCenter createRegistryCenter() { CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;#34;zk_host:2181&amp;#34;, &amp;#34;elastic-job-demo&amp;#34;)); regCenter.init(); return regCenter; } private static JobConfiguration createJobConfiguration() { // Create job configuration  ... } } Distributed Listener public class JobMain { public static void main(String[] args) { long startTimeoutMills = 5000L; long completeTimeoutMills = 10000L; new ScheduleJobBootstrap(createRegistryCenter(), createJobConfiguration(), new MyDistributeOnceElasticJobListener(startTimeoutMills, completeTimeoutMills)).</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/operation/web-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-cloud/operation/web-console/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Customization</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/dev-manual/customized-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/dev-manual/customized-hook/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Reconcile</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/job-reconcile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/job-reconcile/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Resource Assign</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/resource/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-api/spring-boot-starter/</guid>
      <description>ElasticJob-Lite provides a customized Spring Boot Starter, which can be used in conjunction with Spring Boot. Developers can easily use Spring container-managed data sources and other objects in their jobs through dependency injection, and use placeholders to get values from property files.
Job configuration Job start Just start Spring Boot Starter directly.</description>
    </item>
    
    <item>
      <title>Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-listener/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-listener/spring-boot-starter/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Spring Namespace</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/event-trace/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/event-trace/spring-namespace/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Execution Monitor</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/execution-monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/execution-monitor/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Failover</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/failover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/failover/</guid>
      <description>ElasticJob will not re-shard during this execution, but wait for the next scheduling before starting the re-sharding process. When the server is down during job execution, failover allows the unfinished task to be compensated and executed on another job node.
Concept Failover is a temporary compensation execution mechanism for the currently executed job. When the next job is run, the current job allocation will be adjusted through resharding. For example, if the job is executed at an hourly interval, each execution will take 30 minutes.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/dev-manual/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/dev-manual/roadmap/</guid>
      <description>Core  Unified Job Config API  Core Config Type Config Root Config   Job Types  Simple Dataflow Script Http   Event Trace  Event Publisher Database Event Listener Other Event Listener   Unified Schedule API Unified Resource API  ElasticJob-Lite  Distributed Features  High Availability Elastic scale in/out Failover Misfire Idempotency Reconcile   Registry Center  Zookeeper Other Registry Center Supported   Lifecycle Management  Add/Remove Pause/Resume Disable/Enable Shutdown Restful API Web Console   Job Dependency  Listener DAG   Spring Integrate  Namespace Bean Injection Spring Boot Starter    ElasticJob-Cloud  Transient Job  High Availability Elastic scale in/out Failover Misfire Idempotency   Daemon Job  High Availability Elastic scale in/out Failover Misfire Idempotency   Mesos Scheduler  High Availability Reconcile Redis Based Queue Improvement Http Driver   Mesos Executor  Executor Reuse Pool Progress Reporting Health Detection Log Redirect   Lifecycle Management  Job Add/Remove Job Pause/Resume Job Disable/Enable Job Shutdown App Add/Remove App Disable/Enable Restful API Web Console   Job Dependency  Listener Workflow DAG   Job Distribution  Mesos Based Distribution Docker Based Distribution   Resources Management  Resources Allocate Cross Data Center A/B Test   Spring Integrate  Bean Injection    </description>
    </item>
    
    <item>
      <title>Spring Namespace</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-api/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-api/spring-namespace/</guid>
      <description>ElasticJob-Lite provides a custom Spring namespace, which can be used with the Spring. Through the way of DI (Dependency Injection), developers can easily use data sources and other objects that managed by the Spring container in their jobs, and use placeholders to get values ​​from property files.
Config job for Spring namespace &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:elasticjob=&amp;#34;http://shardingsphere.apache.org/schema/elasticjob&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://shardingsphere.apache.org/schema/elasticjob http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd &amp;#34;&amp;gt; &amp;lt;!-- Configure registry center for job --&amp;gt; &amp;lt;elasticjob:zookeeper id=&amp;#34;regCenter&amp;#34; server-lists=&amp;#34;yourhost:2181&amp;#34; namespace=&amp;#34;my-job&amp;#34; base-sleep-time-milliseconds=&amp;#34;1000&amp;#34; max-sleep-time-milliseconds=&amp;#34;3000&amp;#34; max-retries=&amp;#34;3&amp;#34; /&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Spring Namespace</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-listener/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/job-listener/spring-namespace/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Table Structure</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/event-trace/table-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/usage/event-trace/table-structure/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Console</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/web-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/user-manual/elasticjob-lite/operation/web-console/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Misfire</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/misfire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/misfire/</guid>
      <description>ElasticJob does not allow jobs to be executed at the same time. When the execution time of a job exceeds its running interval, re-executing the missed task can ensure that the job continues to execute the overdue job after completing the last task.
Concept The misfire function enables the overdue tasks to be executed immediately after the completion of the previous tasks. For example, if the job is executed at an hourly interval, each execution will take 30 minutes.</description>
    </item>
    
    <item>
      <title>Job Open Ecosystem</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/job-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/job-type/</guid>
      <description>Flexible customized jobs is the most important design change in ElasticJob 3.x . The new version is based on the design concept of the Apache ShardingSphere pluggable architecture, and the new Job API was created. It is intended to enable developers to expand the types of jobs in a more convenient and isolated way, and create an ecosystem of ElasticJob jobs.
While ElasticJob provides functions such as elastic scaling and distributed management of jobs, it does not limit the types of jobs.</description>
    </item>
    
  </channel>
</rss>