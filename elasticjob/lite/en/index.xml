<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/lite/en/</link>
    <description>Recent content on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/elasticjob/lite/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Job API</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-api/</guid>
      <description>0. 环境要求 a. Java 请使用JDK1.7及其以上版本。详情参见
b. Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
c. Maven 请使用Maven 3.0.4及其以上版本。详情参见
1. 作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
a. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0  break; case 1: // do something by sharding item 1  break; case 2: // do something by sharding item 2  break; // case n: .</description>
    </item>
    
    <item>
      <title>Principle</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/dev-manual/lite-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/dev-manual/lite-design/</guid>
      <description>弹性分布式实现   第一台服务器上线触发主服务器选举。主服务器一旦下线，则重新触发选举，选举过程中阻塞，只有主服务器选举完成，才会执行其他任务。
  某作业服务器上线时会自动将服务器信息注册到注册中心，下线时会自动更新服务器状态。
  主节点选举，服务器上下线，分片总数变更均更新重新分片标记。
  定时任务触发时，如需重新分片，则通过主服务器分片，分片过程中阻塞，分片结束后才可执行任务。如分片过程中主服务器下线，则先选举主服务器，再分片。
  通过上一项说明可知，为了维持作业运行时的稳定性，运行过程中只会标记分片状态，不会重新分片。分片仅可能发生在下次任务触发前。
  每次分片都会按服务器IP排序，保证分片结果不会产生较大波动。
  实现失效转移功能，在某台服务器执行完毕后主动抓取未分配的分片，并且在某台服务器下线后主动寻找可用的服务器执行任务。
  注册中心数据结构 注册中心在定义的命名空间下，创建作业名称节点，用于区分不同作业，所以作业一旦创建则不能修改作业名称，如果修改名称将视为新的作业。作业名称节点下又包含4个数据子节点，分别是config, instances, sharding, servers和leader。
config节点 作业配置信息，以JSON格式存储
instances节点 作业运行实例信息，子节点是当前作业运行实例的主键。作业运行实例主键由作业运行服务器的IP地址和PID构成。作业运行实例主键均为临时节点，当作业实例上线时注册，下线时自动清理。注册中心监控这些节点的变化来协调分布式作业的分片以及高可用。 可在作业运行实例节点写入TRIGGER表示该实例立即执行一次。
sharding节点 作业分片信息，子节点是分片项序号，从零开始，至分片总数减一。分片项序号的子节点存储详细信息。每个分片项下的子节点用于控制和记录分片运行状态。节点详细信息说明：
   子节点名 临时节点 描述     instance 否 执行该分片项的作业运行实例主键   running 是 分片项正在运行的状态仅配置monitorExecution时有效   failover 是 如果该分片项被失效转移分配给其他作业服务器，则此节点值记录执行此分片的作业服务器IP   misfire 否 是否开启错过任务重新执行   disabled 否 是否禁用此分片项    servers节点 作业服务器信息，子节点是作业服务器的IP地址。可在IP地址节点写入DISABLED表示该服务器禁用。 在新的cloud native架构下，servers节点大幅弱化，仅包含控制服务器是否可以禁用这一功能。为了更加纯粹的实现job核心，servers功能未来可能删除，控制服务器是否禁用的能力应该下放至自动化部署系统。</description>
    </item>
    
    <item>
      <title>弹性调度</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/features/elastic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/features/elastic/</guid>
      <description>分片 任务的分布式执行，需要将一个任务拆分为多个独立的任务项，然后由分布式的服务器分别执行某一个或几个分片项。
例如：有一个遍历数据库某张表的作业，现有 2 台服务器。为了快速的执行作业，那么每台服务器应执行作业的 50%。 为满足此需求，可将作业分成 2 片，每台服务器执行 1 片。作业遍历数据的逻辑应为：服务器 A 遍历 ID 以奇数结尾的数据；服务器 B 遍历 ID 以偶数结尾的数据。 如果分成 10 片，则作业遍历数据的逻辑应为：每片分到的分片项应为 ID % 10，而服务器A被分配到分片项 0,1,2,3,4；服务器B被分配到分片项 5,6,7,8,9，直接的结果就是服务器A遍历 ID 以 0-4 结尾的数据；服务器 B 遍历 ID 以 5-9 结尾的数据。
分片项与业务处理解耦 Elastic-Job 并不直接提供数据处理的功能，框架只会将分片项分配至各个运行中的作业服务器，开发者需要自行处理分片项与真实数据的对应关系。
个性化参数 个性化参数即 shardingItemParameter，可以和分片项匹配对应关系，用于将分片项的数字转换为更加可读的业务代码。
例如：按照地区水平拆分数据库，数据库A是北京的数据；数据库 B 是上海的数据；数据库 C 是广州的数据。 如果仅按照分片项配置，开发者需要了解 0 表示北京；1 表示上海；2 表示广州。 合理使用个性化参数可以让代码更可读，如果配置为 0=北京,1=上海,2=广州，那么代码中直接使用北京，上海，广州的枚举值即可完成分片项和业务逻辑的对应关系。
分布式调度 ElasticJob Lite 并无作业调度中心节点，而是基于部署作业框架的程序在到达相应时间点时各自触发调度。
注册中心仅用于作业注册和监控信息存储。而主作业节点仅用于处理分片和清理等功能。
高可用 ElasticJob Lite 提供最安全的方式执行作业。将分片总数设置为 1，并使用多于 1 台的服务器执行作业，作业将会以 1 主 n 从的方式执行。</description>
    </item>
    
    <item>
      <title>Failover</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/features/failover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/features/failover/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Job Configuration</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-config/</guid>
      <description>1. Java Code 配置 a. 注册中心配置 用于注册和协调作业分布式行为的组件，目前仅支持Zookeeper。
ZookeeperConfiguration 属性详细说明    属性名 类型 构造器注入 缺省值 描述     serverLists String 是  连接Zookeeper服务器的列表包括IP地址和端口号多个地址用逗号分隔如: host1:2181,host2:2181   namespace String 是  Zookeeper的命名空间   baseSleepTimeMilliseconds int 否 1000 等待重试的间隔时间的初始值单位：毫秒   maxSleepTimeMilliseconds String 否 3000 等待重试的间隔时间的最大值单位：毫秒   maxRetries String 否 3 最大重试次数   sessionTimeoutMilliseconds boolean 否 60000 会话超时时间单位：毫秒   connectionTimeoutMilliseconds boolean 否 15000 连接超时时间单位：毫秒   digest String 否  连接Zookeeper的权限令牌缺省为不需要权限验证    b.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/dev-manual/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/dev-manual/roadmap/</guid>
      <description>Core  Unified Job Config API  Core Config Type Config Root Config   Job Types  Simple Dataflow Script Http   Event Trace  Event Publisher Database Event Listener Other Event Listener   Unified Schedule API Unified Resource API  ElasticJob Lite  Distributed Features  High Availability Elastic scale in/out Failover Misfire Idempotency Reconcile   Registry Center  Zookeeper Other Registry Center Supported   Lifecycle Management  Add/Remove Pause/Resume Disable/Enable Shutdown Restful API Web Console   Job Dependency  Listener DAG   Spring Integrate  Namespace Bean Injection Spring Boot Starter    </description>
    </item>
    
    <item>
      <title>Job Sharding Strategy</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-sharding-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-sharding-strategy/</guid>
      <description>框架提供的分片策略 AverageAllocationJobShardingStrategy 全路径：
org.apache.shardingsphere.elasticjob.lite.handler.sharding.impl.AverageAllocationJobShardingStrategy
策略说明：
基于平均分配算法的分片策略，也是默认的分片策略。
如果分片不能整除，则不能整除的多余分片将依次追加到序号小的服务器。如：
如果有3台服务器，分成9片，则每台服务器分到的分片是：1=[0,1,2], 2=[3,4,5], 3=[6,7,8]
如果有3台服务器，分成8片，则每台服务器分到的分片是：1=[0,1,6], 2=[2,3,7], 3=[4,5]
如果有3台服务器，分成10片，则每台服务器分到的分片是：1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]
OdevitySortByNameJobShardingStrategy 全路径：
org.apache.shardingsphere.elasticjob.lite.handler.sharding.impl.OdevitySortByNameJobShardingStrategy
策略说明：
根据作业名的哈希值奇偶数决定IP升降序算法的分片策略。
作业名的哈希值为奇数则IP升序。
作业名的哈希值为偶数则IP降序。
用于不同的作业平均分配负载至不同的服务器。
AverageAllocationJobShardingStrategy的缺点是，一旦分片数小于作业服务器数，作业将永远分配至IP地址靠前的服务器，导致IP地址靠后的服务器空闲。而OdevitySortByNameJobShardingStrategy则可以根据作业名称重新分配服务器负载。如：
如果有3台服务器，分成2片，作业名称的哈希值为奇数，则每台服务器分到的分片是：1=[0], 2=[1], 3=[]
如果有3台服务器，分成2片，作业名称的哈希值为偶数，则每台服务器分到的分片是：3=[0], 2=[1], 1=[]
RotateServerByNameJobShardingStrategy 全路径：
org.apache.shardingsphere.elasticjob.lite.handler.sharding.impl.RotateServerByNameJobShardingStrategy
策略说明：
根据作业名的哈希值对服务器列表进行轮转的分片策略。
自定义分片策略 实现JobShardingStrategy接口并实现sharding方法，接口方法参数为作业服务器IP列表和分片策略选项，分片策略选项包括作业名称，分片总数以及分片序列号和个性化参数对照表，可以根据需求定制化自己的分片策略。
欢迎将分片策略以插件的形式贡献至org.apache.shardingsphere.elasticjob.lite.handler.sharding包。
配置分片策略 与配置通常的作业属性相同，在spring命名空间或者JobConfiguration中配置jobShardingStrategyType属性，属性值是作业分片策略类的全路径。</description>
    </item>
    
    <item>
      <title>Misfired</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/features/misfired/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/features/misfired/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Job Listener</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-listener/</guid>
      <description>可通过配置多个任务监听器，在任务执行前和执行后执行监听的方法。监听器分为每台作业节点均执行和分布式场景中仅单一节点执行2种。
1. 每台作业节点均执行的监听 若作业处理作业服务器的文件，处理完成后删除文件，可考虑使用每个节点均执行清理任务。此类型任务实现简单，且无需考虑全局分布式任务是否完成，请尽量使用此类型监听器。
步骤：
 定义监听器  public class MyElasticJobListener implements ElasticJobListener { @Override public void beforeJobExecuted(ShardingContexts shardingContexts) { // do something ...  } @Override public void afterJobExecuted(ShardingContexts shardingContexts) { // do something ...  } }  将监听器作为参数传入JobScheduler  public class JobMain { public static void main(String[] args) { new JobScheduler(createRegistryCenter(), createJobConfiguration(), new MyElasticJobListener()).init(); } private static CoordinatorRegistryCenter createRegistryCenter() { CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;#34;zk_host:2181&amp;#34;, &amp;#34;elastic-job-demo&amp;#34;)); regCenter.</description>
    </item>
    
    <item>
      <title>Job Open Ecosystem</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/features/jobt-ype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/features/jobt-ype/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Reconcile</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-reconcile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/job-reconcile/</guid>
      <description>在分布式的场景下由于网络、时钟等原因，可能导致Zookeeper的数据与真实运行的作业产生不一致，这种不一致通过正向的校验无法完全避免。需要另外启动一个线程定时校验注册中心数据与真实作业状态的一致性，即维持Elastic-Job的最终一致性。
在2.0.6之前的版本中，网络不稳定的环境下Elastic-Job有可能有的作业分片并未执行，重启一下就能修复。在2.0.6，版本中Elastic-Job在提供reconcileIntervalMinutes设置修复状态服务执行间隔分钟数，用于修复作业服务器不一致状态，默认每10分钟检测并修复一次。
支持两种配置方式
 Spring方式  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:elasticjob=&amp;#34;http://elasticjob.shardingsphere.apache.org/schema/elasticjob&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://elasticjob.shardingsphere.apache.org/schema/elasticjob http://elasticjob.shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd &amp;#34;&amp;gt; &amp;lt;!--配置作业注册中心 --&amp;gt; &amp;lt;elasticjob:zookeeper id=&amp;#34;regCenter&amp;#34; server-lists=&amp;#34;yourhost:2181&amp;#34; namespace=&amp;#34;elastic-job&amp;#34; base-sleep-time-milliseconds=&amp;#34;1000&amp;#34; max-sleep-time-milliseconds=&amp;#34;3000&amp;#34; max-retries=&amp;#34;3&amp;#34; /&amp;gt; &amp;lt;!--配置作业类 --&amp;gt; &amp;lt;bean id=&amp;#34;simpleJob&amp;#34; class=&amp;#34;xxx.MyElasticJob&amp;#34; /&amp;gt; &amp;lt;!--配置作业 --&amp;gt; &amp;lt;elasticjob:simple id=&amp;#34;oneOffElasticJob&amp;#34; job-ref=&amp;#34;simpleJob&amp;#34; registry-center-ref=&amp;#34;regCenter&amp;#34; reconcile-interval-minutes=&amp;#34;10&amp;#34; cron=&amp;#34;0/10 * * * * ?&amp;#34; sharding-total-count=&amp;#34;3&amp;#34; sharding-item-parameters=&amp;#34;0=A,1=B,2=C&amp;#34; /&amp;gt; &amp;lt;/beans&amp;gt;  Java方式  public class JobMain { public static void main(final String[] args) { // ...  JobConfiguration.newBuilder(simpleJobConfig).reconcileIntervalMinutes(10).build(); // .</description>
    </item>
    
    <item>
      <title>Dump Job Runtime Info</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/dump/</guid>
      <description>使用Elastic-Job-Lite过程中可能会碰到一些分布式问题，导致作业运行不稳定。
由于无法在生产环境调试，通过dump命令可以把作业内部相关信息dump出来，方便开发者debug分析； 另外为了不泄露隐私，已将相关信息中的ip地址以ip1, ip2&amp;hellip;的形式过滤，可以在互联网上公开传输环境信息，便于进一步完善Elastic-Job。
如何使用 配置监听端口 支持两种配置方式
 Spring方式  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:elasticjob=&amp;#34;http://elasticjob.shardingsphere.apache.org/schema/elasticjob&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://elasticjob.shardingsphere.apache.org/schema/elasticjob http://elasticjob.shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd &amp;#34;&amp;gt; &amp;lt;!--配置作业注册中心 --&amp;gt; &amp;lt;elasticjob:zookeeper id=&amp;#34;regCenter&amp;#34; server-lists=&amp;#34;yourhost:2181&amp;#34; namespace=&amp;#34;dd-job&amp;#34; base-sleep-time-milliseconds=&amp;#34;1000&amp;#34; max-sleep-time-milliseconds=&amp;#34;3000&amp;#34; max-retries=&amp;#34;3&amp;#34; /&amp;gt; &amp;lt;!--配置任务快照 --&amp;gt; &amp;lt;elasticjob:snapshot id=&amp;#34;jobSnapshot&amp;#34; registry-center-ref=&amp;#34;regCenter&amp;#34; dump-port=&amp;#34;9999&amp;#34;/&amp;gt; &amp;lt;!--配置作业类 --&amp;gt; &amp;lt;bean id=&amp;#34;simpleJob&amp;#34; class=&amp;#34;xxx.MyElasticJob&amp;#34; /&amp;gt; &amp;lt;!-- 配置作业--&amp;gt; &amp;lt;elasticjob:simple id=&amp;#34;oneOffElasticJob&amp;#34; job-ref=&amp;#34;simpleJob&amp;#34; registry-center-ref=&amp;#34;regCenter&amp;#34; cron=&amp;#34;0/10 * * * * ?&amp;#34; sharding-total-count=&amp;#34;3&amp;#34; sharding-item-parameters=&amp;#34;0=A,1=B,2=C&amp;#34; /&amp;gt; &amp;lt;/beans&amp;gt;  Java方式  public class JobMain { public static void main(final String[] args) { // .</description>
    </item>
    
    <item>
      <title>Event Trace</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/event-trace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/event-trace/</guid>
      <description>Elastic-Job提供了事件追踪功能，可通过事件订阅的方式处理调度过程的重要事件，用于查询、统计和监控。Elastic-Job目前提供了基于关系型数据库两种事件订阅方式记录事件。
通过代码配置开启事件追踪 Elastic-Job-Lite 在配置中提供了 TracingConfiguration，目前支持数据库方式配置。
// 初始化数据源  DataSource dataSource = ...; // 定义日志数据库事件溯源配置  TracingConfiguration tracingConfig = new TracingConfiguration&amp;lt;&amp;gt;(&amp;#34;RDB&amp;#34;, dataSource); // 初始化注册中心  CoordinatorRegistryCenter regCenter = ...; // 初始化作业配置  JobConfiguration jobConfig = ...; new JobScheduler(regCenter, jobConfig, tracingConfig).init(); 具体配置方式请参见开发指南.
事件追踪的event_trace_rdb_url属性对应库自动创建JOB_EXECUTION_LOG和JOB_STATUS_TRACE_LOG两张表以及若干索引。
JOB_EXECUTION_LOG字段含义
   字段名称 字段类型 是否必填 描述     id VARCHAR(40) 是 主键   job_name VARCHAR(100) 是 作业名称   task_id VARCHAR(1000) 是 任务名称,每次作业运行生成新任务   hostname VARCHAR(255) 是 主机名称   ip VARCHAR(50) 是 主机IP   sharding_item INT 是 分片项   execution_source VARCHAR(20) 是 作业执行来源。可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER   failure_cause VARCHAR(2000) 否 执行失败原因   is_success BIT 是 是否执行成功   start_time TIMESTAMP 是 作业开始执行时间   complete_time TIMESTAMP 否 作业结束执行时间    JOB_EXECUTION_LOG记录每次作业的执行历史。分为两个步骤：</description>
    </item>
    
    <item>
      <title>Execution Monitor</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/execution-monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/execution-monitor/</guid>
      <description>通过监听Elastic-Job-Lite的zookeeper注册中心的几个关键节点即可完成作业运行状态监控功能。
监听作业服务器存活 监听job_name\instances\job_instance_id节点是否存在。该节点为临时节点，如果作业服务器下线，该节点将删除。</description>
    </item>
    
    <item>
      <title>Customization</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/customized-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/customized-hook/</guid>
      <description>Elastic-Job 在配置中提供了 JobHandler，用于定制化处理，目前支持自定义异常处理及作业处理线程池。
异常处理 可扩展 JobErrorHandler 接口，默认实现是记录日志但不抛出异常。
作业处理线程池 可扩展 JobExecutorServiceHandler 接口，定制线程池。</description>
    </item>
    
    <item>
      <title>Deploy Guide</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/deploy-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/deploy-guide/</guid>
      <description>应用部署   启动Elastic-Job-Lite指定注册中心的Zookeeper。
  运行包含Elastic-Job-Lite和业务代码的jar文件。不限于jar或war的启动方式。
  运维平台和RESTFul API部署(可选)   解压缩elastic-job-lite-console-${version}.tar.gz并执行bin\start.sh。
  打开浏览器访问http://localhost:8899/即可访问控制台。8899为默认端口号，可通过启动脚本输入-p自定义端口号。
  访问RESTFul API方法同控制台。
  elastic-job-lite-console-${version}.tar.gz可通过mvn install编译获取。
  </description>
    </item>
    
    <item>
      <title>Console</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/web-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/web-console/</guid>
      <description>解压缩elastic-job-lite-console-${version}.tar.gz并执行bin\start.sh。打开浏览器访问http://localhost:8899/即可访问控制台。8899为默认端口号，可通过启动脚本输入-p自定义端口号。
elastic-job-lite-console-${version}.tar.gz可通过mvn install编译获取。
登录 提供两种账户，管理员及访客，管理员拥有全部操作权限，访客仅拥有察看权限。默认管理员用户名和密码是root/root，访客用户名和密码是guest/guest，可通过conf\auth.properties修改管理员及访客用户名及密码。
功能列表   登录安全控制
  注册中心、事件追踪数据源管理
  快捷修改作业设置
  作业和服务器维度状态查看
  操作作业禁用\启用、停止和删除等生命周期
  事件追踪查询
  设计理念 运维平台和elastic-job-lite并无直接关系，是通过读取作业注册中心数据展现作业状态，或更新注册中心数据修改全局配置。
控制台只能控制作业本身是否运行，但不能控制作业进程的启动，因为控制台和作业本身服务器是完全分离的，控制台并不能控制作业服务器。
不支持项  添加作业 作业在首次运行时将自动添加。Elastic-Job-Lite以jar方式启动，并无作业分发功能。如需完全通过运维平台发布作业，请使用Elastic-Job-Cloud。  </description>
    </item>
    
    <item>
      <title>Operator</title>
      <link>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/operation-manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/lite/en/user-manual/operation-manual/</guid>
      <description>Java API(孵化中) 1. 配置类API JobConfigurationAPI 作业配置的API YamlJobConfiguration getJobConfiguration(String jobName) 获取作业设置.   Parameters: jobName — 作业名称
  Returns: 作业设置对象
  void updateJobConfiguration(YamlJobConfiguration yamlJobConfiguration) 更新作业设置.  Parameters: jobConfiguration — 作业设置对象  void removeJobConfiguration(String jobName) 删除作业设置.  Parameters: jobName — 作业名称  2. 操作类API 2.1 JobOperateAPI 操作作业的API void trigger(OptionaljobName, OptionalserverIp) 作业立刻执行.作业在不与上次运行中作业冲突的情况下才会启动, 并在启动后自动清理此标记.  Parameters:  jobName — 作业名称 serverIp — 作业服务器IP地址    void disable(OptionaljobName, OptionalserverIp) 作业禁用.会重新分片.  Parameters:  jobName — 作业名称 serverIp — 作业服务器IP地址    void enable(OptionaljobName, OptionalserverIp) 作业启用.</description>
    </item>
    
  </channel>
</rss>