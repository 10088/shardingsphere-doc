<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Standard API on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/</link>
    <description>Recent content in Standard API on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java API</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/java-api/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Build Data Source ShardingSphere-JDBC Java API consists of schema name, mode configuration, data source map, rule configurations and properties.
Build Mode Configuration Mode configuration include 3 parameters, which are mode type, repository configuration and whether overwrite of local configuration to persist repository.
Mode include memory, standalone and cluster.
There are different repository configuration for each mode:
 Memory mode do not need repository configuration; Standalone and cluster mode need to customized repository configuration.</description>
    </item>
    
    <item>
      <title>Use YAML</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/yaml/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Build Data Source YAML Configuration ShardingSphere-JDBC YAML file consists of schema name, mode configuration, data source map, rule configurations and properties.
Note: The example connection pool is HikariCP, which can be replaced with other connection pools according to business scenarios.
schemaName: my_schema mode: type: Memory dataSources: # Configure 1st data source ds_1: !!com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_1 username: root password: # Configure nth data source ds_n: !</description>
    </item>
    
    <item>
      <title>Use Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule Note: The example connection pool is HikariCP, which can be replaced with other connection pools according to business scenarios.
# Configure actual data sources spring.shardingsphere.datasource.names=ds0,ds1 # Configure the first data source spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0 spring.shardingsphere.datasource.ds0.username=root spring.shardingsphere.datasource.ds0.password= # Configure the second data source spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1 spring.shardingsphere.datasource.ds1.username=root spring.shardingsphere.datasource.ds1.password= # Configure t_order table rule spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$-&amp;gt;{0..1}.t_order$-&amp;gt;{0..1} # Configure database sharding strategy spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=database_inline # Configure table sharding strategy spring.</description>
    </item>
    
    <item>
      <title>Use Spring Namespace</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/api/standard/spring-namespace/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-namespace&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule Note: The example connection pool is HikariCP, which can be replaced with other connection pools according to business scenarios.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:sharding=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/sharding&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://shardingsphere.apache.org/schema/shardingsphere/sharding http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd &amp;#34;&amp;gt; &amp;lt;!-- Configure actual data sources --&amp;gt; &amp;lt;!-- Configure the first data source --&amp;gt; &amp;lt;bean id=&amp;#34;ds0&amp;#34; class=&amp;#34;com.zaxxer.hikari.HikariDataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;com.mysql.jdbc.Driver&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;jdbcUrl&amp;#34; value=&amp;#34;jdbc:mysql://localhost:3306/ds0&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;root&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!</description>
    </item>
    
  </channel>
</rss>