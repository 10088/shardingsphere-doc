<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/overview/</link>
    <description>Recent content in Overview on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is Apache ShardingSphere</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/what-is-ss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/what-is-ss/</guid>
      <description>Definition Apache ShardingSphere is an open source ecosystem of distributed databases, including three independent products: JDBC, Proxy &amp;amp; Sidecar (Planning). It adopts a plugin-oriented (or plugabble) architecture and expands the original databases&amp;rsquo; features list thanks to components.
ShardingSphere provides many enhanced features in the form of database protocol and SQL, including data sharding, access routing, data security, etc. It supports MySQL, PostgreSQL, SQL Server, Oracle, and other data storage engines.</description>
    </item>
    
    <item>
      <title>Design Philosophy</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/design/</guid>
      <description>ShardingSphere adopts the database plus design philosophy, which is committed to building the standards and ecology of the upper layer of the database and supplementing the missing capabilities of the database in the ecology.
The pluggable architecture of Apache ShardingSphere is composed of three layers - L1 Kernel Layer, L2 Feature Layer and L3 Ecosystem Layer.
L1 Kernel Layer An abstraction of databases&amp;rsquo; basic capabilities. All the components are required and the specific implementation method can be replaced thanks to plugins.</description>
    </item>
    
    <item>
      <title>JDBC &amp; Proxy</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/scenarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/scenarios/</guid>
      <description>Apache ShardingSphere includes two independent clients: ShardingSphere-JDBC &amp;amp; ShardingSphere-Proxy. They all provide functions of data scale-out, distributed transaction and distributed governance, applicable in a variety of scenarios such as Java isomorphism, heterogeneous languages, and a cloud-native environment.
ShardingSphere-JDBC 
As the community&amp;rsquo;s first product and the predecessor of Apache ShardingSphere, ShardingSphere-JDBC is a lightweight Java framework that provides additional services at Java&amp;rsquo;s JDBC layer. With the client connecting directly to the database, it provides services in the form of jar and requires no extra deployment and dependence.</description>
    </item>
    
    <item>
      <title>DistSQL</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/distsql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/distsql/</guid>
      <description>Definition DistSQL (Distributed SQL) is Apache ShardingSphere&amp;rsquo;s specific SQL, providing additional operation capabilities compared to standard SQL.
Flexible rule configuration and resource management &amp;amp; control capabilities are one of the characteristics of Apache ShardingSphere.
When using 4.x and earlier versions, developers can operate data just like using a database, but they need to configure resources and rules through YAML file (or registry center). However, the YAML file format and the changes brought by using the registry center made it unfriendly to DBAs.</description>
    </item>
    
    <item>
      <title>Mode</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/mode/</guid>
      <description>Apache ShardingSphere is a complete set of products applicable to a wide range of usage scenarios. In addition to the cluster deployment of the production environment, it also provides corresponding operation modes for engineers in the development process and automated testing scenarios. Apache ShardingSphere provides two operation modes: standalone mode and cluster mode.
Standalone mode It can achieve data persistence in terms of metadata information such as data sources and rules, but it is not able to synchronize metadata to multiple Apache ShardingSphere instances or be aware of each other in a cluster environment.</description>
    </item>
    
  </channel>
</rss>