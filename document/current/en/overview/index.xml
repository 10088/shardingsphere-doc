<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Introduction on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/overview/</link>
    <description>Recent content in Project Introduction on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advantages</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/advantages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/advantages/</guid>
      <description>Build a standard layer &amp;amp; ecosystem above heterogeneous databases.  Apache ShardingSphere is positioned as Database Plus and aims at building a standard layer and ecosystem above heterogeneous databases. The project focuses on how to maximize the original database computing and storage capabilities - rather than creating a new database. Placed above databases, ShardingSphere enhances database inter-compatibility and collaboration.
 Provide relational databases with expansions and enhancements.  Apache ShardingSphere is designed to fully unlock relational databases compute and storage capabilities in distributed scenarios, instead of creating an entirely new relational database.</description>
    </item>
    
    <item>
      <title>What is Apache ShardingSphere</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/what-is-ss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/what-is-ss/</guid>
      <description>Definition Apache ShardingSphere is an open source ecosystem of distributed databases, including three independent products: JDBC, Proxy &amp;amp; Sidecar (Planning). It adopts a plugin-oriented (or plugabble) architecture and expands the original databases&amp;rsquo; features list thanks to components.
ShardingSphere provides many enhanced features in the form of database protocol and SQL, including data sharding, access routing, data security, etc. It supports MySQL, PostgreSQL, SQL Server, Oracle, and other data storage engines.</description>
    </item>
    
    <item>
      <title>Core Concepts</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/glossary/</guid>
      <description>Database Plus Database Plus is the concept driving Apache ShardingSphere&amp;rsquo;s project positioning, and it is designed to build a standard layer and ecosystem above heterogeneous databases. This concept focuses on how to maximize the original database computing and storage capabilities rather than creating a new database. Placed above databases, ShardingSphere focuses on enhancing databases&amp;rsquo; inter-compatibility and collaboration.
Connect, Enhance, and Pluggable are the core concepts of Database Plus:
Connect Through flexible adaptation to the database protocol, SQL dialect, and database storage, ShardingSphere can quickly connect applications and multi-model heterogeneous databases.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/architecture/</guid>
      <description>Apache ShardingSphere&amp;rsquo;s pluggable architecture is designed to enable developers to customize their own unique systems by adding the desired features, just like adding building blocks.
A plugin-oriented architecture has very high requirements for program architecture design. It requires making each module independent, and using a pluggable kernel to combine various functions in an overlapping manner. Designing an architecture system that completely isolates the feature development not only fosters an active open source community, but also ensures the quality of the project.</description>
    </item>
    
    <item>
      <title>Application Scenarios</title>
      <link>https://shardingsphere.apache.org/document/current/en/overview/scenarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/overview/scenarios/</guid>
      <description>Apache ShardingSphere includes two independent clients: ShardingSphere-JDBC &amp;amp; ShardingSphere-Proxy. They all provide functions of data scale-out, distributed transaction and distributed governance, applicable in a variety of scenarios such as Java isomorphism, heterogeneous languages, and a cloud-native environment.
ShardingSphere-JDBC 
As the community&amp;rsquo;s first product and the predecessor of Apache ShardingSphere, ShardingSphere-JDBC is a lightweight Java framework that provides additional services at Java&amp;rsquo;s JDBC layer. With the client connecting directly to the database, it provides services in the form of jar and requires no extra deployment and dependence.</description>
    </item>
    
  </channel>
</rss>