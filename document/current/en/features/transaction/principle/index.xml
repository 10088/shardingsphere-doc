<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Principle on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/features/transaction/principle/</link>
    <description>Recent content in Principle on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/features/transaction/principle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2PC transaction-XA</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/transaction/principle/2pc-xa-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/transaction/principle/2pc-xa-transaction/</guid>
      <description>Principle ShardingSphere has defined an SPI for distributed transactions, ShardingTransactionManager. Sharding-JDBC and Sharding-Proxy are two accesses for distributed transactions. XAShardingTransactionManager is its XA implementation, which can be added to ShardingSphere distributed ecology by introducing sharding-transaction-xa-core dependency. XAShardingTransactionManager manages and adapts to actual datasource; it delegates begin/commit/rollback in access transactions to XA managers.
Process 1. begin Receiving set autoCommit=0 in the access, XAShardingTransactionManager will use XA transaction managers to start overall XA transactions, which is usually marked by XID.</description>
    </item>
    
    <item>
      <title>BASE Transaction</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/transaction/principle/base-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/transaction/principle/base-transaction/</guid>
      <description>Design The BASE transaction in ShardingSphere requires to implement Sharding transaction manager SPI to take charge of its life cycle. Also, through SQL Hook in ShardingSphere, BASE transaction will also acquire necessary SQL information to help the transaction manager control distributed transactions. The transaction isolation manager is still planning, so resource isolation is not available now.</description>
    </item>
    
  </channel>
</rss>