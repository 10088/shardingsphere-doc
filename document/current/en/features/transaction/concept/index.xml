<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core Concept on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/features/transaction/concept/</link>
    <description>Recent content in Core Concept on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/features/transaction/concept/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2PC Transaction-XA</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/transaction/concept/2pc-xa-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/transaction/concept/2pc-xa-transaction/</guid>
      <description>2PC transaction submit uses the DTP Model defined by X/OPEN, in which extracted AP, TM and RM can guarantee a high transaction consistency. TM and RM exchange transaction information according to XA. Compared with traditional local transactions, XA transactions have a prepare phase, where the database can not only passively receive commands, but also notify the submitter whether the transaction can be accepted. So TM can collect all the prepare results of transactions in branches before submitting all of them together, which has guaranteed the high consistency.</description>
    </item>
    
    <item>
      <title>Saga BASE Transaction</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/transaction/concept/base-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/transaction/concept/base-transaction/</guid>
      <description>Saga Transaction To let users better understand the design of BASE transactions, we need to explain some concepts first:
 Branch transaction: physical SQL routed to different nodes in the distributed transactions. Branch transaction group: a group of branch transactions generated by the same logic SQL in the distributed transactions.  When ShardingSphere parses SQL, transaction engine will shift current transactions to a new branch transaction group. Before executing the routed physical SQL, the transaction engine will take snapshot of these SQL and register corresponding branch transactions to the current branch transaction group.</description>
    </item>
    
  </channel>
</rss>