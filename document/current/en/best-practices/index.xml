<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Best Practices on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/best-practices/</link>
    <description>Recent content in Best Practices on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/best-practices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/current/en/best-practices/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/best-practices/sharding/</guid>
      <description>Scenarios Suitable for scenarios where the data level of a single node is split and stored in multiple data nodes, and it is expected that business SQL can still be written for a single storage node without modification.
Prerequisites Suppose you expect a horizontal split of the t_order table to a total of 4 tables in two DB instances, and you are required to write SQL against the t_order table after the split.</description>
    </item>
    
    <item>
      <title>Distributed Transaction</title>
      <link>https://shardingsphere.apache.org/document/current/en/best-practices/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/best-practices/transaction/</guid>
      <description>Scenarios Apache ShardingSphere provides transaction semantics in distributed scenarios that can be used when transactional are required. ShardingSphere provides three transaction modes: LOCAL, XA, and BASE to address different scenarios.
 LOCAL: Suitable for scenarios where data consistency requirements are not high. XA: Provides atomicity guarantees, ensures that data is not lost, and snapshot reads are not guaranteed. Suitable for scenarios where consistency requirements are relatively high and there is no snapshot read requirement.</description>
    </item>
    
    <item>
      <title>Readwrite-splitting</title>
      <link>https://shardingsphere.apache.org/document/current/en/best-practices/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/best-practices/readwrite-splitting/</guid>
      <description>Scenarios Suitable for a one-primary and multi-secondary database architecture. The primary database is responsible for transactional operations such as writing, modifying, and deleting data, and the secondary database is responsible for query operations. Apache ShardingSphere&amp;rsquo;s read/write splitting feature provides a variety of load balancing strategies.
Prerequisites Suppose the user has a database architecture of one primary and two secondary databases, and the user expects the two secondary databases to be able to bear different proportions of load.</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://shardingsphere.apache.org/document/current/en/best-practices/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/best-practices/encrypt/</guid>
      <description>Scenarios Whether a new business needs to use data encryption capabilities, or an existing business needs to be transformed to meet encryption needs, Apache ShardingSphere provides a complete set of data encryption solutions.
Prerequisites Assuming that the new service goes online, it is now expected that the user&amp;rsquo;s password field will be encrypted and stored in the database, but at the same time, the system should be able to obtain plaintext data.</description>
    </item>
    
  </channel>
</rss>