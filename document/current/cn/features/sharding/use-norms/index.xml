<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>使用规范 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/</link>
    <description>Recent content in 使用规范 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL</title>
      <link>https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/sql/</guid>
      <description>由于 SQL 语法灵活复杂，面向分布式的数据库和单机数据库的查询场景又不完全相同，难免有和单机数据库不兼容的 SQL 出现。
本文详细罗列出已明确可支持的 SQL 种类以及已明确不支持的 SQL 种类，供使用者参考。
其中有未涉及到的 SQL 欢迎补充，未支持的 SQL 也尽量会在未来的版本中支持。
解析引擎 解析引擎负责将 SQL 字符串解析为抽象语法树。 目前支持 MySQL, PostgreSQL, SQLServer, Oracle, openGauss 以及符合 SQL92 规范的 SQL。 由于 SQL 语法的复杂性，目前仍然存在少量解析引擎不支持的 SQL。
清单如下：
   MySQL     FLUSH PRIVILEGES   CLONE LOCAL DATA DIRECTORY = &amp;lsquo;clone_dir&amp;rsquo;   INSTALL COMPONENT &amp;lsquo;file://component1&amp;rsquo;, &amp;lsquo;file://component2&amp;rsquo;   UNINSTALL COMPONENT &amp;lsquo;file://component1&amp;rsquo;, &amp;lsquo;file://component2&amp;rsquo;   SHOW CREATE USER user   REPAIR TABLE t_order   OPTIMIZE TABLE t_order   CHECKSUM TABLE t_order   CHECK TABLE t_order   SET RESOURCE GROUP group_name   DROP RESOURCE GROUP group_name   CREATE RESOURCE GROUP group_name TYPE = SYSTEM   ALTER RESOURCE GROUP rg1 VCPU = 0-63    数据分片 兼容全部常用的路由至单数据节点的 SQL； 路由至多数据节点的 SQL 由于场景复杂，分为稳定支持、实验性支持和不支持这三种情况。</description>
    </item>
    
    <item>
      <title>分页</title>
      <link>https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/pagination/</guid>
      <description>完全支持 MySQL、PostgreSQL 和 Oracle 的分页查询，SQLServer 由于分页查询较为复杂，仅部分支持。
分页性能 性能瓶颈 查询偏移量过大的分页会导致数据库获取数据性能低下，以 MySQL 为例：
SELECT * FROM t_order ORDER BY id LIMIT 1000000, 10 这句 SQL 会使得 MySQL 在无法利用索引的情况下跳过 1,000,000 条记录后，再获取 10 条记录，其性能可想而知。 而在分库分表的情况下（假设分为2个库），为了保证数据的正确性，SQL 会改写为：
SELECT * FROM t_order ORDER BY id LIMIT 0, 1000010 即将偏移量前的记录全部取出，并仅获取排序后的最后 10 条记录。这会在数据库本身就执行很慢的情况下，进一步加剧性能瓶颈。 因为原SQL仅需要传输 10 条记录至客户端，而改写之后的SQL则会传输 1,000,010 * 2 的记录至客户端。
ShardingSphere 的优化 ShardingSphere 进行了 2 个方面的优化。
首先，采用流式处理 + 归并排序的方式来避免内存的过量占用。由于 SQL 改写不可避免的占用了额外的带宽，但并不会导致内存暴涨。 与直觉不同，大多数人认为 ShardingSphere 会将 1,000,010 * 2 记录全部加载至内存，进而占用大量内存而导致内存溢出。 但由于每个结果集的记录是有序的，因此 ShardingSphere 每次比较仅获取各个分片的当前结果集记录，驻留在内存中的记录仅为当前路由到的分片的结果集的当前游标指向而已。 对于本身即有序的待排序对象，归并排序的时间复杂度仅为 O(nlogn)，性能损耗很小。</description>
    </item>
    
  </channel>
</rss>