<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>标准 API on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/</link>
    <description>Recent content in 标准 API on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java API</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/java-api/</guid>
      <description>引入 Maven 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 构建数据源 ShardingSphere-JDBC 的 Java API 通过 Schema 名称、运行模式、数据源集合、规则集合以及属性配置组成。
构建运行模式 运行模式配置对象包含三个参数，分别是运行模式类型、用于存储配置数据的仓库配置和是否用当前的 Java 配置覆盖已经持久化的配置。
目前包括三种运行模式，分别是：内存模式、本地模式、集群模式。
对于用于存储配置数据的仓库配置根据运行模式不同，有不同的配置类：
 内存模式无需仓库配置对象； 本地模式和集群模式均需要使用各自的仓库配置对象。  三种运行模式的配置示例分别是：
 内存模式  ModeConfiguration modeConfig = new ModeConfiguration(&amp;#34;Memory&amp;#34;, null, true);  本地模式  StandalonePersistRepositoryConfiguration repositoryConfig = new StandalonePersistRepositoryConfiguration(&amp;#34;Local&amp;#34;, new Properties()); ModeConfiguration modeConfig = new ModeConfiguration(&amp;#34;Standalone&amp;#34;, repositoryConfig, false);  集群模式  ClusterPersistRepositoryConfiguration repositoryConfig = new ClusterPersistRepositoryConfiguration(&amp;#34;ZooKeeper&amp;#34;, &amp;#34;my_schema&amp;#34;, &amp;#34;localhost:2181&amp;#34;, new Properties()); ModeConfiguration modeConfig = new ModeConfiguration(&amp;#34;Cluster&amp;#34;, repositoryConfig, false); 构建真实数据源 示例的数据库连接池为 HikariCP，可根据业务场景更换为其他数据库连接池。</description>
    </item>
    
    <item>
      <title>使用 YAML 配置</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/yaml/</guid>
      <description>引入 Maven 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 构建数据源 YAML 配置 ShardingSphere-JDBC 的 YAML 配置文件通过 Schema 名称、运行模式、数据源集合、规则集合以及属性配置组成。
注：示例的数据库连接池为 HikariCP，可根据业务场景更换为其他数据库连接池。
schemaName: my_schema mode: type: Memory dataSources: # 配置第 1 个数据源 ds_1: !!com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_1 username: root password: # 配置第 n 个数据源 ds_n: !!com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_n username: root password: rules: - !XXX_1 ... - !XXX_N ... props: key_1: value_1 key_n: value_n 构建 ShardingSphere 数据源 DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile); 使用 ShardingSphere 数据源 使用方式同 Java API。</description>
    </item>
    
    <item>
      <title>使用 Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter/</guid>
      <description>引入 Maven 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 规则配置 注：示例的数据库连接池为 HikariCP，可根据业务场景更换为其他数据库连接池。
# 配置真实数据源 spring.shardingsphere.datasource.names=ds0,ds1 # 配置第 1 个数据源 spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0 spring.shardingsphere.datasource.ds0.username=root spring.shardingsphere.datasource.ds0.password= # 配置第 2 个数据源 spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1 spring.shardingsphere.datasource.ds1.username=root spring.shardingsphere.datasource.ds1.password= # 配置 t_order 表规则 spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$-&amp;gt;{0..1}.t_order$-&amp;gt;{0..1} # 配置分库策略 spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=database_inline # 配置分表策略 spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=table_inline # 省略配置 t_order_item 表规则... # ... # 配置 分片算法 spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.type=INLINE spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.props.algorithm-expression=ds_${user_id % 2} spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.type=INLINE spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.props.algorithm-expression=t_order_${order_id % 2} 使用 JNDI 数据源 如果计划使用 JNDI 配置数据库，在应用容器（如 Tomcat）中使用 ShardingSphere-JDBC 时， 可使用 spring.</description>
    </item>
    
    <item>
      <title>使用 Spring 命名空间</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/api/standard/spring-namespace/</guid>
      <description>引入Maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-namespace&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 规则配置 注：示例的数据库连接池为 HikariCP，可根据业务场景更换为其他数据库连接池。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:sharding=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/sharding&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://shardingsphere.apache.org/schema/shardingsphere/sharding http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd &amp;#34;&amp;gt; &amp;lt;!-- 配置真实数据源 --&amp;gt; &amp;lt;!-- 配置第 1 个数据源 --&amp;gt; &amp;lt;bean id=&amp;#34;ds0&amp;#34; class=&amp;#34;com.zaxxer.hikari.HikariDataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;com.mysql.jdbc.Driver&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;jdbcUrl&amp;#34; value=&amp;#34;jdbc:mysql://localhost:3306/ds0&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;root&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!-- 配置第 2 个数据源 --&amp;gt; &amp;lt;bean id=&amp;#34;ds1&amp;#34; class=&amp;#34;com.zaxxer.hikari.HikariDataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;com.mysql.jdbc.Driver&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;jdbcUrl&amp;#34; value=&amp;#34;jdbc:mysql://localhost:3306/ds1&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;root&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!</description>
    </item>
    
  </channel>
</rss>