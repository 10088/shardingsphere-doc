<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>最佳实践 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/best-practices/</link>
    <description>Recent content in 最佳实践 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/best-practices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分布式事务</title>
      <link>https://shardingsphere.apache.org/document/current/cn/best-practices/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/best-practices/transaction/</guid>
      <description>适用场景 Apache ShardingSphere 提供分布式场景下的事务语义，当有事务需求时，可以使用。ShardingSphere 提供了三种事务模式：LOCAL，XA，BASE，以应对不同的场景。
 LOCAL：适用于对数据一致性要求不高的场景。 XA：提供了原子性的保证，保证了数据不丢，不保证快照读。适用于对一致性要求相对高，没有快照读要求的场景。在对一致性要求较高的场景，较好的选择是使用 XA 的 Narayana 实现。 BASE：在一致性和性能之间做了权衡，具体参考 Seata 官网。  操作步骤 参考 ShardingSphere 使用 XA Narayana</description>
    </item>
    
  </channel>
</rss>