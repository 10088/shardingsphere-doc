<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概览 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/overview/</link>
    <description>Recent content in 概览 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>什么是 ShardingSphere</title>
      <link>https://shardingsphere.apache.org/document/current/cn/overview/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/overview/introduction/</guid>
      <description>定义 Apache ShardingSphere 是一款开源的分布式数据库生态项目，由 JDBC、Proxy 和 Sidecar（规划中） 3 款产品组成。 其核心采用可插拔架构，通过组件扩展功能。 对上以数据库协议及 SQL 方式提供诸多增强功能，包括数据分片、访问路由、数据安全等；对下原生支持 MySQL、PostgreSQL、SQL Server、Oracle 等多种数据存储引擎。 Apache ShardingSphere 项目理念，是提供数据库增强计算服务平台，进而围绕其上构建生态。 充分利用现有数据库的计算与存储能力，通过插件化方式增强其核心能力，为企业解决在数字化转型中面临的诸多使用难点，为加速数字化应用赋能。
ShardingSphere 已于 2020 年 4 月 16 日成为 Apache 软件基金会的顶级项目。 欢迎通过邮件列表参与讨论。
产品优势  构建异构数据库上层生态和标准  Apache ShardingSphere 产品定位为 Database Plus，旨在构建异构数据库上层的标准和生态。 它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库。 ShardingSphere 站在数据库的上层视角，关注他们之间的协作多于数据库自身。
 在原有关系型数据库基础上提供扩展和增强  Apache ShardingSphere 旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力， 并非实现一个全新的关系型数据库。 关系型数据库当今依然占有巨大市场份额，是企业核心系统的基石，未来也难于撼动，我们更加注重在原有基础上提供增量，而非颠覆。
 统一管控的多端接入  Apache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。
线路规划 </description>
    </item>
    
    <item>
      <title>设计哲学</title>
      <link>https://shardingsphere.apache.org/document/current/cn/overview/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/overview/design/</guid>
      <description>ShardingSphere 采用 Database Plus 设计哲学，该理念致力于构建数据库上层的标准和生态，在生态中补充数据库所缺失的能力。
Apache ShardingSphere 的可插拔架构划分为 3 层，它们是：L1 内核层、L2 功能层、L3 生态层。
L1 内核层 是数据库基本能力的抽象，其所有组件均必须存在，但具体实现方式可通过可插拔的方式更换。 主要包括查询优化器、分布式事务引擎、分布式执行引擎、权限引擎和调度引擎等。
L2 功能层 用于提供增量能力，其所有组件均是可选的，可以包含零至多个组件。 组件之间完全隔离，互无感知，多组件可通过叠加的方式相互配合使用。 主要包括数据分片、读写分离、数据库高可用、数据加密、影子库等。 用户自定义功能可完全面向 Apache ShardingSphere 定义的顶层接口进行定制化扩展，而无需改动内核代码。
L3 生态层 用于对接和融入现有数据库生态，包括数据库协议、SQL 解析器和存储适配器，分别对应于 Apache ShardingSphere 以数据库协议提供服务的方式、SQL 方言操作数据的方式以及对接存储节点的数据库类型。</description>
    </item>
    
    <item>
      <title>JDBC &amp; Proxy</title>
      <link>https://shardingsphere.apache.org/document/current/cn/overview/jdbc_proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/overview/jdbc_proxy/</guid>
      <description>Apache ShardingSphere 由 ShardingSphere-JDBC 和 ShardingSphere-Proxy 这 2 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的基于数据库作为存储节点的增量功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。
ShardingSphere-JDBC 独立部署 
ShardingSphere-JDBC 是 Apache ShardingSphere 的第一个产品，也是 Apache ShardingSphere 的前身。定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。
 适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC； 支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等； 支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。      ShardingSphere-JDBC ShardingSphere-Proxy     数据库 任意 MySQL/PostgreSQL   连接消耗数 高 低   异构语言 仅 Java 任意   性能 损耗低 损耗略高   无中心化 是 否   静态入口 无 有    ShardingSphere-JDBC 的优势在于对 Java 应用的友好度。</description>
    </item>
    
    <item>
      <title>DistSQL</title>
      <link>https://shardingsphere.apache.org/document/current/cn/overview/distsql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/overview/distsql/</guid>
      <description>定义 DistSQL（Distributed SQL）是 Apache ShardingSphere 特有的操作语言。 它与标准 SQL 的使用方式完全一致，用于提供增量功能的 SQL 级别操作能力。
灵活的规则配置和资源管控能力是 Apache ShardingSphere 的特点之一。
在使用 4.x 及其之前版本时，开发者虽然可以像使用原生数据库一样操作数据，但却需要通过本地文件或注册中心配置资源和规则。然而，操作习惯变更，对于运维工程师并不友好。
从 5.x 版本开始，DistSQL（Distributed SQL）让用户可以像操作数据库一样操作 Apache ShardingSphere，使其从面向开发人员的框架和中间件转变为面向运维人员的数据库产品。
相关概念 DistSQL 细分为 RDL、RQL、RAL 和 RUL 四种类型。
RDL Resource &amp;amp; Rule Definition Language，负责资源和规则的创建、修改和删除。
RQL Resource &amp;amp; Rule Query Language，负责资源和规则的查询和展现。
RAL Resource &amp;amp; Rule Administration Language，负责强制路由、熔断、配置导入导出、数据迁移控制等管理功能。
RUL Resource Utility Language，负责 SQL 解析、SQL 格式化、执行计划预览等功能。
对系统的影响 之前 在拥有 DistSQL 以前，用户一边使用 SQL 语句操作数据，一边使用 YAML 文件来管理 ShardingSphere 的配置，如下图：
这时用户不得不面对以下几个问题：
 需要通过不同类型的客户端来操作数据和管理 ShardingSphere 规则； 多个逻辑库需要多个 YAML 文件； 修改 YAML 需要文件的编辑权限； 修改 YAML 后需要重启 ShardingSphere。  之后 随着 DistSQL 的出现，对 ShardingSphere 的操作方式也得到了改变：</description>
    </item>
    
    <item>
      <title>运行模式</title>
      <link>https://shardingsphere.apache.org/document/current/cn/overview/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/overview/mode/</guid>
      <description>Apache ShardingSphere 是一套完善的产品，使用场景非常广泛。 除生产环境的集群部署之外，还为工程师在开发和自动化测试等场景提供相应的运行模式。 Apache ShardingSphere 提供的 2 种运行模式分别是单机模式和集群模式。
单机模式 能够将数据源和规则等元数据信息持久化，但无法将元数据同步至多个 Apache ShardingSphere 实例，无法在集群环境中相互感知。 通过某一实例更新元数据之后，会导致其他实例由于获取不到最新的元数据而产生不一致的错误。 适用于工程师在本地搭建 Apache ShardingSphere 环境。
集群模式 提供了多个 Apache ShardingSphere 实例之间的元数据共享和分布式场景下状态协调的能力。 在真实部署上线的生产环境，必须使用集群模式。 它能够提供计算能力水平扩展和高可用等分布式系统必备的能力。 集群环境需要通过独立部署的注册中心来存储元数据和协调节点状态。</description>
    </item>
    
  </channel>
</rss>