commit aa7e385877d7c538da16cce3c9117a3e04372df8
Author: Jieker <jieker_mail@163.com>
Date:   Thu Aug 11 15:52:23 2022 +0800

    Add `CREATE DEFAULT SINGLE TABLE RULE` docs. (#20050)
    
    * Add `CREATE DEFAULT SINGLE TABLE RULE` docs.
    
    * Problems fixed.
    
    * change punctuation.

diff --git a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/add-resource.cn.md b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/add-resource.cn.md
index 22bca068b5a..0ad58e29bc1 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/add-resource.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/add-resource.cn.md
@@ -54,9 +54,9 @@ value ::=
 
 - 添加资源前请确认已经在 Proxy 中创建逻辑数据库，并执行 `use` 命令成功选择一个逻辑数据库；
 - 确认添加的资源是可以正常连接的， 否则将不能添加成功；
-- `dataSourceName` 区分大小写；
-- `dataSourceName` 在当前逻辑库中需要唯一；
-- `dataSourceName` 命名只允许使用字母、数字以及 `_` ，且必须以字母开头；
+- `resourceName` 区分大小写；
+- `resourceName` 在当前逻辑库中需要唯一；
+- `resourceName` 命名只允许使用字母、数字以及 `_` ，且必须以字母开头；
 - `poolProperty` 用于自定义连接池参数，`key` 必须和连接池参数名一致，`value` 支持 int 和 String 类型；
 - 当 `password` 包含特殊字符时，建议使用 string 形式；例如 `password@123`的 string 形式为 `"password@123"`。
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/add-resource.en.md b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/add-resource.en.md
index 7f3e43c52f5..019a3e4a9d9 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/add-resource.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/add-resource.en.md
@@ -53,15 +53,15 @@ value ::=
 ### Supplement
 
 - Before adding resources, please confirm that a database has been created in Proxy, and execute the `use` command to
-  successfully select a database
-- Confirm that the added resource can be connected normally, otherwise it will not be added successfully
-- `dataSourceName` is case-sensitive
-- `dataSourceName` needs to be unique within the current database
-- `dataSourceName` name only allows letters, numbers and `_`, and must start with a letter
+  successfully select a database;
+- Confirm that the added resource can be connected normally, otherwise it will not be added successfully;
+- `resourceName` is case-sensitive;
+- `resourceName` needs to be unique within the current database;
+- `resourceName` name only allows letters, numbers and `_`, and must start with a letter;
 - `poolProperty` is used to customize connection pool parameters, `key` must be the same as the connection pool
-  parameter name, `value` supports int and String types
-- When `password` contains special characters, it is recommended to use the string form; for example, the string form
-  of `password@123` is `"password@123"`
+  parameter name, `value` supports int and String types;
+- When `password` contains special characters, it is recommended to use the string form; For example, the string form
+  of `password@123` is `"password@123"`.
 
 ### Example
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/alter-resource.cn.md b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/alter-resource.cn.md
index e3d9cd94eba..937d8f4d9d9 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/alter-resource.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/alter-resource.cn.md
@@ -56,9 +56,9 @@ value ::=
 - `ALTER RESOURCE`不允许改变该资源关联的真实数据源；
 - `ALTER RESOURCE`会发生连接池的切换，这个操作可能对进行中的业务造成影响，请谨慎使用；
 - 确认添加的资源是可以正常连接的， 否则将不能添加成功；
-- `dataSourceName` 区分大小写；
-- `dataSourceName` 在当前逻辑库中需要唯一；
-- `dataSourceName` 命名只允许使用字母、数字以及 `_` ，且必须以字母开头；
+- `resourceName` 区分大小写；
+- `resourceName` 在当前逻辑库中需要唯一；
+- `resourceName` 命名只允许使用字母、数字以及 `_` ，且必须以字母开头；
 - `poolProperty` 用于自定义连接池参数，`key` 必须和连接池参数名一致，`value` 支持 int 和 String 类型；
 - 当 `password` 包含特殊字符时，建议使用 string 形式；例如 `password@123`的 string 形式为 `"password@123"`。
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/alter-resource.en.md b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/alter-resource.en.md
index 42e5847c95d..03a09b2c107 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/alter-resource.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/alter-resource.en.md
@@ -53,17 +53,17 @@ value ::=
 ### Supplement
 
 - Before altering the resources, please confirm that a database exists in Proxy, and execute the `use` command to
-  successfully select a database
-- `ALTER RESOURCE` is not allowed to change the real data source associated with this resource
+  successfully select a database;
+- `ALTER RESOURCE` is not allowed to change the real data source associated with this resource;
 - `ALTER RESOURCE` will switch the connection pool. This operation may affect the ongoing business, please use it with
-  caution
-- `dataSourceName` is case-sensitive
-- `dataSourceName` needs to be unique within the current database
-- `dataSourceName` name only allows letters, numbers and `_`, and must start with a letter
+  caution;
+- `resourceName` is case-sensitive;
+- `resourceName` needs to be unique within the current database;
+- `resourceName` name only allows letters, numbers and `_`, and must start with a letter;
 - `poolProperty` is used to customize connection pool parameters, `key` must be the same as the connection pool
-  parameter name, `value` supports int and String types
+  parameter name, `value` supports int and String types;
 - When `password` contains special characters, it is recommended to use the string form; for example, the string form
-  of `password@123` is `"password@123"`
+  of `password@123` is `"password@123"`.
 
 ### Example
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/drop-resource.en.md b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/drop-resource.en.md
index 71f592193af..dcef7cda59b 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/drop-resource.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/drop-resource.en.md
@@ -20,11 +20,11 @@ resourceName ::=
 ### Supplement
 
 - `DROP RESOURCE` will only drop resources in Proxy, the real data source corresponding to the resource will not be
-  dropped
+  dropped;
 - Unable to drop resources already used by rules. `Resources are still in used.` will be prompted when removing
-  resources used by rules
+  resources used by rules;
 - The resource need to be removed only contains `SINGLE TABLE RULE`, and when the user confirms that this restriction
-  can be ignored, the `IGNORE SINGLE TABLES` keyword can be added to remove the resource
+  can be ignored, the `IGNORE SINGLE TABLES` keyword can be added to remove the resource.
 
 ### Example
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule.cn.md
index 1869b7b4b4e..6f7d1e15ba3 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule.cn.md
@@ -47,20 +47,20 @@ algorithmName ::=
 ### 补充说明
 
 - `tableDefinition` 为标准分片规则定义；
-- `autoTableDefinition`为自动分片规则定义。标准分片规则和自动分片规则可参考[数据分片](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/)。
+- `autoTableDefinition`为自动分片规则定义。标准分片规则和自动分片规则可参考[数据分片](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/)；
 - 当使用标准分片时：
-    - `DATANODES` 只能使用已经添加到当前逻辑库的资源，且只能使用 INLINE 表达式指定需要的资源
-    - `DATABASE_STRATEGY`、`TABLE_STRATEGY` 表示分库和分表策略，均为可选项，未配置时使用默认策略
+    - `DATANODES` 只能使用已经添加到当前逻辑库的资源，且只能使用 INLINE 表达式指定需要的资源；
+    - `DATABASE_STRATEGY`、`TABLE_STRATEGY` 表示分库和分表策略，均为可选项，未配置时使用默认策略；
     - `strategyDefinition` 中属性 `TYPE` 用于指定[分片算法](/cn/features/sharding/concept/sharding/#自定义分片算法)的类型，目前仅支持 `STANDARD`
       、`COMPLEX`。使用 `COMPLEX` 时需要用 `SHARDING_COLUMNS` 指定多个分片键。
 - 当使用自动分片时：
-    - `RESOURCES` 只能使用已经添加到当前逻辑库的资源，可通过枚举或 INLINE 表达式指定需要的资源
-    - 只能使用自动分片算法，可参考[自动分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#自动分片算法)
-- `algorithmType` 为分片算法类型，分片算法类型请参考[分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)
-- 自动生成的算法命名规则为  `tableName` _ `strategyType` _ `algorithmType`
-- 自动生成的主键策略命名规则为 `tableName` _ `strategyType`
+    - `RESOURCES` 只能使用已经添加到当前逻辑库的资源，可通过枚举或 INLINE 表达式指定需要的资源；
+    - 只能使用自动分片算法，可参考[自动分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#自动分片算法)。
+- `algorithmType` 为分片算法类型，分片算法类型请参考[分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)；
+- 自动生成的算法命名规则为  `tableName` _ `strategyType` _ `algorithmType`；
+- 自动生成的主键策略命名规则为 `tableName` _ `strategyType`；
 - `KEY_GENERATE_STRATEGY`
-  用于指定主键生成策略，为可选项，关于主键生成策略可参考[分布式主键](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
+  用于指定主键生成策略，为可选项，关于主键生成策略可参考[分布式主键](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule.en.md
index 8a10bcec23c..bee5e68fa72 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule.en.md
@@ -48,28 +48,28 @@ algorithmName ::=
 
 - `tableDefinition` is defined for standard sharding table rule; `autoTableDefinition` is defined for auto sharding
   table rule. For standard sharding rules and auto sharding rule, refer
-  to [Data Sharding](en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/).
-- use standard sharding table rule
+  to [Data Sharding](en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/);
+- use standard sharding table rule:
     - `DATANODES` can only use resources that have been added to the current database, and can only use INLINE
-      expressions to specify required resources
+      expressions to specify required resources;
     - `DATABASE_STRATEGY`, `TABLE_STRATEGY` are the database sharding strategy and the table sharding strategy, which
-      are optional, and the default strategy is used when not configured
+      are optional, and the default strategy is used when not configured;
     - The attribute `TYPE` in `strategyDefinition` is used to specify the type
       of [Sharding Algorithm](/en/features/sharding/concept/sharding/#user-defined-sharding-algorithm), currently only
       supports `STANDARD`, `COMPLEX`. Using `COMPLEX` requires specifying multiple sharding columns
       with `SHARDING_COLUMNS`.
-- use auto sharding table rule
+- use auto sharding table rule:
     - `RESOURCES` can only use resources that have been added to the current database, and the required resources can be
-      specified by enumeration or INLINE expression
+      specified by enumeration or INLINE expression;
     - Only auto sharding algorithm can be used, please refer
-      to [Auto Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#auto-sharding-algorithm)
+      to [Auto Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#auto-sharding-algorithm).
 - `algorithmType` is the sharding algorithm type, please refer
-  to [Sharding Algorithm](en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)
-- The auto-generated algorithm naming rule is `tableName` _ `strategyType` _ `shardingAlgorithmType`
-- The auto-generated primary key strategy naming rule is `tableName` _ `strategyType`
+  to [Sharding Algorithm](en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding);
+- The auto-generated algorithm naming rule is `tableName` _ `strategyType` _ `shardingAlgorithmType`;
+- The auto-generated primary key strategy naming rule is `tableName` _ `strategyType`;
 - `KEY_GENERATE_STRATEGY` is used to specify the primary key generation strategy, which is optional. For the primary key
   generation strategy, please refer
-  to [Distributed Primary Key](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
+  to [Distributed Primary Key](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/).
 
 ### Example
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy.cn.md
index a67ba5b1782..2cea20077ce 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy.cn.md
@@ -34,8 +34,8 @@ algorithmType ::=
 
 ### 补充说明
 
-- 当使用复合分片算法时，需要通过 `SHARDING_COLUMNS` 指定多个分片键
-- `algorithmType` 为分片算法类型，详细的分片算法类型信息请参考[分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)
+- 当使用复合分片算法时，需要通过 `SHARDING_COLUMNS` 指定多个分片键；
+- `algorithmType` 为分片算法类型，详细的分片算法类型信息请参考[分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy.en.md
index 2e5a6b901e2..e7fd8333e4e 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy.en.md
@@ -34,9 +34,9 @@ algorithmType ::=
 
 ### Supplement
 
-- When using the complex sharding algorithm, multiple sharding columns need to be specified using `SHARDING_COLUMNS`
+- When using the complex sharding algorithm, multiple sharding columns need to be specified using `SHARDING_COLUMNS`;
 - `algorithmType` is the sharding algorithm type. For detailed sharding algorithm type information, please refer
-  to [Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)
+  to [Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/).
 
 ### Example
 
@@ -69,5 +69,5 @@ CREATE DEFAULT SHARDING TABLE STRATEGY (
 
 ### Related links
 
-- [Reserved word](/cn/reference/distsql/syntax/reserved-word/)
+- [Reserved word](/en/reference/distsql/syntax/reserved-word/)
 - [CREATE SHARDING ALGORITHM](/en/reference/distsql/syntax/rdl/rule-definition/create-sharding-algorithm/)
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm.cn.md
index 71c158b5bdc..40fc90ce014 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm.cn.md
@@ -28,7 +28,7 @@ algorithmType ::=
 
 ### 补充说明
 
-- `algorithmType` 为分片算法类型，详细的分片算法类型信息请参考[分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)
+- `algorithmType` 为分片算法类型，详细的分片算法类型信息请参考[分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm.en.md
index 330d0f810d2..5b494021f7e 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm.en.md
@@ -28,7 +28,7 @@ algorithmType ::=
 
 ### Supplement
 
-- `algorithmType` is the sharding algorithm type. For detailed sharding algorithm type information, please refer to [Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)
+- `algorithmType` is the sharding algorithm type. For detailed sharding algorithm type information, please refer to [Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/).
 
 ### Example
 
@@ -52,4 +52,4 @@ CREATE SHARDING ALGORITHM interval_algorithm (
 
 ### Related links
 
-- [Reserved word](/cn/reference/distsql/syntax/reserved-word/)
+- [Reserved word](/en/reference/distsql/syntax/reserved-word/)
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule.cn.md
index 91c4eeefec9..afe3899539d 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule.cn.md
@@ -22,12 +22,12 @@ tableName ::=
 
 ### 补充说明
 
-- 只有分片表才能创建绑定关系
-- 一个分片表只能具有一个绑定关系
-- 添加绑定关系的分片表需要使用相同的资源，并且分片节点个数相同。例如 `ds_${0..1}.t_order_${0..1}` 与 `ds_${0..1}.t_order_item_${0..1}`
-- 添加绑定关系的分片表需要对分片键使用相同的分片算法。例如 `t_order_${order_id % 2}` 与 `t_order_item_${order_item_id % 2}`
-- 只能存在一个绑定规则，但可包含多个绑定关系，因此无法重复执行 `CREATE SHARDING BINDING TABLE RULE`。 
-  当绑定规则已经存在但还需要添加绑定关系时，需要使用 `ALTER SHARDING BINDING TABLE RULE` 来修改绑定规则
+- 只有分片表才能创建绑定关系；
+- 一个分片表只能具有一个绑定关系；
+- 添加绑定关系的分片表需要使用相同的资源，并且分片节点个数相同。例如 `ds_${0..1}.t_order_${0..1}` 与 `ds_${0..1}.t_order_item_${0..1}`；
+- 添加绑定关系的分片表需要对分片键使用相同的分片算法。例如 `t_order_${order_id % 2}` 与 `t_order_item_${order_item_id % 2}`；
+- 只能存在一个绑定规则，但可包含多个绑定关系，因此无法重复执行 `CREATE SHARDING BINDING TABLE RULE`。
+  当绑定规则已经存在但还需要添加绑定关系时，需要使用 `ALTER SHARDING BINDING TABLE RULE` 来修改绑定规则。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule.en.md
index 2571631a2da..bc28e24aae3 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule.en.md
@@ -23,16 +23,16 @@ tableName ::=
 
 ### Supplement
 
-- Creating binding relationships rules can only use sharding tables
-- A sharding table can only have one binding relationships
+- Creating binding relationships rules can only use sharding tables;
+- A sharding table can only have one binding relationships;
 - The sharding table for creating binding relationships needs to use the same resources and the same actual tables. For
-  example `ds_${0..1}.t_order_${0..1}` 与 `ds_${0..1}.t_order_item_${0..1}`
+  example `ds_${0..1}.t_order_${0..1}` 与 `ds_${0..1}.t_order_item_${0..1}`;
 - The sharding table for creating binding relationships needs to use the same sharding algorithm for the sharding
-  column. For example `t_order_{order_id % 2}` and `t_order_item_{order_item_id % 2}`
+  column. For example `t_order_{order_id % 2}` and `t_order_item_{order_item_id % 2}`;
 - Only one binding rule can exist, but can contain multiple binding relationships, so can not
   execute `CREATE SHARDING BINDING TABLE RULE` more than one time. When a binding table rule already exists but a
   binding relationship needs to be added, you need to use `ALTER SHARDING BINDING TABLE RULE` to modify the binding
-  table rule
+  table.
 
 ### Example
 
@@ -56,5 +56,5 @@ CREATE SHARDING BINDING TABLE RULES (t_order,t_order_item),(t_product,t_product_
 
 ### Related links
 
-- [Reserved word](/cn/reference/distsql/syntax/reserved-word/)
+- [Reserved word](/en/reference/distsql/syntax/reserved-word/)
 - [CREATE SHARDING TABLE RULE](/en/reference/distsql/syntax/rdl/rule-definition/create-sharding-table-rule/)
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule.cn.md
index 1007b31d17d..bec25a6c457 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule.cn.md
@@ -34,9 +34,9 @@ algorithmType ::=
 
 ### 补充说明
 
-- `tableName` 可使用已经存在的表或者将要创建的表
+- `tableName` 可使用已经存在的表或者将要创建的表；
 - 只能存在一个广播规则，但可包含多个广播表，因此无法重复执行 `CREATE SHARDING BROADCAST TABLE RULE`。
- 当广播规则已经存在但还需要添加广播表时，需要使用 `ALTER BROADCAST TABLE RULE` 来修改广播规则
+ 当广播规则已经存在但还需要添加广播表时，需要使用 `ALTER BROADCAST TABLE RULE` 来修改广播规则。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule.en.md
index 4b640f94395..e2f51f37bc0 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule.en.md
@@ -20,10 +20,10 @@ tableName ::=
 
 ### Supplement
 
-- `tableName` can use an existing table or a table that will be created
+- `tableName` can use an existing table or a table that will be created;
 - Only one broadcast rule can exist, but can contain multiple broadcast tables, so can not
   execute `CREATE SHARDING BROADCAST TABLE RULE` more than one time. When the broadcast table rule already exists but
-  the broadcast table needs to be added, you need to use `ALTER BROADCAST TABLE RULE` to modify the broadcast table rule
+  the broadcast table needs to be added, you need to use `ALTER BROADCAST TABLE RULE` to modify the broadcast table rule.
 
 ### Example
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator.cn.md
index aba53536bb7..c7c2a6fd1d1 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator.cn.md
@@ -29,7 +29,7 @@ algorithmType ::=
 ### 补充说明
 
 - `algorithmType`
-  为分布式主键生成算法类型，详细的分布式主键生成算法类型信息请参考[分布式序列算法类型](cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
+  为分布式主键生成算法类型，详细的分布式主键生成算法类型信息请参考[分布式序列算法类型](cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator.en.md
index 44cdd3347fb..c211b5719db 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator.en.md
@@ -30,7 +30,7 @@ algorithmType ::=
 ### Supplement
 
 - `algorithmType` is the key generate algorithm type. For detailed key generate algorithm type information, please refer
-  to [KEY GENERATE ALGORITHM](en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
+  to [KEY GENERATE ALGORITHM](en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/).
 
 ### Example
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule.cn.md
index 6414cca6754..7526ad70904 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule.cn.md
@@ -47,20 +47,20 @@ algorithmName ::=
 ### 补充说明
 
 - `tableDefinition` 为标准分片规则定义；`autoTableDefinition`
-  为自动分片规则定义。标准分片规则和自动分片规则可参考[数据分片](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/)。
+  为自动分片规则定义。标准分片规则和自动分片规则可参考[数据分片](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/)；
 - 当使用标准分片时：
-    - `DATANODES` 只能使用已经添加到当前逻辑库的资源，且只能使用 INLINE 表达式指定需要的资源
-    - `DATABASE_STRATEGY`、`TABLE_STRATEGY` 表示分库和分表策略，均为可选项，未配置时使用默认策略
+    - `DATANODES` 只能使用已经添加到当前逻辑库的资源，且只能使用 INLINE 表达式指定需要的资源；
+    - `DATABASE_STRATEGY`、`TABLE_STRATEGY` 表示分库和分表策略，均为可选项，未配置时使用默认策略；
     - `strategyDefinition` 中属性 `TYPE` 用于指定[分片算法](/cn/features/sharding/concept/sharding/#自定义分片算法)的类型，目前仅支持 `STANDARD`
       、`COMPLEX`。使用 `COMPLEX` 时需要用 `SHARDING_COLUMNS` 指定多个分片键。
 - 当使用自动分片时：
-    - `RESOURCES` 只能使用已经添加到当前逻辑库的资源，可通过枚举或 INLINE 表达式指定需要的资源
-    - 只能使用自动分片算法，可参考[自动分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#自动分片算法)
-- `algorithmType` 为分片算法类型，分片算法类型请参考[分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)
-- 自动生成的算法命名规则为  `tableName` _ `strategyType` _ `algorithmType`
-- 自动生成的主键策略命名规则为 `tableName` _ `strategyType`
+    - `RESOURCES` 只能使用已经添加到当前逻辑库的资源，可通过枚举或 INLINE 表达式指定需要的资源；
+    - 只能使用自动分片算法，可参考[自动分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#自动分片算法)。
+- `algorithmType` 为分片算法类型，分片算法类型请参考[分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)；
+- 自动生成的算法命名规则为  `tableName` _ `strategyType` _ `algorithmType`；
+- 自动生成的主键策略命名规则为 `tableName` _ `strategyType；
 - `KEY_GENERATE_STRATEGY`
-  用于指定主键生成策略，为可选项，关于主键生成策略可参考[分布式主键](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
+  用于指定主键生成策略，为可选项，关于主键生成策略可参考[分布式主键](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)。
 
 ### 示例
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule.en.md
index c8301c7974a..9c8a44a9797 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule.en.md
@@ -48,28 +48,28 @@ algorithmName ::=
 
 - `tableDefinition` is defined for standard sharding table rule; `autoTableDefinition` is defined for auto sharding
   table rule. For standard sharding rules and auto sharding rule, refer
-  to [Data Sharding](en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/).
-- use standard sharding table rule
+  to [Data Sharding](en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/);
+- use standard sharding table rule:
     - `DATANODES` can only use resources that have been added to the current database, and can only use INLINE
-      expressions to specify required resources
+      expressions to specify required resources;
     - `DATABASE_STRATEGY`, `TABLE_STRATEGY` are the database sharding strategy and the table sharding strategy, which
-      are optional, and the default strategy is used when not configured
+      are optional, and the default strategy is used when not configured;
     - The attribute `TYPE` in `strategyDefinition` is used to specify the type
       of [Sharding Algorithm](/en/features/sharding/concept/sharding/#user-defined-sharding-algorithm), currently only
       supports `STANDARD`, `COMPLEX`. Using `COMPLEX` requires specifying multiple sharding columns
       with `SHARDING_COLUMNS`.
-- use auto sharding table rule
+- use auto sharding table rule:
     - `RESOURCES` can only use resources that have been added to the current database, and the required resources can be
-      specified by enumeration or INLINE expression
+      specified by enumeration or INLINE expression;
     - Only auto sharding algorithm can be used, please refer
-      to [Auto Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#auto-sharding-algorithm)
+      to [Auto Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#auto-sharding-algorithm).
 - `algorithmType` is the sharding algorithm type, please refer
-  to [Sharding Algorithm](en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)
-- The auto-generated algorithm naming rule is `tableName` _ `strategyType` _ `shardingAlgorithmType`
-- The auto-generated primary key strategy naming rule is `tableName` _ `strategyType`
+  to [Sharding Algorithm](en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding);
+- The auto-generated algorithm naming rule is `tableName` _ `strategyType` _ `shardingAlgorithmType`;
+- The auto-generated primary key strategy naming rule is `tableName` _ `strategyType`;
 - `KEY_GENERATE_STRATEGY` is used to specify the primary key generation strategy, which is optional. For the primary key
   generation strategy, please refer
-  to [Distributed Primary Key](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
+  to [Distributed Primary Key](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/).
 
 ### Example
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/_index.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/_index.cn.md
new file mode 100644
index 00000000000..3a0d0f8ccf0
--- /dev/null
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/_index.cn.md
@@ -0,0 +1,7 @@
++++
+title = "单表"
+weight = 1
+chapter = true
++++
+
+本章节将对单表特性的语法进行详细说明。
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/_index.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/_index.en.md
new file mode 100644
index 00000000000..8f47cf48efc
--- /dev/null
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/_index.en.md
@@ -0,0 +1,7 @@
++++
+title = "Single Table"
+weight = 1
+chapter = true
++++
+
+This chapter describes the syntax of single table.
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/create-default-single-table-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/create-default-single-table-rule.cn.md
new file mode 100644
index 00000000000..3bc2ed649cc
--- /dev/null
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/create-default-single-table-rule.cn.md
@@ -0,0 +1,41 @@
++++
+title = "CREATE DEFAULT SINGLE TABLE RULE"
+weight = 2
++++
+
+## 描述
+
+`CREATE DEFAULT SINGLE TABLE RULE` 语法用于创建默认的单表规则
+
+### 语法定义
+
+```sql
+CreateDefaultSingleTableRule ::=
+  'CREATE' 'DEFAULT' 'SINGLE` `TABLE` `RULE' singleTableDefinition
+
+singleTableDefinition ::=
+  'RESOURCE' '=' resourceName
+
+resourceName ::=
+  identifier
+```
+
+### 补充说明
+
+- `RESOURCE` 需使用 RDL 管理的数据源资源。
+
+### 示例
+
+#### 创建默认单表规则
+
+```sql
+CREATE DEFAULT SINGLE TABLE RULE RESOURCE = ds_0;
+```
+
+### 保留字
+
+`CREATE`、`SHARDING`、`SINGLE`、`TABLE`、`RULE`、`RESOURCE`
+
+### 相关链接
+
+- [保留字](/cn/reference/distsql/syntax/reserved-word/)
\ No newline at end of file
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/create-default-single-table-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/create-default-single-table-rule.en.md
new file mode 100644
index 00000000000..ae26257b766
--- /dev/null
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/single-table/create-default-single-table-rule.en.md
@@ -0,0 +1,41 @@
++++
+title = "CREATE DEFAULT SINGLE TABLE RULE"
+weight = 2
++++
+
+## Description
+
+The `CREATE DEFAULT SINGLE TABLE RULE` syntax is used to create a default single table rule.
+
+### Syntax
+
+```sql
+CreateDefaultSingleTableRule ::=
+  'CREATE' 'DEFAULT' 'SINGLE` `TABLE` `RULE' singleTableDefinition
+
+singleTableDefinition ::=
+  'RESOURCE' '=' resourceName
+
+resourceName ::=
+  identifier
+```
+
+### Supplement
+
+- `RESOURCE` needs to use data source resource managed by RDL.
+
+### Example
+
+#### Create a default single table rule
+
+```sql
+CREATE DEFAULT SINGLE TABLE RULE RESOURCE = ds_0;
+```
+
+### Reserved word
+
+`CREATE`, `SHARDING`, `SINGLE`, `TABLE`, `RULE`, `RESOURCE`
+
+### Related links
+
+- [Reserved word](/en/reference/distsql/syntax/reserved-word/)
