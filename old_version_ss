commit d1c7e1ea2baf631f8ecddeeb8214ad663d02b152
Author: Zhengqiang Duan <duanzhengqiang@apache.org>
Date:   Wed Nov 10 19:26:28 2021 +0800

    Expose metadata to encryptor and update doc (#13535)
    
    * Expose metadata to encryptor
    
    * update encrypt doc
    
    * add unit test
    
    * add unit test
    
    * modify rewrite test case
    
    * Revert "modify rewrite test case"
    
    This reverts commit bf68d64a723364e354e7004876b608146cd8b1eb.

diff --git a/docs/document/content/reference/encrypt/_index.cn.md b/docs/document/content/reference/encrypt/_index.cn.md
index fa52ae4460..fe1bcf04e3 100644
--- a/docs/document/content/reference/encrypt/_index.cn.md
+++ b/docs/document/content/reference/encrypt/_index.cn.md
@@ -27,7 +27,7 @@ Apache ShardingSphere 会将用户请求的明文进行加密后存储到底层
 
 **数据源配置**：指数据源配置。
 
-**加密算法配置**：指使用什么加密算法进行加解密。目前ShardingSphere内置了两种加解密算法：AES/MD5。用户还可以通过实现ShardingSphere提供的接口，自行实现一套加解密算法。
+**加密算法配置**：指使用什么加密算法进行加解密。目前ShardingSphere内置了三种加解密算法：AES，MD5 和 RC4。用户还可以通过实现ShardingSphere提供的接口，自行实现一套加解密算法。
 
 **加密表配置**：用于告诉ShardingSphere数据表里哪个列用于存储密文数据（cipherColumn）、哪个列用于存储明文数据（plainColumn）以及用户想使用哪个列进行SQL编写（logicColumn）。
 
@@ -209,7 +209,7 @@ Apache ShardingSphere 提供了两种加密算法用于数据加密，这两种
 在用户进行`INSERT`, `DELETE`, `UPDATE`时，ShardingSphere会按照用户配置，对SQL进行解析、改写、路由，并调用`encrypt()`将数据加密后存储到数据库, 
 而在`SELECT`时，则调用`decrypt()`方法将从数据库中取出的加密数据进行逆向解密，最终将原始数据返回给用户。
 
-当前，Apache ShardingSphere 针对这种类型的加密解决方案提供了两种具体实现类，分别是 MD5(不可逆)，AES(可逆)，用户只需配置即可使用这两种内置的方案。
+当前，Apache ShardingSphere 针对这种类型的加密解决方案提供了三种具体实现类，分别是 MD5(不可逆)，AES(可逆)，RC4(可逆)，用户只需配置即可使用这三种内置的方案。
 
 ### QueryAssistedEncryptAlgorithm
 
diff --git a/docs/document/content/reference/encrypt/_index.en.md b/docs/document/content/reference/encrypt/_index.en.md
index 86a3cb48d9..75a3d8d392 100644
--- a/docs/document/content/reference/encrypt/_index.en.md
+++ b/docs/document/content/reference/encrypt/_index.en.md
@@ -35,7 +35,7 @@ The encryption configuration is mainly divided into four parts: data source conf
 **Datasource Configuration**：The configuration of DataSource.
 
 **Encrypt Algorithm Configuration**：What kind of encryption strategy to use for encryption and decryption. 
-Currently ShardingSphere has two built-in encryption/decryption strategies: AES / MD5. 
+Currently ShardingSphere has three built-in encryption/decryption strategies: AES, MD5, RC4. 
 Users can also implement a set of encryption/decryption algorithms by implementing the interface provided by Apache ShardingSphere.
 
 **Encryption Table Configuration**：Show the ShardingSphere data table which column is used to store cipher column data (cipherColumn), 
@@ -262,7 +262,7 @@ The solution has provided two methods `encrypt()` and `decrypt()` to encrypt/dec
 When users `INSERT`, `DELETE` and `UPDATE`, ShardingSphere will parse, rewrite and route SQL according to the configuration. It will also use `encrypt()` to encrypt data and store them in the database. When using `SELECT`, 
 they will decrypt sensitive data from the database with `decrypt()` reversely and return them to users at last.
 
-Currently, Apache ShardingSphere has provided two types of implementations for this kind of encrypt solution, MD5 (irreversible) and AES (reversible), which can be used after configuration.
+Currently, Apache ShardingSphere has provided three types of implementations for this kind of encrypt solution, MD5 (irreversible), AES (reversible) and RC4 (reversible), which can be used after configuration.
 
 ### QueryAssistedEncryptAlgorithm
 
