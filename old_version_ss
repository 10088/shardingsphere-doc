commit fb66dea2b91965f0f6e4ee1e564e4e330f1630c5
Author: Haoran Meng <menghaoranss@gmail.com>
Date:   Sat Jan 29 19:41:47 2022 +0800

    Fix error md style && img links for blog (#15197)

diff --git a/docs/blog/content/material/Jan_28_Blog_PG_Create_a_Distributed_Database_Solution_Based_on_PostgreSQL_&_openGauss.en.md b/docs/blog/content/material/Jan_28_Blog_PG_Create_a_Distributed_Database_Solution_Based_on_PostgreSQL_&_openGauss.en.md
index 07310aceb1..a9d1d8e732 100644
--- a/docs/blog/content/material/Jan_28_Blog_PG_Create_a_Distributed_Database_Solution_Based_on_PostgreSQL_&_openGauss.en.md
+++ b/docs/blog/content/material/Jan_28_Blog_PG_Create_a_Distributed_Database_Solution_Based_on_PostgreSQL_&_openGauss.en.md
@@ -169,7 +169,7 @@ Contributor Guide:https://shardingsphere.apache.org/community/cn/contribute/
 
 GitHub: https://github.com/apache/shardingsphere
 
-###Author
+### Author
 
 >Apache ShardingSphere Committer & Middleware Engineer at SphereEx. Contributed to the development of Apache ShardingSphere and Apache ShardingSphere ElasticJob.
 
diff --git a/docs/blog/content/material/Jan_28_Blog_X_Kernel_Optimizations_&_Upgrade_Guide_for_Apache_ShardingSphere_5.0.0_The_Ideal_Database_Management_Ecosystem.en.md b/docs/blog/content/material/Jan_28_Blog_X_Kernel_Optimizations_&_Upgrade_Guide_for_Apache_ShardingSphere_5.0.0_The_Ideal_Database_Management_Ecosystem.en.md
index b3ed21e103..79877d6deb 100644
--- a/docs/blog/content/material/Jan_28_Blog_X_Kernel_Optimizations_&_Upgrade_Guide_for_Apache_ShardingSphere_5.0.0_The_Ideal_Database_Management_Ecosystem.en.md
+++ b/docs/blog/content/material/Jan_28_Blog_X_Kernel_Optimizations_&_Upgrade_Guide_for_Apache_ShardingSphere_5.0.0_The_Ideal_Database_Management_Ecosystem.en.md
@@ -7,7 +7,7 @@ chapter = true
 +++
 
 
-#Kernel Optimizations & Upgrade Guide for Apache ShardingSphere 5.0.0 — The Ideal Database Management Ecosystem
+# Kernel Optimizations & Upgrade Guide for Apache ShardingSphere 5.0.0 — The Ideal Database Management Ecosystem
 
 Having undergone almost two years of development and optimization, the Apache ShardingSphere 5.0.0 GA version has been recently released.
 Compared with the 4.1.1 GA version, the new version’s kernel is greatly improved:
@@ -74,7 +74,7 @@ In summary, the enhanced 5.0.0 GA version’s pluggable kernel allows users to f
 
 In this article, we’d like to showcase some practical examples and showcase how to combine these functions in the 5.0.0 GA version.
 
-##Federation Execution Engine
+## Federation Execution Engine
 
 Federation Execution Engine is another spotlight of the 5.0.0 GA version’s kernel. We aim to support distributed query statements that don’t work in the 4.1.1 GA version, such as cross-database instances related queries and subqueries. Thanks to the Federation Execution Engine, developers no longer need to worry about the usage scope of SQLs, and they can concentrate on their business function development, reducing function limitations at the business level.
 
@@ -140,7 +140,7 @@ SELECT COUNT(DISTINCT user_id), SUM(order_id) FROM t_order;
 
 Federation Execution Engine significantly enhances distributed query capabilities of Apache ShardingSphere. In the future, we will continue to optimize Apache ShardingSphere, aiming at reducing memory usage of the Federation Execution Engine, and improve distributed query capabilities.
 
-##Feature API Adjustments
+## Feature API Adjustments
 
 To help users minimize related costs, the 5.0.0 GA version has made many optimizations at the API level. According to some community feedback, the Data Sharding API was too complex and difficult to understand. After a community-level discussion, we decided to provide a brand-new data sharding API in the new GA version.
 
@@ -670,13 +670,13 @@ When we execute Query statements, we find that the `t_user` table is routed to t
 
 Of course, there are more new features in the 5.0.0 GA version. In this upgrade guide, we only compare some features supported in the two GA versions. We hope this article can help you understand the new features and successfully implement the version upgrade. If you are interested, visit our repo, or please read our documentation and test the new version by yourself.
 
-###Conclusion
+### Conclusion
 
 Having undergone two years of development, the new-look Apache ShardingSphere with **its pluggable kernel gives all developers indefinite development possibilities. In the future, we will continue to develop more new features of the pluggable kernel to expand the Apache ShardingSphere ecosystem with amazing functions.** The Federation Execution Engine is just the beginning of distributed queries. We will make more efforts to optimize its memory and performance, to provide you with more reliable and efficient distributed queries.
 
 As always, you’re welcome to join us in developing the Apache ShardingSphere project.
 
-###References
+### References
 
 1. Apache ShardingSphere Release Notes：https://github.com/apache/shardingsphere/releases
 
@@ -693,7 +693,7 @@ As always, you’re welcome to join us in developing the Apache ShardingSphere p
 7. https://medium.com/codex/create-a-distributed-database-solution-based-on-postgresql-opengauss-b30d0e1ced2c
 
 
-###Open Source Project Links:
+### Open Source Project Links:
 
 ShardingSphere Github: https://github.com/apache/shardingsphere
 
@@ -706,7 +706,7 @@ GitHub Issues: https://github.com/apache/shardingsphere/issues
 Contributor Guide:https://shardingsphere.apache.org/community/cn/contribute/
 
 
-###Author
+### Author
 
 **Duan Zhengqiang**
 
diff --git a/docs/blog/content/material/Nov_22_5.0.0_New.en.md b/docs/blog/content/material/Nov_22_5.0.0_New.en.md
index 6d454231ee..bd30a2cf9b 100644
--- a/docs/blog/content/material/Nov_22_5.0.0_New.en.md
+++ b/docs/blog/content/material/Nov_22_5.0.0_New.en.md
@@ -17,7 +17,7 @@ ShardingSphere recreates the distributed pluggable system, connecting actual use
 
 Database Plus sets out to build a standard layer and an ecosystem layer above the fragmented database’s basic services. A unified and standardized database usage specification is provided for upper-level applications, and the challenges faced by businesses due underlying databases fragmentation is minimized as much as possible. To link databases and applications, we use traffic and data rendering and parsing, and provide users with enhanced core features such as distributed database, data security, database gateway and stress testing. With the support of this concept, version 5.0.0 GA brings the following upgrades and optimizations:
 
-##Architecture Layer
+## Architecture Layer
 
 ### Complete the pluggable kernel architecture of Database Plus
 
@@ -61,22 +61,22 @@ In the new version, we optimize and add more runtime status indicators to monito
 
 ![](https://shardingsphere.apache.org/blog/img/Blog_26_img_6.png)
 
-##Function Layer
+## Function Layer
 
 ![](https://shardingsphere.apache.org/blog/img/Blog_26_img_7.png)
 
 In the future, the community will continue to optimize ShardingSphere and integrate new ideas and industry scenarios, while always listening to users’ feedback. Meanwhile, the core team members of the ShardingSphere community are willing to mentor anyone interested in open source and to provide more practice “ISSUES” to students interested in open source. We also hope that new friends or contributors will join the community, to promote ideas exchange and create a truly global developer community.
 
-##Author
+## Author
 
-![Juan Pan | Trista](![](https://shardingsphere.apache.org/blog/img/Blog_26_img_8.jpeg))
+![](https://shardingsphere.apache.org/blog/img/Blog_26_img_8.jpeg)
 
 Sphere Ex Co-Founder & CTO; Apache Member; Apache ShardingSphere PMC, Apache brpc (Incubating) & Apache AGE (Incubating) Mentor; China Mulan Open Source Community Mentor.
 She used to be responsible for the design and development of the intelligent database platform of JD Digital Science and Technology.
 
 She now focuses on the distributed database & middleware ecosystem, and open-source community. Recipient of the “2020 China Open-Source Pioneer” award & the “2021 OSCAR 2021 Top Open Source Pioneer”.
 
-###Links:
+### Links:
 
 ***Bio:*** [https://tristazero.github.io]()
 
@@ -86,7 +86,7 @@ She now focuses on the distributed database & middleware ecosystem, and open-sou
 
 ***Twitter:*** [https://github.com/tristaZero]()
 
-###Open Source Project Links:
+### Open Source Project Links:
 
 ***ShardingSphere Github:*** [https://github.com/apache/shardingsphere]()
 
diff --git a/docs/blog/content/material/Nov_23_1_Integrate_SCTL_into_RAL.en.md b/docs/blog/content/material/Nov_23_1_Integrate_SCTL_into_RAL.en.md
index 7ecae2b6ca..90781f7e66 100644
--- a/docs/blog/content/material/Nov_23_1_Integrate_SCTL_into_RAL.en.md
+++ b/docs/blog/content/material/Nov_23_1_Integrate_SCTL_into_RAL.en.md
@@ -373,7 +373,7 @@ RAL not only contains all the SCTL functions, but also provides other useful adm
 For more details about RAL, please consult the relevant documentation: 
 [https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/distsql/syntax/ral/]()
 
-###Conclusion
+### Conclusion
 
 That's all folks. If you have any questions or suggestions, feel free to comment on our GitHub Issues or Discussions sections. You're welcome to submit your pull request and start contributing to the open source community, too. We've also set up a Slack channel, where you can connect with other members of our community and discuss technology with us.
 
diff --git a/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md b/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md
index ae4671a561..3d40959714 100644
--- a/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md	
+++ b/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md	
@@ -72,7 +72,7 @@ JD Baitiao is a huge business, so its business scenario is truly related to fina
 
 4. Have an extensible architecture
 
-##The Apache ShardingSphere Solution
+## The Apache ShardingSphere Solution
 
 The lightweight Java framework ShardingSphere-JDBC is Apache ShardingSpheres's first product providing services such as a Java Database Connectivity (JDBC) API. ShardingSphere JDBC uses jar archive file installation package and allows the client-side to directly connect to databases. So, it requires no extra deployment dependencies. It is like an enhanced JDBC driver fully compatible with JDBC and ORM frameworks.
 
@@ -90,7 +90,7 @@ ShardingSphere - JDBC provides the following features, making it the best soluti
 
 After being systematically tested for several times, Apache ShardingSphere became JD Baitiao's first choice of data sharding middleware. The cooperation started at the end of 2018. 
 
-##Product Adaptation
+## Product Adaptation
 
 To provide Baitiao with better services and support the business, Apache ShardingSphere has made many improvements to its product features and performance during the implementation process. At the same time, the user case helps optimize the product in return. 
 
@@ -125,7 +125,7 @@ JD Baitiao & ShardingSphere teams joint efforts amde all indicators of the produ
 ![](https://shardingsphere.apache.org/blog/img/Blog_25_img_JD_System_en.png)
 
 
-##Cutover
+## Cutover
 
 Apache ShardingSphere uses its custom HASH strategy to shard data, effectively avoiding the hot data problem. The total of data nodes almost reaches ten thousand. The cutover process lasts for about 4 weeks. 
 
@@ -135,7 +135,7 @@ Apache ShardingSphere uses its custom HASH strategy to shard data, effectively a
 
 DBRep is fundamental to the product design of ShardingSphere-Scaling. The automation feature of Scaling definitely facilitates migration and scale-up. 
 
-##Apache ShardingSphere Brings Many Benefits
+## Apache ShardingSphere Brings Many Benefits
 
 **Simplified Upgrade Path**
 
@@ -149,13 +149,13 @@ Baitiao directly uses the mature product Apache ShardingSphere, so they do not n
 
 Baitiao also uses the sync migration component Scaling that makes system scale-up even more flexible. It's the company's secret for online shopping festival successes. 
 
-##Summary
+## Summary
 
 The growth of JD Baitiao's business greatly stimulates its data architecture upgrades. This time, it chose Apache ShardingSphere to decouple its architecture and make future upgrades less complicated. Thank to this from now on, developers only have to concentrate on their own product optimization because its data architecture is extensible enough. The case is really a good example of ShardingSphere application in the consumer finance scenario. 
 
 Now, there are more and more internet credit payment models. In the future, Apache ShardingSphere in collaboration with JD Technology will explore more business scenarios, and contribute finance-related technological innovations, further improving Internet finance.
 
-###About Apache ShardingSphere
+### About Apache ShardingSphere
 
 ShardingSphere is one of the Apache Software Foundation Top-Level Open Source projects, used by over 170 enterprises worldwide, across various verticals such as finance, e-commerce, cloud services, tourism, logistics, education, and entertainment. Its GitHub community has so far cumulated over 14,000 stars. 
 
