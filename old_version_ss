commit 6aea71d0eacfe484deb9d49f2c5d1b6005887230
Author: AFTAB SAMA <79740895+Aftab700@users.noreply.github.com>
Date:   Wed Mar 9 15:13:07 2022 +0530

     space between Chinese and English words #15902 (#15915)
    
    * Update performance-test.cn.md
    
    space between Chinese and English words
    #15851
    
    * Update _index.cn.md
    
    space between Chinese and English words
     #15907
    
    * Update release-elasticjob-ui.cn.md
    
     space between Chinese and English words
    Fix : #15906
    
    * Update release-elasticjob.cn.md
    
     space between Chinese and English words
    #15902

diff --git a/docs/community/content/contribute/release-elasticjob.cn.md b/docs/community/content/contribute/release-elasticjob.cn.md
index 5b07b99c6c..713406e583 100644
--- a/docs/community/content/contribute/release-elasticjob.cn.md
+++ b/docs/community/content/contribute/release-elasticjob.cn.md
@@ -64,12 +64,12 @@ chapter = true
 https://github.com/apache/shardingsphere-elasticjob/blob/master/RELEASE-NOTES.md
 ```
 
-更新`examples`模块的pom，将版本由${CURRENT.VERSION}替换为${RELEASE.VERSION}。
+更新 `examples` 模块的pom，将版本由 ${CURRENT.VERSION} 替换为 ${RELEASE.VERSION}。
 
 **2. 创建发布分支**
 
-假设从github下载的ElasticJob源代码在`~/elasticjob/`目录；假设即将发布的版本为`${RELEASE.VERSION}`。
-创建`${RELEASE.VERSION}-release`分支，接下来的操作都在该分支进行。
+假设从 github 下载的 ElasticJob 源代码在 `~/elasticjob/` 目录；假设即将发布的版本为 `${RELEASE.VERSION}`。
+创建 `${RELEASE.VERSION}-release` 分支，接下来的操作都在该分支进行。
 
 ```shell
 ## ${name}为源码所在分支，如：master，dev-4.x
@@ -86,7 +86,7 @@ git push origin ${RELEASE.VERSION}-release
 mvn release:prepare -Prelease -Darguments="-DskipTests" -DautoVersionSubmodules=true -DdryRun=true -Dusername=${Github用户名}
 ```
 
--Prelease: 选择release的profile，这个profile会打包所有源码和jar文件。
+-Prelease: 选择 release 的 profile，这个 profile 会打包所有源码和 jar 文件。
 
 -DautoVersionSubmodules=true：作用是发布过程中版本号只需要输入一次，不必为每个子模块都输入一次。
 
@@ -104,11 +104,11 @@ mvn release:clean
 mvn release:prepare -Prelease -Darguments="-DskipTests" -DautoVersionSubmodules=true -DpushChanges=false -Dusername=${Github用户名}
 ```
 
-和上一步演练的命令基本相同，去掉了-DdryRun=true参数。
+和上一步演练的命令基本相同，去掉了- DdryRun=true 参数。
 
--DpushChanges=false：不要将修改后的版本号和tag自动提交至Github。
+-DpushChanges=false：不要将修改后的版本号和 tag 自动提交至 Github。
 
-将本地文件检查无误后，提交至github。
+将本地文件检查无误后，提交至 github。
 
 ```shell
 git push origin ${RELEASE.VERSION}-release
@@ -121,14 +121,14 @@ git push origin --tags
 mvn release:perform -Prelease -Darguments="-DskipTests" -DautoVersionSubmodules=true -Dusername=${Github用户名}
 ```
 
-执行完该命令后，待发布版本会自动上传到Apache的临时筹备仓库(staging repository)。
-访问https://repository.apache.org/#stagingRepositories, 使用Apache的LDAP账户登录后，就会看到上传的版本，`Repository`列的内容即为${STAGING.REPOSITORY}。
-点击`Close`来告诉Nexus这个构建已经完成，只有这样该版本才是可用的。
-如果电子签名等出现问题，`Close`会失败，可以通过`Activity`查看失败信息。
+执行完该命令后，待发布版本会自动上传到 Apache 的临时筹备仓库 (staging repository)。
+访问 https://repository.apache.org/#stagingRepositories, 使用 Apache 的 LDAP 账户登录后，就会看到上传的版本，`Repository` 列的内容即为 ${STAGING.REPOSITORY}。
+点击 `Close` 来告诉 Nexus 这个构建已经完成，只有这样该版本才是可用的。
+如果电子签名等出现问题，`Close` 会失败，可以通过 `Activity` 查看失败信息。
 
-### 发布Apache SVN仓库
+### 发布 Apache SVN 仓库
 
-**1. 检出shardingsphere发布目录**
+**1. 检出 shardingsphere 发布目录**
 
 如无本地工作目录，则先创建本地工作目录。
 
@@ -137,16 +137,16 @@ mkdir -p ~/ss_svn/dev/
 cd ~/ss_svn/dev/
 ```
 
-创建完毕后，从Apache SVN检出shardingsphere发布目录。
+创建完毕后，从 Apache SVN 检出 shardingsphere 发布目录。
 
 ```shell
 svn --username=${APACHE LDAP 用户名} co https://dist.apache.org/repos/dist/dev/shardingsphere
 cd ~/ss_svn/dev/shardingsphere
 ```
 
-**2. 添加gpg公钥**
+**2. 添加 gpg 公钥**
 
-仅第一次部署的账号需要添加，只要`KEYS`中包含已经部署过的账户的公钥即可。
+仅第一次部署的账号需要添加，只要 `KEYS` 中包含已经部署过的账户的公钥即可。
 
 ```shell
 gpg -a --export ${GPG用户名} >> KEYS
@@ -170,7 +170,7 @@ cp -f ~/elasticjob/elasticjob-distribution/elasticjob-cloud-executor-distributio
 cp -f ~/elasticjob/elasticjob-distribution/elasticjob-cloud-scheduler-distribution/target/*.tar.gz* ~/ss_svn/dev/shardingsphere/elasticjob-${RELEASE.VERSION}
 ```
 
-**4. 提交Apache SVN**
+**4. 提交 Apache SVN **
 
 ```shell
 svn add *
@@ -179,13 +179,13 @@ svn --username=${APACHE LDAP 用户名} commit -m "release elasticjob-${RELEASE.
 
 ### 检查发布结果
 
-**检查sha512哈希**
+**检查 sha512 哈希**
 
 ```shell
 shasum -c apache-shardingsphere-elasticjob-${RELEASE.VERSION}-*.sha512
 ```
 
-**检查gpg签名**
+**检查 gpg 签名**
 
 首先导入发布人公钥。从svn仓库导入KEYS到本地环境。（发布版本的人不需要再导入，帮助做验证的人需要导入，用户名填发版人的即可）
 
@@ -210,7 +210,7 @@ Your decision? 5
   > save
 ```
 
-然后进行gpg签名检查。
+然后进行 gpg 签名检查。
 
 ```shell
 gpg --verify apache-shardingsphere-elasticjob-${RELEASE.VERSION}-src.zip.asc apache-shardingsphere-elasticjob-${RELEASE.VERSION}-src.zip
@@ -221,7 +221,7 @@ gpg --verify apache-shardingsphere-elasticjob-${RELEASE.VERSION}-cloud-scheduler
 
 **检查发布文件内容**
 
-**对比源码包与Github上tag的内容差异**
+**对比源码包与 Github 上 tag 的内容差异**
 
 ```
 curl -Lo tag-${RELEASE.VERSION}.zip https://github.com/apache/shardingsphere-elasticjob/archive/${RELEASE.VERSION}.zip
@@ -233,8 +233,8 @@ diff -r apache-shardingsphere-elasticjob-${RELEASE.VERSION}-src-release sharding
 **检查源码包的文件内容**
 
 - 检查源码包是否包含由于包含不必要文件，致使tarball过于庞大
-- 存在`LICENSE`和`NOTICE`文件
-- `NOTICE`文件中的年份正确
+- 存在 `LICENSE` 和 `NOTICE` 文件
+- `NOTICE` 文件中的年份正确
 - 只存在文本文件，不存在二进制文件
 - 所有文件的开头都有ASF许可证
 - 能够正确编译，单元测试可以通过 (./mvnw -T 1C install)
@@ -248,27 +248,27 @@ diff -r apache-shardingsphere-elasticjob-${RELEASE.VERSION}-src-release sharding
 `apache-shardingsphere-elasticjob-${RELEASE.VERSION}-cloud-scheduler-bin.tar.gz`
 进行如下检查:
 
-- 存在`LICENSE`和`NOTICE`文件
-- `NOTICE`文件中的年份正确
+- 存在 `LICENSE` 和 `NOTICE` 文件
+- `NOTICE` 文件中的年份正确
 - 所有文本文件开头都有ASF许可证
 - 检查第三方依赖许可证：
   - 第三方依赖的许可证兼容
-  - 所有第三方依赖的许可证都在`LICENSE`文件中声名
-  - 依赖许可证的完整版全部在`license`目录
-  - 如果依赖的是Apache许可证并且存在`NOTICE`文件，那么这些`NOTICE`文件也需要加入到版本的`NOTICE`文件中
+  - 所有第三方依赖的许可证都在 `LICENSE` 文件中声名
+  - 依赖许可证的完整版全部在 `license` 目录
+  - 如果依赖的是Apache许可证并且存在 `NOTICE` 文件，那么这些 `NOTICE` 文件也需要加入到版本的 `NOTICE` 文件中
 
 ### 发起投票
 
 **投票阶段**
 
-1. ShardingSphere社区投票，发起投票邮件到`dev@shardingsphere.apache.org`。PMC需要先按照文档检查版本的正确性，然后再进行投票。
-经过至少72小时并统计到3个`+1 PMC member`票后，即可进入下一阶段的投票。
+1. ShardingSphere 社区投票，发起投票邮件到 `dev@shardingsphere.apache.org`。PMC 需要先按照文档检查版本的正确性，然后再进行投票。
+经过至少72小时并统计到3个`+1 PMC member` 票后，即可进入下一阶段的投票。
 
-2. 宣布投票结果,发起投票结果邮件到`dev@shardingsphere.apache.org`。
+2. 宣布投票结果,发起投票结果邮件到 `dev@shardingsphere.apache.org`。
 
 **投票模板**
 
-1. ShardingSphere社区投票模板
+1. ShardingSphere 社区投票模板
 
 标题：
 
@@ -359,7 +359,7 @@ I will process to publish the release and send ANNOUNCE.
 
 ### 完成发布
 
-**1. 将源码、二进制包以及KEYS从svn的dev目录移动到release目录**
+**1. 将源码、二进制包以及 KEYS 从 svn 的 dev 目录移动到 release 目录**
 
 ```shell
 svn mv https://dist.apache.org/repos/dist/dev/shardingsphere/elasticjob-${RELEASE.VERSION} https://dist.apache.org/repos/dist/release/shardingsphere/ -m "transfer packages for elasticjob-${RELEASE.VERSION}"
@@ -367,9 +367,9 @@ svn delete https://dist.apache.org/repos/dist/release/shardingsphere/KEYS -m "de
 svn cp https://dist.apache.org/repos/dist/dev/shardingsphere/KEYS https://dist.apache.org/repos/dist/release/shardingsphere/ -m "transfer KEYS for elasticjob-${RELEASE.VERSION}"
 ```
 
-**2. 在Apache Staging仓库找到ShardingSphere并点击`Release`**
+**2. 在 Apache Staging 仓库找到 ShardingSphere 并点击 `Release`**
 
-**3. 合并Github的release分支到`master`, 合并完成后删除release分支**
+**3. 合并 Github 的 release 分支到 `master`, 合并完成后删除 release 分支**
 
 ```shell
 git checkout master
@@ -415,11 +415,11 @@ docker push apache/shardingsphere-elasticjob-cloud-scheduler:${RELEASE_VERSION}
 
 登录 [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-elasticjob-cloud-scheduler/) 查看是否有发布的镜像
 
-**5. GitHub版本发布**
+**5. GitHub 版本发布**
 
 在 [GitHub Releases](https://github.com/apache/shardingsphere-elasticjob/releases) 页面的 `${RELEASE_VERSION}` 版本上点击 `Edit`
 
-编辑版本号及版本说明，并点击`Publish release`
+编辑版本号及版本说明，并点击 `Publish release`
 
 **6. 更新下载页面**
 
@@ -435,7 +435,7 @@ GPG签名文件和哈希校验文件的下载连接应该使用这个前缀：`h
 
 **7. 邮件通知版本发布完成**
 
-发送邮件到`dev@shardingsphere.apache.org`和`announce@apache.org`通知完成版本发布
+发送邮件到 `dev@shardingsphere.apache.org` 和 `announce@apache.org` 通知完成版本发布
 
 通知邮件模板：
 
