commit 11711e097437575e5b1ba6f6972bea6899ae0faf
Author: Liang Zhang <zhangliang@apache.org>
Date:   Mon Jul 18 14:24:42 2022 +0800

    Remove api-change-history (#19315)

diff --git a/docs/document/content/reference/api-change-history/_index.cn.md b/docs/document/content/reference/api-change-history/_index.cn.md
deleted file mode 100644
index 81a98743545..00000000000
--- a/docs/document/content/reference/api-change-history/_index.cn.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-pre = "<b>8.8. </b>"
-title = "API 变更历史"
-weight = 8
-chapter = true
-+++
-
-本章包含 Apache ShardingSphere 项目 API 的变更历史记录。
diff --git a/docs/document/content/reference/api-change-history/_index.en.md b/docs/document/content/reference/api-change-history/_index.en.md
deleted file mode 100644
index 67921c87ca1..00000000000
--- a/docs/document/content/reference/api-change-history/_index.en.md
+++ /dev/null
@@ -1,8 +0,0 @@
-+++
-pre = "<b>8.8. </b>"
-title = "API Change Histories"
-weight = 8
-chapter = true
-+++
-
-This chapter contains a section of API change histories of different projects of Apache ShardingSphere: ShardingSphere-JDBC, ShardingSphere-Proxy and ShardingSphere-Sidecar.
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/_index.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/_index.cn.md
deleted file mode 100644
index 40befa7331d..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/_index.cn.md
+++ /dev/null
@@ -1,7 +0,0 @@
-+++
-title = "ShardingSphere-JDBC"
-weight = 1
-chapter = true
-+++
-
-本章包含 Apache ShardingSphere-JDBC API 的变更历史。
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/_index.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/_index.en.md
deleted file mode 100644
index a0d40791c4c..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/_index.en.md
+++ /dev/null
@@ -1,7 +0,0 @@
-+++
-title = "ShardingSphere-JDBC"
-weight = 1
-chapter = true
-+++
-
-This chapter contains a section of API change histories of Apache ShardingSphere-JDBC.
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.cn.md
deleted file mode 100644
index 4e6cbe15329..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.cn.md
+++ /dev/null
@@ -1,782 +0,0 @@
-+++
-title = "Java API"
-weight = 2
-+++
-
-## 5.0.0-beta
-
-### 数据分片
-
-#### 配置入口
-
-类名称：org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration
-
-可配置属性：
-
-| *名称*                               | *数据类型*                                          | *说明*                | *默认值* |
-| ----------------------------------- | --------------------------------------------------- | -------------------- | ------- |
-| tables (+)                          | Collection\<ShardingTableRuleConfiguration\>        | 分片表规则列表         | -       |
-| autoTables (+)                      | Collection\<ShardingAutoTableRuleConfiguration\>    | 自动化分片表规则列表    | -       |
-| bindingTableGroups (*)              | Collection\<String\>                                | 绑定表规则列表         | 无       |
-| broadcastTables (*)                 | Collection\<String\>                                | 广播表规则列表         | 无       |
-| defaultDatabaseShardingStrategy (?) | ShardingStrategyConfiguration                       | 默认分库策略           | 不分片   |
-| defaultTableShardingStrategy (?)    | ShardingStrategyConfiguration                       | 默认分表策略           | 不分片   |
-| defaultKeyGenerateStrategy (?)      | KeyGeneratorConfiguration                           | 默认自增列生成器配置    | 雪花算法 |
-| shardingAlgorithms (+)              | Map\<String, ShardingSphereAlgorithmConfiguration\> | 分片算法名称和配置      | 无      |
-| keyGenerators (?)                   | Map\<String, ShardingSphereAlgorithmConfiguration\> | 自增列生成算法名称和配置 | 无      |
-
-#### 分片表配置
-
-类名称：org.apache.shardingsphere.sharding.api.config.ShardingTableRuleConfiguration
-
-可配置属性：
-
-| *名称*                        | *数据类型*                     | *说明*                                                            | *默认值*                                                                            |
-| ---------------------------- | ----------------------------- | ----------------------------------------------------------------- | ---------------------------------------------------------------------------------- |
-| logicTable                   | String                        | 分片逻辑表名称                                                      | -                                                                                  |
-| actualDataNodes (?)          | String                        | 由数据源名 + 表名组成，以小数点分隔。<br /> 多个表以逗号分隔，支持行表达式    | 使用已知数据源与逻辑表名称生成数据节点，用于广播表或只分库不分表且所有库的表结构完全一致的情况        |
-| databaseShardingStrategy (?) | ShardingStrategyConfiguration | 分库策略                                                           | 使用默认分库策略                                                                     |
-| tableShardingStrategy (?)    | ShardingStrategyConfiguration | 分表策略                                                           | 使用默认分表策略                                                                     |
-| keyGenerateStrategy (?)      | KeyGeneratorConfiguration     | 自增列生成器                                                        | 使用默认自增主键生成器                                                               |
-
-#### 自动分片表配置
-
-类名称：org.apache.shardingsphere.sharding.api.config.ShardingAutoTableRuleConfiguration
-
-可配置属性：
-
-| *名称*                   | *数据类型*                     | *说明*                       | *默认值*            |
-| ----------------------- | ----------------------------- | ---------------------------- | ------------------ |
-| logicTable              | String                        | 分片逻辑表名称                 | -                  |
-| actualDataSources (?)   | String                        | 数据源名称，多个数据源以逗号分隔   | 使用全部配置的数据源  |
-| shardingStrategy (?)    | ShardingStrategyConfiguration | 分片策略                      | 使用默认分片策略      |
-| keyGenerateStrategy (?) | KeyGeneratorConfiguration     | 自增列生成器                   | 使用默认自增主键生成器 |
-
-#### 分片策略配置
-
-##### 标准分片策略配置
-
-类名称：org.apache.shardingsphere.sharding.api.config.strategy.sharding.StandardShardingStrategyConfiguration
-
-可配置属性：
-
-| *名称*                 | *数据类型*  | *说明*      |
-| --------------------- | ---------- | ---------- |
-| shardingColumn        | String     | 分片列名称   |
-| shardingAlgorithmName | String     | 分片算法名称 |
-
-##### 复合分片策略配置
-
-类名称：org.apache.shardingsphere.sharding.api.config.strategy.sharding.ComplexShardingStrategyConfiguration
-
-可配置属性：
-
-| *名称*                 | *数据类型*  | *说明*                    |
-| --------------------- | ---------- | ------------------------ |
-| shardingColumns       | String     | 分片列名称，多个列以逗号分隔 |
-| shardingAlgorithmName | String     | 分片算法名称               |
-
-##### Hint 分片策略配置
-
-类名称：org.apache.shardingsphere.sharding.api.config.strategy.sharding.HintShardingStrategyConfiguration
-
-可配置属性：
-
-| *名称*                 | *数据类型*  | *说明*      |
-| --------------------- | ---------- | ----------- |
-| shardingAlgorithmName | String     | 分片算法名称  |
-
-##### 不分片策略配置
-
-类名称：org.apache.shardingsphere.sharding.api.config.strategy.sharding.NoneShardingStrategyConfiguration
-
-可配置属性：无
-
-算法类型的详情，请参见 [内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)。
-
-##### 分布式序列策略配置
-
-类名称：org.apache.shardingsphere.sharding.api.config.strategy.keygen.KeyGenerateStrategyConfiguration
-
-可配置属性：
-
-| *名称*           | *数据类型* | *说明*           |
-| ---------------- | -------- | --------------- |
-| column           | String   | 分布式序列列名称   |
-| keyGeneratorName | String   | 分布式序列算法名称 |
-
-算法类型的详情，请参见 [内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen)。
-
-### 读写分离
-
-#### 配置入口
-
-类名称：ReadwriteSplittingRuleConfiguration
-
-可配置属性：
-
-| *名称*             | *数据类型*                                                   | *说明*            |
-| ----------------- | ----------------------------------------------------------- | ----------------- |
-| dataSources (+)   | Collection\<ReadwriteSplittingDataSourceRuleConfiguration\> | 读写数据源配置      |
-| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>         | 从库负载均衡算法配置 |
-
-#### 读写分离数据源配置
-
-类名称：ReadwriteSplittingDataSourceRuleConfiguration
-
-可配置属性：
-
-| *名称*                     | *数据类型*             | *说明*             | *默认值*       |
-| -------------------------- | -------------------- | ----------------- | ------------ |
-| name                       | String               | 读写分离数据源名称   | -             |
-| writeDataSourceName        | String               | 写库数据源名称      | -             |
-| readDataSourceNames (+)    | Collection\<String\> | 读库数据源名称列表   | -             |
-| loadBalancerName (?)       | String               | 读库负载均衡算法名称 | 轮询负载均衡算法 |
-
-算法类型的详情，请参见 [内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
-
-### 数据加密
-
-#### 配置入口
-
-类名称：org.apache.shardingsphere.encrypt.api.config.EncryptRuleConfiguration
-
-可配置属性：
-
-| *名称*                     | *数据类型*                                           | *说明*                                                 | *默认值* |
-| ------------------------- | --------------------------------------------------- | ----------------------------------------------------- | ------- |
-| tables (+)                | Collection\<EncryptTableRuleConfiguration\>         | 加密表规则配置                                           |        |
-| encryptors (+)            | Map\<String, ShardingSphereAlgorithmConfiguration\> | 加解密算法名称和配置                                      |        |
-| queryWithCipherColumn (?) | boolean                                             | 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 | true   |
-
-#### 加密表规则配置
-
-类名称：org.apache.shardingsphere.encrypt.api.config.rule.EncryptTableRuleConfiguration
-
-可配置属性：
-
-| *名称*      | *数据类型*                                     | *说明*           |
-| ----------- | -------------------------------------------- | --------------- |
-| name        | String                                       | 表名称           |
-| columns (+) | Collection\<EncryptColumnRuleConfiguration\> | 加密列规则配置列表 |
-
-#### 加密列规则配置
-
-类名称：org.apache.shardingsphere.encrypt.api.config.rule.EncryptColumnRuleConfiguration
-
-可配置属性：
-
-| *名称*                  | *数据类型* | *说明*        |
-| ----------------------- | -------- | ------------- |
-| logicColumn             | String   | 逻辑列名称     |
-| cipherColumn            | String   | 密文列名称     |
-| assistedQueryColumn (?) | String   | 查询辅助列名称 |
-| plainColumn (?)         | String   | 原文列名称     |
-| encryptorName           | String   | 加密算法名称   |
-
-#### 加解密算法配置
-
-类名称：org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration
-
-可配置属性：
-
-| *名称*      |*数据类型*   | *说明*           |
-| ---------- | ---------- | ---------------- |
-| name       | String     | 加解密算法名称     |
-| type       | String     | 加解密算法类型     |
-| properties | Properties | 加解密算法属性配置 |
-
-算法类型的详情，请参见 [内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
-
-### 影子库
-
-#### 配置入口
-
-类名称：org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
-
-可配置属性：
-
-| *名称*                 | *数据类型*             | *说明*                                             |
-| --------------------- | --------------------- | ------------------------------------------------- |
-| column                | String                | SQL 中的影子字段名，该值为 true 的 SQL 会路由到影子库执行 |
-| sourceDataSourceNames | List\<String\>        | 生产数据库名称                                       |
-| shadowDataSourceNames | List\<String\>        | 影子数据库名称，与上面一一对应                          |
-
-### 分布式治理
-
-#### 配置项说明
-
-##### 治理
-
-*配置入口*
-
-类名称：org.apache.shardingsphere.governance.repository.api.config.GovernanceConfiguration
-
-可配置属性：
-
-| *名称*                       | *数据类型*                    | *说明*                                                 |
-| --------------------------- | --------------------------- | ------------------------------------------------------ |
-| name                        | String                      | 注册中心实例名称                                          |
-| registryCenterConfiguration | RegistryCenterConfiguration | 注册中心实例的配置                                         |
-| overwrite                   | boolean                     | 本地配置是否覆盖配置中心配置，如果可覆盖，每次启动都以本地配置为准  |
-
-注册中心的类型可以为 Zookeeper 或 etcd。
-
-*治理实例配置*
-
-类名称：org.apache.shardingsphere.governance.repository.api.config.RegistryCenterConfiguration
-
-可配置属性：
-
-| *名称*         | *数据类型* | *说明*                                                                    |
-| ------------- | ---------- | ----------------------------------------------------------------------- |
-| type          | String     | 治理实例类型，如：Zookeeper, etcd                                          |
-| serverLists   | String     | 治理服务列表，包括 IP 地址和端口号，多个地址用逗号分隔，如: host1:2181,host2:2181 |
-| props         | Properties | 配置本实例需要的其他参数，例如 ZooKeeper 的连接参数等                           |
-| overwrite     | boolean    | 本地配置是否覆盖配置中心配置；如果覆盖，则每次启动都参考本地配置                     | 
-
-ZooKeeper 属性配置
-
-| *名称*                            | *数据类型* | *说明*                | *默认值* |
-| -------------------------------- | --------- | -------------------- | ------- |
-| digest (?)                       | String    | 连接注册中心的权限令牌   | 无需验证  |
-| operationTimeoutMilliseconds (?) | int       | 操作超时的毫秒数        | 500 毫秒 |
-| maxRetries (?)                   | int       | 连接失败后的最大重试次数  | 3 次    |
-| retryIntervalMilliseconds (?)    | int       | 重试间隔毫秒数          | 500 毫秒 |
-| timeToLiveSeconds (?)            | int       | 临时节点存活秒数        | 60 秒    |
-
-Etcd 属性配置
-
-| *名称*                 | *数据类型* | *说明*     | *默认值* |
-| --------------------- | --------- | ---------- | ------ |
-| timeToLiveSeconds (?) | long      | 数据存活秒数 | 30 秒    |
-
-## ShardingSphere-4.x
-
-### 数据分片
-
-#### ShardingDataSourceFactory
-
-| *名称*                 | *数据类型*                    | *说明*              |
-| :-------------------- | :--------------------------- | :----------------- |
-| dataSourceMap         | Map<String, DataSource>      | 数据源配置           |
-| shardingRuleConfig    | ShardingRuleConfiguration    | 数据分片规则配置      |
-| props (?)             | Properties                   | 属性配置             |
-
-#### ShardingRuleConfiguration
-
-| *名称*                                     | *数据类型*                                | *说明*                               |
-| :---------------------------------------- | :--------------------------------------- | :--------------------------------- |
-| tableRuleConfigs                          | Collection<TableRuleConfiguration>       | 分片规则列表                         |
-| bindingTableGroups (?)                    | Collection<String>                       | 绑定表规则列表                        |
-| broadcastTables (?)	                    | Collection<String>                       | 广播表规则列表                        |
-| defaultDataSourceName (?)                 | String	                               | 未配置分片规则的表将根据默认数据源定位    |
-| defaultDatabaseShardingStrategyConfig (?)	| ShardingStrategyConfiguration	           | 默认数据库分片策略                     |
-| defaultTableShardingStrategyConfig (?)    | ShardingStrategyConfiguration            | 默认分表策略                          |
-| defaultKeyGeneratorConfig (?)             | KeyGeneratorConfiguration	               | 默认密钥生成器配置，使用用户定义的或内置的，例如 雪花/UUID。默认密钥生成器是 `org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator`|
-| masterSlaveRuleConfigs (?)                | Collection<MasterSlaveRuleConfiguration> | 读写分离规则，默认值表示不使用读写分离     |
-
-#### TableRuleConfiguration
-
-| *名称*                              | *数据类型*                         | *说明*                                       |
-| :--------------------------------- | :-------------------------------- | :------------------------------------------ |
-| logicTable	                     | String	                         | 逻辑表名称                                    |
-| actualDataNodes (?)	             | String	                         | 描述数据源名称和实际表，分隔符为点，多个数据节点用逗号分割，支持内联表达式。不存在意味着仅分片数据库。示例：ds${0..7}.tbl${0..7} |
-| databaseShardingStrategyConfig (?) | ShardingStrategyConfiguration     | 数据库分片策略，如果不存在则使用默认的数据库分片策略  |
-| tableShardingStrategyConfig (?)    | ShardingStrategyConfiguration     | 表分片策略，如果不存在则使用默认的数据库分片策略     |
-| keyGeneratorConfig (?)             | KeyGeneratorConfiguration         | 主键生成器配置，如果不存在则使用默认主键生成器       |
-| encryptorConfiguration (?)         | EncryptorConfiguration            | 加密生成器配置                                 |
-
-#### StandardShardingStrategyConfiguration
-
-ShardingStrategyConfiguration 的实现类
-
-| *名称*                      | *数据类型*                   | *说明*                        |
-| :------------------------- | :-------------------------- | :--------------------------- |
-| shardingColumn             | String	                   | 分片键                        |
-| preciseShardingAlgorithm   | PreciseShardingAlgorithm    | `=` 和 `IN` 中使用的精确分片算法 |
-| rangeShardingAlgorithm (?) | RangeShardingAlgorithm      | `BETWEEN` 中使用的范围分片算法   |
-
-#### ComplexShardingStrategyConfiguration
-
-`ShardingStrategyConfiguration` 的实现类，用于具有多个分片键的复杂分片情况。
-
-| *名称*                 | *数据类型*                      | *说明*             |
-| :-------------------- | :----------------------------- | :---------------- |
-| shardingColumns       | String	                     | 分片键，以逗号分隔    |
-| shardingAlgorithm     | ComplexKeysShardingAlgorithm	 | 复杂分片算法         |
-
-#### InlineShardingStrategyConfiguration
-
-`ShardingStrategyConfiguration` 的实现类，用于行表达式的分片策略。
-
-| *名称*                 | *数据类型*     | *说明*                                                        |
-| :-------------------- | :------------ | :----------------------------------------------------------- |
-| shardingColumns       | String        | 分片列名，以逗号分隔                                             |
-| algorithmExpression   | String        | 行表达式的分片策略，应符合 groovy 语法；有关更多详细信息，请参阅行表达式 |
-
-#### HintShardingStrategyConfiguration
-
-`ShardingStrategyConfiguration` 的实现类，用于配置强制分片策略。
-
-| *名称*                    | *数据类型*                       | *说明*                   |
-| :----------------------- | :------------------------------ | :---------------------- |
-| shardingAlgorithm	       | HintShardingAlgorithm	         | 强制分片算法              |
-
-##### NoneShardingStrategyConfiguration
-
-`ShardingStrategyConfiguration` 的实现类，用于配置非分片策略。
-
-### 自增主键生成器
-
-| *名称*                   | *数据类型*                      | *说明*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| column                   | String                          | 主键                      |
-| type	                   | String	                         | 主键生成器的类型，使用用户定义的或内置的，例如 雪花，UUID |
-| props	                   | Properties	                     | 主键生成器的属性配置 |
-
-#### 属性配置
-
-属性配置项，可以是以下属性。
-
-SNOWFLAKE
-
-| *名称*                                        | *数据类型* | *说明*                                                       |
-| :--------------------------------------------- | :---------- | :------------------------------------------------------- |
-| max.tolerate.time.difference.milliseconds (?) | long   | 最大容忍时钟回退时间，单位：毫秒。默认为 10 毫秒               |
-| max.vibration.offset (?)                      | int    | 最大抖动上限值，范围 [0, 4096)，默认为 1。<br/> 注：若使用此算法生成值作分片值，建议配置此属性。<br/> 此算法在不同毫秒内所生成的 key 取模 2^n (2^n 一般为分库或分表数) 之后结果总为 0 或 1。<br/> 为防止上述分片问题，建议将此属性值配置为 (2^n)-1 |
-
-### 读写分离
-
-#### MasterSlaveDataSourceFactory
-
-| *名称*                | *数据类型*                   | *说明*                     |
-| :-------------------- | :--------------------------- | :--------------------- |
-| dataSourceMap         | Map<String, DataSource>      | 数据源及其名称的映射       |
-| masterSlaveRuleConfig | MasterSlaveRuleConfiguration | 读写分离规则配置          |
-| props (?)             | Properties                   | 属性配置                 |
-
-#### MasterSlaveRuleConfiguration
-
-| *名称*                   | *数据类型*                      | *说明*                     |
-| :----------------------- | :------------------------------ | :---------------------- |
-| name                     | String                          | 读写分离数据源名称        |
-| masterDataSourceName     | String                          | 主数据库源名称            |
-| slaveDataSourceNames     | Collection<String>              | 从数据库源名称列表          |
-| loadBalanceAlgorithm (?) | MasterSlaveLoadBalanceAlgorithm | 从库负载均衡算法           |
-
-#### 属性配置
-
-属性配置项，可以是以下属性。
-
-| *名称*                             | *数据类型*    | *说明*                                             |
-| :--------------------------------- | :---------- | :------------------------------------------------ |
-| sql.show (?)                       | boolean     | 是否打印 SQL 日志，默认值：false                      |
-| executor.size (?)                  | int         | 用于 SQL 实现的工作线程号；如果为 0，则没有限制。默认值：0 |
-| max.connections.size.per.query (?) | int         | 每个物理数据库每次查询分配的最大连接数，默认值：1          |
-| check.table.metadata.enabled (?)   | boolean     | 初始化时是否检查元数据的一致性，默认值：false            |
-
-### 数据脱敏
-
-#### EncryptDataSourceFactory
-
-| *名称*                | *数据类型*                   | *说明*                 |
-| :-------------------- | :--------------------------- | :------------------ |
-| dataSource	        | DataSource                   | 数据源               |
-| encryptRuleConfig     | EncryptRuleConfiguration     | 加密规则配置          |
-| props (?)             | Properties                   | 属性配置             |
-
-#### EncryptRuleConfiguration
-
-| *名称*                   | *数据类型*                           | *说明*                  |
-| :---------------------- | :---------------------------------- | :--------------------- |
-| encryptors	| Map<String, EncryptorRuleConfiguration>	    | 加密器名称和加密器        |
-| tables	    | Map<String, EncryptTableRuleConfiguration>	| 加密表名和加密表          |
-
-#### 属性配置
-
-属性配置项，可以是以下属性。
-
-| *名称*                             | *数据类型* | *说明*                                    |
-| :--------------------------------- | :---------- | :------------------------------------ |
-| sql.show (?)                       | boolean     | 是否打印 SQL 日志，默认值：false          |
-| query.with.cipher.column (?)	     | boolean     | 有普通列时，是否使用加密列查询，默认值：true |
-
-### 编排
-
-#### OrchestrationShardingDataSourceFactory
-
-| *名称*                 | *数据类型*                    | *说明*                              |
-| :-------------------- | :--------------------------- | :--------------------------------- |
-| dataSourceMap	        | Map<String, DataSource>	   | 与 `ShardingDataSourceFactory` 相同 |
-| shardingRuleConfig	| ShardingRuleConfiguration	   | 与 `ShardingDataSourceFactory` 相同 |
-| props (?)	            | Properties	               | 与 `ShardingDataSourceFactory` 相同 |
-| orchestrationConfig	| OrchestrationConfiguration   | 编排规则配置                         |
-
-#### OrchestrationMasterSlaveDataSourceFactory
-
-| *名称*                 | *数据类型*                    | *说明*                               |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap	        | Map<String, DataSource>	   | 与 `MasterSlaveDataSourceFactory` 相同 |
-| masterSlaveRuleConfig	| MasterSlaveRuleConfiguration | 与 `MasterSlaveDataSourceFactory` 相同 |
-| configMap (?)	        | Map<String, Object>	       | 与 `MasterSlaveDataSourceFactory` 相同 |
-| props (?)	            | Properties	               | 与 `MasterSlaveDataSourceFactory` 相同  |
-| orchestrationConfig	| OrchestrationConfiguration   | 编排规则配置                             |
-
-#### OrchestrationEncryptDataSourceFactory
-
-| *名称*                | *数据类型*                   | *说明*                               |
-| :-------------------- | :--------------------------- | :--------------------------------- |
-| dataSource	        | DataSource	               | 与 `EncryptDataSourceFactory` 相同  |
-| encryptRuleConfig	    | EncryptRuleConfiguration	   | 与 `EncryptDataSourceFactory` 相同  |
-| props (?)	            | Properties	               | 与 `EncryptDataSourceFactory` 相同  |
-| orchestrationConfig	| OrchestrationConfiguration   | 编排规则配置                         |
-
-#### OrchestrationConfiguration
-
-| *名称*                 | *数据类型*                    | *说明*                              |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| instanceConfigurationMap	| Map<String, CenterConfiguration>	| config-center&registry-center 的配置，key 是 center 的名称，value 是 config-center/registry-center |
-
-#### CenterConfiguration
-
-| *名称*                 | *数据类型*                    | *说明*                               |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| type              	| String	| 注册中心类型 (zookeeper/etcd/apollo/nacos)                                   |
-| properties	        | String	| 注册中心的配置属性，例如zookeeper的配置属性                                             |
-| orchestrationType 	| String	| 编排中心的类型：config-center 或 registry-center，如果两者都使用 `setOrchestrationType("registry_center,config_center");` |
-| serverLists	        | String	| 注册中心服务列表，包括 IP 地址和端口号，多个地址用逗号分隔，如: host1:2181,host2:2181 |
-| namespace (?)         | String	| 命名空间                                                                    |
-
-#### 属性配置
-
-属性配置项，可以是以下属性。
-
-| *名称*         | *数据类型*   | *说明*                                                 |
-| :------------ | :---------- | :---------------------------------------------------- |
-| overwrite     | boolean     |	本地配置是否覆盖配置中心配置； 如果覆盖，则每次启动都参考本地配置 |
-
-如果注册中心类型是 `zookeeper`，则可以使用以下选项设置属性：
-
-| *名称*                             | *数据类型*   | *说明*                                       |
-| :-------------------------------- | :---------- | :------------------------------------------ |
-| digest (?)	                    | String | 连接注册中心的权限令牌；默认表示不需要权限               |
-| operationTimeoutMilliseconds (?)  | int	 | 操作超时毫秒数，默认为 500 毫秒                       |
-| maxRetries (?)                	| int	 | 最大重试次数，默认为 3 次                            |
-| retryIntervalMilliseconds (?)     | int	 | 重试间隔毫秒数，默认为 500 毫秒                       |
-| timeToLiveSeconds (?)	            | int    | 临时节点的存活时间，默认 60 秒                        |
-
-如果注册中心类型是 `etcd`，则可以使用以下选项设置属性：
-
-| *名称*                             | *数据类型* | *说明*                      |
-| :--------------------------------- | :---------- | :---------------------- |
-| timeToLiveSeconds (?)	             | long        | etcd TTL 秒，默认为 30 秒 |
-
-如果注册中心类型是 `apollo`，则可以使用以下选项设置属性：
-
-| *名称*                             | *数据类型* | *说明*                           |
-| :--------------------------------- | :---------- | :--------------------------- |
-| appId (?)              | String   | Apollo appId，默认为 `APOLLO_SHADINGSPHERE`   |
-| env (?)                | String   | Apollo env，默认为 `DEV`                      |
-| clusterName (?)        | String	| Apollo clusterName，默认为 `default`          |
-| administrator (?)      | String	| Apollo administrator，默认为 ``               |
-| token (?)              | String	| Apollo token，默认为 ``                       |
-| portalUrl (?)          | String	| Apollo portalUrl，默认为 ``                   |
-| connectTimeout (?)     | int      | Apollo connectTimeout，默认为 1000 毫秒        |
-| readTimeout (?)        | int      | Apollo readTimeout，默认为 5000 毫秒           |
-
-如果注册中心类型是 `nacos`，则可以使用以下选项设置属性：
-
-| *名称*                             | *数据类型* | *说明*                                                |
-| :--------------------------------- | :---------- | :------------------------------------------------ |
-| group (?)                          | String      | Nacos 组，默认为 `SHADING_SPHERE_DEFAULT_GROUP`     |
-| timeout (?)                        | long        | Nacos 超时时间，默认为 3000 毫秒                      |
-
-## ShardingSphere-3.x
-
-### 数据分片
-
-#### ShardingDataSourceFactory
-
-| *名称*                | *数据类型*                   | *说明*                 |
-| :-------------------- | :--------------------------- | :------------------ |
-| dataSourceMap         | Map<String, DataSource>      | 数据源配置            |
-| shardingRuleConfig    | ShardingRuleConfiguration    | 数据分片规则配置       |
-| configMap (?)	        | Map<String, Object>	       | 用户自定义的参数       |
-| props (?)             | Properties                   | 属性配置             |
-
-#### ShardingRuleConfiguration
-
-| *名称*                                     | *数据类型*                                | *说明*                                |
-| :---------------------------------------- | :--------------------------------------- | :----------------------------------- |
-| tableRuleConfigs                          | Collection<TableRuleConfiguration>       | 分片规则列表                           |
-| bindingTableGroups (?)                    | Collection<String>                       | 绑定表规则列表                          |
-| broadcastTables (?)	                    | Collection<String>                       | 广播表规则列表                          |
-| defaultDataSourceName (?)                 | String	                               | 未配置分片规则的表将根据默认数据源定位       |
-| defaultDatabaseShardingStrategyConfig (?)	| ShardingStrategyConfiguration	           | 默认数据库分片策略                       |
-| defaultTableShardingStrategyConfig (?)    | ShardingStrategyConfiguration            | 默认分表策略                            |
-| defaultKeyGeneratorConfig (?)             | KeyGeneratorConfiguration	               | 默认密钥生成器配置，使用用户定义的或内置的，例如 雪花/UUID。默认密钥生成器是 `org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator`|
-| masterSlaveRuleConfigs (?)                | Collection<MasterSlaveRuleConfiguration> | 读写分离规则，默认值表示不使用读写分离       |
-
-#### TableRuleConfiguration
-
-| *名称*                              | *数据类型*                     | *说明*                                       |
-| :--------------------------------- | :---------------------------- | :------------------------------------------ |
-| logicTable	                     | String	                     | 逻辑表名称                                    |
-| actualDataNodes (?)	             | String	                     | 描述数据源名称和实际表，分隔符为点，多个数据节点用逗号分割，支持内联表达式。不存在意味着仅分片数据库。示例：ds${0..7}.tbl${0..7} |
-| databaseShardingStrategyConfig (?) | ShardingStrategyConfiguration | 数据库分片策略，如果不存在则使用默认的数据库分片策略  |
-| tableShardingStrategyConfig (?)    | ShardingStrategyConfiguration | 表分片策略，如果不存在则使用默认的数据库分片策略     |
-| logicIndex (?)	                 | String	                     | 逻辑索引，如果在 Oracle/PostgreSQL 中使用 DROP INDEX XXX SQL，则需要设置此属性以查找实际表 |
-| keyGeneratorConfig (?)             | String                        | 主键列配置，如果不存在则使用默认主键列              |
-| keyGenerator (?)	                 | KeyGenerator	                 | 主键生成器配置，如果不存在则使用默认主键生成器         |
-
-#### StandardShardingStrategyConfiguration
-
-ShardingStrategyConfiguration 的实现类
-
-| *名称*                      | *数据类型*                     | *说明*                        |
-| :------------------------- | :---------------------------- | :--------------------------- |
-| shardingColumn             | String	                     | 分片键                        |
-| preciseShardingAlgorithm   | PreciseShardingAlgorithm      | `=` 和 `IN` 中使用的精确分片算法 |
-| rangeShardingAlgorithm (?) | RangeShardingAlgorithm        | `BETWEEN` 中使用的范围分片算法   |
-
-##### ComplexShardingStrategyConfiguration
-
-`ShardingStrategyConfiguration` 的实现类，用于具有多个分片键的复杂分片策略。
-
-| *名称*                   | *数据类型*                    | *说明*              |
-| :---------------------- | :--------------------------- | :----------------- |
-| shardingColumns	      | String	                     | 分片键，以逗号分隔    |
-| shardingAlgorithm	      | ComplexKeysShardingAlgorithm | 复杂分片算法         |
-
-##### InlineShardingStrategyConfiguration
-
-`ShardingStrategyConfiguration` 的实现类，用于行表达式的分片策略。
-
-| *名称*                     | *数据类型*                      | *说明*                              |
-| :------------------------ | :----------------------------- | :--------------------------------- |
-| shardingColumns	        | String	                     | 分片列名，以逗号分隔                   |
-| algorithmExpression	    | String                         | 行表达式的分片策略，应符合 groovy 语法；有关更多详细信息，请参阅行表达式 |
-
-##### HintShardingStrategyConfiguration
-
-`ShardingStrategyConfiguration` 的实现类，用于配置强制分片策略。
-
-| *名称*                    | *数据类型*                       | *说明*                        |
-| :----------------------- | :------------------------------ | :--------------------------- |
-| shardingAlgorithm	       | HintShardingAlgorithm	         | 强制分片算法                   |
-
-##### NoneShardingStrategyConfiguration
-
-`ShardingStrategyConfiguration` 的实现类，用于配置非分片策略。
-
-#### 属性配置
-
-枚举属性
-
-| *名称*                                 | *数据类型* | *说明*                                             |
-| :------------------------------------ | :-------- | :------------------------------------------------ |
-| sql.show (?)                          | boolean	| 是否打印 SQL 日志，默认值：false                      |
-| executor.size (?)                     | int	    | 用于 SQL 实现的工作线程号；如果为 0，则没有限制。默认值：0 |
-| max.connections.size.per.query (?)	| int       | 每个物理数据库每次查询分配的最大连接数，默认值：1          |
-| check.table.metadata.enabled (?)	    | boolean   | 初始化时是否检查元数据的一致性，默认值：false             |
-
-#### configMap
-
-用户定义的参数。
-
-### 读写分离
-
-#### MasterSlaveDataSourceFactory
-
-| *名称*                | *数据类型*                     | *说明*                  |
-| :-------------------- | :--------------------------- | :--------------------- |
-| dataSourceMap         | Map<String, DataSource>      | 数据源及其名称的映射       |
-| masterSlaveRuleConfig | MasterSlaveRuleConfiguration | 读写分离规则配置          |
-| configMap (?)         | Map<String, Object>          | 用户自定义的参数          |
-| props (?)             | Properties                   | 属性配置                 |
-
-#### MasterSlaveRuleConfiguration
-
-| *名称*                   | *数据类型*                      | *说明*                        |
-| :----------------------- | :------------------------------ | :---------------------- |
-| name                     | String                          | 读写分离数据源名称        |
-| masterDataSourceName     | String                          | 主数据库源名称            |
-| slaveDataSourceNames     | Collection<String>              | 从数据库源名称列表          |
-| loadBalanceAlgorithm (?) | MasterSlaveLoadBalanceAlgorithm | 从库负载均衡算法           |
-
-#### configMap
-
-用户定义的参数。
-
-#### PropertiesConstant
-
-枚举属性。
-
-| *名称*                                 | *数据类型*  | *说明*                                            |
-| :------------------------------------ | :-------- | :------------------------------------------------ |
-| sql.show (?)                          | boolean	| 是否打印 SQL 日志，默认值：false                      |
-| executor.size (?)                     | int	    | 用于 SQL 实现的工作线程号；如果为 0，则没有限制。默认值：0 |
-| max.connections.size.per.query (?)	| int       | 每个物理数据库每次查询分配的最大连接数，默认值：1          |
-| check.table.metadata.enabled (?)	    | boolean   | 初始化时是否检查元数据的一致性，默认值：false             |
-
-### 编排
-
-#### OrchestrationShardingDataSourceFactory
-
-| *名称*                | *数据类型*                   | *说明*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap	        | Map<String, DataSource>	   | 与 `ShardingDataSourceFactory` 相同 |
-| shardingRuleConfig	| ShardingRuleConfiguration	   | 与 `ShardingDataSourceFactory` 相同 |
-| configMap (?)	        | Map<String, Object>          | 与 `ShardingDataSourceFactory` 相同 |
-| props (?)	            | Properties	               | 与 `ShardingDataSourceFactory` 相同 |
-| orchestrationConfig	| OrchestrationConfiguration   | 编排规则配置                          |
-
-#### OrchestrationMasterSlaveDataSourceFactory
-
-| *名称*                | *数据类型*                   | *说明*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap	        | Map<String, DataSource>	   | 与 `MasterSlaveDataSourceFactory` 相同 |
-| masterSlaveRuleConfig	| MasterSlaveRuleConfiguration | 与 `MasterSlaveDataSourceFactory` 相同 |
-| configMap (?)	        | Map<String, Object>	       | 与 `MasterSlaveDataSourceFactory` 相同 |
-| props (?)	            | Properties	               | 与 `MasterSlaveDataSourceFactory` 相同  |
-| orchestrationConfig	| OrchestrationConfiguration   | 编排规则配置                             |
-
-#### OrchestrationConfiguration
-
-| *名称*                | *数据类型*                     | *说明*                                                 |
-| :-------------------- | :--------------------------- | :----------------------------------------------------- |
-| name	                | String	                   | 编排实例名称                                             |
-| overwrite	            | boolean	                   | 本地配置是否覆盖配置中心配置； 如果覆盖，则每次启动都参考本地配置 |
-| regCenterConfig	    | RegistryCenterConfiguration  | 注册中心配置                                             |
-
-#### RegistryCenterConfiguration
-
-| *名称*                             | *数据类型*                    | *说明*                               |
-| :-------------------------------- | :--------------------------- | :---------------------------------- |
-| serverLists	                    | String	| 注册中心服务列表，包括 IP 地址和端口号，多个地址用逗号分隔，如: host1:2181,host2:2181 |
-| namespace (?)	                    | String	| 命名空间                                                                    |
-| digest (?)	                    | String	| 连接注册中心的权限令牌；默认表示不需要权限                                       |
-| operationTimeoutMilliseconds (?)	| int	    | 操作超时毫秒数，默认为 500 毫秒                                                 |
-| maxRetries (?)	                | int	    | 最大重试次数，默认为 3 次                                                      |
-| retryIntervalMilliseconds (?)	    | int	    | 重试间隔毫秒数，默认为 500 毫秒                                                |
-| timeToLiveSeconds (?)	            | int	    | 临时节点的存活时间，默认 60 秒                                                 |
-
-## ShardingSphere-2.x
-
-### 读写分离
-
-#### 概念
-
-为了缓解数据库压力，将写入和读取操作分离为不同数据源，写库称为主库，读库称为从库，一主库可配置多从库。
-
-#### 支持项
-
-1. 提供了一主多从的读写分离配置，可独立使用，也可配合分库分表使用。
-2. 独立使用读写分离支持 SQL 透传。
-3. 同一线程且同一数据库连接内，如有写入操作，以后的读操作均从主库读取，用于保证数据一致性。
-4. Spring 命名空间。
-5. 基于 Hint 的强制主库路由。
-
-#### 不支持项
-
-1. 主库和从库的数据同步。
-2. 主库和从库的数据同步延迟导致的数据不一致。
-3. 主库双写或多写。
-
-#### 代码开发示例
-
-##### 读写分离
-
-```java
-// 构造一个读写分离数据源，读写分离数据源实现了 DataSource 接口，可以直接作为数据源进行处理。 masterDataSource、slaveDataSource0、slaveDataSource1 等都是使用 DBCP 等连接池配置的真实数据源。
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-dataSourceMap.put("masterDataSource", masterDataSource);
-dataSourceMap.put("slaveDataSource0", slaveDataSource0);
-dataSourceMap.put("slaveDataSource1", slaveDataSource1);
-
-// 构建读写分离配置
-MasterSlaveRuleConfiguration masterSlaveRuleConfig = new MasterSlaveRuleConfiguration();
-masterSlaveRuleConfig.setName("ms_ds");
-masterSlaveRuleConfig.setMasterDataSourceName("masterDataSource");
-masterSlaveRuleConfig.getSlaveDataSourceNames().add("slaveDataSource0");
-masterSlaveRuleConfig.getSlaveDataSourceNames().add("slaveDataSource1");
-
-DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(dataSourceMap, masterSlaveRuleConfig);
-```
-
-##### 分库分表 + 读写分离
-
-```java
-// 构造一个读写分离数据源，读写分离数据源实现了 DataSource 接口，可以直接作为数据源进行处理。 masterDataSource、slaveDataSource0、slaveDataSource1 等都是使用 DBCP 等连接池配置的真实数据源。
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-dataSourceMap.put("masterDataSource0", masterDataSource0);
-dataSourceMap.put("slaveDataSource00", slaveDataSource00);
-dataSourceMap.put("slaveDataSource01", slaveDataSource01);
-
-dataSourceMap.put("masterDataSource1", masterDataSource1);
-dataSourceMap.put("slaveDataSource10", slaveDataSource10);
-dataSourceMap.put("slaveDataSource11", slaveDataSource11);
-
-// 构建读写分离配置
-MasterSlaveRuleConfiguration masterSlaveRuleConfig0 = new MasterSlaveRuleConfiguration();
-masterSlaveRuleConfig0.setName("ds_0");
-masterSlaveRuleConfig0.setMasterDataSourceName("masterDataSource0");
-masterSlaveRuleConfig0.getSlaveDataSourceNames().add("slaveDataSource00");
-masterSlaveRuleConfig0.getSlaveDataSourceNames().add("slaveDataSource01");
-
-MasterSlaveRuleConfiguration masterSlaveRuleConfig1 = new MasterSlaveRuleConfiguration();
-masterSlaveRuleConfig1.setName("ds_1");
-masterSlaveRuleConfig1.setMasterDataSourceName("masterDataSource1");
-masterSlaveRuleConfig1.getSlaveDataSourceNames().add("slaveDataSource10");
-masterSlaveRuleConfig1.getSlaveDataSourceNames().add("slaveDataSource11");
-
-// 继续通过 ShardingSlaveDataSourceFactory 创建 ShardingDataSource
-ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();
-shardingRuleConfig.getMasterSlaveRuleConfigs().add(masterSlaveRuleConfig0);
-shardingRuleConfig.getMasterSlaveRuleConfigs().add(masterSlaveRuleConfig1);
-
-DataSource dataSource = ShardingDataSourceFactory.createDataSource(dataSourceMap, shardingRuleConfig);
-```
-
-## ShardingSphere-1.x
-
-### 读写分离
-
-#### 概念
-
-为了缓解数据库压力，将写入和读取操作分离为不同数据源，写库称为主库，读库称为从库，一主库可配置多从库。
-
-#### 支持项
-
-1. 提供了一主多从的读写分离配置，可独立使用，也可配合分库分表使用。
-2. 同一线程且同一数据库连接内，如有写入操作，以后的读操作均从主库读取，用于保证数据一致性。
-3. Spring 命名空间。
-4. 基于 Hint 的强制主库路由。
-
-#### 不支持项
-
-1. 主库和从库的数据同步。
-2. 主库和从库的数据同步延迟导致的数据不一致。
-3. 主库双写或多写。
-
-#### 代码开发示例
-
-```java
-// 构造一个读写分离数据源，读写分离数据源实现了 DataSource 接口，可以直接作为数据源进行处理。 masterDataSource、slaveDataSource0、slaveDataSource1 等都是使用 DBCP 等连接池配置的真实数据源。
-Map<String, DataSource> slaveDataSourceMap0 = new HashMap<>();
-slaveDataSourceMap0.put("slaveDataSource00", slaveDataSource00);
-slaveDataSourceMap0.put("slaveDataSource01", slaveDataSource01);
-// You can choose the master-slave library load balancing strategy, the default is ROUND_ROBIN, and there is RANDOM to choose from, or customize the load strategy
-DataSource masterSlaveDs0 = MasterSlaveDataSourceFactory.createDataSource("ms_0", "masterDataSource0", masterDataSource0, slaveDataSourceMap0, MasterSlaveLoadBalanceStrategyType.ROUND_ROBIN);
-
-Map<String, DataSource> slaveDataSourceMap1 = new HashMap<>();
-slaveDataSourceMap1.put("slaveDataSource10", slaveDataSource10);
-slaveDataSourceMap1.put("slaveDataSource11", slaveDataSource11);
-DataSource masterSlaveDs1 = MasterSlaveDataSourceFactory.createDataSource("ms_1", "masterDataSource1", masterDataSource1, slaveDataSourceMap1, MasterSlaveLoadBalanceStrategyType.ROUND_ROBIN);
-
-// 构建读写分离配置
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-dataSourceMap.put("ms_0", masterSlaveDs0);
-dataSourceMap.put("ms_1", masterSlaveDs1);
-```
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md
deleted file mode 100644
index 4a4adf2ab9b..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md
+++ /dev/null
@@ -1,782 +0,0 @@
-+++
-title = "Java API"
-weight = 2
-+++
-
-## 5.0.0-beta
-
-### Sharding
-
-#### Root Configuration
-
-Class name: org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration
-
-Attributes:
-
-| *Name*                              | *DataType*                                          | *Description*                                  | *Default Value* |
-| ----------------------------------- | --------------------------------------------------- | ---------------------------------------------- | --------------- |
-| tables (+)                          | Collection\<ShardingTableRuleConfiguration\>        | Sharding table rules                           | -               |
-| autoTables (+)                      | Collection\<ShardingAutoTableRuleConfiguration\>    | Sharding automatic table rules                 | -               |
-| bindingTableGroups (*)              | Collection\<String\>                                | Binding table rules                            | Empty           |
-| broadcastTables (*)                 | Collection\<String\>                                | Broadcast table rules                          | Empty           |
-| defaultDatabaseShardingStrategy (?) | ShardingStrategyConfiguration                       | Default database sharding strategy             | Not sharding    |
-| defaultTableShardingStrategy (?)    | ShardingStrategyConfiguration                       | Default table sharding strategy                | Not sharding    |
-| defaultKeyGenerateStrategy (?)      | KeyGeneratorConfiguration                           | Default key generator                          | Snowflake       |
-| shardingAlgorithms (+)              | Map\<String, ShardingSphereAlgorithmConfiguration\> | Sharding algorithm name and configurations     | None            |
-| keyGenerators (?)                   | Map\<String, ShardingSphereAlgorithmConfiguration\> | Key generate algorithm name and configurations | None            |
-
-#### Sharding Table Configuration
-
-Class name: org.apache.shardingsphere.sharding.api.config.ShardingTableRuleConfiguration
-
-Attributes:
-
-| *Name*                       | *DataType*                    | *Description*                                                                                                                         | *Default Value*                            |
-| ---------------------------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------ |
-| logicTable                   | String                        | Name of sharding logic table                                                                                                          | -                                          |
-| actualDataNodes (?)          | String                        | Describe data source names and actual tables, delimiter as point.<br /> Multiple data nodes split by comma, support inline expression | Broadcast table or databases sharding only |
-| databaseShardingStrategy (?) | ShardingStrategyConfiguration | Databases sharding strategy                                                                                                           | Use default databases sharding strategy    |
-| tableShardingStrategy (?)    | ShardingStrategyConfiguration | Tables sharding strategy                                                                                                              | Use default tables sharding strategy       |
-| keyGenerateStrategy (?)      | KeyGeneratorConfiguration     | Key generator configuration                                                                                                           | Use default key generator                  |
-
-#### Sharding Automatic Table Configuration
-
-Class name: org.apache.shardingsphere.sharding.api.config.ShardingAutoTableRuleConfiguration
-
-Attributes:
-
-| *Name*                  | *DataType*                    | *Description*                                               | *Default Value*                 |
-| ----------------------- | ----------------------------- | ----------------------------------------------------------- | ------------------------------- |
-| logicTable              | String                        | Name of sharding logic table                                | -                               |
-| actualDataSources (?)   | String                        | Data source names.<br /> Multiple data nodes split by comma | Use all configured data sources |
-| shardingStrategy (?)    | ShardingStrategyConfiguration | Sharding strategy                                           | Use default sharding strategy   |
-| keyGenerateStrategy (?) | KeyGeneratorConfiguration     | Key generator configuration                                 | Use default key generator       |
-
-#### Sharding Strategy Configuration
-
-##### Standard Sharding Strategy Configuration
-
-Class name: org.apache.shardingsphere.sharding.api.config.strategy.sharding.StandardShardingStrategyConfiguration
-
-Attributes:
-
-| *Name*                | *DataType* | *Description*           |
-| --------------------- | ---------- | ----------------------- |
-| shardingColumn        | String     | Sharding column name    |
-| shardingAlgorithmName | String     | Sharding algorithm name |
-
-##### Complex Sharding Strategy Configuration
-
-Class name: org.apache.shardingsphere.sharding.api.config.strategy.sharding.ComplexShardingStrategyConfiguration
-
-Attributes:
-
-| *Name*                | *DataType* | *Description*                             |
-| --------------------- | ---------- | ----------------------------------------- |
-| shardingColumns       | String     | Sharding column name, separated by commas |
-| shardingAlgorithmName | String     | Sharding algorithm name                   |
-
-##### Hint Sharding Strategy Configuration
-
-Class name: org.apache.shardingsphere.sharding.api.config.strategy.sharding.HintShardingStrategyConfiguration
-
-Attributes:
-
-| *Name*                | *DataType* | *Description*           |
-| --------------------- | ---------- | ----------------------- |
-| shardingAlgorithmName | String     | Sharding algorithm name |
-
-##### None Sharding Strategy Configuration
-
-Class name: org.apache.shardingsphere.sharding.api.config.strategy.sharding.NoneShardingStrategyConfiguration
-
-Attributes: None
-
-Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) for more details about type of algorithm.
-
-##### Key Generate Strategy Configuration
-
-Class name: org.apache.shardingsphere.sharding.api.config.strategy.keygen.KeyGenerateStrategyConfiguration
-
-Attributes:
-
-| *Name*           | *DataType* | *Description*               |
-| ---------------- | ---------- | --------------------------- |
-| column           | String     | Column name of key generate |
-| keyGeneratorName | String     | key generate algorithm name |
-
-Please refer to [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen) for more details about type of algorithm.
-
-### Readwrite-splitting
-
-#### Root Configuration
-
-Class name: ReadwriteSplittingRuleConfiguration
-
-Attributes:
-
-| *Name*            | *DataType*                                            | *Description*                                                          |
-| ----------------- | ----------------------------------------------------- | ---------------------------------------------------------------------- |
-| dataSources (+)   | Collection\<ReadwriteSplittingDataSourceRuleConfiguration\> | Data sources of write and reads                                  |
-| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>   | Load balance algorithm name and configurations of replica data sources |
-
-#### Readwrite-splitting Data Source Configuration
-
-Class name: ReadwriteSplittingDataSourceRuleConfiguration
-
-Attributes:
-
-| *Name*                     | *DataType*           | *Description*                                  | *Default Value*                    |
-| -------------------------- | -------------------- | ---------------------------------------------- | ---------------------------------- |
-| name                       | String               | Readwrite-splitting data source name           | -                                  |
-| writeDataSourceName        | String               | Write sources source name                      | -                                  |
-| readDataSourceNames (+)    | Collection\<String\> | Read sources source name list                  | -                                  |
-| loadBalancerName (?)       | String               | Load balance algorithm name of replica sources | Round robin load balance algorithm |
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
-
-### Encryption
-
-#### Root Configuration
-
-Class name: org.apache.shardingsphere.encrypt.api.config.EncryptRuleConfiguration
-
-Attributes:
-
-| *Name*                    | *DataType*                                          | *Description*                                                                                  | *Default Value* |
-| ------------------------- | --------------------------------------------------- | ---------------------------------------------------------------------------------------------- | --------------- |
-| tables (+)                | Collection\<EncryptTableRuleConfiguration\>         | Encrypt table rule configurations                                                              |                 |
-| encryptors (+)            | Map\<String, ShardingSphereAlgorithmConfiguration\> | Encrypt algorithm name and configurations                                                      |                 |
-| queryWithCipherColumn (?) | boolean                                             | Whether query with cipher column for data encrypt. User you can use plaintext to query if have | true            |
-
-#### Encrypt Table Rule Configuration
-
-Class name: org.apache.shardingsphere.encrypt.api.config.rule.EncryptTableRuleConfiguration
-
-Attributes:
-
-| *Name*      | *DataType*                                   | *Description*                      |
-| ----------- | -------------------------------------------- | ---------------------------------- |
-| name        | String                                       | Table name                         |
-| columns (+) | Collection\<EncryptColumnRuleConfiguration\> | Encrypt column rule configurations |
-
-#### Encrypt Column Rule Configuration
-
-Class name: org.apache.shardingsphere.encrypt.api.config.rule.EncryptColumnRuleConfiguration
-
-Attributes:
-
-| *Name*                  | *DataType* | *Description*              |
-| ----------------------- | ---------- | -------------------------- |
-| logicColumn             | String     | Logic column name          |
-| cipherColumn            | String     | Cipher column name         |
-| assistedQueryColumn (?) | String     | Assisted query column name |
-| plainColumn (?)         | String     | Plain column name          |
-| encryptorName           | String     | Encrypt algorithm name     |
-
-#### Encrypt Algorithm Configuration
-
-Class name: org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration
-
-Attributes:
-
-| *Name*     | *DataType* | *Description*                |
-| ---------- | ---------- | ---------------------------- |
-| name       | String     | Encrypt algorithm name       |
-| type       | String     | Encrypt algorithm type       |
-| properties | Properties | Encrypt algorithm properties |
-
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
-
-### Shadow DB
-
-#### Root Configuration
-
-Class name: org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
-
-Attributes:
-
-| *Name*          | *DataType*            | *Description*                                                                                                                                                                    |
-| --------------- | --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
-| column          | String                | Shadow field name in SQL, SQL with a value of true will be routed to the shadow database for execution                                                                           |
-| sourceDataSourceNames | List\<String\> | Source data source names |
-| shadowDataSourceNames | List\<String\> | Shadow data source names |
-
-### Governance
-
-#### Configuration Item Explanation
-
-##### Management
-
-*Configuration Entrance*
-
-Class name: org.apache.shardingsphere.governance.repository.api.config.GovernanceConfiguration
-
-Attributes:
-
-| *Name*                      | *Data Type*                  | *Description*             |
-| --------------------------- | ---------------------------- | ------------------------- |
-| name                        | String                       | Governance instance name  |
-| registryCenterConfiguration | RegistryCenterConfiguration  | Config of registry-center |
-
-The type of registryCenter could be Zookeeper or Etcd.
-
-*Governance Instance Configuration*
-
-Class name: org.apache.shardingsphere.governance.repository.api.config.ClusterPersistRepositoryConfiguration
-
-Attributes:
-
-| *Name*      | *Data Type* | *Description*                                                                                                                                 |
-| ----------- | ----------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
-| type        | String      | Governance instance type, such as: Zookeeper, etcd                                                                                            |
-| serverLists | String      | The list of servers that connect to governance instance, including IP and port number, use commas to separate, such as: host1:2181,host2:2181 |
-| props       | Properties  | Properties for center instance config, such as options of zookeeper                                                                           |
-| overwrite   | boolean     | Local configurations overwrite config center configurations or not; if they overwrite, each start takes reference of local configurations     | 
-
-ZooKeeper Properties Configuration
-
-| *Name*                           | *Data Type* | *Description*                                  | *Default Value*       |
-| -------------------------------- | ----------- | ---------------------------------------------- | --------------------- |
-| digest (?)                       | String      | Connect to authority tokens in registry center | No need for authority |
-| operationTimeoutMilliseconds (?) | int         | The operation timeout milliseconds             | 500 milliseconds      |
-| maxRetries (?)                   | int         | The maximum retry count                        | 3                     |
-| retryIntervalMilliseconds (?)    | int         | The retry interval milliseconds                | 500 milliseconds      |
-| timeToLiveSeconds (?)            | int         | Time to live seconds for ephemeral nodes       | 60 seconds            |
-
-
-Etcd Properties Configuration
-
-| *Name*                | *Data Type* | *Description*                         | *Default Value* |
-| --------------------- | ----------- | ------------------------------------- | --------------- |
-| timeToLiveSeconds (?) | long        | Time to live seconds for data persist | 30 seconds      |
-
-## ShardingSphere-4.x
-
-### Sharding
-
-#### ShardingDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap         | Map<String, DataSource>      | Data sources configuration |
-| shardingRuleConfig    | ShardingRuleConfiguration    | Data sharding configuration rule    |
-| props (?)             | Properties                   | Property configurations             |
-
-#### ShardingRuleConfiguration
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| tableRuleConfigs         | Collection<TableRuleConfiguration> | Sharding rule list                |
-| bindingTableGroups (?)   | Collection<String>              | Binding table rule list              |
-| broadcastTables (?)	   | Collection<String>              | Broadcast table rule list            |
-| defaultDataSourceName (?)| String	                         |Tables not configured with sharding rules will locate according to default data sources |
-| defaultDatabaseShardingStrategyConfig (?)	| ShardingStrategyConfiguration	| Default database sharding strategy |
-| defaultTableShardingStrategyConfig (?) | ShardingStrategyConfiguration | Default table sharding strategy |
-| defaultKeyGeneratorConfig (?) | KeyGeneratorConfiguration	| Default key generator configuration, use user-defined ones or built-in ones, e.g. SNOWFLAKE/UUID. Default key generator is `org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator`|
-| masterSlaveRuleConfigs (?) | Collection<MasterSlaveRuleConfiguration> | Read-write split rules, default indicates not using read-write split |
-
-#### TableRuleConfiguration
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| logicTable	           | String	                         | Name of logic table                  |
-| actualDataNodes (?)	   | String	                         | Describe data source names and actual tables, delimiter as point, multiple data nodes split by comma, support inline expression. Absent means sharding databases only. Example: ds${0..7}.tbl${0..7} |
-| databaseShardingStrategyConfig (?) | ShardingStrategyConfiguration | Databases sharding strategy, use default databases sharding strategy if absent |
-| tableShardingStrategyConfig (?) | ShardingStrategyConfiguration | Tables sharding strategy, use default databases sharding strategy if absent |
-| keyGeneratorConfig (?) | KeyGeneratorConfiguration | Key generator configuration, use default key generator if absent |
-| encryptorConfiguration (?) | EncryptorConfiguration | Encrypt generator configuration |
-
-#### StandardShardingStrategyConfiguration
-
-##### Subclass of ShardingStrategyConfiguration.
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| shardingColumn           | String	                         | Sharding column name                  |
-| preciseShardingAlgorithm | PreciseShardingAlgorithm        | Precise sharding algorithm used in `=` and `IN` |
-| rangeShardingAlgorithm (?) | RangeShardingAlgorithm        | Range sharding algorithm used in `BETWEEN` |
-
-##### ComplexShardingStrategyConfiguration
-
-The implementation class of `ShardingStrategyConfiguration`, used in complex sharding situations with multiple sharding keys.
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| shardingColumns	        | String	                     | Sharding column name, separated by commas |
-| shardingAlgorithm	        | ComplexKeysShardingAlgorithm	 | Complex sharding algorithm |
-
-##### InlineShardingStrategyConfiguration
-
-The implementation class of `ShardingStrategyConfiguration`, used in sharding strategy of inline expression.
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| shardingColumns	        | String	                     | Sharding column name, separated by commas |
-| algorithmExpression	    | String                         | Inline expression of sharding strategies, should conform to groovy syntax; refer to Inline expression for more details |
-
-##### HintShardingStrategyConfiguration
-
-The implementation class of `ShardingStrategyConfiguration`, used to configure hint sharding strategies.
-
-| *Name*                   | *DataType*                      | *Description*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| shardingAlgorithm	       | HintShardingAlgorithm	         | Hint sharding algorithm |
-
-##### NoneShardingStrategyConfiguration
-
-The implementation class of `ShardingStrategyConfiguration`, used to configure none-sharding strategies.
-
-### KeyGeneratorConfiguration
-
-| *Name*                   | *DataType*                      | *Description*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| column                   | String                          | Column name of key generator |
-| type	                   | String	                         | Type of key generator, use user-defined ones or built-in ones, e.g. SNOWFLAKE, UUID |
-| props	                   | Properties	                     | The Property configuration of key generators |
-
-#### Properties
-
-Property configuration that can include these properties of these key generators.
-
-SNOWFLAKE
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| max.tolerate.time.difference.milliseconds (?) | long | The max tolerate time for different server’s time difference in milliseconds, the default value is `10` |
-| max.vibration.offset (?) | int | The max upper limit value of vibrate number, range `[0, 4096)`, the default value is `1`. Notice: To use the generated value of this algorithm as sharding value, it is recommended to configure this property. The algorithm generates key mod `2^n` (`2^n` is usually the sharding amount of tables or databases) in different milliseconds and the result is always `0` or `1`. To prevent the above sharding problem, it is recommended to configure this property, its value is `(2^n)-1` |
-
-### Readwrite-splitting
-
-#### MasterSlaveDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap         | Map<String, DataSource>      | Mapping of data source and its name |
-| masterSlaveRuleConfig | MasterSlaveRuleConfiguration | Master slave rule configuration     |
-| props (?)             | Properties                   | Property configurations             |
-
-#### MasterSlaveRuleConfiguration
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| name                     | String                          | Readwrite-splitting data source name |
-| masterDataSourceName     | String                          | Master database source name          |
-| slaveDataSourceNames     | Collection<String>              | Slave database source name list      |
-| loadBalanceAlgorithm (?) | MasterSlaveLoadBalanceAlgorithm | Slave database load balance          |
-
-#### Properties
-
-Property configuration items, can be of the following properties.
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| sql.show (?)                       | boolean     | Print SQL parse and rewrite log or not, default value: false |
-| executor.size (?)                  | int         | Be used in work thread number implemented by SQL; no limits if it is 0. default value: 0 |
-| max.connections.size.per.query (?) | int         | The maximum connection number allocated by each query of each physical database, default value: 1 |
-| check.table.metadata.enabled (?)   | boolean     | Check meta-data consistency or not in initialization, default value: false |
-
-### Data Masking
-
-#### EncryptDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSource	        | DataSource                   | Data source                         |
-| encryptRuleConfig     | EncryptRuleConfiguration     | encrypt rule configuration          |
-| props (?)             | Properties                   | Property configurations             |
-
-#### EncryptRuleConfiguration
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| encryptors	| Map<String, EncryptorRuleConfiguration>	| Encryptor names and encryptors        |
-| tables	| Map<String, EncryptTableRuleConfiguration>	| Encrypt table names and encrypt tables |
-
-#### Properties
-
-Property configuration items, can be of the following properties.
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| sql.show (?)                       | boolean     | Print SQL parse and rewrite log or not, default value: false |
-| query.with.cipher.column (?)	     | boolean     | When there is a plainColumn, use cipherColumn or not to query, default value: true |
-
-### Orchestration
-
-#### OrchestrationShardingDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap	        | Map<String, DataSource>	   | Same as `ShardingDataSourceFactory` |
-| shardingRuleConfig	| ShardingRuleConfiguration	   | Same as `ShardingDataSourceFactory` |
-| props (?)	            | Properties	               | Same as `ShardingDataSourceFactory` |
-| orchestrationConfig	| OrchestrationConfiguration   | Orchestration rule configurations   |
-
-#### OrchestrationMasterSlaveDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap	        | Map<String, DataSource>	   | Same as `MasterSlaveDataSourceFactory` |
-| masterSlaveRuleConfig	| MasterSlaveRuleConfiguration | Same as `MasterSlaveDataSourceFactory` |
-| configMap (?)	        | Map<String, Object>	       | Same as `MasterSlaveDataSourceFactory` |
-| props (?)	            | Properties	               | Same as `ShardingDataSourceFactory`    |
-| orchestrationConfig	| OrchestrationConfiguration   | Orchestration rule configurations      |
-
-#### OrchestrationEncryptDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSource	        | DataSource	               | Same as `EncryptDataSourceFactory`  |
-| encryptRuleConfig	    | EncryptRuleConfiguration	   | Same as `EncryptDataSourceFactory`  |
-| props (?)	            | Properties	               | Same as `EncryptDataSourceFactory`  |
-| orchestrationConfig	| OrchestrationConfiguration   | Orchestration rule configurations   |
-
-#### OrchestrationConfiguration
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| instanceConfigurationMap	| Map<String, CenterConfiguration>	| config map of config-center&registry-center, the key is center’s name, the value is the config-center/registry-center |
-
-#### CenterConfiguration
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| type	| String	| The type of center instance(zookeeper/etcd/apollo/nacos)
-| properties	| String	| Properties for center instance config, such as options of zookeeper |
-| orchestrationType	| String	| The type of orchestration center: config-center or registry-center, if both, use “setOrchestrationType(“registry_center,config_center”);” |
-| serverLists	| String	| Connect to server lists in center, including IP address and port number; addresses are separated by commas, such as `host1:2181,host2:2181` |
-| namespace (?) |	String	| Namespace of center instance |
-
-#### Properties
-
-Property configuration items, can be of the following properties.
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| overwrite | boolean |	Local configurations overwrite center configurations or not; if they overwrite, each start takes reference of local configurations |
-
-If type of center is `zookeeper` with config-center&registry-center, properties could be set with the follow options:
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| digest (?)	| String |	Connect to authority tokens in registry center; default indicates no need for authority |
-| operationTimeoutMilliseconds (?) |	int	| The operation timeout millisecond number, default to be 500 milliseconds |
-| maxRetries (?)	| int	| The maximum retry count, default to be 3 times |
-| retryIntervalMilliseconds (?) |	int	| The retry interval millisecond number, default to be 500 milliseconds |
-| timeToLiveSeconds (?)	| int	| The living time for temporary nodes, default to be 60 seconds |
-
-If type of center is `etcd` with config-center&registry-center, properties could be set with the follow options:
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| timeToLiveSeconds (?)	             | long        | The etcd TTL in seconds, default to be 30 seconds |
-
-If type of center is `apollo` with config-center&registry-center, properties could be set with the follow options:
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| appId (?) |	String |	Apollo appId, default to be “APOLLO_SHARDINGSPHERE” |
-| env (?)	| String | Apollo env, default to be “DEV” |
-| clusterName (?) |	String	| Apollo clusterName, default to be “default” |
-| administrator (?) |	String	| Apollo administrator, default to be "” |
-| token (?) |	String	| Apollo token, default to be "” |
-| portalUrl (?) |	String	| Apollo portalUrl, default to be "” |
-| connectTimeout (?) |	int |	Apollo connectTimeout, default to be 1000 milliseconds |
-| readTimeout (?) |	int |	Apollo readTimeout, default to be 5000 milliseconds |
-
-If type of center is `nacos` with config-center&registry-center, properties could be set with the follow options:
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| group (?)                          | String      | Nacos group, “SHARDING_SPHERE_DEFAULT_GROUP” in default      |
-| timeout (?)                        | long        | Nacos timeout, default to be 3000 milliseconds               |
-
-## ShardingSphere-3.x
-
-### Sharding
-
-#### ShardingDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap         | Map<String, DataSource>      | Data sources configuration          |
-| shardingRuleConfig    | ShardingRuleConfiguration    | Data sharding configuration rule    |
-| configMap (?)	        | Map<String, Object>	       | Config map                          |
-| props (?)             | Properties                   | Property configurations             |
-
-#### ShardingRuleConfiguration
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| tableRuleConfigs         | Collection<TableRuleConfiguration> | Table rule configuration               |
-| bindingTableGroups (?)   | Collection<String>              | Binding table groups              |
-| broadcastTables (?)	   | Collection<String>              | Broadcast table groups            |
-| defaultDataSourceName (?)| String	                         |Tables not configured with sharding rules will locate according to default data sources |
-| defaultDatabaseShardingStrategyConfig (?)	| ShardingStrategyConfiguration	| Default database sharding strategy |
-| defaultTableShardingStrategyConfig (?) | ShardingStrategyConfiguration | Default table sharding strategy |
-| defaultKeyGeneratorConfig (?) | KeyGenerator	| Default key generator, default value is `io.shardingsphere.core.keygen.DefaultKeyGenerator`|
-| masterSlaveRuleConfigs (?) | Collection<MasterSlaveRuleConfiguration> | Read-write splitting rule configuration |
-
-#### TableRuleConfiguration
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| logicTable	           | String	                         | Name of logic table                  |
-| actualDataNodes (?)	   | String	                         | Describe data source names and actual tables, delimiter as point, multiple data nodes split by comma, support inline expression. Absent means sharding databases only. Example: ds${0..7}.tbl${0..7} |
-| databaseShardingStrategyConfig (?) | ShardingStrategyConfiguration | Databases sharding strategy, use default databases sharding strategy if absent |
-| tableShardingStrategyConfig (?) | ShardingStrategyConfiguration | Tables sharding strategy, use default databases sharding strategy if absent |
-| logicIndex (?)	| String	| Name if logic index. If use DROP INDEX XXX SQL in Oracle/PostgreSQL, This property needs to be set for finding the actual tables |
-| keyGeneratorConfig (?) | String | Key generator column name, do not use Key generator if absent |
-| keyGenerator (?)	| KeyGenerator	| Key generator, use default key generator if absent |
-
-#### StandardShardingStrategyConfiguration
-
-Subclass of ShardingStrategyConfiguration.
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| shardingColumn           | String	                         | Sharding column name                  |
-| preciseShardingAlgorithm | PreciseShardingAlgorithm        | Precise sharding algorithm used in `=` and `IN` |
-| rangeShardingAlgorithm (?) | RangeShardingAlgorithm        | Range sharding algorithm used in `BETWEEN` |
-
-##### ComplexShardingStrategyConfiguration
-
-Subclass of ShardingStrategyConfiguration.
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| shardingColumns	        | String	                     | Sharding column name, separated by commas |
-| shardingAlgorithm	        | ComplexKeysShardingAlgorithm	 | Complex sharding algorithm |
-
-##### InlineShardingStrategyConfiguration
-
-Subclass of ShardingStrategyConfiguration.
-
-| *Name*                   | *DataType*                      | *Explanation*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| shardingColumns	        | String	                     | Sharding column name, separated by commas |
-| algorithmExpression	    | String                         | Inline expression of sharding strategies, should conform to groovy syntax; refer to Inline expression for more details |
-
-##### HintShardingStrategyConfiguration
-
-Subclass of ShardingStrategyConfiguration.
-
-| *Name*                   | *DataType*                      | *Description*                        |
-| :----------------------- | :------------------------------ | :----------------------------------- |
-| shardingAlgorithm	       | HintShardingAlgorithm	         | Hint sharding algorithm |
-
-##### NoneShardingStrategyConfiguration
-
-Subclass of ShardingStrategyConfiguration.
-
-#### Properties
-
-Enumeration of properties.
-
-| *Name*                             | *Data Type* | *Explanation*                                                |
-| :--------------------------------- | :---------- | :----------------------------------------------------------- |
-| sql.show (?) |	boolean	| Print SQL parse and rewrite log, default value: false |
-| executor.size (?) |	int	| The number of SQL execution threads, zero means no limit. default value: 0 |
-| max.connections.size.per.query (?)	| int |	Max connection size for every query to every actual database. default value: 1 |
-| check.table.metadata.enabled (?)	| boolean |	Check the metadata consistency of all the tables, default value : false |
-
-#### configMap
-
-User-defined arguments.
-
-### Readwrite-splitting
-
-#### MasterSlaveDataSourceFactory
-
-| *Name*                | *DataType*                   | *Description*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap         | Map<String, DataSource>      | Map of data sources and their names |
-| masterSlaveRuleConfig | MasterSlaveRuleConfiguration | Master slave rule configuration     |
-| configMap (?)         | Map<String, Object>          | Config map                          |
-| props (?)             | Properties                   | Properties                          |
-
-#### MasterSlaveRuleConfiguration
-
-| *Name*                   | *DataType*                      | *Description*                    |
-| :----------------------- | :------------------------------ | :------------------------------- |
-| name                     | String                          | Name of master slave data source |
-| masterDataSourceName     | String                          | Name of master data source       |
-| slaveDataSourceNames     | Collection<String>              | Names of Slave data sources      |
-| loadBalanceAlgorithm (?) | MasterSlaveLoadBalanceAlgorithm | Load balance algorithm           |
-
-#### configMap
-
-User-defined arguments.
-
-#### PropertiesConstant
-
-Enumeration of properties.
-
-| *Name*                             | *DataType* | *Description*                                                |
-| :--------------------------------- | :--------- | :----------------------------------------------------------- |
-| sql.show (?)                       | boolean    | To show SQLS or not, default value: false                    |
-| executor.size (?)                  | int        | The number of working threads, default value: CPU count      |
-| max.connections.size.per.query (?) | int        | Max connection size for every query to every actual database. default value: 1 |
-| check.table.metadata.enabled (?)   | boolean    | Check the metadata consistency of all the tables, default value : false |
-
-### Orchestration
-
-#### OrchestrationShardingDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap	        | Map<String, DataSource>	   | Same as `ShardingDataSourceFactory` |
-| shardingRuleConfig	| ShardingRuleConfiguration	   | Same as `ShardingDataSourceFactory` |
-| configMap (?)	        | Map<String, Object>          | Same with `ShardingDataSourceFactory` |
-| props (?)	            | Properties	               | Same as `ShardingDataSourceFactory` |
-| orchestrationConfig	| OrchestrationConfiguration   | Orchestration rule configurations   |
-
-#### OrchestrationMasterSlaveDataSourceFactory
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| dataSourceMap	        | Map<String, DataSource>	   | Same as `MasterSlaveDataSourceFactory` |
-| masterSlaveRuleConfig	| MasterSlaveRuleConfiguration | Same as `MasterSlaveDataSourceFactory` |
-| configMap (?)	        | Map<String, Object>	       | Same as `MasterSlaveDataSourceFactory` |
-| props (?)	            | Properties	               | Same as `ShardingDataSourceFactory`    |
-| orchestrationConfig	| OrchestrationConfiguration   | Orchestration configurations      |
-
-#### OrchestrationConfiguration
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| name	                | String	                   | Name of orchestration instance      |
-| overwrite	            | boolean	                   | Use local configuration to overwrite registry center or not |
-| regCenterConfig	    | RegistryCenterConfiguration  | Registry center configuration |
-
-#### RegistryCenterConfiguration
-
-| *Name*                | *DataType*                   | *Explanation*                       |
-| :-------------------- | :--------------------------- | :---------------------------------- |
-| serverLists	| String	| Registry servers list, multiple split as comma. Example: host1:2181,host2:2181 |
-| namespace (?)	| String	| Namespace of registry |
-| digest (?)	| String	| Digest for registry. Default is not need digest. |
-| operationTimeoutMilliseconds (?)	| int	| Operation timeout time in milliseconds. Default value is 500 milliseconds. |
-| maxRetries (?)	| int	| Max number of times to retry. Default value is 3 |
-| retryIntervalMilliseconds (?)	| int	| Time interval in milliseconds on each retry. Default value is 500 milliseconds. |
-| timeToLiveSeconds (?)	| int	| Time to live in seconds of ephemeral keys. Default value is 60 seconds. |
-
-## ShardingSphere-2.x
-
-### Readwrite-splitting
-
-#### concept
-
-In order to relieve the pressure on the database, the write and read operations are separated into different data sources. The write library is called the master library, and the read library is called the slave library. One master library can be configured with multiple slave libraries.
-
-#### Supported
-
-1. Provides a readwrite-splitting configuration with one master and multiple slaves, which can be used independently or with sub-databases and sub-meters.
-2. Independent use of readwrite-splitting to support SQL transparent transmission.
-3. In the same thread and the same database connection, if there is a write operation, subsequent read operations will be read from the main library to ensure data consistency.
-4. Spring namespace.
-5. Hint-based mandatory main library routing.
-
-#### Unsupported
-
-1. Data synchronization between the master library and the slave library.
-2. Data inconsistency caused by the data synchronization delay of the master library and the slave library.
-3. Double writing or multiple writing in the main library.
-
-#### Code development example
-
-##### only readwrite-splitting
-
-```java
-// Constructing a readwrite-splitting data source, the readwrite-splitting data source implements the DataSource interface, which can be directly processed as a data source. masterDataSource, slaveDataSource0, slaveDataSource1, etc. are real data sources configured using connection pools such as DBCP
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-dataSourceMap.put("masterDataSource", masterDataSource);
-dataSourceMap.put("slaveDataSource0", slaveDataSource0);
-dataSourceMap.put("slaveDataSource1", slaveDataSource1);
-
-// Constructing readwrite-splitting configuration
-MasterSlaveRuleConfiguration masterSlaveRuleConfig = new MasterSlaveRuleConfiguration();
-masterSlaveRuleConfig.setName("ms_ds");
-masterSlaveRuleConfig.setMasterDataSourceName("masterDataSource");
-masterSlaveRuleConfig.getSlaveDataSourceNames().add("slaveDataSource0");
-masterSlaveRuleConfig.getSlaveDataSourceNames().add("slaveDataSource1");
-
-DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(dataSourceMap, masterSlaveRuleConfig);
-```
-
-##### sharding table and database + readwrite-splitting
-
-```java
-// Constructing a readwrite-splitting data source, the readwrite-splitting data source implements the DataSource interface, which can be directly processed as a data source. masterDataSource, slaveDataSource0, slaveDataSource1, etc. are real data sources configured using connection pools such as DBCP
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-dataSourceMap.put("masterDataSource0", masterDataSource0);
-dataSourceMap.put("slaveDataSource00", slaveDataSource00);
-dataSourceMap.put("slaveDataSource01", slaveDataSource01);
-
-dataSourceMap.put("masterDataSource1", masterDataSource1);
-dataSourceMap.put("slaveDataSource10", slaveDataSource10);
-dataSourceMap.put("slaveDataSource11", slaveDataSource11);
-
-// Constructing readwrite-splitting configuration
-MasterSlaveRuleConfiguration masterSlaveRuleConfig0 = new MasterSlaveRuleConfiguration();
-masterSlaveRuleConfig0.setName("ds_0");
-masterSlaveRuleConfig0.setMasterDataSourceName("masterDataSource0");
-masterSlaveRuleConfig0.getSlaveDataSourceNames().add("slaveDataSource00");
-masterSlaveRuleConfig0.getSlaveDataSourceNames().add("slaveDataSource01");
-
-MasterSlaveRuleConfiguration masterSlaveRuleConfig1 = new MasterSlaveRuleConfiguration();
-masterSlaveRuleConfig1.setName("ds_1");
-masterSlaveRuleConfig1.setMasterDataSourceName("masterDataSource1");
-masterSlaveRuleConfig1.getSlaveDataSourceNames().add("slaveDataSource10");
-masterSlaveRuleConfig1.getSlaveDataSourceNames().add("slaveDataSource11");
-
-// Continue to create ShardingDataSource through ShardingSlaveDataSourceFactory
-ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();
-shardingRuleConfig.getMasterSlaveRuleConfigs().add(masterSlaveRuleConfig0);
-shardingRuleConfig.getMasterSlaveRuleConfigs().add(masterSlaveRuleConfig1);
-
-DataSource dataSource = ShardingDataSourceFactory.createDataSource(dataSourceMap, shardingRuleConfig);
-```
-
-## ShardingSphere-1.x
-
-### Readwrite-splitting
-
-#### concept
-
-In order to relieve the pressure on the database, the write and read operations are separated into different data sources. The write library is called the master library, and the read library is called the slave library. One master library can be configured with multiple slave libraries.
-
-#### Supported
-
-1. Provides a readwrite-splitting configuration with one master and multiple slaves, which can be used independently or with sub-databases and sub-meters.
-2. In the same thread and the same database connection, if there is a write operation, subsequent read operations will be read from the main library to ensure data consistency.
-3. Spring namespace.
-4. Hint-based mandatory main library routing.
-
-#### Unsupported
-
-1. Data synchronization between the master library and the slave library.
-2. Data inconsistency caused by the data synchronization delay of the master library and the slave library.
-3. Double writing or multiple writing in the main library.
-
-#### Code development example
-
-```java
-// Constructing a readwrite-splitting data source, the readwrite-splitting data source implements the DataSource interface, which can be directly processed as a data source. masterDataSource, slaveDataSource0, slaveDataSource1, etc. are real data sources configured using connection pools such as DBCP
-Map<String, DataSource> slaveDataSourceMap0 = new HashMap<>();
-slaveDataSourceMap0.put("slaveDataSource00", slaveDataSource00);
-slaveDataSourceMap0.put("slaveDataSource01", slaveDataSource01);
-// You can choose the master-slave library load balancing strategy, the default is ROUND_ROBIN, and there is RANDOM to choose from, or customize the load strategy
-DataSource masterSlaveDs0 = MasterSlaveDataSourceFactory.createDataSource("ms_0", "masterDataSource0", masterDataSource0, slaveDataSourceMap0, MasterSlaveLoadBalanceStrategyType.ROUND_ROBIN);
-
-Map<String, DataSource> slaveDataSourceMap1 = new HashMap<>();
-slaveDataSourceMap1.put("slaveDataSource10", slaveDataSource10);
-slaveDataSourceMap1.put("slaveDataSource11", slaveDataSource11);
-DataSource masterSlaveDs1 = MasterSlaveDataSourceFactory.createDataSource("ms_1", "masterDataSource1", masterDataSource1, slaveDataSourceMap1, MasterSlaveLoadBalanceStrategyType.ROUND_ROBIN);
-
-// Constructing readwrite-splitting configuration
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-dataSourceMap.put("ms_0", masterSlaveDs0);
-dataSourceMap.put("ms_1", masterSlaveDs1);
-```
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.cn.md
deleted file mode 100644
index 7f26819fd31..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.cn.md
+++ /dev/null
@@ -1,422 +0,0 @@
-+++
-title = "Spring Boot Start 配置"
-weight = 4
-+++
-
-## 5.0.0-alpha
-
-### 数据分片
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置
-
-# 标准分片表配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-
-# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-
-# 用于单分片键的标准分片场景
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.<sharding-algorithm-name>.sharding-column= # 分片列名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
-
-# 用于多分片键的复合分片场景
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-columns= # 分片列名称，多个列以逗号分隔
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
-
-# 用于Hint 的分片策略
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
-
-# 分表策略，同分库策略
-spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略
-
-# 自动分片表配置
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # 数据源名
-
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # 分片列名称
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm= # 自动分片算法名称
-
-# 分布式序列策略配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
-
-spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
-spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
-spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
-
-spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
-spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
-spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表
-
-spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略
-spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略
-spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
-
-# 分片算法配置
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=# 分片算法属性配置
-
-# 分布式序列算法配置
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置
-```
-
-### 读写分离
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置
-
-spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.primary-data-source-name= # 主数据源名称
-spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.replica-data-source-names= # 从数据源名称，多个从数据源用逗号分隔
-spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.load-balancer-name= # 负载均衡算法名称
-
-# 负载均衡算法配置
-spring.shardingsphere.rules.replica-query.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
-spring.shardingsphere.rules.replica-query.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
-```
-
-### 数据加密
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置
-
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.cipher-column= # 加密列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-column= # 查询列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.plain-column= # 原文列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.encryptor-name= # 加密算法名称
-
-# 加密算法配置
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type= # 加密算法类型
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx= # 加密算法属性配置
-```
-
-### 影子库
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置
-
-spring.shardingsphere.rules.shadow.column= # 影子字段名称
-spring.shardingsphere.rules.shadow.shadow-mappings.<product-data-source-name>= # 影子数据库名称
-```
-
-### 分布式治理
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.governance.name= # 治理名称
-spring.shardingsphere.governance.registry-center.type= # 治理持久化类型。如：Zookeeper, etcd, Apollo, Nacos
-spring.shardingsphere.governance.registry-center.server-lists= # 治理服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-spring.shardingsphere.governance.registry-center.props= # 其它配置
-spring.shardingsphere.governance.additional-config-center.type= # 可选的配置中心类型。如：Zookeeper, etcd, Apollo, Nacos
-spring.shardingsphere.governance.additional-config-center.server-lists= # 可选的配置中心服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-spring.shardingsphere.governance.additional-config-center.props= # 可选的配置中心其它配置
-spring.shardingsphere.governance.overwrite= # 本地配置是否覆盖配置中心配置。如果可覆盖，每次启动都以本地配置为准.
-```
-
-## ShardingSphere-4.x
-
-### 数据分片
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 数据源名称，多数据源以逗号分隔
-
-spring.shardingsphere.datasource.<data-source-name>.type= # 数据库连接池类名称
-spring.shardingsphere.datasource.<data-source-name>.driver-class-name= # 数据库驱动类名
-spring.shardingsphere.datasource.<data-source-name>.url= # 数据库 url 连接
-spring.shardingsphere.datasource.<data-source-name>.username= # 数据库用户名
-spring.shardingsphere.datasource.<data-source-name>.password= # 数据库密码
-spring.shardingsphere.datasource.<data-source-name>.xxx= # 数据库连接池的其它属性
-
-spring.shardingsphere.sharding.tables.<logic-table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-
-# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-
-# 用于单分片键的标准分片场景
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.sharding-column= # 分片列名称
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.precise-algorithm-class-name= # 精确分片算法类名称，用于 = 和 IN。该类需实现 PreciseShardingAlgorithm 接口并提供无参数的构造器
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.range-algorithm-class-name= # 范围分片算法类名称，用于 BETWEEN，可选。该类需实现 RangeShardingAlgorithm 接口并提供无参数的构造器
-
-# 用于多分片键的复合分片场景
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.complex.sharding-columns= # 分片列名称，多个列以逗号分隔
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.complex.algorithm-class-name= # 复合分片算法类名称。该类需实现 ComplexKeysShardingAlgorithm 接口并提供无参数的构造器
-
-# 行表达式分片策略
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.inline.sharding-column= # 分片列名称
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.inline.algorithm-expression= # 分片算法行表达式，需符合 groovy 语法
-
-# Hint 分片策略
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.hint.algorithm-class-name= # Hint 分片算法类名称。该类需实现 HintShardingAlgorithm 接口并提供无参数的构造器
-
-# 分表策略，同分库策略
-spring.shardingsphere.sharding.tables.<logic-table-name>.table-strategy.xxx= # 省略
-
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.column= # 自增列名称，缺省表示不使用自增主键生成器
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.type= # 自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.props.<property-name>= # 属性配置，注意：使用 SNOWFLAKE 算法，需要配置 max.tolerate.time.difference.milliseconds 属性。若使用此算法生成值作分片值，建议配置 max.vibration.offset 属性
-
-spring.shardingsphere.sharding.binding-tables[0]= # 绑定表规则列表
-spring.shardingsphere.sharding.binding-tables[1]= # 绑定表规则列表
-spring.shardingsphere.sharding.binding-tables[x]= # 绑定表规则列表
-
-spring.shardingsphere.sharding.broadcast-tables[0]= # 广播表规则列表
-spring.shardingsphere.sharding.broadcast-tables[1]= # 广播表规则列表
-spring.shardingsphere.sharding.broadcast-tables[x]= # 广播表规则列表
-
-spring.shardingsphere.sharding.default-data-source-name= # 未配置分片规则的表将通过默认数据源定位
-spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略，同分库策略
-spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略，同分表策略
-spring.shardingsphere.sharding.default-key-generator.type= # 默认自增列值生成器类型，缺省将使用 org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
-spring.shardingsphere.sharding.default-key-generator.props.<property-name>= # 自增列值生成器属性配置，比如 SNOWFLAKE 算法的 max.tolerate.time.difference.milliseconds
-
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= # 详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= # 详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= # 详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= # 详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= # 详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= # 详见读写分离部分
-
-spring.shardingsphere.props.sql.show= # 是否开启 SQL 显示，默认值: false
-spring.shardingsphere.props.executor.size= # 工作线程数量，默认值: CPU 核数
-```
-
-### 读写分离
-
-#### 配置项说明
-
-```properties
-# 省略数据源配置，与数据分片一致
-
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= # 主库数据源名称
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= # 从库数据源名称列表
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= # 从库数据源名称列表
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= # 从库数据源名称列表
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= # 从库负载均衡算法类名称。该类需实现 MasterSlaveLoadBalanceAlgorithm 接口且提供无参数构造器
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= # 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若 `load-balance-algorithm-class-name` 存在则忽略该配置
-
-spring.shardingsphere.props.sql.show= # 是否开启 SQL 显示，默认值: false
-spring.shardingsphere.props.executor.size= # 工作线程数量，默认值: CPU 核数
-spring.shardingsphere.props.check.table.metadata.enabled= # 是否在启动时检查分表元数据一致性，默认值: false
-```
-
-### 数据脱敏
-
-#### 配置项说明
-
-```properties
-# 省略数据源配置，与数据分片一致
-
-spring.shardingsphere.encrypt.encryptors.<encryptor-name>.type= # 加解密器类型，可自定义或选择内置类型：MD5/AES
-spring.shardingsphere.encrypt.encryptors.<encryptor-name>.props.<property-name>= # 属性配置，注意：使用 AES 加密器，需要配置 AES 加密器的 KEY 属性：aes.key.value
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.plainColumn= # 存储明文的字段
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.cipherColumn= # 存储密文的字段
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.assistedQueryColumn= # 辅助查询字段，针对 ShardingQueryAssistedEncryptor 类型的加解密器进行辅助查询
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.encryptor= # 加密器名字
-```
-
-### 治理
-
-#### 配置项说明
-
-```properties
-# 省略数据源、数据分片、读写分离和数据脱敏配置
-
-spring.shardingsphere.orchestration.name= # 治理实例名称
-spring.shardingsphere.orchestration.overwrite= # 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-spring.shardingsphere.orchestration.registry.type= # 配置中心类型。如：zookeeper
-spring.shardingsphere.orchestration.registry.server-lists= # 连接注册中心服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-spring.shardingsphere.orchestration.registry.namespace= # 注册中心的命名空间
-spring.shardingsphere.orchestration.registry.digest= # 连接注册中心的权限令牌。缺省为不需要权限验证
-spring.shardingsphere.orchestration.registry.operation-timeout-milliseconds= # 操作超时的毫秒数，默认 500 毫秒
-spring.shardingsphere.orchestration.registry.max-retries= # 连接失败后的最大重试次数，默认 3 次
-spring.shardingsphere.orchestration.registry.retry-interval-milliseconds= # 重试间隔毫秒数，默认 500 毫秒
-spring.shardingsphere.orchestration.registry.time-to-live-seconds= # 临时节点存活秒数，默认 60 秒
-spring.shardingsphere.orchestration.registry.props= # 配置中心其它属性
-```
-
-## ShardingSphere-3.x
-
-### 数据分片
-
-#### 配置项说明
-
-```properties
-sharding.jdbc.datasource.names= # 数据源名称，多数据源以逗号分隔
-
-sharding.jdbc.datasource.<data-source-name>.type= # 数据库连接池类名称
-sharding.jdbc.datasource.<data-source-name>.driver-class-name= # 数据库驱动类名
-sharding.jdbc.datasource.<data-source-name>.url= # 数据库 url 连接
-sharding.jdbc.datasource.<data-source-name>.username= # 数据库用户名
-sharding.jdbc.datasource.<data-source-name>.password= # 数据库密码
-sharding.jdbc.datasource.<data-source-name>.xxx= # 数据库连接池的其它属性
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-
-# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-
-# 用于单分片键的标准分片场景
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.sharding-column= # 分片列名称
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.precise-algorithm-class-name= # 精确分片算法类名称，用于 = 和 IN。该类需实现 PreciseShardingAlgorithm 接口并提供无参数的构造器
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.range-algorithm-class-name= # 范围分片算法类名称，用于 BETWEEN，可选。该类需实现 RangeShardingAlgorithm 接口并提供无参数的构造器
-
-# 用于多分片键的复合分片场景
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.complex.sharding-columns= # 分片列名称，多个列以逗号分隔
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.complex.algorithm-class-name= # 复合分片算法类名称。该类需实现 ComplexKeysShardingAlgorithm 接口并提供无参数的构造器
-
-# 行表达式分片策略
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.inline.sharding-column= # 分片列名称
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.inline.algorithm-expression= # 分片算法行表达式，需符合 groovy 语法
-
-# Hint 分片策略
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.hint.algorithm-class-name= # Hint 分片算法类名称。该类需实现 HintShardingAlgorithm 接口并提供无参数的构造器
-
-# 分表策略，同分库策略
-sharding.jdbc.config.sharding.tables.<logic-table-name>.table-strategy.xxx= # 省略
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-column-name= # 自增列名称，缺省表示不使用自增主键生成器
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-class-name= # 自增列值生成器类名称，缺省表示使用默认自增列值生成器。该类需提供无参数的构造器
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.logic-index= # 逻辑索引名称，对于分表的 Oracle/PostgreSQL 数据库中 DROP INDEX XXX 语句，需要通过配置逻辑索引名称定位所执行 SQL 的真实分表
-
-sharding.jdbc.config.sharding.binding-tables[0]= # 绑定表规则列表
-sharding.jdbc.config.sharding.binding-tables[1]= # 绑定表规则列表
-sharding.jdbc.config.sharding.binding-tables[x]= # 绑定表规则列表
-
-sharding.jdbc.config.sharding.broadcast-tables[0]= # 广播表规则列表
-sharding.jdbc.config.sharding.broadcast-tables[1]= # 广播表规则列表
-sharding.jdbc.config.sharding.broadcast-tables[x]= # 广播表规则列表
-
-sharding.jdbc.config.sharding.default-data-source-name= # 未配置分片规则的表将通过默认数据源定位
-sharding.jdbc.config.sharding.default-database-strategy.xxx= # 默认数据库分片策略，同分库策略
-sharding.jdbc.config.sharding.default-table-strategy.xxx= # 默认表分片策略，同分表策略
-sharding.jdbc.config.sharding.default-key-generator-class-name= # 默认自增列值生成器类名称，缺省使用 io.shardingsphere.core.keygen.DefaultKeyGenerator。该类需实现 KeyGenerator 接口并提供无参数的构造器
-
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= # 详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= # 详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= # 详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= # 详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= # 详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= # 详见读写分离部分
-sharding.jdbc.config.config.map.key1= # 详见读写分离部分
-sharding.jdbc.config.config.map.key2= # 详见读写分离部分
-sharding.jdbc.config.config.map.keyx= # 详见读写分离部分
-
-sharding.jdbc.config.props.sql.show= # 是否开启 SQL 显示，默认值: false
-sharding.jdbc.config.props.executor.size= # 工作线程数量，默认值: CPU 核数
-
-sharding.jdbc.config.config.map.key1= # 用户自定义配置
-sharding.jdbc.config.config.map.key2= # 用户自定义配置
-sharding.jdbc.config.config.map.keyx= # 用户自定义配置
-```
-
-### 读写分离
-
-#### 配置项说明
-
-```properties
-# 省略数据源配置，与数据分片一致
-
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= # 主库数据源名称
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= # 从库数据源名称列表
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= # 从库数据源名称列表
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= # 从库数据源名称列表
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= # 从库负载均衡算法类名称。该类需实现 MasterSlaveLoadBalanceAlgorithm 接口且提供无参数构造器
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= # 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若 `load-balance-algorithm-class-name` 存在则忽略该配置
-
-sharding.jdbc.config.config.map.key1= # 用户自定义配置
-sharding.jdbc.config.config.map.key2= # 用户自定义配置
-sharding.jdbc.config.config.map.keyx= # 用户自定义配置
-
-sharding.jdbc.config.props.sql.show= # 是否开启 SQL 显示，默认值: false
-sharding.jdbc.config.props.executor.size= # 工作线程数量，默认值: CPU 核数
-sharding.jdbc.config.props.check.table.metadata.enabled= # 是否在启动时检查分表元数据一致性，默认值: false
-```
-
-### 治理
-
-#### 配置项说明
-
-```properties
-# 省略数据源、数据分片和读写分离配置
-
-sharding.jdbc.config.sharding.orchestration.name= # 数据治理实例名称
-sharding.jdbc.config.sharding.orchestration.overwrite= # 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-sharding.jdbc.config.sharding.orchestration.registry.server-lists= # 连接注册中心服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-sharding.jdbc.config.sharding.orchestration.registry.namespace= # 注册中心的命名空间
-sharding.jdbc.config.sharding.orchestration.registry.digest= # 连接注册中心的权限令牌。缺省为不需要权限验证
-sharding.jdbc.config.sharding.orchestration.registry.operation-timeout-milliseconds= # 操作超时的毫秒数，默认 500 毫秒
-sharding.jdbc.config.sharding.orchestration.registry.max-retries= # 连接失败后的最大重试次数，默认 3 次
-sharding.jdbc.config.sharding.orchestration.registry.retry-interval-milliseconds= # 重试间隔毫秒数，默认 500 毫秒
-sharding.jdbc.config.sharding.orchestration.registry.time-to-live-seconds= # 临时节点存活秒数，默认 60 秒
-```
-
-## ShardingSphere-2.x
-
-### 分库分表
-
-#### 配置项说明
-
-```properties
-# 忽略数据源配置
-
-sharding.jdbc.config.sharding.default-data-source-name= # 未配置分片规则的表将通过默认数据源定位
-sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column= # 分片列名称
-sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression= # 分片算法行表达式，需符合 groovy 语法
-sharding.jdbc.config.sharding.tables.t_order.actualDataNodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-sharding.jdbc.config.sharding.tables.t_order.tableStrategy.inline.shardingColumn= # 分片列名称
-sharding.jdbc.config.sharding.tables.t_order.tableStrategy.inline.algorithmInlineExpression= # 分片算法行表达式，需符合 groovy 语法
-sharding.jdbc.config.sharding.tables.t_order.keyGeneratorColumnName= # 自增列名称，缺省表示不使用自增主键生成器
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-column-name= # 自增列名称，缺省表示不使用自增主键生成器
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-class-name= # 默认自增列值生成器类型
-```
-
-### 读写分离
-
-#### 配置项说明
-
-```properties
-# 忽略数据源配置
-
-sharding.jdbc.config.masterslave.load-balance-algorithm-type= # 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若 `load-balance-algorithm-class-name` 存在则忽略该配置
-sharding.jdbc.config.masterslave.name= # 主节点名称
-sharding.jdbc.config.masterslave.master-data-source-name= # 主数据源的名称
-sharding.jdbc.config.masterslave.slave-data-source-names= # 从数据源的名称
-```
-
-### 编排治理
-
-#### 配置项说明
-
-```properties
-# 忽略数据源配置
-
-sharding.jdbc.config.orchestration.name= # 数据治理实例名称
-sharding.jdbc.config.orchestration.overwrite= # 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-
-sharding.jdbc.config.sharding.orchestration.name= # 数据治理实例名称
-sharding.jdbc.config.sharding.orchestration.overwrite= # 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-sharding.jdbc.config.sharding.orchestration.registry.server-lists= # 连接注册中心服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-sharding.jdbc.config.sharding.orchestration.registry.namespace= # 注册中心的命名空间
-sharding.jdbc.config.sharding.orchestration.registry.digest= # 连接注册中心的权限令牌。缺省为不需要权限验证
-sharding.jdbc.config.sharding.orchestration.registry.operation-timeout-milliseconds= # 操作超时的毫秒数，默认 500 毫秒
-sharding.jdbc.config.sharding.orchestration.registry.max-retries= # 连接失败后的最大重试次数，默认 3 次
-sharding.jdbc.config.sharding.orchestration.registry.retry-interval-milliseconds= # 重试间隔毫秒数，默认 500 毫秒
-sharding.jdbc.config.sharding.orchestration.registry.time-to-live-seconds= # 临时节点存活秒数，默认 60 秒
-
-# Zookeeper 配置
-sharding.jdbc.config.orchestration.zookeeper.namespace= # Zookeeper 注册中心的命名空间
-sharding.jdbc.config.orchestration.zookeeper.server-lists= # Zookeeper 注册中心服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-
-# Etcd 配置
-sharding.jdbc.config.orchestration.etcd.server-lists= # Etcd 注册中心服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-```
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.en.md
deleted file mode 100644
index 8c7c143460d..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.en.md
+++ /dev/null
@@ -1,506 +0,0 @@
-+++
-title = "Spring Boot Starter Configuration"
-weight = 4
-+++
-
-## 5.0.0-beta
-
-### Sharding
-
-#### Configuration Item Explanation
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-# Standard sharding table configuration
-spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only.
-
-# Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one.
-
-# For single sharding column scenario
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.<sharding-algorithm-name>.sharding-column= # Sharding column name
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.<sharding-algorithm-name>.sharding-algorithm-name= # Sharding algorithm name
-
-# For multiple sharding columns scenario
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-columns= # Sharding column names, multiple columns separated with comma
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-algorithm-name= # Sharding algorithm name
-
-# Sharding by hint
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.<sharding-algorithm-name>.sharding-algorithm-name= # Sharding algorithm name
-
-# Tables sharding strategy, same as database sharding strategy
-spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # Omitted
-
-# Auto sharding table configuraiton
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # data source names
-
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # Sharding column name
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm= # Auto sharding algorithm name
-
-# Key generator strategy configuration
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # Column name of key generator
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # Key generator name
-
-spring.shardingsphere.rules.sharding.binding-tables[0]= # Binding table name
-spring.shardingsphere.rules.sharding.binding-tables[1]= # Binding table name
-spring.shardingsphere.rules.sharding.binding-tables[x]= # Binding table name
-
-spring.shardingsphere.rules.sharding.broadcast-tables[0]= # Broadcast tables
-spring.shardingsphere.rules.sharding.broadcast-tables[1]= # Broadcast tables
-spring.shardingsphere.rules.sharding.broadcast-tables[x]= # Broadcast tables
-
-spring.shardingsphere.sharding.default-database-strategy.xxx= # Default strategy for database sharding
-spring.shardingsphere.sharding.default-table-strategy.xxx= # Default strategy for table sharding
-spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # Default Key generator strategy
-
-# Sharding algorithm configuration
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # Sharding algorithm type
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=# Sharding algorithm properties
-
-# Key generate algorithm configuration
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # Key generate algorithm type
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # Key generate algorithm properties
-```
-
-Please refer to [Built-in sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) and [Built-in keygen Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen).
-
-### Readwrite-splitting
-
-#### Configuration Item Explanation
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.primary-data-source-name= # Write data source name
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.replica-data-source-names= # Read data source names, multiple data source names separated with comma
-spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.load-balancer-name= # Load balance algorithm name
-
-# Load balance algorithm configuration
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.type= # Load balance algorithm type
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
-```
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
-
-### Encryption
-
-#### Configuration Item Explanation
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.cipher-column= # Cipher column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-column= # Assisted query column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.plain-column= # Plain column name
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.encryptor-name= # Encrypt algorithm name
-
-# Encrypt algorithm configuration
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type= # Encrypt algorithm type
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx= # Encrypt algorithm properties
-```
-
-### Shadow DB
-
-#### Configuration Item Explanation
-
-```properties
-spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage
-
-spring.shardingsphere.rules.shadow.column= # Shadow column name
-spring.shardingsphere.rules.shadow.shadow-mappings.<product-data-source-name>= # Shadow data source name
-```
-
-### Governance
-
-#### Configuration Item Explanation
-
-##### Management
-
-```properties
-spring.shardingsphere.governance.name= # Governance name
-spring.shardingsphere.governance.registry-center.type= # Governance instance type. Example:Zookeeper, etcd, Apollo, Nacos
-spring.shardingsphere.governance.registry-center.server-lists= # The list of servers that connect to governance instance, including IP and port number; use commas to separate
-spring.shardingsphere.governance.registry-center.props= # Other properties
-spring.shardingsphere.governance.overwrite= # Whether to overwrite local configurations with config center configurations; if it can, each initialization should refer to local configurations
-```
-
-### Mixed Rules
-
-#### Configuration Item Explanation
-
-```properties
-# data source configuration
-spring.shardingsphere.datasource.names= write-ds0,write-ds1,write-ds0-read0,write-ds1-read0
-
-spring.shardingsphere.datasource.write-ds0.url= # Database URL connection
-spring.shardingsphere.datasource.write-ds0.type=  # Database connection pool type name
-spring.shardingsphere.datasource.write-ds0.driver-class-name= # Database driver class name
-spring.shardingsphere.datasource.write-ds0.username= # Database username
-spring.shardingsphere.datasource.write-ds0.password= # Database password
-spring.shardingsphere.datasource.write-ds0.xxx=  # Other properties of database connection pool
-
-spring.shardingsphere.datasource.write-ds1.url= # Database URL connection
-# ...Omit specific configuration.
-
-spring.shardingsphere.datasource.write-ds0-read0.url= # Database URL connection
-# ...Omit specific configuration.
-
-spring.shardingsphere.datasource.write-ds1-read0.url= # Database URL connection
-# ...Omit specific configuration.
-
-# Sharding rules configuration
-# Databases sharding strategy
-spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=default-database-strategy-inline
-# Binding table rules configuration ,and multiple groups of binding-tables configured with arrays
-spring.shardingsphere.rules.sharding.binding-tables[0]=t_user,t_user_detail
-spring.shardingsphere.rules.sharding.binding-tables[1]= # Binding table names,multiple table name are separated by commas
-spring.shardingsphere.rules.sharding.binding-tables[x]= # Binding table names,multiple table name are separated by commas
-# Broadcast table rules configuration
-spring.shardingsphere.rules.sharding.broadcast-tables= # Broadcast table names,multiple table name are separated by commas
-
-# Table sharding strategy
-# The enumeration value of `ds_$->{0..1}` is the name of the logical data source configured with readwrite-splitting
-spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=ds_$->{0..1}.t_user_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.standard.sharding-algorithm-name=user-table-strategy-inline
-
-# Data encrypt configuration
-# Table `t_user` is the name of the logical table that uses for data sharding configuration.
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.cipher-column=username
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.username.encryptor-name=name-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.cipher-column=pwd
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.encryptor-name=pwd-encryptor
-
-# Data encrypt algorithm configuration
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.props.aes-key-value=123456abc
-
-# Key generate strategy configuration
-spring.shardingsphere.rules.sharding.tables.t_user.key-generate-strategy.column=user_id
-spring.shardingsphere.rules.sharding.tables.t_user.key-generate-strategy.key-generator-name=snowflake
-
-# Sharding algorithm configuration
-spring.shardingsphere.rules.sharding.sharding-algorithms.default-database-strategy-inline.type=INLINE
-# The enumeration value of `ds_$->{user_id % 2}` is the name of the logical data source configured with readwrite-splitting
-spring.shardingsphere.rules.sharding.sharding-algorithms.default-database-strategy-inline.algorithm-expression=ds$->{user_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.user-table-strategy-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.user-table-strategy-inline.props.algorithm-expression=t_user_$->{user_id % 2}
-
-# Key generate algorithm configuration
-spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
-
-# read query configuration
-# ds_0,ds_1 is the logical data source name of the readwrite-splitting
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.write-data-source-name=write-ds0
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.read-data-source-names=write-ds0-read0
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.load-balancer-name=read-random
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.write-data-source-name=write-ds1
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.read-data-source-names=write-ds1-read0
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.load-balancer-name=read-random
-
-# Load balance algorithm configuration
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.read-random.type=RANDOM
-```
-
-## Shardingsphere-4.x
-
-### Data Sharding
-
-#### Configuration Item Explanation
-
-```properties
-spring.shardingsphere.datasource.names= #Data source name; multiple data sources are separated by commas
-
-spring.shardingsphere.datasource.<data-source-name>.type= #Database connection pool type name
-spring.shardingsphere.datasource.<data-source-name>.driver-class-name= #Database driver class name
-spring.shardingsphere.datasource.<data-source-name>.url= #Database url connection
-spring.shardingsphere.datasource.<data-source-name>.username= #Database username
-spring.shardingsphere.datasource.<data-source-name>.password= #Database password
-spring.shardingsphere.datasource.<data-source-name>.xxx= #Other properties of database connection pool
-
-spring.shardingsphere.sharding.tables.<logic-table-name>.actual-data-nodes= #It is consisted of data source name + table name, separated by decimal points; multiple tables are separated by commas and support inline expressions; default means using existing data sources and logic table names to generate data nodes; it can be applied in broadcast tables (each database needs a same table for relevance query, dictionary table mostly) or the situation with sharding database but without sharding table (table structures of all the databases are consistent)
-
-#Database sharding strategy; default means using default database sharding strategy; it can only choose one of the following sharding strategies
-
-#It is applied in standard sharding situation of single-sharding key
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.sharding-column= #Sharding column name
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.precise-algorithm-class-name= #Precise algorithm class name, applied in = and IN; the class needs to implement PreciseShardingAlgorithm interface and provide parameter-free constructor
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.range-algorithm-class-name= #Range sharding algorithm class name, applied in BETWEEN, optional; the class should implement RangeShardingAlgorithm interface and provide parameter-free constructor
-
-#It is applied in complex sharding situations with multiple sharding keys
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.complex.sharding-columns= #Sharding column name, with multiple columns separated by commas
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.complex.algorithm-class-name= #Complex sharding algorithm class name; the class needs to implement ComplexKeysShardingAlgorithm interface and provide parameter-free constructor
-
-#Inline expression sharding strategy
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.inline.sharding-column= #Sharding column name
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.inline.algorithm-expression= #Inline expression of sharding algorithm, which needs to conform to groovy statements
-
-#Hint Sharding Strategy
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.hint.algorithm-class-name= #Hint algorithm class name;  the class needs to implement HintShardingAlgorithm interface and provide parameter-free constructor
-
-#Table sharding strategy, same as database sharding strategy
-spring.shardingsphere.sharding.tables.<logic-table-name>.table-strategy.xxx= #Omitted
-
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.column= #Auto-increment column name; default means not using auto-increment key generator
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.type= #Auto-increament key generator type; default means using default auto-increament key generator; user defined generator or internal generator (SNOWFLAKE, UUID) can both be selected
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.props.<property-name>= #Properties, Notice: when use SNOWFLAKE, `max.tolerate.time.difference.milliseconds` for `SNOWFLAKE` need to be set. To use the generated value of this algorithm as sharding value, it is recommended to configure `max.vibration.offset`
-
-spring.shardingsphere.sharding.binding-tables[0]= #Binding table rule list
-spring.shardingsphere.sharding.binding-tables[1]= #Binding table rule list
-spring.shardingsphere.sharding.binding-tables[x]= #Binding table rule list
-
-spring.shardingsphere.sharding.broadcast-tables[0]= #Broadcast table rule list
-spring.shardingsphere.sharding.broadcast-tables[1]= #Broadcast table rule list
-spring.shardingsphere.sharding.broadcast-tables[x]= #Broadcast table rule list
-
-spring.shardingsphere.sharding.default-data-source-name= #Tables without sharding rules will be located through default data source
-spring.shardingsphere.sharding.default-database-strategy.xxx= #Default database sharding strategy
-spring.shardingsphere.sharding.default-table-strategy.xxx= #Default table sharding strategy
-spring.shardingsphere.sharding.default-key-generator.type= #Default auto-increament key generator of type; it will use org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator in default; user defined generator or internal generator (SNOWFLAKE or UUID) can both be used
-spring.shardingsphere.sharding.default-key-generator.props.<property-name>= #Auto-increament key generator property configuration, such as max.tolerate.time.difference.milliseconds of SNOWFLAKE algorithm
-
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= #Refer to readwrite-splitting part for more details
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= #Refer to readwrite-splitting part for more details
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= #Refer to readwrite-splitting part for more details
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= #Refer to readwrite-splitting part for more details
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= #Refer to readwrite-splitting part for more details
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= #Refer to readwrite-splitting part for more details
-
-spring.shardingsphere.props.sql.show= #Show SQL or not; default value: false
-spring.shardingsphere.props.executor.size= #Executing thread number; default value: CPU core number
-```
-
-### Readwrite Split
-
-#### Configuration Item Explanation
-
-```properties
-#Omit data source configurations; keep it consistent with data sharding
-
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= #Data source name of master database
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= #Data source name list of slave database
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= #Data source name list of slave database
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= #Data source name list of slave database
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= #Load balance algorithm class name; the class needs to implement MasterSlaveLoadBalanceAlgorithm interface and provide parameter-free constructor
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= #Load balance algorithm class of slave database; optional value: ROUND_ROBIN and RANDOM; if there is load-balance-algorithm-class-name, the configuration can be omitted
-
-spring.shardingsphere.props.sql.show= #Show SQL or not; default value: false
-spring.shardingsphere.props.executor.size= #Executing thread number; default value: CPU core number
-spring.shardingsphere.props.check.table.metadata.enabled= #Whether to check meta-data consistency of sharding table when it initializes; default value: false
-```
-### Data Masking
-
-#### Configuration Item Explanation
-
-```properties
-#Omit data source configurations; keep it consistent with data sharding
-
-spring.shardingsphere.encrypt.encryptors.<encryptor-name>.type= #Type of encryptor, use user-defined ones or built-in ones, e.g. MD5/AES  
-spring.shardingsphere.encrypt.encryptors.<encryptor-name>.props.<property-name>= #Properties, Notice: when use AES encryptor, `aes.key.value` for AES encryptor need to be set
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.plainColumn= #Plain column name
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.cipherColumn= #Cipher column name 
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.assistedQueryColumn= #AssistedColumns for query, when use ShardingQueryAssistedEncryptor, it can help query encrypted data
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.encryptor= #Encryptor name
-```
-
-### Orchestration
-
-#### Configuration Item Explanation
-
-```properties
-#Omit data source, data sharding, readwrite split and data masking configurations
-
-spring.shardingsphere.orchestration.name= #Orchestration instance name
-spring.shardingsphere.orchestration.overwrite= #Whether to overwrite local configurations with registry center configurations; if it can, each initialization should refer to local configurations
-spring.shardingsphere.orchestration.registry.type= #Registry center type. Example:zookeeper
-spring.shardingsphere.orchestration.registry.server-lists= #The list of servers that connect to registry center, including IP and port number; use commas to separate
-spring.shardingsphere.orchestration.registry.namespace= #Registry center namespace
-spring.shardingsphere.orchestration.registry.digest= #The token that connects to the registry center; default means there is no need for authentication
-spring.shardingsphere.orchestration.registry.operation-timeout-milliseconds= #The millisecond number for operation timeout; default value: 500 milliseconds
-spring.shardingsphere.orchestration.registry.max-retries= #Maximum retry time after failing; default value: 3 times
-spring.shardingsphere.orchestration.registry.retry-interval-milliseconds= #Interval time to retry; default value: 500 milliseconds
-spring.shardingsphere.orchestration.registry.time-to-live-seconds= #Living time of temporary nodes; default value: 60 seconds
-spring.shardingsphere.orchestration.registry.props= #Customize registry center props.
-```
-
-## shardingsphere-3.x
-
-### Sharding
-
-#### Configuration Item Explanation
-
-```properties
-sharding.jdbc.datasource.names= #Names of data sources. Multiple data sources separated with comma
-
-sharding.jdbc.datasource.<data-source-name>.type= #Class name of data source pool
-sharding.jdbc.datasource.<data-source-name>.driver-class-name= #Class name of database driver
-sharding.jdbc.datasource.<data-source-name>.url= #Database URL
-sharding.jdbc.datasource.<data-source-name>.username= #Database username
-sharding.jdbc.datasource.<data-source-name>.password= #Database password
-sharding.jdbc.datasource.<data-source-name>.xxx= #Other properties for data source pool
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.actual-data-nodes= #Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only. Example: ds${0..7}.tbl${0..7}
-
-#Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one.
-
-#Standard sharding scenario for single sharding column
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.sharding-column= #Name of sharding column
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.precise-algorithm-class-name= #Precise algorithm class name used for `=` and `IN`. This class need to implements PreciseShardingAlgorithm, and require a no argument constructor
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.range-algorithm-class-name= #Range algorithm class name used for `BETWEEN`. This class need to implements RangeShardingAlgorithm, and require a no argument constructor
-
-#Complex sharding scenario for multiple sharding columns
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.complex.sharding-columns= #Names of sharding columns. Multiple columns separated with comma
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.complex.algorithm-class-name= #Complex sharding algorithm class name. This class need to implements ComplexKeysShardingAlgorithm, and require a no argument constructor
-
-#Inline expression sharding scenario for si-gle s-arding column
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.inline.sharding-column= #Name of sharding column
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.inline.algorithm-expression= #Inline expression for sharding algorithm
-
-#Hint sharding strategy
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.hint.algorithm-class-name= #Hint sharding algorithm class name. This class need to implements HintShardingAlgorithm, and require a no argument constructor
-
-#Tables sharding strategy, Same as database- shar-ing strategy
-sharding.jdbc.config.sharding.tables.<logic-table-name>.table-strategy.xxx= #Ignore
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-column-name= #Column name of key generator, do not use Key generator if absent
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-class-name= #Key generator, use default key generator if absent. This class need to implements KeyGenerator, and require a no argument constructor
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.logic-index= #Name if logic index. If use `DROP INDEX XXX` SQL in Oracle/PostgreSQL, This property needs to be set for finding the actual tables
-
-sharding.jdbc.config.sharding.binding-tables[0]= #Binding table rule configurations
-sharding.jdbc.config.sharding.binding-tables[1]= #Binding table rule configurations
-sharding.jdbc.config.sharding.binding-tables[x]= #Binding table rule configurations
-
-sharding.jdbc.config.sharding.broadcast-tables[0]= #Broadcast table rule configurations
-sharding.jdbc.config.sharding.broadcast-tables[1]= #Broadcast table rule configurations
-sharding.jdbc.config.sharding.broadcast-tables[x]= #Broadcast table rule configurations
-
-sharding.jdbc.config.sharding.default-data-source-name= #If table not configure at table rule, will route to defaultDataSourceName
-sharding.jdbc.config.sharding.default-database-strategy.xxx= #Default strategy for sharding databases, same as databases sharding strategy
-sharding.jdbc.config.sharding.default-table-strategy.xxx= #Default strategy for sharding tables, same as tables sharding strategy
-sharding.jdbc.config.sharding.default-key-generator-class-name= #Default key generator class name, default value is `io.shardingsphere.core.keygen.DefaultKeyGenerator`. This class need to implements KeyGenerator, and require a no argument constructor
-
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= #more details can reference readwrite-splitting part
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= #more details can reference readwrite-splitting part
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= #more details can reference readwrite-splitting part
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= #more details can reference readwrite-splitting part
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= #more details can reference readwrite-splitting part
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= #more details can reference readwrite-splitting part
-sharding.jdbc.config.config.map.key1= #more details can reference Readwrite-splitting part
-sharding.jdbc.config.config.map.key2= #more details can reference Readwrite-splitting part
-sharding.jdbc.config.config.map.keyx= #more details can reference Readwrite-splitting part
-
-sharding.jdbc.config.props.sql.show= #To show SQLS or not, default value: false
-sharding.jdbc.config.props.executor.size= #The number of working threads, default value: CPU count
-
-sharding.jdbc.config.config.map.key1= #User-defined arguments
-sharding.jdbc.config.config.map.key2= #User-defined arguments
-sharding.jdbc.config.config.map.keyx= #User-defined arguments
-```
-
-### Readwrite-splitting
-
-#### Configuration Item Explanation
-
-```properties
-#Ignore data sources configuration, same as sharding
-
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= #Name of master data source
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]=  #Name of master data source
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= #Names of Slave data sources
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= #Names of Slave data sources
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= #Load balance algorithm class name. This class need to implements MasterSlaveLoadBalanceAlgorithm, and require a no argument constructor 
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= #Load balance algorithm type, values should be: `ROUND_ROBIN` or `RANDOM`. Ignore if `load-balance-algorithm-class-name` is present 
-
-sharding.jdbc.config.config.map.key1= #User-defined arguments
-sharding.jdbc.config.config.map.key2= #User-defined arguments
-sharding.jdbc.config.config.map.keyx= #User-defined arguments
-
-sharding.jdbc.config.props.sql.show= #To show SQLS or not, default value: false
-sharding.jdbc.config.props.executor.size= #The number of working threads, default value: CPU count
-sharding.jdbc.config.props.check.table.metadata.enabled= #Check the metadata consistency of all the tables, default value: false
-```
-
-### Orchestration
-
-#### Configuration Item Explanation
-
-```properties
-#Ignore data sources, sharding and readwrite splitting configuration
-
-sharding.jdbc.config.sharding.orchestration.name= #Name of orchestration instance
-sharding.jdbc.config.sharding.orchestration.overwrite= #Use local configuration to overwrite registry center or not
-sharding.jdbc.config.sharding.orchestration.registry.server-lists= #Rgistry servers list, multiple split as comma. Example: host1:2181,host2:2181
-sharding.jdbc.config.sharding.orchestration.registry.namespace= #Namespace of registry
-sharding.jdbc.config.sharding.orchestration.registry.digest= #Digest for registry. Default is not need digest.
-sharding.jdbc.config.sharding.orchestration.registry.operation-timeout-milliseconds= #Operation timeout time in milliseconds, default value is 500 milliseconds
-sharding.jdbc.config.sharding.orchestration.registry.max-retries= #Max number of times to retry, default value is 3
-sharding.jdbc.config.sharding.orchestration.registry.retry-interval-milliseconds= #Time interval in milliseconds on each retry, default value is 500 milliseconds
-sharding.jdbc.config.sharding.orchestration.registry.time-to-live-seconds= #Time to live in seconds of ephemeral keys, default value is 60 seconds
-```
-
-## Shardingsphere-2.x
-
-### Sharding
-
-#### Configuration Item Explanation
-
-```properties
-# Ignore data sources configuration
-sharding.jdbc.config.sharding.default-data-source-name= #Tables without sharding rules will be located through default data source
-sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column= #Name of database sharding column
-sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression= #Inline expression for database sharding algorithm
-sharding.jdbc.config.sharding.tables.t_order.actualDataNodes= #Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only. Example: ds${0..7}.tbl${0..7}
-sharding.jdbc.config.sharding.tables.t_order.tableStrategy.inline.shardingColumn= #Name of table sharding column
-sharding.jdbc.config.sharding.tables.t_order.tableStrategy.inline.algorithmInlineExpression= #Inline expression for table sharding algorithm
-sharding.jdbc.config.sharding.tables.t_order.keyGeneratorColumnName= #Column name of key generator, do not use Key generator if absent
-
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-column-name= #Column name of key generator, do not use Key generator if absent
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-class-name= #Key generator, use default key generator if absent. This class need to implements KeyGenerator, and require a no argument constructor
-
-```
-
-### Readwrite-splitting
-
-#### Configuration Item Explanation
-
-```properties
-# Ignore data sources configuration
-
-sharding.jdbc.config.masterslave.load-balance-algorithm-type= #Load balance algorithm class of slave database; optional value: ROUND_ROBIN and RANDOM; if there is load-balance-algorithm-class-name, the configuration can be omitted
-sharding.jdbc.config.masterslave.name= # master name
-sharding.jdbc.config.masterslave.master-data-source-name= #Name of master data source
-sharding.jdbc.config.masterslave.slave-data-source-names= #Name of master data source
-```
-
-### Orchestration
-
-#### Configuration Item Explanation
-
-```properties
-# Ignore data sources configuration
-sharding.jdbc.config.orchestration.name= #Name of orchestration instance
-sharding.jdbc.config.orchestration.overwrite= #Use local configuration to overwrite registry center or not
-
-
-sharding.jdbc.config.sharding.orchestration.name= #Name of orchestration instance
-sharding.jdbc.config.sharding.orchestration.overwrite= #Use local configuration to overwrite registry center or not
-sharding.jdbc.config.sharding.orchestration.registry.server-lists= #Rgistry servers list, multiple split as comma. Example: host1:2181,host2:2181
-sharding.jdbc.config.sharding.orchestration.registry.namespace= #Namespace of registry
-sharding.jdbc.config.sharding.orchestration.registry.digest= #Digest for registry. Default is not need digest.
-sharding.jdbc.config.sharding.orchestration.registry.operation-timeout-milliseconds= #Operation timeout time in milliseconds, default value is 500 milliseconds
-sharding.jdbc.config.sharding.orchestration.registry.max-retries= #Max number of times to retry, default value is 3
-sharding.jdbc.config.sharding.orchestration.registry.retry-interval-milliseconds= #Time interval in milliseconds on each retry, default value is 500 milliseconds
-sharding.jdbc.config.sharding.orchestration.registry.time-to-live-seconds= #Time to live in seconds of ephemeral keys, default value is 60 seconds
-
-# The configuration in Zookeeper
-sharding.jdbc.config.orchestration.zookeeper.namespace= #Namespace of zookeeper registry
-sharding.jdbc.config.orchestration.zookeeper.server-lists= #Zookeeper Rgistry servers list, multiple split as comma. Example: host1:2181,host2:2181
-
-# The configuration in Etcd
-sharding.jdbc.config.orchestration.etcd.server-lists= #Etcd Rgistry servers list, multiple split as comma. Example: host1:2181,host2:2181
-```
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.cn.md
deleted file mode 100644
index 9b2b800c7c2..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.cn.md
+++ /dev/null
@@ -1,917 +0,0 @@
-+++
-title = "Spring 命名空间配置"
-weight = 3
-
-+++
-
-## ShardingSphere-5.0.0-beta
-
-### 数据分片
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.0.0.xsd)
-
-\<sharding:rule />
-
-| *名称*                                | *类型* | *说明*              |
-| ------------------------------------- | ------ | ------------------ |
-| id                                    | 属性   | Spring Bean Id     |
-| table-rules (?)                       | 标签   | 分片表规则配置       |
-| auto-table-rules (?)                  | 标签   | 自动化分片表规则配置  |
-| binding-table-rules (?)               | 标签   | 绑定表规则配置        |
-| broadcast-table-rules (?)             | 标签   | 广播表规则配置        |
-| default-database-strategy-ref (?)     | 属性   | 默认分库策略名称      |
-| default-table-strategy-ref (?)        | 属性   | 默认分表策略名称      |
-| default-key-generate-strategy-ref (?) | 属性   | 默认分布式序列策略名称 |
-
-\<sharding:table-rules />
-
-| *名称*                  | *类型* | *说明*       |
-| ---------------------- | ------ | ------------ |
-| table-rule (+) | 标签   | 分片表规则配置 |
-
-\<sharding:table-rule />
-
-| *名称*                     | *类型* | *说明*          |
-| ------------------------- | ----- | --------------- |
-| logic-table               | 属性  | 逻辑表名称        |
-| actual-data-nodes         | 属性  | 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况 |
-| database-strategy-ref     | 属性  | 标准分片表分库策略名称      |
-| table-strategy-ref        | 属性  | 标准分片表分表策略名称      |
-| key-generate-strategy-ref | 属性  | 分布式序列策略名称 |
-
-\<auto-table-rules/>
-
-| *名称*          | *类型* | *说明*                 |
-| -------------- | ------ | --------------------- |
-| auto-table-rule (+) | 标签   | 自动化分片表规则配置 |
-
-\<auto-table-rule/>
-| *名称*                     | *类型* | *说明*          |
-| ------------------------- | ----- | --------------- |
-| logic-table               | 属性  | 逻辑表名称        |
-| actual-data-sources       | 属性  | 自动分片表数据源名 |
-| sharding-strategy-ref     | 属性  | 自动分片表策略名称 |
-| key-generate-strategy-ref | 属性  | 分布式序列策略名称 |
-
-\<sharding:binding-table-rules />
-
-| *名称*                  | *类型* | *说明*       |
-| ---------------------- | ------ | ------------ |
-| binding-table-rule (+) | 标签   | 绑定表规则配置 |
-
-\<sharding:binding-table-rule />
-
-| *名称*       | *类型*  | *说明*                   |
-| ------------ | ------ | ------------------------ |
-| logic-tables | 属性   | 绑定表名称，多个表以逗号分隔 |
-
-\<sharding:broadcast-table-rules />
-
-| *名称*                  | *类型* | *说明*       |
-| ---------------------- | ------ | ------------ |
-| broadcast-table-rule (+) | 标签   | 广播表规则配置 |
-
-\<sharding:broadcast-table-rule />
-
-| *名称* | *类型* | *说明*   |
-| ------ | ----- | -------- |
-| table  | 属性  | 广播表名称 |
-
-\<sharding:standard-strategy />
-
-| *名称*          | *类型* | *说明*          |
-| --------------- | ----- | -------------- |
-| id              | 属性   | 标准分片策略名称 |
-| sharding-column | 属性   | 分片列名称      |
-| algorithm-ref   | 属性   | 分片算法名称    |
-
-\<sharding:complex-strategy />
-
-| *名称*           | *类型* | *说明*                    |
-| ---------------- | ----- | ------------------------- |
-| id               | 属性   | 复合分片策略名称            |
-| sharding-columns | 属性   | 分片列名称，多个列以逗号分隔 |
-| algorithm-ref    | 属性   | 分片算法名称               |
-
-\<sharding:hint-strategy />
-
-| *名称*        | *类型* | *说明*           |
-| ------------- | ----- | ---------------- |
-| id            | 属性   | Hint 分片策略名称 |
-| algorithm-ref | 属性   | 分片算法名称      |
-
-\<sharding:none-strategy />
-
-| *名称* | *类型* | *说明*      |
-| ------ | ----- | ----------- |
-| id     | 属性   | 分片策略名称 |
-
-\<sharding:key-generate-strategy />
-
-| *名称*        | *类型* | *说明*           |
-| ------------- | ----- | ---------------- |
-| id            | 属性   | 分布式序列策略名称 |
-| column        | 属性   | 分布式序列列名称   |
-| algorithm-ref | 属性   | 分布式序列算法名称 |
-
-\<sharding:sharding-algorithm />
-
-| *名称*    | *类型* | *说明*        |
-| --------- | ----- | ------------- |
-| id        | 属性  | 分片算法名称    |
-| type      | 属性  | 分片算法类型    |
-| props (?) | 标签  | 分片算法属性配置 |
-
-\<sharding:key-generate-algorithm />
-
-| *名称*    | *类型* | *说明*              |
-| --------- | ----- | ------------------ |
-| id        | 属性  | 分布式序列算法名称    |
-| type      | 属性  | 分布式序列算法类型    |
-| props (?) | 标签  | 分布式序列算法属性配置 |
-
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen)。
-
-#### 注意事项
-
-行表达式标识符可以使用 `${...}` 或 `$->{...}`，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 `$->{...}`。
-
-### 读写分离
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.0.0.xsd)
-
-\<readwrite-splitting:rule />
-
-| *名称*                | *类型* | *说明*           |
-| -------------------- | ------ | --------------- |
-| id                   | 属性   | Spring Bean Id   |
-| data-source-rule (+) | 标签   | 读写分离数据源规则配置 |
-
-\<readwrite-splitting:data-source-rule />
-
-| *名称*                          | *类型* | *说明*                               |
-| ------------------------------- | ------ | ------------------------------------ |
-| id                              | 属性   | 读写分离数据源规则名称               |
-| auto-aware-data-source-name (?) | 属性   | 自动感知数据源名称                   |
-| write-data-source-name          | 属性   | 写数据源名称                         |
-| read-data-source-names          | 属性   | 读数据源名称，多个读数据源用逗号分隔 |
-| load-balance-algorithm-ref (?)  | 属性   | 负载均衡算法名称                     |
-
-\<readwrite-splitting:load-balance-algorithm />
-
-| *名称*    | *类型* | *说明*            |
-| --------- | ----- | ----------------- |
-| id        | 属性  | 负载均衡算法名称    |
-| type      | 属性  | 负载均衡算法类型    |
-| props (?) | 标签  | 负载均衡算法属性配置 |
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
-
-### 数据加密
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.0.0.xsd)
-
-\<encrypt:rule />
-
-| *名称*                     | *类型* | *说明*                                               | *默认值* |
-| ------------------------- | ----- | ---------------------------------------------------- | ------- |
-| id                        | 属性  | Spring Bean Id                                        |         |
-| queryWithCipherColumn (?) | 属性  | 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 | true   |
-| table (+)                 | 标签  | 加密表配置                                              |         |
-
-\<encrypt:table />
-
-| *名称*     | *类型* | *说明*    |
-| ---------- | ----- | -------- |
-| name       | 属性  | 加密表名称 |
-| column (+) | 标签  | 加密列配置 |
-
-\<encrypt:column />
-
-| *名称*                    | *类型* | *说明*       |
-| ------------------------- | ----- | ------------ |
-| logic-column              | 属性  | 加密列逻辑名称 |
-| cipher-column             | 属性  | 加密列名称    |
-| assisted-query-column (?) | 属性  | 查询辅助列名称 |
-| plain-column (?)          | 属性  | 原文列名称     |
-| encrypt-algorithm-ref     | 属性  | 加密算法名称   |
-
-\<encrypt:encrypt-algorithm />
-
-| *名称*    | *类型* | *说明*         |
-| --------- | ----- | ------------- |
-| id        | 属性  | 加密算法名称    |
-| type      | 属性  | 加密算法类型    |
-| props (?) | 标签  | 加密算法属性配置 |
-
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
-
-### 影子库
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/shadow/shadow-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/shadow/shadow-5.0.0.xsd)
-
-\<shadow:rule />
-
-| *名称*      | *类型* | *说明*                          |
-| ----------- | ----- | ------------------------------- |
-| id          | 属性  | Spring Bean Id                  |
-| column      | 属性  | 影子字段名称                      |
-| mappings(?) | 标签  | 生产数据库与影子数据库的映射关系配置 |
-
-\<shadow:mapping />
-
-| *名称*                   | *类型* | *说明*                          |
-| ------------------------ | ----- | ------------------------------- |
-| product-data-source-name | 属性  | 生产数据库名称                    |
-| shadow-data-source-name  | 属性  | 影子数据库名称                    |
-
-### 分布式治理
-
-#### 配置项说明
-
-命名空间: [http://shardingsphere.apache.org/schema/shardingsphere/governance/governance-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/governance/governance-5.0.0.xsd)
-
-\<governance:reg-center />
-
-| *名称*             | *类型* | *说明*                                                                     |
-| ----------------- | ------ | ------------------------------------------------------------------------- |
-| id                | 属性   | 注册中心实例名称                                                              |
-| database-name (?)   | 属性   | JDBC 数据源别名，该参数可实现 JDBC 与 PROXY 共享配置                                  |
-| type              | 属性   | 注册中心类型。如：ZooKeeper, etcd                                              |
-| namespace         | 属性   | 注册中心命名空间                                                              |
-| server-lists      | 属性   | 注册中心服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181 |
-| props (?)         | 属性   | 配置本实例需要的其他参数，例如 ZooKeeper 的连接参数等                               |
-
-## ShardingSphere-4.x
-
-### 数据分片
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-4.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-4.0.0.xsd)
-
-\<sharding:data-source />
-
-| *名称*        | *类型* | *说明*           |
-| ------------- | ------ | --------------- |
-| id            | 属性   | Spring Bean Id   |
-| sharding-rule | 标签   | 数据分片配置规则 |
-| props (?)     | 标签   | 属性配置         |
-
-\<sharding:sharding-rule />
-
-| *名称*                            | *类型* | *说明*                                                       |
-| --------------------------------- | ------ | ------------------------------------------------------------ |
-| data-source-names                 | 属性   | 数据源 Bean 列表，多个 Bean 以逗号分隔                           |
-| table-rules                       | 标签   | 表分片规则配置对象                                           |
-| binding-table-rules (?)           | 标签   | 绑定表规则列表                                               |
-| broadcast-table-rules (?)         | 标签   | 广播表规则列表                                               |
-| default-data-source-name (?)      | 属性   | 未配置分片规则的表将通过默认数据源定位                       |
-| default-database-strategy-ref (?) | 属性   | 默认数据库分片策略，对应 \<sharding:xxx-strategy> 中的策略 Id，缺省表示不分库 |
-| default-table-strategy-ref (?)    | 属性   | 默认表分片策略，对应 \<sharding:xxx-strategy> 中的策略 Id，缺省表示不分表 |
-| default-key-generator-ref (?)     | 属性   | 默认自增列值生成器引用，缺省使用 <span style='background: #FFF7DD'>org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator</span> |
-| encrypt-rule (?)                  | 标签   | 脱敏规则                                                     |
-
-\<sharding:table-rules />
-
-| *名称*         | *类型* | *说明*             |
-| -------------- | ------ | ------------------ |
-| table-rule (+) | 标签   | 表分片规则配置对象 |
-
-\<sharding:table-rule />
-
-| *名称*                    | *类型* | *说明*                                                       |
-| ------------------------- | ------ | ------------------------------------------------------------ |
-| logic-table               | 属性   | 逻辑表名称                                                   |
-| actual-data-nodes (?)     | 属性   | 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况 |
-| database-strategy-ref (?) | 属性   | 数据库分片策略，对应 \<sharding:xxx-strategy> 中的策略 Id，缺省表示使用 <sharding:sharding-rule /> 配置的默认数据库分片策略 |
-| table-strategy-ref (?)    | 属性   | 表分片策略，对应 \<sharding:xxx-strategy> 中的策略 Id，缺省表示使用 \<sharding:sharding-rule /> 配置的默认表分片策略 |
-| key-generator-ref (?)     | 属性   | 自增列值生成器引用，缺省表示使用默认自增列值生成器           |
-
-\<sharding:binding-table-rules />
-
-| *名称*                 | *类型* | *说明*     |
-| ---------------------- | ------ | ---------- |
-| binding-table-rule (+) | 标签   | 绑定表规则 |
-
-\<sharding:binding-table-rule />
-
-| *名称*       | *类型* | *说明*                             |
-| ------------ | ------ | ---------------------------------- |
-| logic-tables | 属性   | 绑定规则的逻辑表名，多表以逗号分隔 |
-
-\<sharding:broadcast-table-rules />
-
-| *名称*                   | *类型* | *说明*     |
-| ------------------------ | ------ | ---------- |
-| broadcast-table-rule (+) | 标签   | 广播表规则 |
-
-
-\<sharding:broadcast-table-rule />
-
-| *名称*                   | *类型* | *说明*     |
-| ------------------------ | ------ | ---------- |
-| table | 属性   | 广播规则的表名 |
-
-\<sharding:standard-strategy />
-
-| *名称*                  | *类型* | *说明*                                                       |
-| ----------------------- | ------ | ------------------------------------------------------------ |
-| id                      | 属性   | Spring Bean Id                                               |
-| sharding-column         | 属性   | 分片列名称                                                   |
-| precise-algorithm-ref   | 属性   | 精确分片算法引用，用于 = 和 IN。该类需实现 PreciseShardingAlgorithm 接口 |
-| range-algorithm-ref (?) | 属性   | 范围分片算法引用，用于 BETWEEN。该类需实现 RangeShardingAlgorithm 接口 |
-
-\<sharding:complex-strategy />
-
-| *名称*                   | *类型* | *说明*     |
-| ------------------------ | ------ | ---------- |
-| id | 属性   | Spring Bean Id |
-| sharding-columns | 属性 | 分片列名称，多个列以逗号分隔 |
-| algorithm-ref | 属性 | 复合分片算法引用。该类需实现 ComplexKeysShardingAlgorithm 接口 |
-
-\<sharding:inline-strategy />
-
-| *名称*               | *类型* | *说明*                             |
-| -------------------- | ------ | ---------------------------------- |
-| id                   | 属性   | Spring Bean Id                     |
-| sharding-column      | 属性   | 分片列名称                         |
-| algorithm-expression | 属性   | 分片算法行表达式，需符合groovy语法 |
-
-\<sharding:hint-database-strategy />
-
-| *名称*        | *类型* | *说明*                                            |
-| ------------- | ------ | ------------------------------------------------- |
-| id            | 属性   | Spring Bean Id                                    |
-| algorithm-ref | 属性   | Hint 分片算法。该类需实现 HintShardingAlgorithm 接口 |
-
-\<sharding:none-strategy />
-
-| *名称*               | *类型* | *说明*                             |
-| -------------------- | ------ | ---------------------------------- |
-| id                   | 属性   | Spring Bean Id                     |
-
-\<sharding:key-generator />
-
-| *名称*    | *类型* | *说明*                                                     |
-| --------- | ------ | ---------------------------------------------------------- |
-| column    | 属性   | 自增列名称                                                 |
-| type      | 属性   | 自增列值生成器类型，可自定义或选择内置类型：SNOWFLAKE/UUID |
-| props-ref | 属性   | 自增列值生成器的属性配置引用                               |
-
-##### Properties
-
-属性配置项，可以为以下自增列值生成器的属性。
-
-###### SNOWFLAKE
-
-| *名称*                                        | *类型* | *说明*                                                       |
-| --------------------------------------------- | ------ | ------------------------------------------------------------ |
-| max.tolerate.time.difference.milliseconds (?) | long   | 最大容忍时钟回退时间，单位：毫秒。默认为 10 毫秒               |
-| max.vibration.offset (?)                      | int    | 最大抖动上限值，范围[0, 4096)，默认为 1。注：若使用此算法生成值作分片值，建议配置此属性。此算法在不同毫秒内所生成的 key 取模 2^n (2^n一般为分库或分表数) 之后结果总为 0 或 1。为防止上述分片问题，建议将此属性值配置为 (2^n)-1 |
-
-\<sharding:encrypt-rule />
-
-| *名称*                  | *类型* | *说明*     |
-| ----------------------- | ------ | ---------- |
-| encrypt:encrypt-rule (?) | 标签   | 加解密规则 |
-
-<sharding:props />
-
-| *名称*                  | *类型* | *说明*     |
-| ----------------------- | ------ | ---------- |
-| sql.show (?) | 属性   | 是否开启SQL显示，默认值: false |
-| executor.size (?) | 属性   | 工作线程数量，默认值: CPU 核数 |
-| max.connections.size.per.query (?) | 属性   | 每个物理数据库为每次查询分配的最大连接数量。默认值: 1 |
-| check.table.metadata.enabled (?) | 属性   | 是否在启动时检查分表元数据一致性，默认值: false |
-| query.with.cipher.column (?) | 属性   | 当存在明文列时，是否使用密文列查询，默认值: true |
-
-### 读写分离
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd](http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd)
-
-\<master-slave:data-source />
-
-| *名称*                  | *类型* | *说明*                                                       |
-| ----------------------- | ------ | ------------------------------------------------------------ |
-| id                      | 属性   | Spring Bean Id                                               |
-| master-data-source-name | 属性   | 主库数据源 Bean Id                                            |
-| slave-data-source-names | 属性   | 从库数据源 Bean Id 列表，多个 Bean 以逗号分隔                    |
-| strategy-ref (?)        | 属性   | 从库负载均衡算法引用。该类需实现 MasterSlaveLoadBalanceAlgorithm 接口 |
-| strategy-type (?)       | 属性   | 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若 <span style='background: #FFF7DD'>strategy-ref</span> 存在则忽略该配置 |
-| props (?)               | 标签   | 属性配置                                                     |
-
-\<master-slave:props />
-
-| *名称*                             | *类型* | *说明*                                                |
-| ---------------------------------- | ------ | ----------------------------------------------------- |
-| sql.show (?)                       | 属性   | 是否开启SQL显示，默认值: false                        |
-| executor.size (?)                  | 属性   | 工作线程数量，默认值: CPU核数                         |
-| max.connections.size.per.query (?) | 属性   | 每个物理数据库为每次查询分配的最大连接数量。默认值: 1 |
-| check.table.metadata.enabled (?)   | 属性   | 是否在启动时检查分表元数据一致性，默认值: false       |
-
-\<master-slave:load-balance-algorithm />
-4.0.0-RC2 版本 添加
-
-| *名称*        | *类型* | *说明*                                                    |
-| ------------- | ------ | --------------------------------------------------------- |
-| id            | 属性   | Spring Bean Id                                            |
-| type (?)      | 属性   | 负载均衡算法类型，‘RANDOM'或’ROUND_ROBIN’，支持自定义拓展 |
-| props-ref (?) | 属性   | 负载均衡算法配置参数                                      |
-
-### 数据脱敏
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd](http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd)
-
-\<encrypt:data-source />
-
-| *名称*           | *类型* | *说明*            |
-| ---------------- | ------ | ----------------- |
-| id               | 属性   | Spring Bean Id    |
-| data-source-name | 属性   | 加密数据源Bean Id |
-| props (?)        | 标签   | 属性配置          |
-
-\<encrypt:encryptors />
-
-| *名称*       | *类型* | *说明*     |
-| ------------ | ------ | ---------- |
-| encryptor (+) | 标签   | 加密器配置 |
-
-\<encrypt:encryptor />
-
-| *名称*    | *类型* | *说明*                                                       |
-| --------- | ------ | ------------------------------------------------------------ |
-| id        | 属性   | 加密器的名称                                                 |
-| type      | 属性   | 加解密器类型，可自定义或选择内置类型：MD5/AES                |
-| props-ref | 属性   | 属性配置，注意：使用AES加密器，需要配置AES加密器的KEY属性：aes.key.value |
-
-\<encrypt:tables />
-
-| *名称*       | *类型* | *说明*     |
-| ------------ | ------ | ---------- |
-| table (+) | 标签   | 加密表配置 |
-
-\<encrypt:table />
-
-| *名称*       | *类型* | *说明*     |
-| ------------ | ------ | ---------- |
-| column (+) | 标签   | 加密列配置 |
-
-\<encrypt:column />
-
-| *名称*                 | *类型* | *说明*                                                       |
-| ---------------------- | ------ | ------------------------------------------------------------ |
-| logic-column           | 属性   | 逻辑列名                                                     |
-| plain-column           | 属性   | 存储明文的字段                                               |
-| cipher-column          | 属性   | 存储密文的字段                                               |
-| assisted-query-columns | 属性   | 辅助查询字段，针对ShardingQueryAssistedEncryptor类型的加解密器进行辅助查询 |
-
-\<encrypt:props />
-
-| *名称*                       | *类型* | *说明*                                           |
-| ---------------------------- | ------ | ------------------------------------------------ |
-| sql.show (?)                 | 属性   | 是否开启SQL显示，默认值: false                   |
-| query.with.cipher.column (?) | 属性   | 当存在明文列时，是否使用密文列查询，默认值: true |
-
-### 治理
-
-#### 数据分片 + 治理
-
-##### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:sharding-data-source />
-
-| *名称*              | *类型* | *说明*                                                       |
-| ------------------- | ------ | ------------------------------------------------------------ |
-| id                  | 属性   | ID                                                           |
-| data-source-ref (?) | 属性   | 被治理的数据库 id                                             |
-| registry-center-ref | 属性   | 注册中心 id                                                   |
-| overwrite           | 属性   | 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准。缺省为不覆盖 |
-
-#### 读写分离 + 治理
-
-##### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:master-slave-data-source />
-
-| *名称*              | *类型* | *说明*                                                       |
-| ------------------- | ------ | ------------------------------------------------------------ |
-| id                  | 属性   | ID                                                           |
-| data-source-ref (?) | 属性   | 被治理的数据库 id                                             |
-| registry-center-ref | 属性   | 注册中心 id                                                   |
-| overwrite           | 属性   | 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准。缺省为不覆盖 |
-
-#### 数据脱敏 + 治理
-
-##### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:encrypt-data-source />
-
-| *名称*              | *类型* | *说明*                                                       |
-| ------------------- | ------ | ------------------------------------------------------------ |
-| id                  | 属性   | ID                                                           |
-| data-source-ref (?) | 属性   | 被治理的数据库 id                                             |
-| registry-center-ref | 属性   | 注册中心 id                                                   |
-| overwrite           | 属性   | 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准。缺省为不覆盖 |
-
-#### 治理注册中心
-
-##### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:registry-center />
-
-| *名称*                             | *类型* | *说明*                                                       |
-| ---------------------------------- | ------ | ------------------------------------------------------------ |
-| id                                 | 属性   | 注册中心的Spring Bean Id                                     |
-| type                               | 属性   | 注册中心类型。如：zookeeper                                  |
-| server-lists                       | 属性   | 连接注册中心服务器的列表，包括IP地址和端口号，多个地址用逗号分隔。如: host1:2181,host2:2181 |
-| namespace (?)                      | 属性   | 注册中心的命名空间                                           |
-| digest (?)                         | 属性   | 连接注册中心的权限令牌。缺省为不需要权限验证                 |
-| operation-timeout-milliseconds (?) | 属性   | 操作超时的毫秒数，默认 500 毫秒                                |
-| max-retries (?)                    | 属性   | 连接失败后的最大重试次数，默认 3 次                            |
-| retry-interval-milliseconds (?)    | 属性   | 重试间隔毫秒数，默认 500 毫秒                                  |
-| time-to-live-seconds (?)           | 属性   | 临时节点存活秒数，默认 60 秒                                   |
-| props-ref (?)                      | 属性   | 配置中心其它属性                                             |
-
-## ShardingSphere-3.x
-
-### 数据分片
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd)
-
-\<sharding:data-source />
-
-| *名称*              | *类型* | *说明*                                                       |
-| ------------------- | ------ | ------------------------------------------------------------ |
-| id                  | 属性   | Spring Bean Id                                                           |
-| sharding-rule | 标签   | 数据分片配置规则  |
-| config-map (?) | 标签   | 用户自定义配置   |
-| props (?)           | 标签   | 属性配置 |
-
-\<sharding:sharding-rule />
-
-| *名称*                            | *类型* | *说明*                                                       |
-| --------------------------------- | ------ | ------------------------------------------------------------ |
-| data-source-names                 | 属性   | 数据源 Bean 列表，多个 Bean 以逗号分隔                           |
-| table-rules                       | 标签   | 表分片规则配置对象                                           |
-| binding-table-rules (?)           | 标签   | 绑定表规则列表                                               |
-| broadcast-table-rules (?)         | 标签   | 广播表规则列表                                               |
-| default-data-source-name (?)      | 属性   | 未配置分片规则的表将通过默认数据源定位                       |
-| default-database-strategy-ref (?) | 属性   | 默认数据库分片策略，对应 \<sharding:xxx-strategy> 中的策略 Id，缺省表示不分库 |
-| default-table-strategy-ref (?)    | 属性   | 默认表分片策略，对应 \<sharding:xxx-strategy> 中的策略 Id，缺省表示不分表 |
-| default-key-generator-ref (?)     | 属性   | 默认自增列值生成器引用，缺省使用 <span style='background: #FFF7DD'>io.shardingsphere.core.keygen.DefaultKeyGenerator</span>。该类需实现KeyGenerator接口 |
-
-\<sharding:table-rules />
-
-| *名称*         | *类型* | *说明*             |
-| -------------- | ------ | ------------------ |
-| table-rule (+) | 标签   | 表分片规则配置对象 |
-
-\<sharding:table-rule />
-
-| *名称*                       | *类型* | *说明*                                                       |
-| ---------------------------- | ------ | ------------------------------------------------------------ |
-| logic-table                  | 属性   | 逻辑表名称                                                   |
-| actual-data-nodes (?)        | 属性   | 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况 |
-| database-strategy-ref (?)    | 属性   | 数据库分片策略，对应 \<sharding:xxx-strategy> 中的策略 Id，缺省表示使用 \<sharding:sharding-rule /> 配置的默认数据库分片策略 |
-| table-strategy-ref (?)       | 属性   | 表分片策略，对应 \<sharding:xxx-strategy> 中的策略 Id，缺省表示使用 \<sharding:sharding-rule /> 配置的默认表分片策略 |
-| generate-key-column-name (?) | 属性   | 自增列名称，缺省表示不使用自增主键生成器                     |
-| key-generator-ref (?)        | 属性   | 自增列值生成器引用，缺省表示使用默认自增列值生成器.该类需实现 KeyGenerator 接口 |
-| logic-index (?)              | 属性   | 逻辑索引名称，对于分表的 Oracle/PostgreSQL 数据库中 DROP INDEX XXX 语句，需要通过配置逻辑索引名称定位所执行 SQL 的真实分表 |
-
-\<sharding:binding-table-rules />
-
-| *名称*         | *类型* | *说明*             |
-| -------------- | ------ | ------------------ |
-| binding-table-rule (+) | 标签   | 绑定表规则 |
-
-<sharding:broadcast-table-rule />
-
-| *名称* | *类型* | *说明*         |
-| ------ | ------ | -------------- |
-| table  | 属性   | 广播规则的表名 |
-
-\<sharding:standard-strategy />
-
-| *名称*                  | *类型* | *说明*                                                       |
-| ----------------------- | ------ | ------------------------------------------------------------ |
-| id                      | 属性   | Spring Bean Id                                               |
-| sharding-column         | 属性   | 分片列名称                                                   |
-| precise-algorithm-ref   | 属性   | 精确分片算法引用，用于=和IN。该类需实现PreciseShardingAlgorithm接口 |
-| range-algorithm-ref (?) | 属性   | 范围分片算法引用，用于BETWEEN。该类需实现RangeShardingAlgorithm接口 |
-
-\<sharding:complex-strategy />
-
-| *名称*           | *类型* | *说明*                                                       |
-| ---------------- | ------ | ------------------------------------------------------------ |
-| id               | 属性   | Spring Bean Id                                               |
-| sharding-columns | 属性   | 分片列名称，多个列以逗号分隔                                 |
-| algorithm-ref    | 属性   | 复合分片算法引用。该类需实现ComplexKeysShardingAlgorithm接口 |
-
-\<sharding:inline-strategy />
-
-| *名称*               | *类型* | *说明*                             |
-| -------------------- | ------ | ---------------------------------- |
-| id                   | 属性   | Spring Bean Id                     |
-| sharding-column      | 属性   | 分片列名称                         |
-| algorithm-expression | 属性   | 分片算法行表达式，需符合groovy语法 |
-
-\<sharding:hint-database-strategy />
-
-| *名称*        | *类型* | *说明*                                            |
-| ------------- | ------ | ------------------------------------------------- |
-| id            | 属性   | Spring Bean Id                                    |
-| algorithm-ref | 属性   | Hint分片算法。该类需实现HintShardingAlgorithm接口 |
-
-\<sharding:none-strategy />
-
-| *名称* | *类型* | *说明*         |
-| ------ | ------ | -------------- |
-| id     | 属性   | Spring Bean Id |
-
-\<sharding:props />
-
-| *名称*                             | *类型* | *说明*                                                |
-| ---------------------------------- | ------ | ----------------------------------------------------- |
-| sql.show (?)                       | 属性   | 是否开启SQL显示，默认值: false                        |
-| executor.size (?)                  | 属性   | 工作线程数量，默认值: CPU核数                         |
-| max.connections.size.per.query (?) | 属性   | 每个物理数据库为每次查询分配的最大连接数量。默认值: 1 |
-| check.table.metadata.enabled (?)   | 属性   | 是否在启动时检查分表元数据一致性，默认值: false       |
-
-\<sharding:config-map />
-
-### 读写分离
-
-#### 配置项说明
-
-命名空间：[http://apache.shardingsphere.org/schema/shardingsphere/masterslave/master-slave.xsd](http://apache.shardingsphere.org/schema/shardingsphere/masterslave/master-slave.xsd)
-
-\<master-slave:data-source />
-
-| *名称*      | *类型* | *说明*                       |
-| ----------- | ------ | ---------------------------- |
-| id   | 属性   | Spring Bean Id  |
-| master-data-source-name | 属性   | 主库数据源Bean Id |
-| slave-data-source-names | 属性   | 从库数据源Bean Id列表，多个Bean以逗号分隔 |
-| strategy-ref (?) | 属性   | 从库负载均衡算法引用。该类需实现MasterSlaveLoadBalanceAlgorithm接口 |
-| strategy-type (?) | 属性   | 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若strategy-ref存在则忽略该配置 |
-| config-map (?) | 属性   | 用户自定义配置 |
-| props (?) | 属性   | 属性配置 |
-
-\<master-slave:config-map />
-
-\<master-slave:props />
-
-| *名称*                             | *类型* | *说明*                                                |
-| ---------------------------------- | ------ | ----------------------------------------------------- |
-| sql.show (?)                       | 属性   | 是否开启SQL显示，默认值: false                        |
-| executor.size (?)                  | 属性   | 工作线程数量，默认值: CPU核数                         |
-| max.connections.size.per.query (?) | 属性   | 每个物理数据库为每次查询分配的最大连接数量。默认值: 1 |
-| check.table.metadata.enabled (?)   | 属性   | 是否在启动时检查分表元数据一致性，默认值: false       |
-
-### 治理
-
-#### 数据分片 + 数据治理
-
-##### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:sharding-data-source />
-
-| *名称*              | *类型* | *说明*                                                       |
-| ------------------- | ------ | ------------------------------------------------------------ |
-| id                  | 属性   | ID                                                           |
-| data-source-ref (?) | 属性   | 被治理的数据库id                                             |
-| registry-center-ref | 属性   | 注册中心id                                                   |
-| overwrite (?)       | 属性   | 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准。 缺省为不覆盖 |
-
-#### 读写分离 + 数据治理
-
-##### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:master-slave-data-source />
-
-| *名称*              | *类型* | *说明*                                                       |
-| ------------------- | ------ | ------------------------------------------------------------ |
-| id                  | 属性   | ID                                                           |
-| data-source-ref (?) | 属性   | 被治理的数据库id                                             |
-| registry-center-ref | 属性   | 注册中心id                                                   |
-| overwrite (?)       | 属性   | 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准。 缺省为不覆盖 |
-
-#### 数据治理注册中心
-
-##### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:registry-center />
-
-| *名称*                             | *类型* | *说明*                                                       |
-| ---------------------------------- | ------ | ------------------------------------------------------------ |
-| id                                 | 属性   | 注册中心的Spring Bean Id                                     |
-| server-lists                       | 属性   | 连接注册中心服务器的列表，包括IP地址和端口号，多个地址用逗号分隔。如: host1:2181,host2:2181 |
-| namespace (?)                      | 属性   | 注册中心的命名空间                                           |
-| digest (?)                         | 属性   | 连接注册中心的权限令牌。缺省为不需要权限验证                 |
-| operation-timeout-milliseconds (?) | 属性   | 操作超时的毫秒数，默认500毫秒                                |
-| max-retries (?)                    | 属性   | 连接失败后的最大重试次数，默认3次                            |
-| retry-interval-milliseconds (?)    | 属性   | 重试间隔毫秒数，默认500毫秒                                  |
-| time-to-live-seconds (?)           | 属性   | 临时节点存活秒数，默认60秒                                   |
-
-## ShardingSphere-2.x
-
-### 数据分片
-
-#### 配置项说明
-
-\<sharding:data-source/>
-
-定义sharding-jdbc数据源
-
-| *名称*                 | *类型* | *数据类型* | *必填* | *说明*         |
-| ---------------------- | ------ | ---------- | ------ | -------------- |
-| id                     | 属性   | String     | 是     | Spring Bean ID |
-| sharding-rule          | 标签   | -          | 是     | 分片规则       |
-| binding-table-rules (?) | 标签   | -          | 否     | 分片规则       |
-| props (?)              | 标签   | -          | 否     | 相关属性配置   |
-
-\<sharding:sharding-rule/>
-
-| *名称*                        | *类型* | *数据类型* | *必填* | *说明*                                                       |
-| ----------------------------- | ------ | ---------- | ------ | ------------------------------------------------------------ |
-| data-source-names             | 属性   | String     | 是     | 数据源Bean列表，需要配置所有需要被 ShardingSphere-JDBC 管理的数据源BEAN ID（包括默认数据源），多个Bean以逗号分隔 |
-| default-data-source-name (?)   | 属性   | String     | 否     | 默认数据源名称，未配置分片规则的表将通过默认数据源定位       |
-| default-database-strategy-ref (?) | 属性   | String     | 否     | 默认分库策略，对应 \<sharding:xxx-strategy> 中的策略id，不填则使用不分库的策略 |
-| default-table-strategy-ref (?)  | 属性   | String     | 否     | 默认分表策略，对应 \<sharding:xxx-strategy> 中的策略id，不填则使用不分表的策略 |
-| table-rules                   | 标签   | -          | 是     | 分片规则列表                                                 |
-
-\<sharding:table-rules/>
-
-| *名称*        | *类型* | *数据类型* | *必填* | *说明*   |
-| ------------- | ------ | ---------- | ------ | -------- |
-| table-rule(+) | 标签   | -          | 是     | 分片规则 |
-
-\<sharding:table-rule/>
-
-| *名称*                | *类型* | *数据类型* | *必填* | *说明*                                                       |
-| --------------------- | ------ | ---------- | ------ | ------------------------------------------------------------ |
-| logic-table           | 属性   | String     | 是     | 逻辑表名                                                     |
-| actual-data-nodes (?) | 属性   | String     | 否     | 真实数据节点，由数据源名（读写分离引用[master-slave:data-source](master-slave:data-source)中的id属性） + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。不填写表示将为现有已知的数据源 + 逻辑表名称生成真实数据节点。用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况。 |
-| database-strategy-ref (?) | 属性   | String     | 否     | 分库策略，对应 \<sharding:xxx-strategy> 中的策略id，不填则使用 \<sharding:sharding-rule/> 配置的default-database-strategy-ref |
-| table-strategy-ref (?) | 属性   | String     | 否     | 分表策略，对应 \<sharding:xxx-strategy> 中的略id，不填则使用 \<sharding:sharding-rule/> 配置的default-table-strategy-ref |
-| logic-index (?)       | 属性   | String     | 否     | 逻辑索引名称，对于分表的Oracle/PostgreSQL数据库中DROP INDEX XXX语句，需要通过配置逻辑索引名称定位所执行SQL的真实分表 |
-
-\<sharding:binding-table-rules/>
-
-| *名称*             | *类型* | *数据类型* | *必填* | *说明*   |
-| ------------------ | ------ | ---------- | ------ | -------- |
-| binding-table-rule | 标签   | -          | 是     | 绑定规则 |
-
-\<sharding:binding-table-rule/>
-
-| *名称*             | *类型* | *数据类型* | *必填* | *说明*   |
-| ------------------ | ------ | ---------- | ------ | -------- |
-| logic-tables | 属性   | String | 是     | 逻辑表名，多个表名以逗号分隔 |
-
-\<sharding:standard-strategy/>
-标准分片策略，用于单分片键的场景
-
-| *名称*                  | *类型* | *数据类型* | *必填* | *说明*                                                       |
-| ----------------------- | ------ | ---------- | ------ | ------------------------------------------------------------ |
-| sharding-column         | 属性   | String     | 是     | 分片列名                                                     |
-| precise-algorithm-class | 属性   | String     | 是     | 精确的分片算法类名称，用于=和IN。该类需使用默认的构造器或者提供无参数的构造器 |
-| range-algorithm-class (?) | 属性   | String     | 否     | 范围的分片算法类名称，用于BETWEEN。该类需使用默认的构造器或者提供无参数的构造器 |
-
-\<sharding:complex-strategy/>
-复合分片策略，用于多分片键的场景
-
-| *名称*           | *类型* | *数据类型* | *必填* | *说明*                                                       |
-| ---------------- | ------ | ---------- | ------ | ------------------------------------------------------------ |
-| sharding-columns | 属性   | String     | 是     | 分片列名，多个列以逗号分隔                                   |
-| algorithm-class  | 属性   | String     | 是     | 分片算法全类名，该类需使用默认的构造器或者提供无参数的构造器 |
-
-\<sharding:inline-strategy/>
-inline表达式分片策略
-
-| *名称*               | *类型* | *数据类型* | *必填* | *说明*         |
-| -------------------- | ------ | ---------- | ------ | -------------- |
-| sharding-column      | 属性   | String     | 是     | 分片列名       |
-| algorithm-expression | 属性   | String     | 是     | 分片算法表达式 |
-
-\<sharding:hint-database-strategy/>
-Hint方式分片策略
-
-| *名称*          | *类型* | *数据类型* | *必填* | *说明*                                                       |
-| --------------- | ------ | ---------- | ------ | ------------------------------------------------------------ |
-| algorithm-class | 属性   | String     | 是     | 分片算法全类名，该类需使用默认的构造器或者提供无参数的构造器 |
-
-\<sharding:none-strategy/>
-不分片的策略
-
-\<sharding:props/>
-
-| *名称*        | *类型* | *数据类型* | *必填* | *说明*                             |
-| ------------- | ------ | ---------- | ------ | ---------------------------------- |
-| sql.show      | 属性   | boolean    | 是     | 是否开启SQL显示，默认为false不开启 |
-| executor.size (?) | 属性   | int        | 否     | 最大工作线程数量                   |
-
-### 读写分离
-
-#### 配置项说明
-
-\<master-slave:data-source/>
-定义sharding-jdbc读写分离的数据源
-
-| *名称*                  | *类型* | *数据类型* | *必填* | *说明*                                                       |
-| ----------------------- | ------ | ---------- | ------ | ------------------------------------------------------------ |
-| id                      | 属性   | String     | 是     | Spring Bean ID                                               |
-| master-data-source-name | 标签   | -          | 是     | 主库数据源Bean ID                                            |
-| slave-data-source-names | 标签   | -          | 是     | 从库数据源Bean列表，多个Bean以逗号分隔                       |
-| strategy-ref (?)         | 标签   | -          | 否     | 主从库复杂策略Bean ID，可以使用自定义复杂策略                |
-| strategy-type (?)        | 标签   | String     | 否     | 主从库复杂策略类型 <br/>可选值：ROUND_ROBIN, RANDOM <br/>默认值：ROUND_ROBIN |
-
-##### Spring格式特别说明
-
-如需使用inline表达式，需配置ignore-unresolvable为true，否则placeholder会把inline表达式当成属性key值导致出错。
-
-#### 分片算法表达式语法说明
-
-##### inline表达式特别说明
-
-${begin..end} 表示范围区间
-
-${[unit1, unit2, unitX]} 表示枚举值
-
-inline表达式中连续多个${…}表达式，整个inline最终的结果将会根据每个子表达式的结果进行笛卡尔组合，例如正式表inline表达式如下：
-
-```xml
-
-dbtbl_${['online', 'offline']}_${1..3}
-
-```
-
-最终会解析为dbtbl_online_1，dbtbl_online_2，dbtbl_online_3，dbtbl_offline_1，dbtbl_offline_2和dbtbl_offline_3这6张表。
-
-##### 字符串内嵌groovy代码
-
-表达式本质上是一段字符串，字符串中使用${}来嵌入groovy代码。
-
-```xml
-
-data_source_${id % 2 + 1}
-
-```
-
-上面的表达式中data_source_是字符串前缀，id % 2 + 1是groovy代码。
-
-### 治理
-
-#### Zookeeper标签说明
-
-| *名称*        | *类型* | *是否必填* | *缺省值* | *描述*                             |
-| ------------- | ------ | ---------- | ------ | ---------------------------------- |
-| id      | String | 是 |  | 注册中心在Spring容器中的主键 |
-| server-lists | String | 是 |  | 	连接Zookeeper服务器的列表<br/>包括IP地址和端口号<br/>多个地址用逗号分隔<br/>如: host1:2181,host2:2181 |
-| namespace | String | 是 |  | Zookeeper的命名空间 |
-| base-sleep-time-milliseconds (?) | int | 否 | 1000 | 等待重试的间隔时间的初始值<br/>单位：毫秒 |
-| max-sleep-time-milliseconds (?) | int | 否 | 3000 | 等待重试的间隔时间的最大值<br/>单位：毫秒 |
-| max-retries (?) | int | 否 | 3 | 最大重试次数 |
-| session-timeout-milliseconds (?) | int | 否 | 60000 | 会话超时时间<br/>单位：毫秒 |
-| connection-timeout-milliseconds (?) | int | 否 | 15000 | 连接超时时间<br/>单位：毫秒 |
-| digest (?) | String | 否 |  | 	连接Zookeeper的权限令牌<br/>缺省为不需要权限验证 |
-
-#### Etcd配置示例
-
-| *名称*                         | *类型* | *是否必填* | *缺省值* | *描述*                                                       |
-| ------------------------------ | ------ | ---------- | -------- | ------------------------------------------------------------ |
-| id                             | String | 是         |          | 注册中心在Spring容器中的主键                                 |
-| server-lists                   | String | 是         |          | 连接Etcd服务器的列表<br/>包括IP地址和端口号<br/>多个地址用逗号分隔<br/>如: http://host1:2379,http://host2:2379 |
-| time-to-live-seconds (?)        | int    | 否         | 60       | 临时节点存活时间<br/>单位：秒                                |
-| timeout-milliseconds (?)        | int    | 否         | 500      | 每次请求的超时时间<br/>单位：毫秒                            |
-| max-retries (?)                 | int    | 否         | 3        | 每次请求的最大重试次数                                       |
-| retry-interval-milliseconds (?) | int    | 否         | 200      | 重试间隔时间<br/>单位：毫秒                                  |
-
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.en.md
deleted file mode 100644
index 6eab5a98c15..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.en.md
+++ /dev/null
@@ -1,779 +0,0 @@
-+++
-title = "Spring namespace configuration change history"
-weight = 3
-
-+++
-
-## ShardingSphere-5.0.0-beta
-
-### Sharding
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.0.0.xsd)
-
-\<sharding:rule />
-
-| *Name*                                | *Type*    | *Description*                               |
-| ------------------------------------- | --------- | ------------------------------------------- |
-| id                                    | Attribute | Spring Bean Id                              |
-| table-rules (?)                       | Tag       | Sharding table rule configuration           |
-| auto-table-rules (?)                  | Tag       | Automatic sharding table rule configuration |
-| binding-table-rules (?)               | Tag       | Binding table rule configuration            |
-| broadcast-table-rules (?)             | Tag       | Broadcast table rule configuration          |
-| default-database-strategy-ref (?)     | Attribute | Default database strategy name              |
-| default-table-strategy-ref (?)        | Attribute | Default table strategy name                 |
-| default-key-generate-strategy-ref (?) | Attribute | Default key generate strategy name          |
-| default-sharding-column (?)           | Attribute | Default sharding column name                |
-
-\<sharding:table-rule />
-
-| *Name*                    | *Type*    | *Description*              |
-| ------------------------- | --------- | -------------------------- |
-| logic-table               | Attribute | Logic table name           |
-| actual-data-nodes         | Attribute | Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only. |
-| actual-data-sources       | Attribute | Data source names for auto sharding table |
-| database-strategy-ref     | Attribute | Database strategy name for standard sharding table     |
-| table-strategy-ref        | Attribute | Table strategy name for standard sharding table        |
-| sharding-strategy-ref     | Attribute | sharding strategy name for auto sharding table         |
-| key-generate-strategy-ref | Attribute | Key generate strategy name |
-
-\<sharding:binding-table-rules />
-
-| *Name*                 | *Type* | *Description*                    |
-| ---------------------- | ------ | -------------------------------- |
-| binding-table-rule (+) | Tag    | Binding table rule configuration |
-
-\<sharding:binding-table-rule />
-
-| *Name*       | *Type*    | *Description*                                            |
-| ------------ | --------- | -------------------------------------------------------- |
-| logic-tables | Attribute | Binding table name, multiple tables separated with comma |
-
-\<sharding:broadcast-table-rules />
-
-| *Name*                   | *Type* | *Description*                      |
-| ------------------------ | ------ | ---------------------------------- |
-| broadcast-table-rule (+) | Tag    | Broadcast table rule configuration |
-
-\<sharding:broadcast-table-rule />
-
-| *Name* | *Type*    | *Description*        |
-| ------ | --------- | -------------------- |
-| table  | Attribute | Broadcast table name |
-
-\<sharding:standard-strategy />
-
-| *Name*          | *Type*    | *Description*                   |
-| --------------- | --------- | ------------------------------- |
-| id              | Attribute | Standard sharding strategy name |
-| sharding-column | Attribute | Sharding column name            |
-| algorithm-ref   | Attribute | Sharding algorithm name         |
-
-\<sharding:complex-strategy />
-
-| *Name*           | *Type*    | *Description*                                                |
-| ---------------- | --------- | ------------------------------------------------------------ |
-| id               | Attribute | Complex sharding strategy name                               |
-| sharding-columns | Attribute | Sharding column names, multiple columns separated with comma |
-| algorithm-ref    | Attribute | Sharding algorithm name                                      |
-
-\<sharding:hint-strategy />
-
-| *Name*        | *Type*    | *Description*               |
-| ------------- | --------- | --------------------------- |
-| id            | Attribute | Hint sharding strategy name |
-| algorithm-ref | Attribute | Sharding algorithm name     |
-
-\<sharding:none-strategy />
-
-| *Name* | *Type*    | *Description*          |
-| ------ | --------- | ---------------------- |
-| id     | Attribute | Sharding strategy name |
-
-\<sharding:key-generate-strategy />
-
-| *Name*        | *Type*    | *Description*               |
-| ------------- | --------- | --------------------------- |
-| id            | Attribute | Key generate strategy name  |
-| column        | Attribute | Key generate column name    |
-| algorithm-ref | Attribute | Key generate algorithm name |
-
-\<sharding:sharding-algorithm />
-
-| *Name*    | *Type*    | *Description*                 |
-| --------- | --------- | ----------------------------- |
-| id        | Attribute | Sharding algorithm name       |
-| type      | Attribute | Sharding algorithm type       |
-| props (?) | Tag       | Sharding algorithm properties |
-
-\<sharding:key-generate-algorithm />
-
-| *Name*    | *Type*    | *Description*                     |
-| --------- | --------- | --------------------------------- |
-| id        | Attribute | Key generate algorithm name       |
-| type      | Attribute | Key generate algorithm type       |
-| props (?) | Tag       | Key generate algorithm properties |
-
-Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) and [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen) for more details about type of algorithm.
-
-##### Attention
-
-Inline expression identifier can use `${...}` or `$->{...}`, but `${...}` is conflict with spring placeholder of properties, so use `$->{...}` on spring environment is better.
-
-### Readwrite-Splitting
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.0.0.xsd)
-
-\<readwrite-splitting:rule />
-
-| *Name*               | *Type*    | *Description*                                |
-| -------------------- | --------- | -------------------------------------------- |
-| id                   | Attribute | Spring Bean Id                               |
-| data-source-rule (+) | Tag       | Readwrite-splitting data source rule configuration |
-
-\<readwrite-splitting:data-source-rule />
-
-| *Name*                     | *Type*     | *Description*                                                           |
-| -------------------------- | ---------- | ----------------------------------------------------------------------- |
-| id                         | Attribute  | Readwrite-splitting data source rule name                               |
-| write-data-source-name     | Attribute  | Write data source name                                                  |
-| read-data-source-names     | Attribute  | Read data source names, multiple data source names separated with comma |
-| load-balance-algorithm-ref | Attribute  | Load balance algorithm name                                             |
-
-\<readwrite-splitting:load-balance-algorithm />
-
-| *Name*    | *Type*     | *Description*                     |
-| --------- | ---------- | --------------------------------- |
-| id        | Attribute  | Load balance algorithm name       |
-| type      | Attribute  | Load balance algorithm type       |
-| props (?) | Tag        | Load balance algorithm properties |
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
-Please refer to [Use Norms](/en/features/readwrite-splitting/use-norms) for more details about query consistent routing.
-
-### Encryption
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.0.0.xsd)
-
-\<encrypt:rule />
-
-| *Name*                    | *Type*    | *Description*                                                                                  | *Default Value* |
-| ------------------------- | --------- | ---------------------------------------------------------------------------------------------- | --------------- |
-| id                        | Attribute | Spring Bean Id                                                                                 |                 |
-| queryWithCipherColumn (?) | Attribute | Whether query with cipher column for data encrypt. User you can use plaintext to query if have | true            |
-| table (+)                 | Tag       | Encrypt table configuration                                                                    |                 |
-
-\<encrypt:table />
-
-| *Name*    | *Type*     | *Description*                |
-| --------- | ---------- | ---------------------------- |
-| name       | Attribute | Encrypt table name           |
-| column (+) | Tag       | Encrypt column configuration |
-
-\<encrypt:column />
-
-| *Name*                    | *Type*     | *Description*              |
-| ------------------------- | ---------- | -------------------------- |
-| logic-column              | Attribute  | Column logic name          |
-| cipher-column             | Attribute  | Cipher column name         |
-| assisted-query-column (?) | Attribute  | Assisted query column name |
-| plain-column (?)          | Attribute  | Plain column name          |
-| encrypt-algorithm-ref     | Attribute  | Encrypt algorithm name     |
-
-\<encrypt:encrypt-algorithm />
-
-| *Name*    | *Type*     | *Description*                |
-| --------- | ---------- | ---------------------------- |
-| id        | Attribute  | Encrypt algorithm name       |
-| type      | Attribute  | Encrypt algorithm type       |
-| props (?) | Tag        | Encrypt algorithm properties |
-
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
-
-### Shadow-DB
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/shadow/shadow-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/shadow/shadow-5.0.0.xsd)
-
-\<shadow:rule />
-
-| *Name*      | *Type*    | *Description*                    |
-| ----------- | ---------- | ------------------------------- |
-| id          | Attribute  | Spring Bean Id                  |
-| column      | Attribute  | Shadow column name              |
-| mappings(?) | Tag        | Mapping relationship between production database and shadow database |
-
-\<shadow:mapping />
-
-| *Name*                   | *Type*    | *Description*               |
-| ------------------------ | --------- | --------------------------- |
-| product-data-source-name | Attribute  | Production database name   |
-| shadow-data-source-name  | Attribute  | Shadow database name       |
-
-## 4.x
-
-### Sharding
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd](http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd)
-
-\<sharding:data-source />
-
-| *Name*                                | *Type*    | *Description*                               |
-| ------------------------------------- | --------- | ------------------------------------------- |
-| id                                    | Attribute | Spring Bean Id                              |
-| sharding-rule                         | Tag       | Sharding rule configuration                 |
-| props (?)                             | Tag       | Properties                                  |
-
-\<sharding:sharding-rule />
-
-| *Name*                                | *Type*    | *Description*                               |
-| ------------------------------------- | --------- | ------------------------------------------- |
-| data-source-names                     | Attribute | Data source Bean list with comma separating multiple Beans |
-| table-rules                           | Tag       | Configuration objects of table sharding rules           |
-| binding-table-rules (?)               | Tag       | Binding table rule list            |
-| broadcast-table-rules (?)             | Tag       | Broadcast table rule list          |
-| default-data-source-name (?)	        | Attribute | Tables without sharding rules will be located through default data source              |
-| default-database-strategy-ref (?)     | Attribute | Default database sharding strategy, which corresponds to id of <sharding:xxx-strategy>; default means the database is not split              |
-| default-table-strategy-ref (?)        | Attribute | Default table sharding strategy,which corresponds to id of <sharding:xxx-strategy>; default means the database is not split   |
-| default-key-generator (?) | Attribute | Default key generator configuration, use user-defined ones or built-in ones, e.g. SNOWFLAKE/UUID. Default key generator is `org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator`    |
-| encrypt-rule (?)        | Tag	| Encrypt rule                |
-
-\<sharding:table-rules />
-
-| *Name*                    | *Type*    | *Description*              |
-| ------------------------- | --------- | -------------------------- |
-| table-rule (+)               | Tag | Configuration objects of table sharding rules           |
-
-\<sharding:table-rule />
-
-| *Name*                    | *Type*    | *Description*              |
-| ------------------------- | --------- | -------------------------- |
-| logic-table               | Attribute | Logic table name           |
-| actual-data-nodes (?)         | Attribute | Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only. |
-| database-strategy-ref     | Attribute | Database strategy name for standard sharding table     |
-| table-strategy-ref        | Attribute | Table strategy name for standard sharding table        |
-| key-generate-strategy-ref | Attribute | Key generate strategy name |
-
-\<sharding:binding-table-rules />
-
-| *Name*                 | *Type* | *Description*                    |
-| ---------------------- | ------ | -------------------------------- |
-| binding-table-rule (+) | Tag    | Binding table rule configuration |
-
-\<sharding:binding-table-rule />
-
-| *Name*       | *Type*    | *Description*                                            |
-| ------------ | --------- | -------------------------------------------------------- |
-| logic-tables | Attribute | Binding table name, multiple tables separated with comma |
-
-\<sharding:broadcast-table-rules />
-
-| *Name*                   | *Type* | *Description*                      |
-| ------------------------ | ------ | ---------------------------------- |
-| broadcast-table-rule (+) | Tag    | Broadcast table rule configuration |
-
-\<sharding:broadcast-table-rule />
-
-| *Name* | *Type*    | *Description*        |
-| ------ | --------- | -------------------- |
-| table  | Attribute | Broadcast table name |
-
-\<sharding:standard-strategy />
-
-| *Name*          | *Type*    | *Description*                   |
-| --------------- | --------- | ------------------------------- |
-| id              | Attribute | Standard sharding strategy name |
-| sharding-column | Attribute | Sharding column name            |
-| precise-algorithm-ref (?)  | Attribute | Precise algorithm reference, applied in `=` and `IN`; the class needs to implement `PreciseShardingAlgorithm` interface         |
-| range-algorithm-ref (?)  | Attribute | Range algorithm reference, applied in `BETWEEN`; the class needs to implement `RangeShardingAlgorithm` interface        |
-
-\<sharding:complex-strategy />
-
-| *Name*           | *Type*    | *Description*                                                |
-| ---------------- | --------- | ------------------------------------------------------------ |
-| id               | Attribute | Complex sharding strategy name                               |
-| sharding-columns | Attribute | Sharding column names, multiple columns separated with comma |
-| algorithm-ref    | Attribute | Complex sharding algorithm reference; the class needs to implement `ComplexKeysShardingAlgorithm` interface |
-
-\<sharding:inline-strategy />
-
-| *Name*           | *Type*    | *Description*                                                |
-| ---------------- | --------- | ------------------------------------------------------------ |
-| id               | Attribute | Spring Bean Id                              |
-| sharding-columns | Attribute | Sharding column names, multiple columns separated with comma |
-| algorithm-ref    | Attribute | Sharding algorithm inline expression, which needs to conform to groovy statements |
-
-\<sharding:hint-database-strategy />
-
-| *Name*        | *Type*    | *Description*               |
-| ------------- | --------- | --------------------------- |
-| id            | Attribute | Hint sharding strategy name |
-| algorithm-ref | Attribute | Hint sharding algorithm; the class needs to implement `HintShardingAlgorithm` interface |
-
-\<sharding:none-strategy />
-
-| *Name* | *Type*    | *Description*          |
-| ------ | --------- | ---------------------- |
-| id     | Attribute | Spring Bean Id |
-
-\<sharding:key-generator />
-
-| *Name*        | *Type*    | *Description*               |
-| ------------- | --------- | --------------------------- |
-| column        | Attribute | Auto-increment column name    |
-| type            | Attribute | Auto-increment key generator `Type`; self-defined generator or internal Type generator (SNOWFLAKE/UUID) can both be selected  |
-| props-ref | Attribute | The Property configuration reference of key generators |
-
-Properties
-Property configuration that can include these properties of these key generators.
-
-SNOWFLAKE
-| *Name*        | *Data Type*    | *Explanation*               |
-| ------------- | --------- | --------------------------- |
-| max.tolerate.time.difference.milliseconds (?)	| long	| The max tolerate time for different server’s time difference in milliseconds, the default value is `10` |
-| max.vibration.offset (?) | int	| The max upper limit value of vibrate number, range `[0, 4096)`, the default value is `1`. Notice: To use the generated value of this algorithm as sharding value, it is recommended to configure this property. The algorithm generates key mod `2^n` (`2^n` is usually the sharding amount of tables or databases) in different milliseconds and the result is always `0` or `1`. To prevent the above sharding problem, it is recommended to configure this property, its value is `(2^n)-1` |
-
-\<sharding:encrypt-rules />
-
-| *Name*    | *Type*    | *Description*                 |
-| --------- | --------- | ----------------------------- |
-| encryptor-rule (+)        | Tag | Encryptor rule |
-
-\<sharding:encrypt-rule />
-
-| *Name*    | *Type*    | *Description*                 |
-| --------- | --------- | ----------------------------- |
-| encrypt:encrypt-rule(?)       | Tag | Encrypt rule |
-
-\<sharding:props />
-
-| *Name*    | *Type*    | *Description*                     |
-| --------- | --------- | --------------------------------- |
-| sql.show (?)	| Attribute|	Show SQL or not; default value: false|
-|executor.size (?)	|Attribute	|Executing thread number; default value: CPU core number|
-|max.connections.size.per.query (?)	|Attribute	|The maximum connection number that each physical database allocates to each query; default value: 1|
-|check.table.metadata.enabled (?)	|Attribute	|Whether to check meta-data consistency of sharding table when it initializes; default value: false|
-|query.with.cipher.column (?)	|Attribute	|When there is a plainColumn, use cipherColumn or not to query, default value: true|
-
-### Readwrite-Splitting
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd](http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd)
-
-\<master-slave:data-source />
-
-| *Name*                  | *Type*    | *Explanation*                                                |
-| :---------------------- | :-------- | :----------------------------------------------------------- |
-| id                      | Attribute | Spring Bean id                                               |
-| master-data-source-name | Attribute | Bean id of data source in master database                    |
-| slave-data-source-names | Attribute | Bean id list of data source in slave database; multiple Beans are separated by commas |
-| strategy-ref (?)        | Attribute | Slave database load balance algorithm reference; the class needs to implement `MasterSlaveLoadBalanceAlgorithm` interface |
-| strategy-type (?)       | Attribute | Load balance algorithm type of slave database; optional value: ROUND_ROBIN and RANDOM; if there is `load-balance-algorithm-class-name`, the configuration can be omitted |
-| config-map (?)          | Tag       | Users’ self-defined configurations                           |
-| props (?)               | Tag       | Attribute configurations                                     |
-
-\<master-slave:props />
-
-| *Name*                             | *Type*    | *Explanation*                                                |
-| :--------------------------------- | :-------- | :----------------------------------------------------------- |
-| sql.show (?)                       | Attribute | Show SQL or not; default value: false                        |
-| executor.size (?)                  | Attribute | Executing thread number; default value: CPU core number      |
-| max.connections.size.per.query (?) | Attribute | The maximum connection number that each physical database allocates to each query; default value: 1 |
-| check.table.metadata.enabled (?)   | Attribute | Whether to check meta-data consistency of sharding table when it initializes; default value: false |
-
-\<master-slave:load-balance-algorithm />
-
-4.0.0-RC2 version added
-
-| *Name*        | *Type*    | *Explanation*                                                |
-| :------------ | :-------- | :----------------------------------------------------------- |
-| id            | Attribute | Spring Bean Id                                               |
-| type          | Attribute | Type of load balance algorithm, ‘RANDOM'或’ROUND_ROBIN’, support custom extension |
-| props-ref (?) | Attribute | Properties of load balance algorithm                         |
-
-### Data Masking
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd](http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd)
-
-\<encrypt:data-source />
-
-| *Name*    | *Type*     | *Type*                |
-| --------- | ---------- | ---------------------------- |
-| id       | Attribute | Spring Bean Id |
-| data-source-name       | Attribute | Encrypt data source Bean Id  |
-| props (?) | Tag       | Attribute configurations |
-
-\<encrypt:encryptors />
-
-| *Name*    | *Type*     | *Type*                |
-| --------- | ---------- | ---------------------------- |
-| encryptor(+)       | Tag | Encryptor configuration |
-
-\<encrypt:encryptor />
-
-| *Name*    | *Type*     | *Type*                |
-| --------- | ---------- | ---------------------------- |
-| id       | Attribute | Names of Encryptor |
-| type       | Attribute | Types of Encryptor, including MD5/AES or customize type |
-| props-re | Attribute       | Attribute configurations |
-
-\<encrypt:tables />
-
-| *Name*    | *Type*     | *Type*                |
-| --------- | ---------- | ---------------------------- |
-| table(+)       | Tag | Encrypt table configuration |
-
-\<encrypt:table />
-
-| *Name*    | *Type*     | *Type*                |
-| --------- | ---------- | ---------------------------- |
-| column(+)       | Tag | Encrypt column configuration |
-
-\<encrypt:column />
-
-| *Name*                    | *Type*     | *Description*              |
-| ------------------------- | ---------- | -------------------------- |
-| logic-column              | Attribute  | Column logic name          |
-| cipher-column             | Attribute  | Cipher column name         |
-| assisted-query-column (?) | Attribute  | Assisted query column name |
-| plain-column (?)          | Attribute  | Plain column name          |
-
-\<encrypt:props />
-
-| *Name*    | *Type*     | *Description*                |
-| --------- | ---------- | ---------------------------- |
-| sql.show (?)| Attribute  | Show SQL or not; default value: false |
-| query.with.cipher.column (?) | Attribute | When there is a plainColumn, use cipherColumn or not to query, default value: true |
-
-### Orchestration
-
-#### Data Sharding + Orchestration
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:master-slave-data-source />
-
-| *Name*      | *Type*    | *Description*                    |
-| ----------- | ---------- | ------------------------------- |
-| id          | Attribute  | Id                  |
-| data-source-ref (?)   | Attribute  | Orchestrated database Id        |
-| registry-center-ref          | Attribute  | Registry center Id                  |
-| overwrite          | Attribute  | Whether to overwrite local configurations with registry center configurations; if it can, each initialization should refer to local configurations; default means not to overwrite                  |
-
-#### Read-Write Split + Orchestration
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:sharding-data-source />
-
-| *Name*      | *Type*    | *Description*                    |
-| ----------- | ---------- | ------------------------------- |
-| id          | Attribute  | Id                  |
-| data-source-ref (?)   | Attribute  | Orchestrated database Id        |
-| registry-center-ref          | Attribute  | Registry center Id                  |
-| overwrite          | Attribute  | Use local configuration to overwrite registry center or not |
-
-#### Data Masking + Orchestration
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:encrypt-data-source />
-
-| *Name*      | *Type*    | *Description*                    |
-| ----------- | ---------- | ------------------------------- |
-| id          | Attribute  | Id                  |
-| data-source-ref (?)   | Attribute  | Orchestrated database Id        |
-| registry-center-ref          | Attribute  | Registry center Id                  |
-| overwrite          | Attribute  | Use local configuration to overwrite registry center or not |
-
-#### Orchestration registry center
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd](http://shardingsphere.apache.org/schema/shardingsphere/orchestration/orchestration.xsd)
-
-\<orchestration:registry-center />
-
-| *Name*      | *Type*    | *Description*                    |
-| ----------- | ---------- | ------------------------------- |
-| id          | Attribute  | Spring Bean Id of registry center   |   
-|type	|Attribute	|Registry center type. Example:zookeeper|
-|server-lists	|Attribute	|Registry servers list, multiple split as comma. Example: host1:2181,host2:2181|
-|namespace (?)	|Attribute	|Namespace of registry|
-|digest (?)	|Attribute	|Digest for registry. Default is not need digest|
-|operation-timeout-milliseconds (?)	|Attribute	|Operation timeout time in milliseconds, default value is 500 seconds|
-|max-retries (?)	|Attribute	|Max number of times to retry, default value is 3|
-|retry-interval-milliseconds (?)	|Attribute	|Time interval in milliseconds on each retry, default value is 500 milliseconds|
-|time-to-live-seconds (?)	|Attribute	|Living time of temporary nodes; default value: 60 seconds|
-|props-ref (?)	|Attribute	|Other customize properties of registry center|
-
-## 3.x
-
-Attention
-Inline expression identifier can use `${...}` or `$->{...}`, but `${...}` is conflict with spring placeholder of properties, so use `$->{...}` on spring environment is better.
-
-### Sharding
-
-#### Configuration Item Explanation
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:p="http://www.springframework.org/schema/p"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                        http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://shardingsphere.io/schema/shardingsphere/sharding 
-                        http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd
-                        http://www.springframework.org/schema/context
-                        http://www.springframework.org/schema/context/spring-context.xsd
-                        http://www.springframework.org/schema/tx
-                        http://www.springframework.org/schema/tx/spring-tx.xsd">
-    <context:annotation-config />
-    <context:component-scan base-package="io.shardingsphere.example.spring.namespace.jpa" />
-    
-    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
-        <property name="dataSource" ref="shardingDataSource" />
-        <property name="jpaVendorAdapter">
-            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:database="MYSQL" />
-        </property>
-        <property name="packagesToScan" value="io.shardingsphere.example.spring.namespace.jpa.entity" />
-        <property name="jpaProperties">
-            <props>
-                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
-                <prop key="hibernate.hbm2ddl.auto">create</prop>
-                <prop key="hibernate.show_sql">true</prop>
-            </props>
-        </property>
-    </bean>
-    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" p:entityManagerFactory-ref="entityManagerFactory" />
-    <tx:annotation-driven />
-    
-    <bean id="ds0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds0" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="preciseModuloDatabaseShardingAlgorithm" class="io.shardingsphere.example.spring.namespace.jpa.algorithm.PreciseModuloDatabaseShardingAlgorithm" />
-    <bean id="preciseModuloTableShardingAlgorithm" class="io.shardingsphere.example.spring.namespace.jpa.algorithm.PreciseModuloTableShardingAlgorithm" />
-    
-    <sharding:standard-strategy id="databaseShardingStrategy" sharding-column="user_id" precise-algorithm-ref="preciseModuloDatabaseShardingAlgorithm" />
-    <sharding:standard-strategy id="tableShardingStrategy" sharding-column="order_id" precise-algorithm-ref="preciseModuloTableShardingAlgorithm" />
-    
-    <sharding:data-source id="shardingDataSource">
-        <sharding:sharding-rule data-source-names="ds0,ds1">
-            <sharding:table-rules>
-                <sharding:table-rule logic-table="t_order" actual-data-nodes="ds$->{0..1}.t_order$->{0..1}" database-strategy-ref="databaseShardingStrategy" table-strategy-ref="tableShardingStrategy" generate-key-column-name="order_id" />
-                <sharding:table-rule logic-table="t_order_item" actual-data-nodes="ds$->{0..1}.t_order_item$->{0..1}" database-strategy-ref="databaseShardingStrategy" table-strategy-ref="tableShardingStrategy" generate-key-column-name="order_item_id" />
-            </sharding:table-rules>
-            <sharding:binding-table-rules>
-                <sharding:binding-table-rule logic-tables="t_order, t_order_item" />
-            </sharding:binding-table-rules>
-            <sharding:broadcast-table-rules>
-                <sharding:broadcast-table-rule table="t_config" />
-            </sharding:broadcast-table-rules>
-        </sharding:sharding-rule>
-    </sharding:data-source>
-</beans>
-```
-
-### Readwrite-splitting
-
-#### Configuration Item Explanation
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:p="http://www.springframework.org/schema/p"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:master-slave="http://shardingsphere.io/schema/shardingsphere/masterslave"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                        http://www.springframework.org/schema/beans/spring-beans.xsd 
-                        http://www.springframework.org/schema/context 
-                        http://www.springframework.org/schema/context/spring-context.xsd
-                        http://www.springframework.org/schema/tx 
-                        http://www.springframework.org/schema/tx/spring-tx.xsd
-                        http://shardingsphere.io/schema/shardingsphere/masterslave  
-                        http://shardingsphere.io/schema/shardingsphere/masterslave/master-slave.xsd">
-    <context:annotation-config />
-    <context:component-scan base-package="io.shardingsphere.example.spring.namespace.jpa" />
-    
-    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
-        <property name="dataSource" ref="masterSlaveDataSource" />
-        <property name="jpaVendorAdapter">
-            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:database="MYSQL" />
-        </property>
-        <property name="packagesToScan" value="io.shardingsphere.example.spring.namespace.jpa.entity" />
-        <property name="jpaProperties">
-            <props>
-                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
-                <prop key="hibernate.hbm2ddl.auto">create</prop>
-                <prop key="hibernate.show_sql">true</prop>
-            </props>
-        </property>
-    </bean>
-    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" p:entityManagerFactory-ref="entityManagerFactory" />
-    <tx:annotation-driven />
-    
-    <bean id="ds_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_master" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds_slave0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_slave0" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds_slave1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_slave1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="randomStrategy" class="io.shardingsphere.api.algorithm.masterslave.RandomMasterSlaveLoadBalanceAlgorithm" />
-    <master-slave:data-source id="masterSlaveDataSource" master-data-source-name="ds_master" slave-data-source-names="ds_slave0, ds_slave1" strategy-ref="randomStrategy">
-            <master-slave:props>
-                <prop key="sql.show">${sql_show}</prop>
-                <prop key="executor.size">10</prop>
-                <prop key="foo">bar</prop>
-            </master-slave:props>
-    </master-slave:data-source>
-</beans>
-```
-
-### Orchestration
-
-#### Configuration Item Explanation
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-       xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/orchestration/sharding"
-       xmlns:master-slave="http://shardingsphere.io/schema/shardingsphere/orchestration/masterslave"
-       xmlns:reg="http://shardingsphere.io/schema/shardingsphere/orchestration/reg"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.io/schema/shardingsphere/orchestration/reg 
-                           http://shardingsphere.io/schema/shardingsphere/orchestration/reg/reg.xsd
-                           http://shardingsphere.io/schema/shardingsphere/orchestration/sharding 
-                           http://shardingsphere.io/schema/shardingsphere/orchestration/sharding/sharding.xsd
-                           http://shardingsphere.io/schema/shardingsphere/orchestration/masterslave  
-                           http://shardingsphere.io/schema/shardingsphere/orchestration/masterslave/master-slave.xsd">
-    
-    <reg:registry-center id="regCenter" server-lists="localhost:2181" namespace="orchestration-spring-namespace-demo" overwtite="false" />
-    <sharding:data-source id="shardingMasterSlaveDataSource" registry-center-ref="regCenter" />
-    <master-slave:data-source id="masterSlaveDataSource" registry-center-ref="regCenter" />
-</beans>
-```
-
-## 2.x
-
-### Readwrite-splitting
-
-#### The configuration example for Spring namespace
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xmlns:context="http://www.springframework.org/schema/context"
-    xmlns:sharding="http://shardingsphere.io/schema/shardingjdbc/sharding"
-    xmlns:masterslave="http://shardingsphere.io/schema/shardingjdbc/masterslave"
-    xsi:schemaLocation="http://www.springframework.org/schema/beans
-                        http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://www.springframework.org/schema/context
-                        http://www.springframework.org/schema/context/spring-context.xsd
-                        http://shardingsphere.io/schema/shardingjdbc/sharding
-                        http://shardingsphere.io/schema/shardingjdbc/sharding/sharding.xsd
-                        http://shardingsphere.io/schema/shardingjdbc/masterslave
-                        http://shardingsphere.io/schema/shardingjdbc/masterslave/master-slave.xsd
-                        ">
-    <!-- Actual source data Configuration -->
-    <bean id="dbtbl_0_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <!-- Readwrite-splitting DataSource Configuration -->
-    <master-slave:data-source id="dbtbl_0" master-data-source-name="dbtbl_0_master" slave-data-source-names="dbtbl_0_slave_0, dbtbl_0_slave_1" strategy-type="ROUND_ROBIN" />
-    <master-slave:data-source id="dbtbl_1" master-data-source-name="dbtbl_1_master" slave-data-source-names="dbtbl_1_slave_0, dbtbl_1_slave_1" strategy-type="ROUND_ROBIN" />
-    
-    <sharding:inline-strategy id="databaseStrategy" sharding-column="user_id" algorithm-expression="dbtbl_${user_id % 2}" />
-    <sharding:inline-strategy id="orderTableStrategy" sharding-column="order_id" algorithm-expression="t_order_${order_id % 4}" />
-    
-    <sharding:data-source id="shardingDataSource">
-        <sharding:sharding-rule data-source-names="dbtbl_0, dbtbl_1">
-            <sharding:table-rules>
-                <sharding:table-rule logic-table="t_order" actual-data-nodes="dbtbl_${0..1}.t_order_${0..3}" database-strategy-ref="databaseStrategy" table-strategy-ref="orderTableStrategy"/>
-            </sharding:table-rules>
-        </sharding:sharding-rule>
-    </sharding:data-source>
-</beans>
-```
\ No newline at end of file
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.cn.md
deleted file mode 100644
index c88d8a64366..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.cn.md
+++ /dev/null
@@ -1,652 +0,0 @@
-+++
-title = "YAML 配置"
-weight = 1
-+++
-
-## 5.0.0-alpha
-
-### 数据分片
-
-#### 配置项说明
-
-```yaml
-dataSources: # 省略数据源配置，请参考使用手册
-
-rules:
-- !SHARDING
-  tables: # 数据分片规则配置
-    <logic-table-name> (+): # 逻辑表名称
-      actualDataNodes (?): # 由数据源名 + 表名组成（参考 Inline 语法规则）
-      databaseStrategy (?): # 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-        standard: # 用于单分片键的标准分片场景
-          shardingColumn: # 分片列名称
-          shardingAlgorithmName: # 分片算法名称
-        complex: # 用于多分片键的复合分片场景
-          shardingColumns: # 分片列名称，多个列以逗号分隔
-          shardingAlgorithmName: # 分片算法名称
-        hint: # Hint 分片策略
-          shardingAlgorithmName: # 分片算法名称
-        none: # 不分片
-      tableStrategy: # 分表策略，同分库策略
-      keyGenerateStrategy: # 分布式序列策略
-        column: # 自增列名称，缺省表示不使用自增主键生成器
-        keyGeneratorName: # 分布式序列算法名称
-  autoTables: # 自动分片表规则配置
-    t_order_auto: # 逻辑表名称
-      actualDataSources (?): # 数据源名称
-      shardingStrategy: # 切分策略
-        standard: # 用于单分片键的标准分片场景
-          shardingColumn: # 分片列名称
-          shardingAlgorithmName: # 自动分片算法名称
-  bindingTables (+): # 绑定表规则列表
-    - <logic_table_name_1, logic_table_name_2, ...> 
-    - <logic_table_name_1, logic_table_name_2, ...> 
-  broadcastTables (+): # 广播表规则列表
-    - <table-name>
-    - <table-name>
-  defaultDatabaseStrategy: # 默认数据库分片策略
-  defaultTableStrategy: # 默认表分片策略
-  defaultKeyGenerateStrategy: # 默认的分布式序列策略
-  
-  # 分片算法配置
-  shardingAlgorithms:
-    <sharding-algorithm-name> (+): # 分片算法名称
-      type: # 分片算法类型
-      props: # 分片算法属性配置
-      # ...
-  
-  # 分布式序列算法配置
-  keyGenerators:
-    <key-generate-algorithm-name> (+): # 分布式序列算法名称
-      type: # 分布式序列算法类型
-      props: # 分布式序列算法属性配置
-      # ...
-
-props:
-  # ...
-```
-
-### 读写分离
-
-#### 配置项说明
-
-```yaml
-dataSources: # 省略数据源配置，请参考使用手册
-
-rules:
-- !REPLICA_QUERY
-  dataSources:
-    <data-source-name> (+): # 读写分离逻辑数据源名称
-      primaryDataSourceName: # 主库数据源名称
-      replicaDataSourceNames: 
-        - <replica-data_source-name> (+) # 从库数据源名称
-      loadBalancerName: # 负载均衡算法名称
-  
-  # 负载均衡算法配置
-  loadBalancers:
-    <load-balancer-name> (+): # 负载均衡算法名称
-      type: # 负载均衡算法类型
-      props: # 负载均衡算法属性配置
-        # ...
-
-props:
-  # ...
-```
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
-
-### 数据加密
-
-#### 配置项说明
-
-```yaml
-dataSource: # 省略数据源配置，请参考使用手册
-
-rules:
-- !ENCRYPT
-  tables:
-    <table-name> (+): # 加密表名称
-      columns:
-        <column-name> (+): # 加密列名称
-          cipherColumn: # 密文列名称
-          assistedQueryColumn (?):  # 查询辅助列名称
-          plainColumn (?): # 原文列名称
-          encryptorName: # 加密算法名称
-  
-  # 加密算法配置
-  encryptors:
-    <encrypt-algorithm-name> (+): # 加解密算法名称
-      type: # 加解密算法类型
-      props: # 加解密算法属性配置
-        # ...
-
-  queryWithCipherColumn: # 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询
-```
-
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
-
-### 影子库
-
-#### 配置项说明
-
-```yaml
-dataSources: # 省略数据源配置，请参考使用手册
-
-rules:
-- !SHADOW
-  column: # 影子字段名
-  sourceDataSourceNames: # 影子前数据库名
-     # ...
-  shadowDataSourceNames: # 对应的影子库名
-     # ... 
-
-props:
-  # ...
-```
-
-### 分布式治理
-
-#### 配置项说明
-
-```yaml
-governance:
-  name: # 治理名称
-  registryCenter: # 注册中心
-    type: # 治理持久化类型。如：Zookeeper, etcd
-    serverLists: # 治理服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181 
-  overwrite: # 本地配置是否覆盖配置中心配置。如果可覆盖，每次启动都以本地配置为准
-```
-
-## ShardingSphere-4.x
-
-### 数据分片
-
-#### 配置项说明
-
-```yaml
-dataSources: # 数据源配置，可配置多个 data_source_name
-  <data_source_name>: # <!!数据库连接池实现类> `!!`表示实例化该类
-    driverClassName: # 数据库驱动类名
-    url: # 数据库 url 连接
-    username: # 数据库用户名
-    password: # 数据库密码
-    # ... 数据库连接池的其它属性
-
-shardingRule:
-  tables: # 数据分片规则配置，可配置多个 logic_table_name
-    <logic_table_name>: # 逻辑表名称
-      actualDataNodes: # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-
-      databaseStrategy: # 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-        standard: # 用于单分片键的标准分片场景
-          shardingColumn: # 分片列名称
-          preciseAlgorithmClassName: # 精确分片算法类名称，用于 = 和 IN。该类需实现 PreciseShardingAlgorithm 接口并提供无参数的构造器
-          rangeAlgorithmClassName: # 范围分片算法类名称，用于 BETWEEN，可选。该类需实现 RangeShardingAlgorithm 接口并提供无参数的构造器
-        complex: # 用于多分片键的复合分片场景
-          shardingColumns: # 分片列名称，多个列以逗号分隔
-          algorithmClassName: # 复合分片算法类名称。该类需实现 ComplexKeysShardingAlgorithm 接口并提供无参数的构造器
-        inline: # 行表达式分片策略
-          shardingColumn: # 分片列名称
-          algorithmInlineExpression: # 分片算法行表达式，需符合 groovy 语法
-        hint: # Hint 分片策略
-          algorithmClassName: # Hint 分片算法类名称。该类需实现 HintShardingAlgorithm 接口并提供无参数的构造器
-        none: # 不分片
-      tableStrategy: # 分表策略，同分库策略
-      keyGenerator:
-        column: # 自增列名称，缺省表示不使用自增主键生成器
-        type: # 自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
-        props: # 属性配置， 注意：使用 SNOWFLAKE 算法，需要配置 max.tolerate.time.difference.milliseconds 属性。若使用此算法生成值作分片值，建议配置 max.vibration.offset 属性
-          <property-name>: # 属性名称
-
-  bindingTables: # 绑定表规则列表
-    - <logic_table_name1, logic_table_name2, ...>
-    - <logic_table_name3, logic_table_name4, ...>
-    - <logic_table_name_x, logic_table_name_y, ...>
-  broadcastTables: # 广播表规则列表
-    - table_name1
-    - table_name2
-    - table_name_x
-
-  defaultDataSourceName: # 未配置分片规则的表将通过默认数据源定位  
-  defaultDatabaseStrategy: # 默认数据库分片策略，同分库策略
-  defaultTableStrategy: # 默认表分片策略，同分库策略
-  defaultKeyGenerator: # 默认的主键生成算法，如果没有设置，默认为 SNOWFLAKE 算法
-    type: # 默认自增列值生成器类型，缺省将使用 org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
-    props:
-      <property-name>: # 自增列值生成器属性配置，比如 SNOWFLAKE 算法的 max.tolerate.time.difference.milliseconds
-
-  masterSlaveRules: # 读写分离规则，详见读写分离部分
-    <data_source_name>: # 数据源名称，需要与真实数据源匹配，可配置多个 data_source_name
-      masterDataSourceName: # 详见读写分离部分
-      slaveDataSourceNames: # 详见读写分离部分
-      loadBalanceAlgorithmType: # 详见读写分离部分
-      props: # 读写分离负载算法的属性配置
-        <property-name>: # 属性值
-
-props: # 属性配置
-  sql.show: # 是否开启 SQL 显示，默认值: false
-  executor.size: # 工作线程数量，默认值: CPU 核数
-  max.connections.size.per.query: # 每个查询可以打开的最大连接数量，默认为 1
-  check.table.metadata.enabled: # 是否在启动时检查分表元数据一致性，默认值: false
-```
-
-### 读写分离
-
-#### 配置项说明
-
-```yaml
-dataSources: # 省略数据源配置，与数据分片一致
-
-masterSlaveRule:
-  name: # 读写分离数据源名称
-  masterDataSourceName: # 主库数据源名称
-  slaveDataSourceNames: # 从库数据源名称列表
-    - <data_source_name1>
-    - <data_source_name2>
-    - <data_source_name_x>
-  loadBalanceAlgorithmType: # 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若 `loadBalanceAlgorithmClassName` 存在则忽略该配置
-  props: # 读写分离负载算法的属性配置
-    <property-name>: # 属性值
-```
-
-通过 `YamlMasterSlaveDataSourceFactory` 工厂类创建 `DataSource`：
-
-```java
-DataSource dataSource = YamlMasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
-
-### 数据脱敏
-
-#### 配置项说明
-
-```yaml
-dataSource: # 省略数据源配置
-
-encryptRule:
-  encryptors:
-    <encryptor-name>:
-      type: # 加解密器类型，可自定义或选择内置类型：MD5/AES 
-      props: # 属性配置，注意：使用 AES 加密器，需要配置 AES 加密器的 KEY 属性：aes.key.value
-        aes.key.value:
-  tables:
-    <table-name>:
-      columns:
-        <logic-column-name>:
-          plainColumn: # 存储明文的字段
-          cipherColumn: # 存储密文的字段
-          assistedQueryColumn: # 辅助查询字段，针对 ShardingQueryAssistedEncryptor 类型的加解密器进行辅助查询
-          encryptor: # 加密器名字
-```
-
-### 治理
-
-#### 配置项说明
-
-```yaml
-dataSources: # 省略数据源配置
-shardingRule: # 省略分片规则配置
-masterSlaveRule: # 省略读写分离规则配置
-encryptRule: # 省略数据脱敏规则配置
-
-orchestration:
-  name: # 治理实例名称
-  overwrite: # 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-  registry: # 注册中心配置
-    type: # 配置中心类型。如：zookeeper
-    serverLists: # 连接注册中心服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-    namespace: # 注册中心的命名空间
-    digest: # 连接注册中心的权限令牌。缺省为不需要权限验证
-    operationTimeoutMilliseconds: # 操作超时的毫秒数，默认 500 毫秒
-    maxRetries: # 连接失败后的最大重试次数，默认 3 次
-    retryIntervalMilliseconds: # 重试间隔毫秒数，默认 500 毫秒
-    timeToLiveSeconds: # 临时节点存活秒数，默认 60 秒
-```
-
-## ShardingSphere-3.x
-
-### 数据分片
-
-#### 配置项说明
-
-```yaml
-# 以下配置截止版本为3.1
-# 配置文件中,必须配置的项目为 schemaName,dataSources,并且 shardingRule,masterSlaveRule,配置其中一个(注意,除非 server.yaml 中定义了 Orchestration,否则必须至少有一个 config-xxxx 配置文件),除此之外的其他项目为可选项
-schemaName: test # schema 名称,每个文件都是单独的 schema,多个 schema 则是多个 yaml 文件,yaml 文件命名要求是 config-xxxx.yaml 格式,虽然没有强制要求,但推荐名称中的 xxxx 与配置的 schemaName 保持一致,方便维护
-
-dataSources: # 配置数据源列表,必须是有效的 jdbc 配置,目前仅支持 MySQL 与 PostgreSQL,另外通过一些未公开(代码中可查,但可能会在未来有变化)的变量,可以配置来兼容其他支持 JDBC 的数据库,但由于没有足够的测试支持,可能会有严重的兼容性问题,配置时候要求至少有一个
-  master_ds_0: # 数据源名称,可以是合法的字符串,目前的校验规则中,没有强制性要求,只要是合法的 yaml 字符串即可,但如果要用于分库分表配置,则需要有有意义的标志(在分库分表配置中详述),以下为目前公开的合法配置项目,不包含内部配置参数
-    # 以下参数为必备参数
-    url: jdbc:mysql://127.0.0.1:3306/demo_ds_slave_1?serverTimezone=UTC&useSSL=false # 这里的要求合法的 jdbc 连接串即可,目前尚未兼容 MySQL 8.x,需要在 maven 编译时候,升级 MySQL JDBC 版本到 5.1.46 或者 47 版本(不建议升级到 JDBC 的 8.x 系列版本,需要修改源代码,并且无法通过很多测试 case)
-    username: root # MySQL 用户名
-    password: password # MySQL 用户的明文密码
-    # 以下参数为可选参数,给出示例为默认配置,主要用于连接池控制
-    connectionTimeoutMilliseconds: 30000 # 连接超时控制
-    idleTimeoutMilliseconds: 60000 # 连接空闲时间设置
-    maxLifetimeMilliseconds: 0 # 连接的最大持有时间,0 为无限制
-    maxPoolSize: 50 # 连接池中最大维持的连接数量
-    minPoolSize: 1 # 连接池的最小连接数量
-    maintenanceIntervalMilliseconds: 30000 # 连接维护的时间间隔 atomikos 框架需求
-  # 以下配置的假设是,3307 是 3306 的从库,3309,3310 是 3308 的从库
-  slave_ds_0:
-    url: jdbc:mysql://127.0.0.1:3307/demo_ds_slave_1?serverTimezone=UTC&useSSL=false
-    username: root
-    password: password
-  master_ds_1:
-    url: jdbc:mysql://127.0.0.1:3308/demo_ds_slave_1?serverTimezone=UTC&useSSL=false
-    username: root
-    password: password
-  slave_ds_1:
-    url: jdbc:mysql://127.0.0.1:3309/demo_ds_slave_1?serverTimezone=UTC&useSSL=false
-    username: root
-    password: password
-  slave_ds_1_slave2:
-    url: jdbc:mysql://127.0.0.1:3310/demo_ds_slave_1?serverTimezone=UTC&useSSL=false
-    username: root
-    password: password
-masterSlaveRule: # 这里配置这个规则的话,相当于是全局读写分离配置
-  name: ds_rw # 名称,合法的字符串即可,但如果涉及到在读写分离的基础上设置分库分表,则名称需要有意义才可以,另外,虽然目前没有强制要求,但主从库配置需要配置在实际关联的主从库上,如果配置的数据源之间主从是断开的状态,那么可能会发生写入的数据对于只读会话无法读取到的问题
-  # 如果一个会话发生了写入并且没有提交(显式打开事务)， ShardingSphere 在后续的路由中,select 都会在主库执行,直到会话提交
-  masterDataSourceName: master_ds_0 # 主库的 DataSource 名称
-  slaveDataSourceNames: # 从库的 DataSource 列表,至少需要有一个
-    - slave_ds_0
-  loadBalanceAlgorithmClassName: io.shardingsphere.api.algorithm.masterslave # MasterSlaveLoadBalanceAlgorithm 接口的实现类,允许自定义实现 默认提供两个,配置路径为 io.shardingsphere.api.algorithm.masterslave 下的 RandomMasterSlaveLoadBalanceAlgorithm(随机 Random)与 RoundRobinMasterSlaveLoadBalanceAlgorithm(轮询:次数 % 从库数量)
-  loadBalanceAlgorithmType: # 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若 loadBalanceAlgorithmClassName 存在则忽略该配置,默认为 ROUND_ROBIN
-
-shardingRule: # sharding 的配置
-  # 配置主要分两类,一类是对整个sharding规则所有表生效的默认配置,一个是 sharing 具体某张表时候的配置
-  # 首先说默认配置
-  masterSlaveRules: # 在 shardingRule 中也可以配置 shardingRule,对分片生效,具体内容与全局 masterSlaveRule 一致,但语法为:
-    master_test_0:
-      masterDataSourceName: master_ds_0
-      slaveDataSourceNames:
-        - slave_ds_0
-    master_test_1:
-      masterDataSourceName: master_ds_1
-      slaveDataSourceNames:
-        - slave_ds_1
-        - slave_ds_1_slave2
-  defaultDataSourceName: master_test_0 # 这里的数据源允许是 dataSources 的配置项目或者 masterSlaveRules 配置的名称,配置为 masterSlaveRule 的话相当于就是配置读写分离了
-  broadcastTables: # 广播表 这里配置的表列表,对于发生的所有数据变更,都会不经 sharding 处理,而是直接发送到所有数据节点,注意此处为列表,每个项目为一个表名称
-    - broad_1
-    - broad_2
-  bindingTables: # 绑定表,也就是实际上哪些配置的 sharding 表规则需要实际生效的列表,配置为 yaml 列表,并且允许单个条目中以逗号切割,所配置表必须已经配置为逻辑表
-    - sharding_t1
-    - sharding_t2,sharding_t3
-  defaultDatabaseShardingStrategy: # 默认库级别 sharding 规则,对应代码中 ShardingStrategy 接口的实现类,目前支持 none,inline,hint,complex,standard 五种配置 注意此处默认配置仅可以配置五个中的一个
-    # 规则配置同样适合表 sharding 配置,同样是在这些算法中选择
-    none: # 不配置任何规则,SQL 会被发给所有节点去执行,这个规则没有子项目可以配置
-    inline: # 行表达式分片
-      shardingColumn: test_id # 分片列名称
-      algorithmExpression: master_test_${test_id % 2} # 分片表达式,根据指定的表达式计算得到需要路由到的数据源名称 需要是合法的 groovy 表达式,示例配置中,取余为 0 则语句路由到 master_test_0,取余为 1 则路由到 master_test_1
-    hint: # 基于标记的 sharding 分片
-      shardingAlgorithm: # 需要是 HintShardingAlgorithm 接口的实现,目前代码中,仅有为测试目的实现的 OrderDatabaseHintShardingAlgorithm,没有生产环境可用的实现
-    complex: # 支持多列的 sharding,目前无生产可用实现
-      shardingColumns: # 逗号切割的列
-      shardingAlgorithm: # ComplexKeysShardingAlgorithm 接口的实现类
-    standard: # 单列 sharding 算法,需要配合对应的 preciseShardingAlgorithm,rangeShardingAlgorithm 接口的实现使用,目前无生产可用实现
-      shardingColumn: # 列名,允许单列
-      preciseShardingAlgorithm: # preciseShardingAlgorithm 接口的实现类
-      rangeShardingAlgorithm: # rangeShardingAlgorithm 接口的实现类
-  defaultTableStrategy: # 配置参考 defaultDatabaseShardingStrategy,区别在于,inline 算法的配置中,algorithmExpression 的配置算法结果需要是实际的物理表名称,而非数据源名称
-  defaultKeyGenerator: # 默认的主键生成算法，如果没有设置，默认为 SNOWFLAKE 算法
-    column: # 自增键对应的列名称
-    type: # 自增键的类型,主要用于调用内置的主键生成算法有三个可用值:SNOWFLAKE(时间戳 +worker id+ 自增 id),UUID(java.util.UUID 类生成的随机 UUID),LEAF,其中 Snowflake 算法与 UUID 算法已经实现,LEAF 目前(2018-01-14)尚未实现
-    className: # 非内置的其他实现了 KeyGenerator 接口的类,需要注意,如果设置这个,就不能设置 type,否则 type 的设置会覆盖 class 的设置
-    props:
-    # 定制算法需要设置的参数,比如 SNOWFLAKE 算法的 max.tolerate.time.difference.milliseconds
-  tables: # 配置表 sharding 的主要位置
-    sharding_t1:
-      actualDataNodes: master_test_${0..1}.t_order${0..1} # sharding 表对应的数据源以及物理名称,需要用表达式处理,表示表实际上在哪些数据源存在,配置示例中,意思是总共存在 4 个分片 master_test_0.t_order0,master_test_0.t_order1,master_test_1.t_order0,master_test_1.t_order1
-      # 需要注意的是,必须保证设置 databaseStrategy 可以路由到唯一的 dataSource,tableStrategy 可以路由到 dataSource 中唯一的物理表上,否则可能导致错误:一个 insert 语句被插入到多个实际物理表中
-      databaseStrategy: # 局部设置会覆盖全局设置,参考 defaultDatabaseShardingStrategy
-      tableStrategy: # 局部设置会覆盖全局设置,参考 defaultTableStrategy
-      keyGenerator: # 局部设置会覆盖全局设置,参考 defaultKeyGenerator
-      logicIndex: # 逻辑索引名称 由于 Oracle,PG 这种数据库中,索引与表共用命名空间,如果接受到 drop index 语句,执行之前,会通过这个名称配置的确定对应的实际物理表名称
-props:
-  sql.show: # 是否开启 SQL 显示，默认值: false
-  acceptor.size: # accept 连接的线程数量,默认为 cpu 核数 2 倍
-  executor.size: # 工作线程数量最大，默认值: 无限制
-  max.connections.size.per.query: # 每个查询可以打开的最大连接数量,默认为 1
-  proxy.frontend.flush.threshold: # proxy 的服务时候,对于单个大查询,每多少个网络包返回一次
-  check.table.metadata.enabled: # 是否在启动时检查分表元数据一致性，默认值: false
-  proxy.transaction.type: # 默认 LOCAL,proxy 的事务模型 允许 LOCAL,XA,BASE 三个值 LOCAL 无分布式事务,XA 则是采用 atomikos 实现的分布式事务 BASE 目前尚未实现
-  proxy.opentracing.enabled: # 是否启用 opentracing
-  proxy.backend.use.nio: # 是否采用 netty 的 NIO 机制连接后端数据库,默认 False ,使用 epoll 机制
-  proxy.backend.max.connections: # 使用 NIO 而非 epoll 的话,proxy 后台连接每个 netty 客户端允许的最大连接数量(注意不是数据库连接限制) 默认为 8
-  proxy.backend.connection.timeout.seconds: # 使用 nio 而非 epoll 的话,proxy 后台连接的超时时间,默认 60s
-  check.table.metadata.enabled: # 是否在启动时候,检查 sharing 的表的实际元数据是否一致,默认 False
-
-configMap: # 用户自定义配置
-  key1: value1
-  key2: value2
-  keyx: valuex
-```
-
-### 读写分离
-
-#### 配置项说明
-
-```yaml
-dataSources: # 省略数据源配置，与数据分片一致
-
-masterSlaveRule:
-  name: # 读写分离数据源名称
-  masterDataSourceName: # 主库数据源名称
-  slaveDataSourceNames: # 从库数据源名称列表
-    - <data_source_name1>
-    - <data_source_name2>
-    - <data_source_name_x>
-  loadBalanceAlgorithmClassName: # 从库负载均衡算法类名称。该类需实现 MasterSlaveLoadBalanceAlgorithm 接口且提供无参数构造器
-  loadBalanceAlgorithmType: # 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若 `loadBalanceAlgorithmClassName` 存在则忽略该配置
-
-props: # 属性配置
-  sql.show: # 是否开启 SQL 显示，默认值: false
-  executor.size: # 工作线程数量，默认值: CPU 核数
-  check.table.metadata.enabled: # 是否在启动时检查分表元数据一致性，默认值: false
-
-configMap: # 用户自定义配置
-  key1: value1
-  key2: value2
-  keyx: valuex
-```
-
-通过 `MasterSlaveDataSourceFactory` 工厂类创建 `DataSource`：
-
-```java
-DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
-
-### 治理
-
-#### 配置项说明
-
-```yaml
-dataSources: # 省略数据源配置
-shardingRule: # 省略分片规则配置
-masterSlaveRule: # 省略读写分离规则配置
-
-orchestration:
-  name: # 数据治理实例名称
-  overwrite: # 本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-  registry: # 注册中心配置
-    serverLists: # 连接注册中心服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-    namespace: # 注册中心的命名空间
-    digest: # 连接注册中心的权限令牌。缺省为不需要权限验证
-    operationTimeoutMilliseconds: # 操作超时的毫秒数，默认 500 毫秒
-    maxRetries: # 连接失败后的最大重试次数，默认 3 次
-    retryIntervalMilliseconds: # 重试间隔毫秒数，默认 500 毫秒
-    timeToLiveSeconds: # 临时节点存活秒数，默认 60 秒
-```
-
-## ShardingSphere-2.x
-
-### 数据分片
-
-#### 配置项说明
-
-```yaml
-dataSources:
-  db0: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-  db1: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-
-shardingRule:
-  tables:
-    config:
-      actualDataNodes: db${0..1}.t_config
-    t_order: 
-      actualDataNodes: db${0..1}.t_order_${0..1}
-      databaseStrategy: 
-        standard:
-          shardingColumn: user_id
-          preciseAlgorithmClassName: io.shardingjdbc.core.yaml.fixture.SingleAlgorithm
-      tableStrategy: 
-        inline:
-          shardingColumn: order_id
-          algorithmInlineExpression: t_order_${order_id % 2}
-      keyGeneratorColumnName: order_id
-      keyGeneratorClass: io.shardingjdbc.core.yaml.fixture.IncrementKeyGenerator
-    t_order_item:
-      actualDataNodes: db${0..1}.t_order_item_${0..1}
-      # 绑定表中其余的表的策略与第一张表的策略相同
-      databaseStrategy: 
-        standard:
-          shardingColumn: user_id
-          preciseAlgorithmClassName: io.shardingjdbc.core.yaml.fixture.SingleAlgorithm
-      tableStrategy: 
-        inline:
-          shardingColumn: order_id
-          algorithmInlineExpression: t_order_item_${order_id % 2}
-  bindingTables:
-    - t_order,t_order_item
-  # 默认数据库分片策略
-  defaultDatabaseStrategy:
-    none:
-  defaultTableStrategy:
-    complex:
-      shardingColumns: id, order_id
-      algorithmClassName: io.shardingjdbc.core.yaml.fixture.MultiAlgorithm
-  props:
-    sql.show: true
-```
-
-### 读写分离
-
-#### 概念
-
-为了缓解数据库压力，将写入和读取操作分离为不同数据源，写库称为主库，读库称为从库，一主库可配置多从库。
-
-#### 支持项
-
-1. 提供了一主多从的读写分离配置，可独立使用，也可配合分库分表使用。
-2. 独立使用读写分离支持 SQL 透传。
-3. 同一线程且同一数据库连接内，如有写入操作，以后的读操作均从主库读取，用于保证数据一致性。
-4. Spring 命名空间。
-5. 基于 Hint 的强制主库路由。
-
-#### 不支持范围
-
-1. 主库和从库的数据同步。
-2. 主库和从库的数据同步延迟导致的数据不一致。
-3. 主库双写或多写。
-
-#### 配置规则
-
-```yaml
-dataSources:
-  db_master: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db_master;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-  db_slave_0: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db_slave_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-  db_slave_1: !!org.apache.commons.dbcp.BasicDataSource
-      driverClassName: org.h2.Driver
-      url: jdbc:h2:mem:db_slave_1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-      username: sa
-      password: 
-      maxActive: 100
-
-masterSlaveRule:
-  name: db_ms
-  masterDataSourceName: db_master
-  slaveDataSourceNames: [db_slave_0, db_slave_1]
-  configMap:
-    key1: value1
-```
-
-通过 `MasterSlaveDataSourceFactory` 工厂类创建 `DataSource`：
-
-```java
-DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
-
-### 治理
-
-#### 配置项说明
-
-Zookeeper 分库分表编排配置项说明
-
-```yaml
-dataSources: # 数据源配置
-
-shardingRule: # 分片规则配置
-
-orchestration: # Zookeeper 编排配置
-  name: # 编排服务节点名称
-  overwrite: # 本地配置是否可覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-  zookeeper: # Zookeeper 注册中心配置
-    namespace: # Zookeeper 的命名空间
-    serverLists: # 连接 Zookeeper 服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-    baseSleepTimeMilliseconds: # 等待重试的间隔时间的初始值。单位：毫秒
-    maxSleepTimeMilliseconds: # 等待重试的间隔时间的最大值。单位：毫秒
-    maxRetries: # 最大重试次数
-    sessionTimeoutMilliseconds: # 会话超时时间。单位：毫秒
-    connectionTimeoutMilliseconds: # 连接超时时间。单位：毫秒
-    digest: # 连接 Zookeeper 的权限令牌。缺省为不需要权限验证
-```
-
-Etcd 分库分表编排配置项说明
-
-```yaml
-dataSources: # 数据源配置
-
-shardingRule: # 分片规则配置
-
-orchestration: # Etcd 编排配置
-  name: # 编排服务节点名称
-  overwrite: # 本地配置是否可覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-  etcd: # Etcd 注册中心配置
-    serverLists: # 连接 Etcd 服务器的列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: http://host1:2379,http://host2:2379
-    timeToLiveSeconds: # 临时节点存活时间。单位：秒
-    timeoutMilliseconds: # 每次请求的超时时间。单位：毫秒
-    maxRetries: # 每次请求的最大重试次数
-    retryIntervalMilliseconds: # 重试间隔时间。单位：毫秒
-```
-
-分库分表编排数据源构建方式
-
-```java
-DataSource dataSource = OrchestrationShardingDataSourceFactory.createDataSource(yamlFile);
-```
-
-读写分离数据源构建方式
-
-```java
-DataSource dataSource = OrchestrationMasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md
deleted file mode 100644
index 3a9cc7e78f6..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md
+++ /dev/null
@@ -1,613 +0,0 @@
-+++
-title = "YAML configuration"
-weight = 1
-+++
-
-## 5.0.0-alpha
-
-### Data Sharding
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Omit the data source configuration, please refer to the usage
-
-rules:
-- !SHARDING
-  tables: # Sharding table configuration
-    <logic-table-name> (+): # Logic table name
-      actualDataNodes (?): # Describe data source names and actual tables (refer to Inline syntax rules)
-      databaseStrategy (?): # Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one.
-        standard: # For single sharding column scenario
-          shardingColumn: # Sharding column name
-          shardingAlgorithmName: # Sharding algorithm name
-        complex: # For multiple sharding columns scenario
-          shardingColumns: # Sharding column names, multiple columns separated with comma
-          shardingAlgorithmName: # Sharding algorithm name
-        hint: # Sharding by hint
-          shardingAlgorithmName: # Sharding algorithm name
-        none: # Do not sharding
-      tableStrategy: # Tables sharding strategy, same as database sharding strategy
-      keyGenerateStrategy: # Key generator strategy
-        column: # Column name of key generator
-        keyGeneratorName: # Key generator name
-  autoTables: # Auto Sharding table configuration
-    t_order_auto: # Logic table name
-      actualDataSources (?): # Data source names
-      shardingStrategy: # Sharding strategy
-        standard: # For single sharding column scenario
-          shardingColumn: # Sharding column name
-          shardingAlgorithmName: # Auto sharding algorithm name
-  bindingTables (+): # Binding tables
-    - <logic_table_name_1, logic_table_name_2, ...> 
-    - <logic_table_name_1, logic_table_name_2, ...> 
-  broadcastTables (+): # Broadcast tables
-    - <table-name>
-    - <table-name>
-  defaultDatabaseStrategy: # Default strategy for database sharding
-  defaultTableStrategy: # Default strategy for table sharding
-  defaultKeyGenerateStrategy: # Default Key generator strategy
-  
-  # Sharding algorithm configuration
-  shardingAlgorithms:
-    <sharding-algorithm-name> (+): # Sharding algorithm name
-      type: # Sharding algorithm type
-      props: # Sharding algorithm properties
-      # ...
-  
-  # Key generate algorithm configuration
-  keyGenerators:
-    <key-generate-algorithm-name> (+): # Key generate algorithm name
-      type: # Key generate algorithm type
-      props: # Key generate algorithm properties
-      # ...
-
-props:
-  # ...
-```
-
-### Replica Query
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Omit the data source configuration, please refer to the usage
-
-rules:
-- !REPLICA_QUERY
-  dataSources:
-    <data-source-name> (+): # Logic data source name of replica query
-      primaryDataSourceName: # Primary data source name
-      replicaDataSourceNames: 
-        - <replica-data_source-name> (+) # Replica data source name
-      loadBalancerName: # Load balance algorithm name
-  
-  # Load balance algorithm configuration
-  loadBalancers:
-    <load-balancer-name> (+): # Load balance algorithm name
-      type: # Load balance algorithm type
-      props: # Load balance algorithm properties
-        # ...
-
-props:
-  # ...
-```
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
-
-### Encryption
-
-#### Configuration Item Explanation
-
-```yaml
-dataSource: # Omit the data source configuration, please refer to the usage
-
-rules:
-- !ENCRYPT
-  tables:
-    <table-name> (+): # Encrypt table name
-      columns:
-        <column-name> (+): # Encrypt logic column name
-          cipherColumn: # Cipher column name
-          assistedQueryColumn (?):  # Assisted query column name
-          plainColumn (?): # Plain column name
-          encryptorName: # Encrypt algorithm name
-  
-  # Encrypt algorithm configuration
-  encryptors:
-    <encrypt-algorithm-name> (+): # Encrypt algorithm name
-      type: # Encrypt algorithm type
-      props: # Encrypt algorithm properties
-        # ...
-
-  queryWithCipherColumn: # Whether query with cipher column for data encrypt. User you can use plaintext to query if have
-```
-
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
-
-### Shadow DB
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Omit the data source configuration, please refer to the usage
-
-rules:
-- !SHADOW
-  column: # Shadow column name
-  sourceDataSourceNames: # Source Data Source names
-     # ...
-  shadowDataSourceNames: # Shadow Data Source names
-     # ... 
-
-props:
-  # ...
-```
-
-### Governance
-
-#### Configuration Item Explanation
-
-```yaml
-governance:
-  name: # Governance name
-  registryCenter: # Registry center
-    type: # Governance instance type. Example:Zookeeper, etcd
-    serverLists: # The list of servers that connect to governance instance, including IP and port number; use commas to separate 
-  overwrite: # Whether to overwrite local configurations with config center configurations; if it can, each initialization should refer to local configurations
-```
-
-## ShardingSphere-4.x
-
-### Data Sharding
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Data sources configuration, multiple `data_source_name` available
-  <data_source_name>: # <!!Data source pool implementation class> `!!` means class instantiation
-    driverClassName: # Class name of database driver
-    url: # Database URL
-    username: # Database username
-    password: # Database password
-    # ... Other properties for data source pool
-
-shardingRule:
-  tables: # Sharding rule configuration, multiple `logic_table_name` available
-    <logic_table_name>: # Name of logic table
-      actualDataNodes: # Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only. Example: ds${0..7}.tbl${0..7}
-
-      databaseStrategy: # Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one
-        standard: # Standard sharding scenario for single sharding column
-          shardingColumn: # Name of sharding column
-            preciseAlgorithmClassName: # Precise algorithm class name used for `=` and `IN`. This class need to implements PreciseShardingAlgorithm, and require a no argument constructor
-            rangeAlgorithmClassName: # Range algorithm class name used for `BETWEEN`. This class need to implements RangeShardingAlgorithm, and require a no argument constructor
-          complex: # Complex sharding scenario for multiple sharding columns
-            shardingColumns: # Names of sharding columns. Multiple columns separated with comma
-            algorithmClassName: # Complex sharding algorithm class name. This class need to implements ComplexKeysShardingAlgorithm, and require a no argument constructor
-          inline: # Inline expression sharding scenario for single sharding column
-            shardingColumn: # Name of sharding column
-            algorithmInlineExpression: # Inline expression for sharding algorithm
-          hint: # Hint sharding strategy
-            algorithmClassName: # Hint sharding algorithm class name. This class need to implements HintShardingAlgorithm, and require a no argument constructor
-            none: # Do not sharding
-      tableStrategy: # Tables sharding strategy, Same as databases sharding strategy
-      keyGenerator:
-        column: # Column name of key generator
-        type: # Type of key generator, use default key generator if absent, and there are three types to choose, that is, SNOWFLAKE/UUID
-        props: # Properties, Notice: when use SNOWFLAKE, `max.tolerate.time.difference.milliseconds` for `SNOWFLAKE` need to be set. To use the generated value of this algorithm as sharding value, it is recommended to configure `max.vibration.offset`         
-
-  bindingTables: # Binding table rule configurations
-    - <logic_table_name1, logic_table_name2, ...>
-    - <logic_table_name3, logic_table_name4, ...>
-    - <logic_table_name_x, logic_table_name_y, ...>
-  broadcastTables: # Broadcast table rule configurations
-    - table_name1
-    - table_name2
-    - table_name_x
-
-  defaultDataSourceName: # If table not configure at table rule, will route to defaultDataSourceName  
-  defaultDatabaseStrategy: # Default strategy for sharding databases, same as databases sharding strategy
-  defaultTableStrategy: # Default strategy for sharding tables, same as tables sharding strategy
-  defaultKeyGenerator:
-    type: # Type of default key generator, use user-defined ones or built-in ones, e.g. SNOWFLAKE, UUID. Default key generator is `org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator`
-    column: # Column name of default key generator
-    props: # Properties of default key generator, e.g. `max.tolerate.time.difference.milliseconds` for `SNOWFLAKE` 
-
-  masterSlaveRules: # Read-write splitting rule configuration, more details can reference Read-write splitting part
-    <data_source_name>: # Data sources configuration, need consist with data source map, multiple `data_source_name` available
-      masterDataSourceName: # more details can reference Read-write splitting part
-      slaveDataSourceNames: # more details can reference Read-write splitting part
-      loadBalanceAlgorithmType: # more details can reference Read-write splitting part
-      props: # Properties configuration of load balance algorithm
-        <property-name>: # property key value pair
-
-props: # Properties
-  sql.show: # To show SQLS or not, default value: false
-  executor.size: # The number of working threads, default value: CPU count
-  check.table.metadata.enabled: # To check the metadata consistency of all the tables or not, default value : false
-  max.connections.size.per.query: # The maximum connection number allocated by each query of each physical database. default value: 1
-```
-
-### Read-Write Split
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Omit data source configurations; keep it consistent with data sharding
-
-masterSlaveRule:
-  name: # Read-write split data source name
-  masterDataSourceName: # Master data source name
-  slaveDataSourceNames: # Slave data source name
-    - <data_source_name1>
-    - <data_source_name2>
-    - <data_source_name_x>
-  loadBalanceAlgorithmType: # Slave database load balance algorithm type; optional value, ROUND_ROBIN and RANDOM, can be omitted if `loadBalanceAlgorithmClassName` exists
-  props: # Properties configuration of load balance algorithm
-    <property-name>: # property key value pair
-
-props: # Property configuration
-  sql.show: # Show SQL or not; default value: false
-  executor.size: # Executing thread number; default value: CPU core number
-  check.table.metadata.enabled: # Whether to check table metadata consistency when it initializes; default value: false
-  max.connections.size.per.query: # The maximum connection number allocated by each query of each physical database. default value: 1
-```
-
-Create a `DataSource` through the `YamlMasterSlaveDataSourceFactory` factory class:
-
-```java
-DataSource dataSource = YamlMasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
-
-### Data Masking
-
-#### Configuration Item Explanation
-
-```yaml
-dataSource: # Ignore data sources configuration
-
-encryptRule:
-  encryptors:
-    <encryptor-name>:
-      type: # Encryptor type
-      props: # Properties, e.g. `aes.key.value` for AES encryptor
-        aes.key.value:
-  tables:
-    <table-name>:
-      columns:
-        <logic-column-name>:
-          plainColumn: # Plaintext column name
-          cipherColumn: # Ciphertext column name
-          assistedQueryColumn: # AssistedColumns for query, when use ShardingQueryAssistedEncryptor, it can help query encrypted data
-          encryptor: # Encrypt name
-```
-
-### Orchestration
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Omit data source configurations
-shardingRule: # Omit sharding rule configurations
-masterSlaveRule: # Omit read-write split rule configurations
-encryptRule: # Omit encrypt rule configurations
-
-orchestration:
-  name: # Orchestration instance name
-  overwrite: # Whether to overwrite local configurations with registry center configurations; if it can, each initialization should refer to local configurations
-  registry: # Registry center configuration
-    type: # Registry center type. Example:zookeeper
-    serverLists: # The list of servers that connect to registry center, including IP and port number; use commas to seperate addresses, such as: host1:2181,host2:2181
-    namespace: # Registry center namespace
-    digest: # The token that connects to the registry center; default means there is no need for authentication
-    operationTimeoutMilliseconds: # Default value: 500 milliseconds
-    maxRetries: # Maximum retry time after failing; default value: 3 times
-    retryIntervalMilliseconds: # Interval time to retry; default value: 500 milliseconds
-    timeToLiveSeconds: # Living time of temporary nodes; default value: 60 seconds
-```
-
-## ShardingSphere-3.x
-
-### Data Sharding
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Data sources configuration, multiple `data_source_name` available
-  <data_source_name>: # <!!Data source pool implementation class> `!!` means class instantiation
-    driverClassName: # Class name of database driver
-    url: # Database URL
-    username: # Database username
-    password: # Database password
-    # ... Other properties for data source pool
-
-shardingRule:
-  tables: # Sharding rule configuration, multiple `logic_table_name` available
-    <logic_table_name>: # Name of logic table
-      actualDataNodes: # Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only. Example: ds${0..7}.tbl${0..7}
-
-      databaseStrategy: # Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one
-        standard: # Standard sharding scenario for single sharding column
-          shardingColumn: # Name of sharding column
-            preciseAlgorithmClassName: # Precise algorithm class name used for `=` and `IN`. This class need to implements PreciseShardingAlgorithm, and require a no argument constructor
-            rangeAlgorithmClassName: # Range algorithm class name used for `BETWEEN`. This class need to implements RangeShardingAlgorithm, and require a no argument constructor
-          complex: # Complex sharding scenario for multiple sharding columns
-            shardingColumns: # Names of sharding columns. Multiple columns separated with comma
-            algorithmClassName: # Complex sharding algorithm class name. This class need to implements ComplexKeysShardingAlgorithm, and require a no argument constructor
-          inline: # Inline expression sharding scenario for single sharding column
-            shardingColumn: # Name of sharding column
-            algorithmInlineExpression: # Inline expression for sharding algorithm
-          hint: # Hint sharding strategy
-            algorithmClassName: # Hint sharding algorithm class name. This class need to implements HintShardingAlgorithm, and require a no argument constructor
-            none: # Do not sharding
-      tableStrategy: # Tables sharding strategy, Same as databases sharding strategy
-
-      keyGeneratorColumnName: # Column name of key generator, do not use Key generator if absent
-      keyGeneratorClassName: # Key generator, use default key generator if absent. This class need to implements KeyGenerator, and require a no argument constructor
-
-      logicIndex: # Name if logic index. If use `DROP INDEX XXX` SQL in Oracle/PostgreSQL, This property needs to be set for finding the actual tables
-  bindingTables: # Binding table rule configurations
-    - <logic_table_name1, logic_table_name2, ...>
-    - <logic_table_name3, logic_table_name4, ...>
-    - <logic_table_name_x, logic_table_name_y, ...>
-  bindingTables: # Broadcast table rule configurations
-    - table_name1
-    - table_name2
-    - table_name_x
-
-  defaultDataSourceName: # If table not configure at table rule, will route to defaultDataSourceName  
-  defaultDatabaseStrategy: # Default strategy for sharding databases, same as databases sharding strategy
-  defaultTableStrategy: # Default strategy for sharding tables, same as tables sharding strategy
-  defaultKeyGeneratorClassName: # Default key generator class name, default value is `io.shardingsphere.core.keygen.DefaultKeyGenerator`. This class need to implements KeyGenerator, and require a no argument constructor
-
-  masterSlaveRules: # Read-write splitting rule configuration, more details can reference Read-write splitting part
-    <data_source_name>: # Data sources configuration, need consist with data source map, multiple `data_source_name` available
-      masterDataSourceName: # more details can reference Read-write splitting part
-      slaveDataSourceNames: # more details can reference Read-write splitting part
-      loadBalanceAlgorithmType: # more details can reference Read-write splitting part
-      loadBalanceAlgorithmClassName: # more details can reference Read-write splitting part
-      configMap: # User-defined arguments
-        key1: value1
-        key2: value2
-        keyx: valuex
-
-props: # Properties
-  sql.show: # To show SQLS or not, default value: false
-  executor.size: # The number of working threads, default value: CPU count
-  check.table.metadata.enabled: #T o check the metadata consistency of all the tables or not, default value : false
-
-configMap: # User-defined arguments
-  key1: value1
-  key2: value2
-  keyx: valuex
-```
-
-### Read-Write Split
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Ignore data sources configuration, same as sharding
-
-masterSlaveRule:
-  name: # Name of master slave data source
-  masterDataSourceName: # Name of master data source
-  slaveDataSourceNames: # Names of Slave data sources
-    - <data_source_name1>
-    - <data_source_name2>
-    - <data_source_name_x>
-  loadBalanceAlgorithmClassName: # Load balance algorithm class name. This class need to implements MasterSlaveLoadBalanceAlgorithm, and require a no argument constructor
-  loadBalanceAlgorithmType: # Load balance algorithm type, values should be: `ROUND_ROBIN` or `RANDOM`. Ignore if `loadBalanceAlgorithmClassName` is present
-
-props: # Properties
-  sql.show: # To show SQLS or not, default value: false
-  executor.size: # The number of working threads, default value: CPU count
-  check.table.metadata.enabled: # To check the metadata consistency of all the tables or not, default value : false
-
-configMap: # User-defined arguments
-  key1: value1
-  key2: value2
-  keyx: valuex
-```
-
-Create a `DataSource` through the `YamlMasterSlaveDataSourceFactory` factory class:
-
-```java
-DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
-
-### Orchestration
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources: # Ignore data sources configuration
-shardingRule: # Ignore sharding rule configuration
-masterSlaveRule: # Ignore master slave rule configuration
-
-orchestration:
-  name: # Name of orchestration instance
-  overwrite: # Use local configuration to overwrite registry center or not
-  registry: # Registry configuration
-    serverLists: # Registry servers list, multiple split as comma. Example: host1:2181,host2:2181
-    namespace: # Namespace of registry
-    digest: # Digest for registry. Default is not need digest.
-    operationTimeoutMilliseconds: # Operation timeout time in milliseconds, default value is 500 milliseconds
-    maxRetries: # Max number of times to retry, default value is 3
-    retryIntervalMilliseconds: # Time interval in milliseconds on each retry, default value is 500 milliseconds
-    timeToLiveSeconds: # Time to live in seconds of ephemeral keys, default value is 60 seconds
-```
-
-## ShardingSphere-2.x
-
-### Data Sharding
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources:
-  db0: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-  db1: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-
-shardingRule:
-  tables:
-    config:
-      actualDataNodes: db${0..1}.t_config
-    t_order: 
-      actualDataNodes: db${0..1}.t_order_${0..1}
-      databaseStrategy: 
-        standard:
-          shardingColumn: user_id
-          preciseAlgorithmClassName: io.shardingjdbc.core.yaml.fixture.SingleAlgorithm
-      tableStrategy: 
-        inline:
-          shardingColumn: order_id
-          algorithmInlineExpression: t_order_${order_id % 2}
-      keyGeneratorColumnName: order_id
-      keyGeneratorClass: io.shardingjdbc.core.yaml.fixture.IncrementKeyGenerator
-    t_order_item:
-      actualDataNodes: db${0..1}.t_order_item_${0..1}
-      # The strategy of binding the rest of the tables in the table is the same as the strategy of the first table
-      databaseStrategy: 
-        standard:
-          shardingColumn: user_id
-          preciseAlgorithmClassName: io.shardingjdbc.core.yaml.fixture.SingleAlgorithm
-      tableStrategy: 
-        inline:
-          shardingColumn: order_id
-          algorithmInlineExpression: t_order_item_${order_id % 2}
-  bindingTables:
-    - t_order,t_order_item
-  # Default database sharding strategy
-  defaultDatabaseStrategy:
-    none:
-  defaultTableStrategy:
-    complex:
-      shardingColumns: id, order_id
-      algorithmClassName: io.shardingjdbc.core.yaml.fixture.MultiAlgorithm
-  props:
-    sql.show: true
-```
-
-### Read-Write Split
-
-#### concept
-
-In order to relieve the pressure on the database, the write and read operations are separated into different data sources. The write library is called the master library, and the read library is called the slave library. One master library can be configured with multiple slave libraries.
-
-#### Supported
-
-1. Provides a read-write separation configuration with one master and multiple slaves, which can be used independently or with sub-databases and sub-meters.
-2. Independent use of read-write separation to support SQL transparent transmission.
-3. In the same thread and the same database connection, if there is a write operation, subsequent read operations will be read from the main library to ensure data consistency.
-4. Spring namespace.
-5. Hint-based mandatory main library routing.
-
-#### Unsupported
-
-1. Data synchronization between the master library and the slave library.
-2. Data inconsistency caused by the data synchronization delay of the master library and the slave library.
-3. Double writing or multiple writing in the main library.
-
-#### rule configuration
-
-```yaml
-dataSources:
-  db_master: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db_master;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-  db_slave_0: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db_slave_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-  db_slave_1: !!org.apache.commons.dbcp.BasicDataSource
-      driverClassName: org.h2.Driver
-      url: jdbc:h2:mem:db_slave_1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-      username: sa
-      password: 
-      maxActive: 100
-
-masterSlaveRule:
-  name: db_ms
-  masterDataSourceName: db_master
-  slaveDataSourceNames: [db_slave_0, db_slave_1]
-  configMap:
-    key1: value1
-```
-
-Create a `DataSource` through the `MasterSlaveDataSourceFactory` factory class:
-
-```java
-DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
-
-### Orchestration
-
-#### Configuration Item Explanation
-
-Zookeeper sharding table and database Orchestration Configuration Item Explanation
-
-```yaml
-dataSources: Data sources configuration
-
-shardingRule: Sharding rule configuration
-
-orchestration: Zookeeper Orchestration Configuration
-  name: Orchestration name
-  overwrite: Whether to overwrite local configurations with config center configurations; if it can, each initialization should refer to local configurations
-  zookeeper: Registry center Configuration
-    namespace: Registry center namespace
-    serverLists: The list of servers that connect to governance instance, including IP and port number, use commas to separate, such as: host1:2181,host2:2181
-    baseSleepTimeMilliseconds: The initial millisecond value of the interval to wait for retry
-    maxSleepTimeMilliseconds: The maximum millisecond value of the interval to wait for retry
-    maxRetries: The maximum retry count
-    sessionTimeoutMilliseconds: The session timeout milliseconds
-    connectionTimeoutMilliseconds: The connecton timeout milliseconds
-    digest: Permission token to connect to Zookeeper. default no authorization is required
-```
-
-Etcd sharding table and database Orchestration Configuration Item Explanation
-
-```yaml
-dataSources: Data sources configuration
-
-shardingRule: Sharding rule configuration
-
-orchestration: Etcd Orchestration Configuration
-  name: Orchestration name
-  overwrite: Whether to overwrite local configurations with config center configurations; if it can, each initialization should refer to local configurations
-  etcd: Registry center Configuration
-    serverLists: The list of servers that connect to governance instance, including IP and port number, use commas to separate, such as: http://host1:2379,http://host2:2379
-    timeToLiveSeconds: Time to live seconds for ephemeral nodes
-    timeoutMilliseconds: The request timeout milliseconds
-    maxRetries: The maximum retry count
-    retryIntervalMilliseconds: The retry interval milliseconds
-```
-
-Sharding table and database Data source construction method
-
-```java
-DataSource dataSource = OrchestrationShardingDataSourceFactory.createDataSource(yamlFile);
-```
-
-Read-Write split Data source construction method
-
-```java
-DataSource dataSource = OrchestrationMasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-proxy/_index.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-proxy/_index.cn.md
deleted file mode 100644
index 13ea2da4cd4..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-proxy/_index.cn.md
+++ /dev/null
@@ -1,280 +0,0 @@
-+++
-title = "ShardingSphere-Proxy"
-weight = 1
-chapter = true
-+++
-
-## 5.0.0-beta
-
-### 数据源配置项说明
-
-```yaml
-schemaName: # 逻辑数据源名称
-
-dataSources: # 数据源配置，可配置多个 <data-source-name>
-  <data-source-name>: # 与 ShardingSphere-JDBC 配置不同，无需配置数据库连接池
-    url: #数据库 URL 连接
-    username: # 数据库用户名
-    password: # 数据库密码
-    connectionTimeoutMilliseconds: # 连接超时毫秒数
-    idleTimeoutMilliseconds: # 空闲连接回收超时毫秒数
-    maxLifetimeMilliseconds: # 连接最大存活时间毫秒数
-    maxPoolSize: 50 # 最大连接数
-    minPoolSize: 1  # 最小连接数     
-
-rules: # 与 ShardingSphere-JDBC 配置一致
-  # ...
-```
-
-### 权限配置
-
-用于执行登录 Sharding Proxy 的权限验证。 配置用户名、密码、可访问的数据库后，必须使用正确的用户名、密码才可登录。
-
-```yaml
-rules:
-  - !AUTHORITY
-    users:
-      - root@localhost:root  # <username>@<hostname>:<password>，hostname 为 % 或空字符串，则代表不限制 host。
-      - sharding@:sharding
-    provider:
-      type: NATIVE  # 必须显式指定
-```
-
-hostname 为 % 或空字符串，则代表不限制 host。
-
-provider 的 type 必须显式指定，具体实现可以参考 [5.11 Proxy](https://shardingsphere.apache.org/document/5.0.0-beta/cn/dev-manual/proxy/)
-
-### Proxy 属性
-
-```yaml
-props:
-  sql-show: # 是否在日志中打印 SQL。打印 SQL 可以帮助开发者快速定位系统问题。日志内容包含：逻辑 SQL，真实 SQL 和 SQL 解析结果。如果开启配置，日志将使用 Topic ShardingSphere-SQL，日志级别是 INFO。
-  sql-simple: # 是否在日志中打印简单风格的 SQL。
-  executor-size: # 用于设置任务处理线程池的大小。每个 ShardingSphereDataSource 使用一个独立的线程池，同一个 JVM 的不同数据源不共享线程池。
-  max-connections-size-per-query: # 一次查询请求在每个数据库实例中所能使用的最大连接数。
-  check-table-metadata-enabled: # 是否在程序启动和更新时检查分片元数据的结构一致性。
-  proxy-frontend-flush-threshold: # 在 ShardingSphere-Proxy 中设置传输数据条数的 IO 刷新阈值。
-  proxy-transaction-type: # ShardingSphere-Proxy 中使用的默认事务类型。包括：LOCAL、XA 和 BASE。
-  proxy-opentracing-enabled: # 是否允许在 ShardingSphere-Proxy 中使用 OpenTracing。
-  proxy-hint-enabled: # 是否允许在 ShardingSphere-Proxy 中使用 Hint。使用 Hint 会将 Proxy 的线程处理模型由 IO 多路复用变更为每个请求一个独立的线程，会降低 Proxy 的吞吐量。
-  xa-transaction-manager-type: # XA 事务管理器类型。列如：Atomikos，Narayana，Bitronix。
-```
-
-## 5.0.0-alpha
-
-### 数据源配置项说明
-
-```yaml
-schemaName: # 逻辑数据源名称
-
-dataSourceCommon:
-  username: # 数据库用户名
-  password: # 数据库密码
-  connectionTimeoutMilliseconds: # 连接超时毫秒数
-  idleTimeoutMilliseconds: # 空闲连接回收超时毫秒数
-  maxLifetimeMilliseconds: # 连接最大存活时间毫秒数
-  maxPoolSize: 50 # 最大连接数
-  minPoolSize: 1  # 最小连接数
-
-dataSources: # 数据源配置，可配置多个 <data-source-name>
-  <data-source-name>: # 与 ShardingSphere-JDBC 配置不同，无需配置数据库连接池
-    url: #数据库 URL 连接
-rules: # 与 ShardingSphere-JDBC 配置一致
-  # ...
-```
-
-#### 覆盖 dataSourceCommon 说明
-
-上面配置了每个库的公共数据源配置，如果你想覆盖 dataSourceCommon 属性，请在每个数据源单独配置。
-
-```yaml
-dataSources: # 数据源配置，可配置多个 <data-source-name>
-  <data-source-name>: # 与 ShardingSphere-JDBC 配置不同，无需配置数据库连接池
-    url: # 数据库 URL 连接
-    username: # 数据库用户名，覆盖 dataSourceCommon 配置
-    password: # 数据库密码，覆盖 dataSourceCommon 配置
-    connectionTimeoutMilliseconds: # 连接超时毫秒数，覆盖 dataSourceCommon 配置
-    idleTimeoutMilliseconds: # 空闲连接回收超时毫秒数，覆盖 dataSourceCommon 配置
-    maxLifetimeMilliseconds: # 连接最大存活时间毫秒数，覆盖 dataSourceCommon 配置
-    maxPoolSize: # 最大连接数，覆盖 dataSourceCommon 配置
-```
-
-#### 权限配置
-
-用于执行登录 Sharding Proxy 的权限验证。 配置用户名、密码、可访问的数据库后，必须使用正确的用户名、密码才可登录。
-
-```yaml
-authentication:
-  users:
-    root: # 自定义用户名
-      password: root # 自定义用户名
-    sharding: # 自定义用户名
-      password: sharding # 自定义用户名
-      authorizedSchemas: sharding_db, replica_query_db # 该用户授权可访问的数据库，多个用逗号分隔。缺省将拥有 root 权限，可访问全部数据库。
-```
-
-#### Proxy 属性
-
-```yaml
-props:
-  sql-show: # 是否在日志中打印 SQL。打印 SQL 可以帮助开发者快速定位系统问题。日志内容包含：逻辑 SQL，真实 SQL 和 SQL 解析结果。如果开启配置，日志将使用 Topic ShardingSphere-SQL，日志级别是 INFO。
-  sql-simple: # 是否在日志中打印简单风格的 SQL。
-  acceptor-size: # 用于设置接收 TCP 请求线程池的大小。
-  executor-size: # 用于设置任务处理线程池的大小。每个 ShardingSphereDataSource 使用一个独立的线程池，同一个 JVM 的不同数据源不共享线程池。
-  max-connections-size-per-query: # 一次查询请求在每个数据库实例中所能使用的最大连接数。
-  check-table-metadata-enabled: # 是否在程序启动和更新时检查分片元数据的结构一致性。
-  query-with-cipher-column: # 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询。
-  proxy-frontend-flush-threshold: # 在 ShardingSphere-Proxy 中设置传输数据条数的 IO 刷新阈值。
-  proxy-transaction-type: # ShardingSphere-Proxy 中使用的默认事务类型。包括：LOCAL、XA 和 BASE。
-  proxy-opentracing-enabled: # 是否允许在 ShardingSphere-Proxy 中使用 OpenTracing。
-  proxy-hint-enabled: # 是否允许在 ShardingSphere-Proxy 中使用 Hint。使用 Hint 会将 Proxy 的线程处理模型由 IO 多路复用变更为每个请求一个独立的线程，会降低 Proxy 的吞吐量。
-```
-
-## ShardingSphere-4.x
-
-### 数据源与分片配置项说明
-
-#### 数据分片
-
-```yaml
-schemaName: # 逻辑数据源名称
-
-dataSources: # 数据源配置，可配置多个 data_source_name
-  <data_source_name>: # 与 Sharding-JDBC 配置不同，无需配置数据库连接池
-    url: # 数据库 url 连接
-    username: # 数据库用户名
-    password: # 数据库密码
-    connectionTimeoutMilliseconds: 30000 # 连接超时毫秒数
-    idleTimeoutMilliseconds: 60000 # 空闲连接回收超时毫秒数
-    maxLifetimeMilliseconds: 1800000 # 连接最大存活时间毫秒数
-    maxPoolSize: 65 # 最大连接数
-
-shardingRule: # 省略数据分片配置，与 Sharding-JDBC 配置一致
-```
-
-#### 读写分离
-
-```yaml
-schemaName: # 逻辑数据源名称
-
-dataSources: # 省略数据源配置，与数据分片一致
-
-masterSlaveRule: # 省略读写分离配置，与 Sharding-JDBC 配置一致
-```
-
-#### 数据脱敏
-
-```yaml
-dataSource: # 省略数据源配置
-
-encryptRule:
-  encryptors:
-    <encryptor-name>:
-      type: # 加解密器类型，可自定义或选择内置类型：MD5/AES 
-      props: # 属性配置，注意：使用 AES 加密器，需要配置 AES 加密器的KEY属性：aes.key.value
-        aes.key.value:
-  tables:
-    <table-name>:
-      columns:
-        <logic-column-name>:
-          plainColumn: # 存储明文的字段
-          cipherColumn: # 存储密文的字段
-          assistedQueryColumn: # 辅助查询字段，针对 ShardingQueryAssistedEncryptor 类型的加解密器进行辅助查询
-          encryptor: # 加密器名字
-props:
-  query.with.cipher.column: true # 是否使用密文列查询
-```
-
-### 全局配置项说明
-
-#### 治理
-
-与 Sharding-JDBC 配置一致。
-
-#### Proxy 属性
-
-```yaml
-# 省略与 Sharding-JDBC 一致的配置属性
-
-props:
-  acceptor.size: # 用于设置接收客户端请求的工作线程个数，默认为 CPU 核数 * 2
-  proxy.transaction.type: # 默认为 LOCAL 事务，允许 LOCAL，XA，BASE 三个值，XA 采用 Atomikos 作为事务管理器，BASE 类型需要拷贝实现 ShardingTransactionManager 的接口的 jar 包至 lib 目录中
-  proxy.opentracing.enabled: # 是否开启链路追踪功能，默认为不开启。详情请参见[链路追踪](/cn/features/orchestration/apm/)
-  check.table.metadata.enabled: # 是否在启动时检查分表元数据一致性，默认值: false
-  proxy.frontend.flush.threshold: # 对于单个大查询，每多少个网络包返回一次
-```
-
-#### 权限验证
-
-用于执行登录 Sharding Proxy 的权限验证。配置用户名、密码、可访问的数据库后，必须使用正确的用户名、密码才可登录 Proxy。
-
-```yaml
-authentication:
-  users:
-    root: # 自定义用户名
-      password: root # 自定义用户名
-    sharding: # 自定义用户名
-      password: sharding # 自定义用户名
-      authorizedSchemas: sharding_db, masterslave_db # 该用户授权可访问的数据库，多个用逗号分隔。缺省将拥有 root 权限，可访问全部数据库。
-```
-
-## ShardingSphere-3.x
-
-### 数据源与分片配置项说明
-
-#### 数据分片
-
-```yaml
-schemaName: # 逻辑数据源名称
-
-dataSources: # 数据源配置，可配置多个 data_source_name
-  <data_source_name>: # 与 Sharding-JDBC 配置不同，无需配置数据库连接池
-    url: # 数据库url连接
-    username: # 数据库用户名
-    password: # 数据库密码
-    autoCommit: true # hikari连接池默认配置
-    connectionTimeout: 30000 # hikari 连接池默认配置
-    idleTimeout: 60000 # hikari 连接池默认配置
-    maxLifetime: 1800000 # hikari 连接池默认配置
-    maximumPoolSize: 65 # hikari 连接池默认配置
-
-shardingRule: # 省略数据分片配置，与 Sharding-JDBC 配置一致
-```
-
-#### 读写分离
-
-```yaml
-schemaName: # 逻辑数据源名称
-
-dataSources: # 省略数据源配置，与数据分片一致
-
-masterSlaveRule: # 省略读写分离配置，与 Sharding-JDBC 配置一致
-```
-
-### 全局配置项说明
-
-#### 数据治理
-
-与 Sharding-JDBC 配置一致。
-
-#### Proxy 属性
-
-```yaml
-# 省略与 Sharding-JDBC 一致的配置属性
-
-props:
-  acceptor.size: # 用于设置接收客户端请求的工作线程个数，默认为 CPU 核数 * 2
-  proxy.transaction.enabled: # 是否开启事务，目前仅支持XA事务，默认为不开启
-  proxy.opentracing.enabled: # 是否开启链路追踪功能，默认为不开启。详情请参见[链路追踪](/cn/features/orchestration/apm/)
-  check.table.metadata.enabled: # 是否在启动时检查分表元数据一致性，默认值: false
-```
-
-#### 权限验证
-
-用于执行登录 Sharding Proxy 的权限验证。配置用户名、密码后，必须使用正确的用户名、密码才可登录 Proxy。
-
-```yaml
-authentication:
-  username: root
-  password:
-```
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-proxy/_index.en.md b/docs/document/content/reference/api-change-history/shardingsphere-proxy/_index.en.md
deleted file mode 100644
index 4f558004dcc..00000000000
--- a/docs/document/content/reference/api-change-history/shardingsphere-proxy/_index.en.md
+++ /dev/null
@@ -1,280 +0,0 @@
-+++
-title = "ShardingSphere-Proxy"
-weight = 1
-chapter = true
-+++
-
-## 5.0.0-beta
-
-### Data Source Configuration Item Explanation
-
-```yaml
-schemaName: # Logic schema name.
-
-dataSources: # Data sources configuration, multiple <data-source-name> available.
-  <data-source-name>: # Different from ShardingSphere-JDBC configuration, it does not need to be configured with database connection pool.
-    url: # Database URL.
-    username: # Database username.
-    password: # Database password.
-    connectionTimeoutMilliseconds: # Connection timeout milliseconds.
-    idleTimeoutMilliseconds: # Idle timeout milliseconds.
-    maxLifetimeMilliseconds: # Maximum life milliseconds.
-    maxPoolSize: 50 # Maximum connection count in the pool.
-    minPoolSize: 1  # Minimum connection count in the pool.        
-
-rules: # Keep consist with ShardingSphere-JDBC configuration.
-# ...
-```
-
-#### Authentication
-
-It is used to verify the authentication to log in ShardingSphere-Proxy, which must use correct user name and password after the configuration of them.
-
-```yaml
-rules:
-  - !AUTHORITY
-    users:
-      - root@localhost:root # <username>@<hostname>:<password>
-      - sharding@:sharding
-    provider:
-      type: NATIVE # Must be explicitly specified.
- ```
-
-If the hostname is % or empty, it means no restrict to the user’s host.
-
-The type of the provider must be explicitly specified. Refer to [5.11 Proxy](https://shardingsphere.apache.org/document/5.0.0-beta/en/dev-manual/proxy/) for more implementations.
-
-#### Proxy Properties
-
-```yaml
-props:
-  sql-show: # Whether show SQL or not in log. Print SQL details can help developers debug easier. The log details include: logic SQL, actual SQL and SQL parse result.Enable this property will log into log topic ShardingSphere-SQL, log level is INFO.
-  sql-simple: # Whether show SQL details in simple style.
-  executor-size: # The max thread size of worker group to execute SQL. One ShardingSphereDataSource will use a independent thread pool, it does not share thread pool even different data source in same JVM.
-  max-connections-size-per-query: # Max opened connection size for each query.
-  check-table-metadata-enabled: # Whether validate table meta data consistency when application startup or updated.
-  proxy-frontend-flush-threshold: # Flush threshold for every records from databases for ShardingSphere-Proxy.
-  proxy-transaction-type: # Default transaction type of ShardingSphere-Proxy. Include: LOCAL, XA and BASE.
-  proxy-opentracing-enabled: # Whether enable opentracing for ShardingSphere-Proxy.
-  proxy-hint-enabled: # Whether enable hint for ShardingSphere-Proxy. Using Hint will switch proxy thread mode from IO multiplexing to per connection per thread, which will reduce system throughput.
-  xa-transaction-manager-type: # XA Transaction manager type. Include: Atomikos, Narayana and Bitronix.
-```
-
-## 5.0.0-alpha
-
-### Data Source Configuration Item Explanation
-
-```yaml
-schemaName: # Logic schema name.
-
-dataSourceCommon:
-  username: # Database username.
-  password: # Database password.
-  connectionTimeoutMilliseconds: # Connection timeout milliseconds.
-  idleTimeoutMilliseconds: # Idle timeout milliseconds.
-  maxLifetimeMilliseconds: # Maximum life milliseconds.
-  maxPoolSize: 50 # Maximum connection count in the pool.
-  minPoolSize: 1  # Minimum connection count in the pool.
-
-dataSources: # Data sources configuration, multiple <data-source-name> available.
-  <data-source-name>: # Different from ShardingSphere-JDBC configuration, it does not need to be configured with database connection pool.
-    url: # Database URL.
-rules: # Keep consist with ShardingSphere-JDBC configuration.
-# ...
-```
-
-#### Override dataSourceCommon Configuration
-
-If you want to override the ‘dataSourceCommon’ property, configure it separately for each data source.
-
-```yaml
-dataSources: # Data sources configuration, multiple <data-source-name> available.
-  <data-source-name>: # Different from ShardingSphere-JDBC configuration, it does not need to be configured with database connection pool.
-    url: # Database URL.
-    username: # Database username, Override dataSourceCommon username property.
-    password: # Database password, Override dataSourceCommon password property.
-    connectionTimeoutMilliseconds: # Connection timeout milliseconds, Override dataSourceCommon connectionTimeoutMilliseconds property.
-    idleTimeoutMilliseconds: # Idle timeout milliseconds, Override dataSourceCommon idleTimeoutMilliseconds property.
-    maxLifetimeMilliseconds: # Maximum life milliseconds, Override dataSourceCommon maxLifetimeMilliseconds property.
-    maxPoolSize: 50 # Maximum connection count in the pool, Override dataSourceCommon maxPoolSize property.
-    minPoolSize: 1  # Minimum connection count in the pool, Override dataSourceCommon minPoolSize property.
-```
-
-#### Authentication
-
-It is used to verify the authentication to log in ShardingSphere-Proxy, which must use correct user name and password after the configuration of them.
-
-```yaml
-authentication:
-  users:
-    root: # Self-defined username.
-      password: root # Self-defined password.
-    sharding: # Self-defined username.
-      password: sharding # Self-defined password.
-      authorizedSchemas: sharding_db, replica_query_db # Schemas authorized to this user, please use commas to connect multiple schemas. Default authorized schemas is all of the schemas.
-```
-
-#### Proxy Properties
-
-```yaml
-props:
-  sql-show: # Whether show SQL or not in log. Print SQL details can help developers debug easier. The log details include: logic SQL, actual SQL and SQL parse result.Enable this property will log into log topic ShardingSphere-SQL, log level is INFO.
-  sql-simple: # Whether show SQL details in simple style.
-  acceptor-size: # The max thread size of accepter group to accept TCP connections.
-  executor-size: # The max thread size of worker group to execute SQL. One ShardingSphereDataSource will use a independent thread pool, it does not share thread pool even different data source in same JVM.
-  max-connections-size-per-query: # Max opened connection size for each query.
-  check-table-metadata-enabled: # Whether validate table meta data consistency when application startup or updated.
-  query-with-cipher-column: # Whether query with cipher column for data encrypt. User you can use plaintext to query if have.
-  proxy-frontend-flush-threshold: # Flush threshold for every records from databases for ShardingSphere-Proxy.
-  proxy-transaction-type: # Default transaction type of ShardingSphere-Proxy. Include: LOCAL, XA and BASE.
-  proxy-opentracing-enabled: # Whether enable opentracing for ShardingSphere-Proxy.
-  proxy-hint-enabled: # Whether enable hint for ShardingSphere-Proxy. Using Hint will switch proxy thread mode from IO multiplexing to per connection per thread, which will reduce system throughput.
-```
-
-## ShardingSphere-4.x
-
-### Data Source and Sharding Configuration Item Explanation
-
-#### Data Sharding
-
-```yaml
-schemaName: # Logic data schema name.
-
-dataSources: # Data source configuration, which can be multiple data_source_name.
-  <data_source_name>: # Different from Sharding-JDBC configuration, it does not need to be configured with database connection pool.
-    url: # Database url connection.
-    username: # Database username.
-    password: # Database password.
-    connectionTimeoutMilliseconds: 30000 # Connection timeout.
-    idleTimeoutMilliseconds: 60000 # Idle timeout setting.
-    maxLifetimeMilliseconds: 1800000 # Maximum lifetime.
-    maxPoolSize: 65 # Maximum connection number in the pool.
-
-shardingRule: #Omit data sharding configuration and be consistent with Sharding-JDBC configuration.
-```
-
-#### Read-write splitting
-
-```yaml
-schemaName: # Logic data schema name.
-
-dataSources: # Omit data source configurations; keep it consistent with data sharding.
-
-masterSlaveRule: # Omit data source configurations; keep it consistent with Sharding-JDBC.
-```
-
-#### Data Masking
-
-```yaml
-dataSource: # Ignore data sources configuration.
-
-encryptRule:
-  encryptors:
-    <encryptor-name>:
-      type: # encryptor type.
-      props: # Properties, e.g. `aes.key.value` for AES encryptor.
-        aes.key.value:
-  tables:
-    <table-name>:
-      columns:
-        <logic-column-name>:
-          plainColumn: # plaintext column name.
-          cipherColumn: # ciphertext column name.
-          assistedQueryColumn: # AssistedColumns for query, when use ShardingQueryAssistedEncryptor, it can help query encrypted data.
-          encryptor: # encrypt name.
-props:
-  query.with.cipher.column: true #Whether use cipherColumn to query or not
-```
-
-### Overall Configuration Explanation
-
-#### Orchestration
-
-It is the same with Sharding-JDBC configuration.
-
-#### Proxy Properties
-
-```yaml
-# Omit configurations that are the same with Sharding-JDBC.
-
-props:
-  acceptor.size: # The thread number of accept connection; default to be 2 times of cpu core.
-  proxy.transaction.type: # Support LOCAL, XA, BASE; Default is LOCAL transaction, for BASE type you should copy ShardingTransactionManager associated jar to lib directory.
-  proxy.opentracing.enabled: # Whether to enable opentracing, default not to enable; refer to [APM](/en/features/orchestration/apm/) for more details.
-  check.table.metadata.enabled: # Whether to check metadata consistency of sharding table when it initializes; default value: false.
-```
-
-#### Authentication
-
-It is used to verify the authentication to log in Sharding-Proxy, which must use correct user name and password after the configuration of them.
-
-```yaml
-authentication:
-  users:
-    root: # self-defined username.
-      password: root # self-defined password.
-    sharding: # self-defined username.
-      password: sharding # self-defined password.
-      authorizedSchemas: sharding_db, masterslave_db # schemas authorized to this user, please use commas to connect multiple schemas. Default authorizedSchemas is all of the schemas.
-```
-
-## ShardingSphere-3.x
-
-### Data sources and sharding rule configuration reference
-
-#### Data Sharding
-
-```yaml
-schemaName: # Logic database schema name.
-
-dataSources: # Data sources configuration, multiple `data_source_name` available.
-  <data_source_name>: # Different with Sharding-JDBC, do not need configure data source pool here.
-    url: # Database URL.
-    username: # Database username.
-    password: # Database password.
-    autoCommit: true # The default config of hikari connection pool.
-    connectionTimeout: 30000 # The default config of hikari connection pool.
-    idleTimeout: 60000 # The default config of hikari connection pool.
-    maxLifetime: 1800000 # The default config of hikari connection pool.
-    maximumPoolSize: 65 # The default config of hikari connection pool.
-
-shardingRule: # Ignore sharding rule configuration, same as Sharding-JDBC.
-```
-
-#### Read-write splitting
-
-```yaml
-schemaName: # Logic database schema name.
-
-dataSources: # Ignore data source configuration, same as sharding.
-
-masterSlaveRule: # Ignore read-write splitting rule configuration, same as Sharding-JDBC.
-```
-
-### Global configuration reference
-
-#### Orchestration
-
-Same as configuration of Sharding-JDBC.
-
-#### Proxy Properties
-
-```yaml
-# Ignore configuration which same as Sharding-JDBC.
-
-props:
-  acceptor.size: # Max thread count to handle client's requests, default value is CPU*2.
-  proxy.transaction.enabled: # Enable transaction, only support XA now, default value is false.
-  proxy.opentracing.enabled: # Enable open tracing, default value is false. More details please reference[APM](/en/features/orchestration/apm/).
-  check.table.metadata.enabled: # To check the metadata consistency of all the tables or not, default value : false.
-```
-
-#### Authorization
-
-To perform Authorization for Sharding Proxy when login in. After configuring the username and password, you must use the correct username and password to login into the Proxy.
-
-```yaml
-authentication:
-  username: root
-  password:
-```
