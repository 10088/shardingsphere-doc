commit c90d4793e7a164ac5b6d19da1fc542e1751d541f
Author: Haoran Meng <menghaoranss@gmail.com>
Date:   Fri Jun 4 20:51:02 2021 +0800

    refactor document for user manual with java api (#10660)

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
index 7c714779ce..72afa94438 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.cn.md
@@ -35,17 +35,14 @@ weight = 1
 // 省略配置数据源以及规则
 // ...
 
-// 配置配置/注册中心
-RegistryCenterConfiguration configuration = new RegistryCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
+// 配置注册中心
+RegistryCenterConfiguration registryCenterConfig = new RegistryCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
 
 // 配置治理
-Map<String, CenterConfiguration> configurationMap = new HashMap<String, CenterConfiguration>();
-configurationMap.put("governance-shardingsphere-data-source", configuration);
+GovernanceConfiguration governanceConfiguration = new GovernanceConfiguration("governance-sharding-data-source", registryCenterConfig, true);
 
 // 创建 GovernanceShardingSphereDataSource
-DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(
-        createDataSourceMap(), createShardingRuleConfig(), new Properties(),
-        new GovernanceConfiguration("shardingsphere-governance", configurationMap, true));
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(governanceConfiguration);
 ```
 
 ## 使用 GovernanceShardingSphereDataSource
@@ -56,9 +53,7 @@ DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSour
 以原生 JDBC 使用方式为例：
 
 ```java
-DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(
-        createDataSourceMap(), createShardingRuleConfig(), new Properties(), 
-        new GovernanceConfiguration("shardingsphere-governance", configurationMap, true));
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(governanceConfiguration);
 String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
 try (
         Connection conn = dataSource.getConnection();
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
index ebae62c172..2eed52b65d 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/governance/java-api.en.md
@@ -36,16 +36,13 @@ Using ZooKeeper as config center and registry center for example.
 // ...
 
 // Configure registry center
-RegistryCenterConfiguration configuration = new RegistryCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
+RegistryCenterConfiguration registryCenterConfig = new RegistryCenterConfiguration("Zookeeper", "localhost:2181", new Properties());
 
 // Configure governance
-Map<String, CenterConfiguration> configurationMap = new HashMap<String, CenterConfiguration>();
-configurationMap.put("governance-shardingsphere-data-source", configuration);
+        GovernanceConfiguration governanceConfiguration = new GovernanceConfiguration("governance-sharding-data-source", registryCenterConfig, true);
 
 // Create GovernanceShardingSphereDataSource
-DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(
-        createDataSourceMap(), createShardingRuleConfig(), new Properties(),
-        new GovernanceConfiguration("shardingsphere-governance", configurationMap, true));
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(governanceConfiguration);
 ```
 
 ## Use GovernanceShardingSphereDataSource
@@ -56,9 +53,7 @@ Developer can choose to use native JDBC or ORM frameworks such as JPA or MyBatis
 Take native JDBC usage as an example:
 
 ```java
-DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(
-        createDataSourceMap(), createShardingRuleConfig(), new Properties(), 
-        new GovernanceConfiguration("shardingsphere-governance", configurationMap, true));
+DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(governanceConfiguration);
 String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
 try (
         Connection conn = dataSource.getConnection();
