commit 1b50bb6cc1c9a1dd537f65a271363aa4f2cdd81d
Author: Liang Zhang <zhangliang@apache.org>
Date:   Tue Aug 2 21:29:20 2022 +0800

    Rename ShardingSphereAlgorithmConfiguration to AlgorithmConfiguration (#19812)

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.cn.md
index db111f56924..0893d9f717c 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.cn.md
@@ -4,49 +4,57 @@ weight = 6
 +++
 
 ## 背景信息
+
 影子库功能对执行的 SQL 语句进行影子判定。影子判定支持两种类型算法，用户可根据实际业务需求选择一种或者组合使用。
 
 ## 参数解释
+
 ### 列影子算法
+
 #### 列值匹配算法
+
 类型：VALUE_MATCH
 
-| *属性名称* | *数据类型* | *说明*  |
-| ----------- | ---------- | ------- |
-| column  | String    | 影子列 |
-| operation  | String    | SQL 操作类型（INSERT, UPDATE, DELETE, SELECT) |
-| value | String    | 影子列匹配的值 |
+| *属性名称* | *数据类型*  | *说明*                                       |
+| --------- | --------- | ------------------------------------------- |
+| column    | String    | 影子列                                       |
+| operation | String    | SQL 操作类型（INSERT, UPDATE, DELETE, SELECT) |
+| value     | String    | 影子列匹配的值                                 |
 
 ####  列正则表达式匹配算法
+
 类型：REGEX_MATCH
 
-| *属性名称* | *数据类型* | *说明*  |
-| ---------- | ---------- | -------- |
-| column | String  | 匹配列 |
-| operation | String  | SQL 操作类型(INSERT, UPDATE, DELETE, SELECT) |
-| regex | String  | 影子列匹配正则表达式 |
+| *属性名称* | *数据类型* | *说明*                                      |
+| --------- | -------- | ------------------------------------------- |
+| column    | String   | 匹配列                                       |
+| operation | String   | SQL 操作类型(INSERT, UPDATE, DELETE, SELECT) |
+| regex     | String   | 影子列匹配正则表达式                           |
 
 ### Hint 影子算法
+
 ####  简单 Hint 匹配影子算法
+
 类型：SIMPLE_HINT
 
-| *属性名称* | *数据类型*  | *说明*     |
-| ----------  | -----------  | --------- |
-| foo | String | bar       |
+| *属性名称* | *数据类型* | *说明* |
+| --------- | -------- | ----- |
+| foo       | String   | bar   |
 
 ## 配置示例
+
 - Java API
 
 ```java
 public final class ShadowConfiguration {
     // ...
     
-    private ShardingSphereAlgorithmConfiguration createShadowAlgorithmConfiguration() {
+    private AlgorithmConfiguration createShadowAlgorithmConfiguration() {
         Properties userIdInsertProps = new Properties();
         userIdInsertProps.setProperty("operation", "insert");
         userIdInsertProps.setProperty("column", "user_id");
         userIdInsertProps.setProperty("value", "1");
-        return new ShardingSphereAlgorithmConfiguration("VALUE_MATCH", userIdInsertProps));
+        return new AlgorithmConfiguration("VALUE_MATCH", userIdInsertProps);
     }
     
     // ...
@@ -54,6 +62,7 @@ public final class ShadowConfiguration {
 ```
 
 - YAML:
+
 ```yaml
 shadowAlgorithms:
   user-id-insert-algorithm:
@@ -65,6 +74,7 @@ shadowAlgorithms:
 ```
 
 - Spring Boot Starter:
+
 ```properties
 spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-algorithm.type=VALUE_MATCH
 spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-algorithm.props.operation=insert
@@ -73,6 +83,7 @@ spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-algorithm.pr
 ```
 
 - Spring 命名空间:
+
 ```xml
 <shadow:shadow-algorithm id="user-id-insert-algorithm" type="VALUE_MATCH">
     <props>
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.en.md
index 4b96eab9e27..315051b04bd 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.en.md
@@ -4,51 +4,57 @@ weight = 6
 +++
 
 ## Background
+
 The shadow DB feature carries out shadow measurement to SQL statements executed. Shadow measurement supports two types of algorithms, and users can choose one or a combination of them based on actual business needs.
 
 ## Parameters
+
 ### Column-based shadow algorithm
 
 #### Column value matching shadow algorithm
+
 Type：VALUE_MATCH
 
-| *Attribute Name* | *Data Type* | *Description*  |
-| ----------- | ---------- | ------- |
-| column  | String    | shadow column |
-| operation  | String    | SQL operation type（INSERT, UPDATE, DELETE, SELECT）|
-| value | String    | value matched by shadow column |
+| *Attribute Name* | *Data Type* | *Description*                                       |
+| ---------------- | ----------- | --------------------------------------------------- |
+| column           | String      | shadow column                                       |
+| operation        | String      | SQL operation type (INSERT, UPDATE, DELETE, SELECT) |
+| value            | String      | value matched by shadow column                      |
 
 #### Column-based Regex matching algorithm
+
 Type：REGEX_MATCH
 
-| *Attribute Name* | *Data Type* | *Description*  |
-| ---------- | ---------- | -------- |
-| column | String  | match a column |
-| operation | String  | SQL operation type（INSERT, UPDATE, DELETE, SELECT）|
-| regex | String  | shadow column matching Regex |
+| *Attribute Name* | *Data Type* | *Description*                                      |
+| ---------------- | ----------- | -------------------------------------------------- |
+| column           | String      | match a column                                     |
+| operation        | String      | SQL operation type（INSERT, UPDATE, DELETE, SELECT）|
+| regex            | String      | shadow column matching Regex                       |
 
 ### Hint-based shadow algorithm
 
 #### Simple Hint matching shadow algorithm
+
 Type：SIMPLE_HINT
 
-| *Attribute Name* | *Data Type*  | *Description*     |
-| ----------  | -----------  | --------- |
-| foo | String | bar       |
+| *Attribute Name* | *Data Type* | *Description* |
+| ---------------- | ----------- | ------------- |
+| foo              | String      | bar           |
 
 ## Configuration sample
+
 - Java API
 
 ```java
 public final class ShadowConfiguration {
     // ...
     
-    private ShardingSphereAlgorithmConfiguration createShadowAlgorithmConfiguration() {
+    private AlgorithmConfiguration createShadowAlgorithmConfiguration() {
         Properties userIdInsertProps = new Properties();
         userIdInsertProps.setProperty("operation", "insert");
         userIdInsertProps.setProperty("column", "user_id");
         userIdInsertProps.setProperty("value", "1");
-        return new ShardingSphereAlgorithmConfiguration("VALUE_MATCH", userIdInsertProps));
+        return new AlgorithmConfiguration("VALUE_MATCH", userIdInsertProps));
     }
     
     // ...
@@ -56,6 +62,7 @@ public final class ShadowConfiguration {
 ```
 
 - YAML:
+
 ```yaml
 shadowAlgorithms:
   user-id-insert-algorithm:
@@ -67,6 +74,7 @@ shadowAlgorithms:
 ```
 
 - Spring Boot Starter:
+
 ```properties
 spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-algorithm.type=VALUE_MATCH
 spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-algorithm.props.operation=insert
@@ -75,6 +83,7 @@ spring.shardingsphere.rules.shadow.shadow-algorithms.user-id-insert-algorithm.pr
 ```
 
 - Spring Namespace:
+
 ```xml
 <shadow:shadow-algorithm id="user-id-insert-algorithm" type="VALUE_MATCH">
     <props>
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.cn.md
index 2ec7f83b376..1ca3b492d22 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.cn.md
@@ -15,11 +15,11 @@ weight = 5
 
 可配置属性：
 
-| *名称*                     | *数据类型*                                           | *说明*                                                 | *默认值* |
-| ------------------------- | --------------------------------------------------- | ----------------------------------------------------- | ------- |
-| tables (+)                | Collection\<EncryptTableRuleConfiguration\>         | 加密表规则配置                                           |        |
-| encryptors (+)            | Map\<String, ShardingSphereAlgorithmConfiguration\> | 加解密算法名称和配置                                      |        |
-| queryWithCipherColumn (?) | boolean                                             | 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 | true   |
+| *名称*                     | *数据类型*                                   | *说明*                                                 | *默认值* |
+| ------------------------- | ------------------------------------------- | ----------------------------------------------------- | ------- |
+| tables (+)                | Collection\<EncryptTableRuleConfiguration\> | 加密表规则配置                                           |        |
+| encryptors (+)            | Map\<String, AlgorithmConfiguration\>       | 加解密算法名称和配置                                      |        |
+| queryWithCipherColumn (?) | boolean                                     | 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 | true   |
 
 ### 加密表规则配置
 
@@ -51,7 +51,7 @@ weight = 5
 
 ### 加解密算法配置
 
-类名称：org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration
+类名称：org.apache.shardingsphere.infra.config.algorithm.AlgorithmConfiguration
 
 可配置属性：
 
@@ -81,9 +81,9 @@ public final class EncryptDatabasesConfiguration implements ExampleConfiguration
         EncryptColumnRuleConfiguration columnConfigAes = new EncryptColumnRuleConfiguration("username", "username", "", "username_plain", "name_encryptor", null);
         EncryptColumnRuleConfiguration columnConfigTest = new EncryptColumnRuleConfiguration("pwd", "pwd", "assisted_query_pwd", "", "pwd_encryptor", null);
         EncryptTableRuleConfiguration encryptTableRuleConfig = new EncryptTableRuleConfiguration("t_user", Arrays.asList(columnConfigAes, columnConfigTest), null);
-        Map<String, ShardingSphereAlgorithmConfiguration> encryptAlgorithmConfigs = new LinkedHashMap<>(2, 1);
-        encryptAlgorithmConfigs.put("name_encryptor", new ShardingSphereAlgorithmConfiguration("AES", props));
-        encryptAlgorithmConfigs.put("pwd_encryptor", new ShardingSphereAlgorithmConfiguration("assistedTest", props));
+        Map<String, AlgorithmConfiguration> encryptAlgorithmConfigs = new LinkedHashMap<>(2, 1);
+        encryptAlgorithmConfigs.put("name_encryptor", new AlgorithmConfiguration("AES", props));
+        encryptAlgorithmConfigs.put("pwd_encryptor", new AlgorithmConfiguration("assistedTest", props));
         EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(Collections.singleton(encryptTableRuleConfig), encryptAlgorithmConfigs);
         try {
             return ShardingSphereDataSourceFactory.createDataSource(DataSourceUtil.createDataSource("demo_ds"), Collections.singleton(encryptRuleConfig), props);
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.en.md
index 68d4cdb93ae..a9779b8129a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.en.md
@@ -15,11 +15,11 @@ Class name: org.apache.shardingsphere.encrypt.api.config.EncryptRuleConfiguratio
 
 Attributes:
 
-| *Name*                    | *DataType*                                          | *Description*                                                                                  | *Default Value* |
-| ------------------------- | --------------------------------------------------- | ---------------------------------------------------------------------------------------------- | --------------- |
-| tables (+)                | Collection\<EncryptTableRuleConfiguration\>         | Encrypt table rule configurations                                                              |                 |
-| encryptors (+)            | Map\<String, ShardingSphereAlgorithmConfiguration\> | Encrypt algorithm name and configurations                                                      |                 |
-| queryWithCipherColumn (?) | boolean                                             | Whether query with cipher column for data encrypt. User you can use plaintext to query if have | true            |
+| *Name*                    | *DataType*                                  | *Description*                                                                                  | *Default Value* |
+| ------------------------- | ------------------------------------------- | ---------------------------------------------------------------------------------------------- | --------------- |
+| tables (+)                | Collection\<EncryptTableRuleConfiguration\> | Encrypt table rule configurations                                                              |                 |
+| encryptors (+)            | Map\<String, AlgorithmConfiguration\>       | Encrypt algorithm name and configurations                                                      |                 |
+| queryWithCipherColumn (?) | boolean                                     | Whether query with cipher column for data encrypt. User you can use plaintext to query if have | true            |
 
 ### Encrypt Table Rule Configuration
 
@@ -27,11 +27,11 @@ Class name: org.apache.shardingsphere.encrypt.api.config.rule.EncryptTableRuleCo
 
 Attributes:
 
-| *Name*      | *DataType*                                   | *Description*                      |
-| ----------- | -------------------------------------------- | ---------------------------------- |
-| name        | String                                       | Table name                         |
-| columns (+) | Collection\<EncryptColumnRuleConfiguration\> | Encrypt column rule configurations |
-| queryWithCipherColumn (?) | boolean                                             | The current table whether query with cipher column for data encrypt.  |
+| *Name*                    | *DataType*                                   | *Description*                      |
+| ------------------------- | -------------------------------------------- | ---------------------------------- |
+| name                      | String                                       | Table name                         |
+| columns (+)               | Collection\<EncryptColumnRuleConfiguration\> | Encrypt column rule configurations |
+| queryWithCipherColumn (?) | boolean                                      | The current table whether query with cipher column for data encrypt |
 
 ### Encrypt Column Rule Configuration
 
@@ -39,19 +39,19 @@ Class name: org.apache.shardingsphere.encrypt.api.config.rule.EncryptColumnRuleC
 
 Attributes:
 
-| *Name*                  | *DataType* | *Description*              |
-| ----------------------- | ---------- | -------------------------- |
-| logicColumn             | String     | Logic column name          |
-| cipherColumn            | String     | Cipher column name         |
-| assistedQueryColumn (?) | String     | Assisted query column name |
-| plainColumn (?)         | String     | Plain column name          |
-| encryptorName           | String     | Encrypt algorithm name     |
-| assistedQueryEncryptorName           | String     | Assisted query encrypt algorithm name     |
-| queryWithCipherColumn (?) | boolean                                             | The current column whether query with cipher column for data encrypt.  |
+| *Name*                     | *DataType* | *Description*              |
+| -------------------------- | ---------- | -------------------------- |
+| logicColumn                | String     | Logic column name          |
+| cipherColumn               | String     | Cipher column name         |
+| assistedQueryColumn (?)    | String     | Assisted query column name |
+| plainColumn (?)            | String     | Plain column name          |
+| encryptorName              | String     | Encrypt algorithm name     |
+| assistedQueryEncryptorName | String     | Assisted query encrypt algorithm name |
+| queryWithCipherColumn (?)  | boolean    | The current column whether query with cipher column for data encrypt |
 
 ### Encrypt Algorithm Configuration
 
-Class name: org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration
+Class name: org.apache.shardingsphere.infra.config.algorithm.AlgorithmConfiguration
 
 Attributes:
 
@@ -81,9 +81,9 @@ public final class EncryptDatabasesConfiguration implements ExampleConfiguration
         EncryptColumnRuleConfiguration columnConfigAes = new EncryptColumnRuleConfiguration("username", "username", "", "username_plain", "name_encryptor", null);
         EncryptColumnRuleConfiguration columnConfigTest = new EncryptColumnRuleConfiguration("pwd", "pwd", "assisted_query_pwd", "", "pwd_encryptor", null);
         EncryptTableRuleConfiguration encryptTableRuleConfig = new EncryptTableRuleConfiguration("t_user", Arrays.asList(columnConfigAes, columnConfigTest), null);
-        Map<String, ShardingSphereAlgorithmConfiguration> encryptAlgorithmConfigs = new LinkedHashMap<>(2, 1);
-        encryptAlgorithmConfigs.put("name_encryptor", new ShardingSphereAlgorithmConfiguration("AES", props));
-        encryptAlgorithmConfigs.put("pwd_encryptor", new ShardingSphereAlgorithmConfiguration("assistedTest", props));
+        Map<String, AlgorithmConfiguration> encryptAlgorithmConfigs = new LinkedHashMap<>(2, 1);
+        encryptAlgorithmConfigs.put("name_encryptor", new AlgorithmConfiguration("AES", props));
+        encryptAlgorithmConfigs.put("pwd_encryptor", new AlgorithmConfiguration("assistedTest", props));
         EncryptRuleConfiguration encryptRuleConfig = new EncryptRuleConfiguration(Collections.singleton(encryptTableRuleConfig), encryptAlgorithmConfigs);
         try {
             return ShardingSphereDataSourceFactory.createDataSource(DataSourceUtil.createDataSource("demo_ds"), Collections.singleton(encryptRuleConfig), props);
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.cn.md
index c22f6718653..07cdf60e3e4 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.cn.md
@@ -14,11 +14,11 @@ weight = 4
 类名称：org.apache.shardingsphere.dbdiscovery.api.config.DatabaseDiscoveryRuleConfiguration
 可配置属性：
 
-| *名称*                      | *数据类型*                                                   | *说明*           |
-| -------------------------  | ----------------------------------------------------------- | --------------- |
-| dataSources (+)            | Collection\<DatabaseDiscoveryDataSourceRuleConfiguration\>  | 数据源配置        |
-| discoveryHeartbeats (+)    | Map\<String, DatabaseDiscoveryHeartBeatConfiguration\>      | 监听心跳配置      |
-| discoveryTypes (+)         | Map\<String, ShardingSphereAlgorithmConfiguration\>         | 数据库发现类型配置 |
+| *名称*                   | *数据类型*                                                  | *说明*           |
+| ----------------------- | ---------------------------------------------------------- | --------------- |
+| dataSources (+)         | Collection\<DatabaseDiscoveryDataSourceRuleConfiguration\> | 数据源配置        |
+| discoveryHeartbeats (+) | Map\<String, DatabaseDiscoveryHeartBeatConfiguration\>     | 监听心跳配置      |
+| discoveryTypes (+)      | Map\<String, AlgorithmConfiguration\>                      | 数据库发现类型配置 |
 
 ### 数据源配置
 
@@ -26,12 +26,12 @@ weight = 4
 
 可配置属性：
 
-| *名称*                     | *数据类型*             | *说明*                                     | *默认值* |
-| -------------------------- | -------------------- | ----------------------------------------- | ------- |
-| groupName (+)              | String               | 数据库发现组名称                             | -       |
-| dataSourceNames (+)        | Collection\<String\> | 数据源名称，多个数据源用逗号分隔 如：ds_0, ds_1 | -        |
-| discoveryHeartbeatName (+) | String               | 监听心跳名称                                | -        |
-| discoveryTypeName (+)      | String               | 数据库发现类型名称                           | -        |
+| *名称*                     | *数据类型*             | *说明*                                     |
+| -------------------------- | -------------------- | ----------------------------------------- |
+| groupName (+)              | String               | 数据库发现组名称                             |
+| dataSourceNames (+)        | Collection\<String\> | 数据源名称，多个数据源用逗号分隔 如：ds_0, ds_1  |
+| discoveryHeartbeatName (+) | String               | 监听心跳名称                                |
+| discoveryTypeName (+)      | String               | 数据库发现类型名称                           |
 
 ### 监听心跳配置
 
@@ -45,12 +45,12 @@ weight = 4
 
 ### 数据库发现类型配置
 
-类名称：org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration
+类名称：org.apache.shardingsphere.infra.config.algorithm.AlgorithmConfiguration
 
-| *名称*     | *数据类型*  | *说明*                                       | *默认值* |
-| --------- | ---------- | ------------------------------------------- | ------- |
-| type (+)  | String     | 数据库发现类型，如：MySQL.MGR                   | -       |
-| props (?) | Properties | 数据库发现类型配置，如 MGR 的 group-name 属性配置 | -       |
+| *名称*     | *数据类型*  | *说明*                                       |
+| --------- | ---------- | ------------------------------------------- |
+| type (+)  | String     | 数据库发现类型，如：MySQL.MGR                   |
+| props (?) | Properties | 数据库发现类型配置，如 MGR 的 group-name 属性配置 |
 
 ## 操作步骤
 
@@ -87,11 +87,11 @@ private static ReadwriteSplittingRuleConfiguration createReadwriteSplittingConfi
     return new ReadwriteSplittingRuleConfiguration(Arrays.asList(dataSourceConfiguration1), Collections.emptyMap());
 }
 
-private static Map<String, ShardingSphereAlgorithmConfiguration> createDiscoveryTypes() {
-    Map<String, ShardingSphereAlgorithmConfiguration> discoveryTypes = new HashMap<>(1， 1);
+private static Map<String, AlgorithmConfiguration> createDiscoveryTypes() {
+    Map<String, AlgorithmConfiguration> discoveryTypes = new HashMap<>(1， 1);
     Properties props = new Properties();
     props.put("group-name", "558edd3c-02ec-11ea-9bb3-080027e39bd2");
-    discoveryTypes.put("mgr", new ShardingSphereAlgorithmConfiguration("MGR", props));
+    discoveryTypes.put("mgr", new AlgorithmConfiguration("MGR", props));
     return discoveryTypes;
 }
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.en.md
index e47b84f12ce..3448ac89997 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.en.md
@@ -14,11 +14,11 @@ Build high availability rule configuration through `Java API`.
 Class name: org.apache.shardingsphere.dbdiscovery.api.config.DatabaseDiscoveryRuleConfiguration
 Attributes:
 
-| *Name*                      | *Data Type*                                                   | *Description*           |
-| -------------------------  | ----------------------------------------------------------- | --------------- |
-| dataSources (+)            | Collection\<DatabaseDiscoveryDataSourceRuleConfiguration\>  | Data source configuration        |
-| discoveryHeartbeats (+)    | Map\<String, DatabaseDiscoveryHeartBeatConfiguration\>      | Detect heartbeat configuration      |
-| discoveryTypes (+)         | Map\<String, ShardingSphereAlgorithmConfiguration\>         | Database discovery type configuration |
+| *Name*                  | *Data Type*                                                | *Description*                         |
+| ----------------------- | ---------------------------------------------------------- | ------------------------------------- |
+| dataSources (+)         | Collection\<DatabaseDiscoveryDataSourceRuleConfiguration\> | Data source configuration             |
+| discoveryHeartbeats (+) | Map\<String, DatabaseDiscoveryHeartBeatConfiguration\>     | Detect heartbeat configuration        |
+| discoveryTypes (+)      | Map\<String, AlgorithmConfiguration\>                      | Database discovery type configuration |
 
 ### Data Source Configuration
 
@@ -26,12 +26,12 @@ Class name: org.apache.shardingsphere.dbdiscovery.api.config.rule.DatabaseDiscov
 
 Attributes:
 
-| *Name*                     | *Data Type*             | *Description*                                     | *Default Value* |
-| -------------------------- | -------------------- | ----------------------------------------- | ------- |
-| groupName (+)              | String               | Database discovery group name                             | -       |
-| dataSourceNames (+)        | Collection\<String\> | Data source names, multiple data source names separated with comma. Such as: ds_0, ds_1 | -        |
-| discoveryHeartbeatName (+) | String               | Detect heartbeat name                                | -        |
-| discoveryTypeName (+)      | String               | Database discovery type name                           | -        |
+| *Name*                     | *Data Type*          | *Description*                                                                           |
+| -------------------------- | -------------------- | --------------------------------------------------------------------------------------- |
+| groupName (+)              | String               | Database discovery group name                                                           |
+| dataSourceNames (+)        | Collection\<String\> | Data source names, multiple data source names separated with comma. Such as: ds_0, ds_1 |
+| discoveryHeartbeatName (+) | String               | Detect heartbeat name                                                                   |
+| discoveryTypeName (+)      | String               | Database discovery type name                                                            |
 
 ### Detect Heartbeat Configuration
 
@@ -39,20 +39,20 @@ Class name: org.apache.shardingsphere.dbdiscovery.api.config.rule.DatabaseDiscov
 
 Attributes:
 
-| *Name*     | *Data Type*  | *Description*                                                                | *Default Value* |
-| --------- | ---------- | -------------------------------------------------------------------- | ------- |
-| props (+) | Properties | Detect heartbeat attribute configuration, keep-alive-cron configuration, cron expression. Such as: ‘0/5 * * * * ?’ | -       |
+| *Name*    | *Data Type* | *Description*                                                                                                      |
+| --------- | ----------- | ------------------------------------------------------------------------------------------------------------------ |
+| props (+) | Properties  | Detect heartbeat attribute configuration, keep-alive-cron configuration, cron expression. Such as: `0/5 * * * * ?` |
 
 ### Database Discovery Type Configuration
 
-Class name: org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration
+Class name: org.apache.shardingsphere.infra.config.algorithm.AlgorithmConfiguration
 
 Attributes：
 
-| *Name*     | *Data Type*  | *Description*                                       | *Default Value* |
-| --------- | ---------- | ------------------------------------------- | ------- |
-| type (+)  | String     | Database discovery type, such as: MySQL.MGR                   | -       |
-| props (?) | Properties | Required parameters for high-availability types, such as MGR’s group-name | -       |
+| *Name*    | *Data Type* | *Description*                                                             |
+| --------- | ----------- | ------------------------------------------------------------------------- |
+| type (+)  | String      | Database discovery type, such as: MySQL.MGR                               |
+| props (?) | Properties  | Required parameters for high-availability types, such as MGR’s group-name |
 
 ## Procedure
 
@@ -90,11 +90,11 @@ private static ReadwriteSplittingRuleConfiguration createReadwriteSplittingConfi
     return new ReadwriteSplittingRuleConfiguration(Arrays.asList(dataSourceConfiguration1), Collections.emptyMap());
 }
 
-private static Map<String, ShardingSphereAlgorithmConfiguration> createDiscoveryTypes() {
-    Map<String, ShardingSphereAlgorithmConfiguration> discoveryTypes = new HashMap<>(1， 1);
+private static Map<String, AlgorithmConfiguration> createDiscoveryTypes() {
+    Map<String, AlgorithmConfiguration> discoveryTypes = new HashMap<>(1， 1);
     Properties props = new Properties();
     props.put("group-name", "558edd3c-02ec-11ea-9bb3-080027e39bd2");
-    discoveryTypes.put("mgr", new ShardingSphereAlgorithmConfiguration("MGR", props));
+    discoveryTypes.put("mgr", new AlgorithmConfiguration("MGR", props));
     return discoveryTypes;
 }
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.cn.md
index c7b1e2bf964..3e15b2fca08 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.cn.md
@@ -50,14 +50,14 @@ tOrderRuleConfiguration.setKeyGenerateStrategy(new KeyGenerateStrategyConfigurat
 tOrderRuleConfiguration.setTableShardingStrategy(new StandardShardingStrategyConfiguration("order_id", "tOrderInlineShardingAlgorithm"));
 Properties tOrderShardingInlineProps = new Properties();
 tOrderShardingInlineProps.setProperty("algorithm-expression", "t_order_${order_id % 2}");
-tOrderRuleConfiguration.getShardingAlgorithms().putIfAbsent("tOrderInlineShardingAlgorithm", new ShardingSphereAlgorithmConfiguration("INLINE",tOrderShardingInlineProps));
+tOrderRuleConfiguration.getShardingAlgorithms().putIfAbsent("tOrderInlineShardingAlgorithm", new AlgorithmConfiguration("INLINE",tOrderShardingInlineProps));
 
 ShardingTableRuleConfiguration tOrderItemRuleConfiguration = new ShardingTableRuleConfiguration("t_order_item", "ds_${0..1}.t_order_item_${[0, 1]}");
 tOrderItemRuleConfiguration.setKeyGenerateStrategy(new KeyGenerateStrategyConfiguration("order_item_id", "snowflake"));
 tOrderRuleConfiguration.setTableShardingStrategy(new StandardShardingStrategyConfiguration("order_item_id", "tOrderItemInlineShardingAlgorithm"));
 Properties tOrderItemShardingInlineProps = new Properties();
 tOrderItemShardingInlineProps.setProperty("algorithm-expression", "t_order_item_${order_item_id % 2}");
-tOrderRuleConfiguration.getShardingAlgorithms().putIfAbsent("tOrderItemInlineShardingAlgorithm", new ShardingSphereAlgorithmConfiguration("INLINE",tOrderItemShardingInlineProps));
+tOrderRuleConfiguration.getShardingAlgorithms().putIfAbsent("tOrderItemInlineShardingAlgorithm", new AlgorithmConfiguration("INLINE",tOrderItemShardingInlineProps));
 
 ShardingRuleConfiguration shardingRuleConfiguration = new ShardingRuleConfiguration();
 shardingRuleConfiguration.getTables().add(tOrderRuleConfiguration);
@@ -68,10 +68,10 @@ shardingRuleConfiguration.getBroadcastTables().add("t_bank");
 shardingRuleConfiguration.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration("user_id", "default_db_strategy_inline"));
 Properties defaultDatabaseStrategyInlineProps = new Properties();
 defaultDatabaseStrategyInlineProps.setProperty("algorithm-expression", "ds_${user_id % 2}");
-shardingRuleConfiguration.getShardingAlgorithms().put("default_db_strategy_inline", new ShardingSphereAlgorithmConfiguration("INLINE", defaultDatabaseStrategyInlineProps));
+shardingRuleConfiguration.getShardingAlgorithms().put("default_db_strategy_inline", new AlgorithmConfiguration("INLINE", defaultDatabaseStrategyInlineProps));
 // 分布式序列算法配置
 Properties snowflakeProperties = new Properties();
-shardingRuleConfiguration.getKeyGenerators().put("snowflake", new ShardingSphereAlgorithmConfiguration("SNOWFLAKE", snowflakeProperties));
+shardingRuleConfiguration.getKeyGenerators().put("snowflake", new AlgorithmConfiguration("SNOWFLAKE", snowflakeProperties));
 
 /* 数据加密规则配置 */
 Properties encryptProperties = new Properties();
@@ -80,9 +80,9 @@ EncryptColumnRuleConfiguration columnConfigAes = new EncryptColumnRuleConfigurat
 EncryptColumnRuleConfiguration columnConfigTest = new EncryptColumnRuleConfiguration("pwd", "pwd", "assisted_query_pwd", "", "pwd_encryptor");
 EncryptTableRuleConfiguration encryptTableRuleConfig = new EncryptTableRuleConfiguration("t_user", Arrays.asList(columnConfigAes, columnConfigTest));
 
-Map<String, ShardingSphereAlgorithmConfiguration> encryptAlgorithmConfigs = new LinkedHashMap<>(2, 1);
-encryptAlgorithmConfigs.put("name_encryptor", new ShardingSphereAlgorithmConfiguration("AES", encryptProperties));
-encryptAlgorithmConfigs.put("pwd_encryptor", new ShardingSphereAlgorithmConfiguration("assistedTest", encryptProperties));
+Map<String, AlgorithmConfiguration> encryptAlgorithmConfigs = new LinkedHashMap<>(2, 1);
+encryptAlgorithmConfigs.put("name_encryptor", new AlgorithmConfiguration("AES", encryptProperties));
+encryptAlgorithmConfigs.put("pwd_encryptor", new AlgorithmConfiguration("assistedTest", encryptProperties));
 EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(Collections.singleton(encryptTableRuleConfig), encryptAlgorithmConfigs);
 
 /* 读写分离规则配置 */
@@ -96,8 +96,8 @@ readwriteProps2.setProperty("read-data-source-names", "write_ds1_read0, write_ds
 ReadwriteSplittingDataSourceRuleConfiguration dataSourceConfiguration2 = new ReadwriteSplittingDataSourceRuleConfiguration("ds_1", "Static", readwriteProps2, "roundRobin");
 
 // 负载均衡算法
-Map<String, ShardingSphereAlgorithmConfiguration> loadBalanceMaps = new HashMap<>(1);
-loadBalanceMaps.put("roundRobin", new ShardingSphereAlgorithmConfiguration("ROUND_ROBIN", new Properties()));
+Map<String, AlgorithmConfiguration> loadBalanceMaps = new HashMap<>();
+loadBalanceMaps.put("roundRobin", new AlgorithmConfiguration("ROUND_ROBIN", new Properties()));
 
 ReadwriteSplittingRuleConfiguration readWriteSplittingyRuleConfiguration = new ReadwriteSplittingRuleConfiguration(Arrays.asList(dataSourceConfiguration1, dataSourceConfiguration2), loadBalanceMaps);
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.en.md
index 112e51f4c91..a307fc02663 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.en.md
@@ -45,15 +45,15 @@ tOrderRuleConfiguration.setKeyGenerateStrategy(new KeyGenerateStrategyConfigurat
 tOrderRuleConfiguration.setTableShardingStrategy(new StandardShardingStrategyConfiguration("order_id", "tOrderInlineShardingAlgorithm"));
 Properties tOrderShardingInlineProps = new Properties();
 tOrderShardingInlineProps.setProperty("algorithm-expression", "t_order_${order_id % 2}");
-tOrderRuleConfiguration.getShardingAlgorithms().putIfAbsent("tOrderInlineShardingAlgorithm", new ShardingSphereAlgorithmConfiguration("INLINE",tOrderShardingInlineProps));
+tOrderRuleConfiguration.getShardingAlgorithms().putIfAbsent("tOrderInlineShardingAlgorithm", new AlgorithmConfiguration("INLINE",tOrderShardingInlineProps));
 
 ShardingTableRuleConfiguration tOrderItemRuleConfiguration = new ShardingTableRuleConfiguration("t_order_item", "ds_${0..1}.t_order_item_${[0, 1]}");
 tOrderItemRuleConfiguration.setKeyGenerateStrategy(new KeyGenerateStrategyConfiguration("order_item_id", "snowflake"));
 tOrderRuleConfiguration.setTableShardingStrategy(new StandardShardingStrategyConfiguration("order_item_id", "tOrderItemInlineShardingAlgorithm"));
 Properties tOrderItemShardingInlineProps = new Properties();
 tOrderItemShardingInlineProps.setProperty("algorithm-expression", "t_order_item_${order_item_id % 2}");
-tOrderRuleConfiguration.getShardingAlgorithms().putIfAbsent("tOrderItemInlineShardingAlgorithm", new ShardingSphereAlgorithmConfiguration("INLINE",tOrderItemShardingInlineProps));
-        
+tOrderRuleConfiguration.getShardingAlgorithms().putIfAbsent("tOrderItemInlineShardingAlgorithm", new AlgorithmConfiguration("INLINE",tOrderItemShardingInlineProps));
+
 ShardingRuleConfiguration shardingRuleConfiguration = new ShardingRuleConfiguration();
 shardingRuleConfiguration.getTables().add(tOrderRuleConfiguration);
 shardingRuleConfiguration.getTables().add(tOrderItemRuleConfiguration);
@@ -63,11 +63,11 @@ shardingRuleConfiguration.getBroadcastTables().add("t_bank");
 shardingRuleConfiguration.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration("user_id", "default_db_strategy_inline"));
 Properties defaultDatabaseStrategyInlineProps = new Properties();
 defaultDatabaseStrategyInlineProps.setProperty("algorithm-expression", "ds_${user_id % 2}");
-shardingRuleConfiguration.getShardingAlgorithms().put("default_db_strategy_inline", new ShardingSphereAlgorithmConfiguration("INLINE", defaultDatabaseStrategyInlineProps));
+shardingRuleConfiguration.getShardingAlgorithms().put("default_db_strategy_inline", new AlgorithmConfiguration("INLINE", defaultDatabaseStrategyInlineProps));
 
 // Key generate algorithm configuration
 Properties snowflakeProperties = new Properties();
-shardingRuleConfiguration.getKeyGenerators().put("snowflake", new ShardingSphereAlgorithmConfiguration("SNOWFLAKE", snowflakeProperties));
+shardingRuleConfiguration.getKeyGenerators().put("snowflake", new AlgorithmConfiguration("SNOWFLAKE", snowflakeProperties));
 
 /* Data encrypt rule configuration */
 Properties encryptProperties = new Properties();
@@ -76,9 +76,9 @@ EncryptColumnRuleConfiguration columnConfigAes = new EncryptColumnRuleConfigurat
 EncryptColumnRuleConfiguration columnConfigTest = new EncryptColumnRuleConfiguration("pwd", "pwd", "assisted_query_pwd", "", "pwd_encryptor");
 EncryptTableRuleConfiguration encryptTableRuleConfig = new EncryptTableRuleConfiguration("t_user", Arrays.asList(columnConfigAes, columnConfigTest));
 // Data encrypt algorithm configuration
-Map<String, ShardingSphereAlgorithmConfiguration> encryptAlgorithmConfigs = new LinkedHashMap<>(2, 1);
-encryptAlgorithmConfigs.put("name_encryptor", new ShardingSphereAlgorithmConfiguration("AES", encryptProperties));
-encryptAlgorithmConfigs.put("pwd_encryptor", new ShardingSphereAlgorithmConfiguration("assistedTest", encryptProperties));
+Map<String, AlgorithmConfiguration> encryptAlgorithmConfigs = new LinkedHashMap<>(2, 1);
+encryptAlgorithmConfigs.put("name_encryptor", new AlgorithmConfiguration("AES", encryptProperties));
+encryptAlgorithmConfigs.put("pwd_encryptor", new AlgorithmConfiguration("assistedTest", encryptProperties));
 EncryptRuleConfiguration encryptRuleConfiguration = new EncryptRuleConfiguration(Collections.singleton(encryptTableRuleConfig), encryptAlgorithmConfigs);
 
 /* Readwrite-splitting rule configuration */
@@ -92,8 +92,8 @@ readwriteProps2.setProperty("read-data-source-names", "write_ds1_read0, write_ds
 ReadwriteSplittingDataSourceRuleConfiguration dataSourceConfiguration2 = new ReadwriteSplittingDataSourceRuleConfiguration("ds_1", "Static", readwriteProps2, "roundRobin");
 
 // Load balance algorithm configuration
-Map<String, ShardingSphereAlgorithmConfiguration> loadBalanceMaps = new HashMap<>(1);
-loadBalanceMaps.put("roundRobin", new ShardingSphereAlgorithmConfiguration("ROUND_ROBIN", new Properties()));
+Map<String, AlgorithmConfiguration> loadBalanceMaps = new HashMap<>();
+loadBalanceMaps.put("roundRobin", new AlgorithmConfiguration("ROUND_ROBIN", new Properties()));
 
 ReadwriteSplittingRuleConfiguration readWriteSplittingRuleConfiguration = new ReadwriteSplittingRuleConfiguration(Arrays.asList(dataSourceConfiguration1, dataSourceConfiguration2), loadBalanceMaps);
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.cn.md
index c100c75be6e..9ae47571066 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.cn.md
@@ -4,6 +4,7 @@ weight = 2
 +++
 
 ## 背景信息
+
 Java API 形式配置的读写分离可以方便的适用于各种场景，不依赖额外的 jar 包，用户只需要通过 java 代码构造读写分离数据源便可以使用读写分离功能。
 
 ## 参数解释
@@ -15,9 +16,9 @@ Java API 形式配置的读写分离可以方便的适用于各种场景，不
 可配置属性：
 
 | *名称*             | *数据类型*                                                   | *说明*            |
-| ----------------- | ----------------------------------------------------------- | ----------------- |
+| ----------------- | ----------------------------------------------------------- | ---------------- |
 | dataSources (+)   | Collection\<ReadwriteSplittingDataSourceRuleConfiguration\> | 读写数据源配置      |
-| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>         | 从库负载均衡算法配置 |
+| loadBalancers (*) | Map\<String, AlgorithmConfiguration\>                       | 从库负载均衡算法配置 |
 
 ## 主从数据源配置
 
@@ -25,38 +26,39 @@ Java API 形式配置的读写分离可以方便的适用于各种场景，不
 
 可配置属性：
 
-| *名称*                     | *数据类型*                                          | *说明*            | *默认值*       |
-| -------------------------- | ------------------------------------------------- | ------------------| ---------------|
-| name                       | String                                            | 读写分离数据源名称   | -             |
-| staticStrategy             | StaticReadwriteSplittingStrategyConfiguration     | 静态读写分离配置     | -             |
-| dynamicStrategy            | DynamicReadwriteSplittingStrategyConfiguration    | 动态读写分离配置     | -             |
-| loadBalancerName (?)       | String                                            | 读库负载均衡算法名称  | 轮询负载均衡算法 |
+| *名称*                | *数据类型*                                      | *说明*            | *默认值*       |
+| -------------------- | ---------------------------------------------- | ---------------- | ------------- |
+| name                 | String                                         | 读写分离数据源名称  | -             |
+| staticStrategy       | StaticReadwriteSplittingStrategyConfiguration  | 静态读写分离配置    | -             |
+| dynamicStrategy      | DynamicReadwriteSplittingStrategyConfiguration | 动态读写分离配置    | -             |
+| loadBalancerName (?) | String                                         | 读库负载均衡算法名称 | 轮询负载均衡算法 |
 
 类名称：org.apache.shardingsphere.readwritesplitting.api.strategy.StaticReadwriteSplittingStrategyConfiguration
 
 可配置属性：
 
-| *名称*                     | *数据类型*           | *说明*            | *默认值*       |
-| -------------------------- | -------------------| ------------------| --------------|
-| writeDataSourceName        | String             | 写库数据源名称      | -             |
-| readDataSourceNames        | List\<String\>     | 读库数据源列表      | -             |
+| *名称*               | *数据类型*      | *说明*       |
+| ------------------- | -------------- | ----------- |
+| writeDataSourceName | String         | 写库数据源名称 |
+| readDataSourceNames | List\<String\> | 读库数据源列表 |
 
 类名称：org.apache.shardingsphere.readwritesplitting.api.strategy.DynamicReadwriteSplittingStrategyConfiguration
 
 可配置属性：
 
-| *名称*                          | *数据类型*          | *说明*                         | *默认值*       |
-| ------------------------------- | -------------------| -------------------------------| --------------|
-| autoAwareDataSourceName         | String             | 数据库发现的逻辑数据源名称         | -             |
-| writeDataSourceQueryEnabled (?) | String             | 读库全部下线，主库是否承担读流量    | true          |
+| *名称*                           | *数据类型* | *说明*                      | *默认值* |
+| ------------------------------- | --------- | -------------------------- | ------- |
+| autoAwareDataSourceName         | String    | 数据库发现的逻辑数据源名称      | -       |
+| writeDataSourceQueryEnabled (?) | String    | 读库全部下线，主库是否承担读流量 | true    |
 
 算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
 查询一致性路由的详情，请参见[核心特性：读写分离](/cn/features/readwrite-splitting/)。
 
 ## 操作步骤
+
 1. 添加读写分离数据源
-2. 设置负载均衡算法
-3. 使用读写分离数据源
+1. 设置负载均衡算法
+1. 使用读写分离数据源
    
 ## 配置示例
 
@@ -68,8 +70,8 @@ public DataSource getDataSource() throws SQLException {
         Properties algorithmProps = new Properties();
         algorithmProps.setProperty("demo_read_ds_0", "2");
         algorithmProps.setProperty("demo_read_ds_1", "1");
-        Map<String, ShardingSphereAlgorithmConfiguration> algorithmConfigMap = new HashMap<>(1);
-        algorithmConfigMap.put("demo_weight_lb", new ShardingSphereAlgorithmConfiguration("WEIGHT", algorithmProps));
+        Map<String, AlgorithmConfiguration> algorithmConfigMap = new HashMap<>(1);
+        algorithmConfigMap.put("demo_weight_lb", new AlgorithmConfiguration("WEIGHT", algorithmProps));
         ReadwriteSplittingRuleConfiguration ruleConfig = new ReadwriteSplittingRuleConfiguration(Collections.singleton(dataSourceConfig), algorithmConfigMap);
         Properties props = new Properties();
         props.setProperty("sql-show", Boolean.TRUE.toString());
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.en.md
index 922c5a7e4f5..f1bd02786e1 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.en.md
@@ -18,7 +18,7 @@ Configurable Properties:
 | *Name*            | *DataType*                                                  | *Description*                                                          |
 | ----------------- | ----------------------------------------------------------- | ---------------------------------------------------------------------- |
 | dataSources (+)   | Collection\<ReadwriteSplittingDataSourceRuleConfiguration\> | Data sources of write and reads                                        |
-| loadBalancers (*) | Map\<String, ShardingSphereAlgorithmConfiguration\>         | Load balance algorithm name and configurations of replica data sources |
+| loadBalancers (*) | Map\<String, AlgorithmConfiguration\>                       | Load balance algorithm name and configurations of replica data sources |
 
 ### Primary-secondary Data Source Configuration
 
@@ -26,38 +26,39 @@ Class name: org.apache.shardingsphere.readwritesplitting.api.rule.ReadwriteSplit
 
 Configurable Properties:
 
-| *Name*                     | *DataType*           | *Description*                                     | *Default Value*                   |
-| -------------------------- | -------------------- | ------------------------------------------------- | ----------------------------------|
-| name                       | String               | Readwrite-splitting data source name              | -                                 |
-| staticStrategy             | String               | Static Readwrite-splitting configuration          | -                                 |
-| dynamicStrategy            | Properties           | Dynamic Readwrite-splitting configuration         | -                                  |
-| loadBalancerName (?)       | String               | Load balance algorithm name of replica sources    | Round robin load balance algorithm |
+| *Name*               | *DataType* | *Description*                                  | *Default Value*                    |
+| -------------------- | ---------- | ---------------------------------------------- | ---------------------------------- |
+| name                 | String     | Readwrite-splitting data source name           | -                                  |
+| staticStrategy       | String     | Static Readwrite-splitting configuration       | -                                  |
+| dynamicStrategy      | Properties | Dynamic Readwrite-splitting configuration      | -                                  |
+| loadBalancerName (?) | String     | Load balance algorithm name of replica sources | Round robin load balance algorithm |
 
 Class name：org.apache.shardingsphere.readwritesplitting.api.strategy.StaticReadwriteSplittingStrategyConfiguration
 
 Configurable Properties:
 
-| *Name*                     | *DataType*           | *Description*               | *Default Value* |
-| -------------------------- | ---------------------| ----------------------------| ----------------|
-| writeDataSourceName        | String               | Write data source name      | -               |
-| readDataSourceNames        | List\<String\>       | Read data sources list      | -               |
+| *Name*              | *DataType*     | *Description*          |
+| ------------------- | -------------- | ---------------------- |
+| writeDataSourceName | String         | Write data source name |
+| readDataSourceNames | List\<String\> | Read data sources list |
 
 Class name：org.apache.shardingsphere.readwritesplitting.api.strategy.DynamicReadwriteSplittingStrategyConfiguration
 
 Configurable Properties:
 
-| *Name*                          | *DataType*        | *Description*                                                                                               | *Default Value*    |
-| ------------------------------- | -------------------| ------------------------------------------------------------------------------------------------------------| -------------------|
-| autoAwareDataSourceName         | String             | Database discovery logic data source name                                                                   | -                  |
-| writeDataSourceQueryEnabled (?) | String             | All read data source are offline, write data source whether the data source is responsible for read traffic | true               |
+| *Name*                          | *DataType* | *Description*                                                                                               | *Default Value*    |
+| ------------------------------- | ---------- | ------------------------------------------------------------------------------------------------------------| -------------------|
+| autoAwareDataSourceName         | String     | Database discovery logic data source name                                                                   | -                  |
+| writeDataSourceQueryEnabled (?) | String     | All read data source are offline, write data source whether the data source is responsible for read traffic | true               |
 
 Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for details on algorithm types.
 Please refer to [Read-write splitting-Core features](/en/features/readwrite-splitting/) for more details about query consistent routing.
 
 ## Operating Procedures
+
 1. Add read-write splitting data source
-2. Set load balancing algorithms
-3. Use read-write splitting data source 
+1. Set load balancing algorithms
+1. Use read-write splitting data source 
    
 ## Configuration Examples
 
@@ -69,8 +70,8 @@ public DataSource getDataSource() throws SQLException {
         Properties algorithmProps = new Properties();
         algorithmProps.setProperty("demo_read_ds_0", "2");
         algorithmProps.setProperty("demo_read_ds_1", "1");
-        Map<String, ShardingSphereAlgorithmConfiguration> algorithmConfigMap = new HashMap<>(1);
-        algorithmConfigMap.put("demo_weight_lb", new ShardingSphereAlgorithmConfiguration("WEIGHT", algorithmProps));
+        Map<String, AlgorithmConfiguration> algorithmConfigMap = new HashMap<>(1);
+        algorithmConfigMap.put("demo_weight_lb", new AlgorithmConfiguration("WEIGHT", algorithmProps));
         ReadwriteSplittingRuleConfiguration ruleConfig = new ReadwriteSplittingRuleConfiguration(Collections.singleton(dataSourceConfig), algorithmConfigMap);
         Properties props = new Properties();
         props.setProperty("sql-show", Boolean.TRUE.toString());
@@ -87,6 +88,7 @@ public DataSource getDataSource() throws SQLException {
 ```
 
 ## References
+
 - [Read-write splitting-Core features](/en/features/readwrite-splitting/)
 - [YAML Configuration: read-write splitting](/en/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/)
 - [Spring Boot Starter: read-write splitting](/en/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting/)
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.cn.md
index 8a01535d2d4..0bca9dda34f 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.cn.md
@@ -14,12 +14,12 @@ weight = 6
 
 可配置属性：
 
-| *名称*   | *数据类型*  | *说明*  | *默认值* |
-| -------- | ----------- | ------- | ------- |
-| dataSources  | Map\<String, ShadowDataSourceConfiguration\> | 影子数据源映射名称和配置 | 无  |
-| tables | Map\<String, ShadowTableConfiguration\> | 影子表名称和配置 | 无 |
-| shadowAlgorithms | Map\<String, ShardingSphereAlgorithmConfiguration\> | 影子算法名称和配置 | 无   |
-| defaultShadowAlgorithmName | String | 默认影子算法名称  | 无 |
+| *名称*                      | *数据类型*                                    | *说明*               |
+| -------------------------- | -------------------------------------------- | ------------------- |
+| dataSources                | Map\<String, ShadowDataSourceConfiguration\> | 影子数据源映射名称和配置 |
+| tables                     | Map\<String, ShadowTableConfiguration\>      | 影子表名称和配置        |
+| shadowAlgorithms           | Map\<String, AlgorithmConfiguration\>        | 影子算法名称和配置      |
+| defaultShadowAlgorithmName | String                                       | 默认影子算法名称        |
 
 ### 影子数据源配置
 
@@ -38,14 +38,14 @@ weight = 6
 
 可配置属性：
 
-| *名称*                | *数据类型*            | *说明*                   |
-| -------------------- | -------------------- | ----------------------- |
+| *名称*                | *数据类型*            | *说明*                      |
+| -------------------- | -------------------- | -------------------------- |
 | dataSourceNames      | Collection\<String\> | 影子表关联影子数据源映射名称列表 |
-| shadowAlgorithmNames | Collection\<String\> | 影子表关联影子算法名称列表   |
+| shadowAlgorithmNames | Collection\<String\> | 影子表关联影子算法名称列表      |
 
 ### 影子算法配置
 
-类名称：org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration
+类名称：org.apache.shardingsphere.infra.config.algorithm.AlgorithmConfiguration
 
 可配置属性：
 
@@ -111,13 +111,13 @@ public final class ShadowConfiguration {
         return result;
     }
     
-    private Map<String, ShardingSphereAlgorithmConfiguration> createShadowAlgorithmConfigurations() {
-        Map<String, ShardingSphereAlgorithmConfiguration> result = new LinkedHashMap<>();
+    private Map<String, AlgorithmConfiguration> createShadowAlgorithmConfigurations() {
+        Map<String, AlgorithmConfiguration> result = new LinkedHashMap<>();
         Properties userIdInsertProps = new Properties();
         userIdInsertProps.setProperty("operation", "insert");
         userIdInsertProps.setProperty("column", "user_type");
         userIdInsertProps.setProperty("value", "1");
-        result.put("user-id-insert-match-algorithm", new ShardingSphereAlgorithmConfiguration("VALUE_MATCH", userIdInsertProps));
+        result.put("user-id-insert-match-algorithm", new AlgorithmConfiguration("VALUE_MATCH", userIdInsertProps));
         return result;
     }
 }
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.en.md
index d5f758319a1..c811db03c11 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.en.md
@@ -15,12 +15,12 @@ Class name: org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
 
 Attributes:
 
-| *Name*   | *Data Type*  | *Description*  | *Default* |
-| -------- | ----------- | ------- | ------- |
-| dataSources  | Map\<String, ShadowDataSourceConfiguration\> | shadow data source mapping name and configuration | no  |
-| tables | Map\<String, ShadowTableConfiguration\> | shadow table name and configuration | no |
-| shadowAlgorithms | Map\<String, ShardingSphereAlgorithmConfiguration\> | shadow algorithm name and configuration | no  |
-| defaultShadowAlgorithmName | String | default shadow algorithm name  | no |
+| *Name*                     | *Data Type*                                  | *Description*                                     |
+| -------------------------- | -------------------------------------------- | ------------------------------------------------- |
+| dataSources                | Map\<String, ShadowDataSourceConfiguration\> | shadow data source mapping name and configuration |
+| tables                     | Map\<String, ShadowTableConfiguration\>      | shadow table name and configuration               |
+| shadowAlgorithms           | Map\<String, AlgorithmConfiguration\>        | shadow algorithm name and configuration           |
+| defaultShadowAlgorithmName | String                                       | default shadow algorithm name                     |
 
 ### Shadow Data Source Configuration
 
@@ -46,7 +46,7 @@ Attributes:
 
 ### Shadow Algorithm Configuration
 
-Class name：org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration
+Class name：org.apache.shardingsphere.infra.config.algorithm.AlgorithmConfiguration
 
 Attributes:
 
@@ -112,13 +112,13 @@ public final class ShadowConfiguration {
         return result;
     }
     
-    private Map<String, ShardingSphereAlgorithmConfiguration> createShadowAlgorithmConfigurations() {
-        Map<String, ShardingSphereAlgorithmConfiguration> result = new LinkedHashMap<>();
+    private Map<String, AlgorithmConfiguration> createShadowAlgorithmConfigurations() {
+        Map<String, AlgorithmConfiguration> result = new LinkedHashMap<>();
         Properties userIdInsertProps = new Properties();
         userIdInsertProps.setProperty("operation", "insert");
         userIdInsertProps.setProperty("column", "user_type");
         userIdInsertProps.setProperty("value", "1");
-        result.put("user-id-insert-match-algorithm", new ShardingSphereAlgorithmConfiguration("VALUE_MATCH", userIdInsertProps));
+        result.put("user-id-insert-match-algorithm", new AlgorithmConfiguration("VALUE_MATCH", userIdInsertProps));
         return result;
     }
 }
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.cn.md
index 0878d29016a..4b7e5655373 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.cn.md
@@ -15,18 +15,18 @@ weight = 1
 
 可配置属性：
 
-| *名称*                               | *数据类型*                                          | *说明*               | *默认值* |
-| ----------------------------------- | --------------------------------------------------- | ------------------- | ------- |
-| tables (+)                          | Collection\<ShardingTableRuleConfiguration\>        | 分片表规则列表        | -       |
-| autoTables (+)                      | Collection\<ShardingAutoTableRuleConfiguration\>    | 自动分片表规则列表    | -       |
-| bindingTableGroups (*)              | Collection\<String\>                                | 绑定表规则列表        | 无       |
-| broadcastTables (*)                 | Collection\<String\>                                | 广播表规则列表        | 无       |
-| defaultDatabaseShardingStrategy (?) | ShardingStrategyConfiguration                       | 默认分库策略          | 不分片   |
-| defaultTableShardingStrategy (?)    | ShardingStrategyConfiguration                       | 默认分表策略          | 不分片   |
-| defaultKeyGenerateStrategy (?)      | KeyGeneratorConfiguration                           | 默认自增列生成器配置   | 雪花算法 |
-| defaultShardingColumn (?)           | String                                              | 默认分片列名称        | 无      |
-| shardingAlgorithms (+)              | Map\<String, ShardingSphereAlgorithmConfiguration\> | 分片算法名称和配置     | 无      |
-| keyGenerators (?)                   | Map\<String, ShardingSphereAlgorithmConfiguration\> | 自增列生成算法名称和配置 | 无      |
+| *名称*                               | *数据类型*                                        | *说明*               | *默认值* |
+| ----------------------------------- | ------------------------------------------------ | ------------------- | ------- |
+| tables (+)                          | Collection\<ShardingTableRuleConfiguration\>     | 分片表规则列表        | -       |
+| autoTables (+)                      | Collection\<ShardingAutoTableRuleConfiguration\> | 自动分片表规则列表    | -        |
+| bindingTableGroups (*)              | Collection\<String\>                             | 绑定表规则列表        | 无       |
+| broadcastTables (*)                 | Collection\<String\>                             | 广播表规则列表        | 无       |
+| defaultDatabaseShardingStrategy (?) | ShardingStrategyConfiguration                    | 默认分库策略          | 不分片   |
+| defaultTableShardingStrategy (?)    | ShardingStrategyConfiguration                    | 默认分表策略          | 不分片   |
+| defaultKeyGenerateStrategy (?)      | KeyGeneratorConfiguration                        | 默认自增列生成器配置   | 雪花算法 |
+| defaultShardingColumn (?)           | String                                           | 默认分片列名称        | 无      |
+| shardingAlgorithms (+)              | Map\<String, AlgorithmConfiguration\>            | 分片算法名称和配置     | 无      |
+| keyGenerators (?)                   | Map\<String, AlgorithmConfiguration\>            | 自增列生成算法名称和配置 | 无      |
 
 ### 分片表配置
 
@@ -34,13 +34,13 @@ weight = 1
 
 可配置属性：
 
-| *名称*                        | *数据类型*                     | *说明*                                                            | *默认值*                                                                            |
-| ---------------------------- | ----------------------------- | ----------------------------------------------------------------- | ---------------------------------------------------------------------------------- |
-| logicTable                   | String                        | 分片逻辑表名称                                                      | -                                                                                  |
+| *名称*                        | *数据类型*                     | *说明*                                                         | *默认值*                                                                      |
+| ---------------------------- | ----------------------------- | ------------------------------------------------------------- | ---------------------------------------------------------------------------- |
+| logicTable                   | String                        | 分片逻辑表名称                                                   | -                                                                            |
 | actualDataNodes (?)          | String                        | 由数据源名 + 表名组成，以小数点分隔。<br />多个表以逗号分隔，支持行表达式 | 使用已知数据源与逻辑表名称生成数据节点，用于广播表或只分库不分表且所有库的表结构完全一致的情况 |
-| databaseShardingStrategy (?) | ShardingStrategyConfiguration | 分库策略                                                           | 使用默认分库策略                                                                     |
-| tableShardingStrategy (?)    | ShardingStrategyConfiguration | 分表策略                                                           | 使用默认分表策略                                                                     |
-| keyGenerateStrategy (?)      | KeyGeneratorConfiguration     | 自增列生成器                                                        | 使用默认自增主键生成器                                                               |
+| databaseShardingStrategy (?) | ShardingStrategyConfiguration | 分库策略                                                        | 使用默认分库策略                                                                |
+| tableShardingStrategy (?)    | ShardingStrategyConfiguration | 分表策略                                                        | 使用默认分表策略                                                                |
+| keyGenerateStrategy (?)      | KeyGeneratorConfiguration     | 自增列生成器                                                     | 使用默认自增主键生成器                                                           |
 
 ### 自动分片表配置
 
@@ -48,12 +48,12 @@ weight = 1
 
 可配置属性：
 
-| *名称*                   | *数据类型*                     | *说明*                       | *默认值*            |
-| ----------------------- | ----------------------------- | ---------------------------- | ------------------ |
-| logicTable              | String                        | 分片逻辑表名称                 | -                  |
-| actualDataSources (?)   | String                        | 数据源名称，多个数据源以逗号分隔 | 使用全部配置的数据源  |
-| shardingStrategy (?)    | ShardingStrategyConfiguration | 分片策略                      | 使用默认分片策略      |
-| keyGenerateStrategy (?) | KeyGeneratorConfiguration     | 自增列生成器                   | 使用默认自增主键生成器 |
+| *名称*                   | *数据类型*                     | *说明*                      | *默认值*            |
+| ----------------------- | ----------------------------- | -------------------------- | ------------------ |
+| logicTable              | String                        | 分片逻辑表名称                | -                  |
+| actualDataSources (?)   | String                        | 数据源名称，多个数据源以逗号分隔 | 使用全部配置的数据源   |
+| shardingStrategy (?)    | ShardingStrategyConfiguration | 分片策略                     | 使用默认分片策略      |
+| keyGenerateStrategy (?) | KeyGeneratorConfiguration     | 自增列生成器                  | 使用默认自增主键生成器 |
 
 ### 分片策略配置
 
@@ -63,10 +63,10 @@ weight = 1
 
 可配置属性：
 
-| *名称*                 | *数据类型* | *说明*      |
-| --------------------- | ---------- | ---------- |
-| shardingColumn        | String     | 分片列名称   |
-| shardingAlgorithmName | String     | 分片算法名称 |
+| *名称*                 | *数据类型* | *说明*     |
+| --------------------- | -------- | ---------- |
+| shardingColumn        | String   | 分片列名称   |
+| shardingAlgorithmName | String   | 分片算法名称 |
 
 #### 复合分片策略配置
 
@@ -75,9 +75,9 @@ weight = 1
 可配置属性：
 
 | *名称*                 | *数据类型* | *说明*                    |
-| --------------------- | ---------- | ------------------------ |
+| --------------------- | ---------- | ----------------------- |
 | shardingColumns       | String     | 分片列名称，多个列以逗号分隔 |
-| shardingAlgorithmName | String     | 分片算法名称               |
+| shardingAlgorithmName | String     | 分片算法名称              |
 
 #### Hint 分片策略配置
 
@@ -85,9 +85,9 @@ weight = 1
 
 可配置属性：
 
-| *名称*                 | *数据类型*  | *说明*      |
-| --------------------- | ---------- | ----------- |
-| shardingAlgorithmName | String     | 分片算法名称  |
+| *名称*                 | *数据类型* | *说明*      |
+| --------------------- | --------- | ---------- |
+| shardingAlgorithmName | String    | 分片算法名称 |
 
 #### 不分片策略配置
 
@@ -104,7 +104,7 @@ weight = 1
 可配置属性：
 
 | *名称*           | *数据类型* | *说明*           |
-| ---------------- | -------- | ---------------- |
+| ---------------- | -------- | --------------- |
 | column           | String   | 分布式序列列名称   |
 | keyGeneratorName | String   | 分布式序列算法名称 |
 
@@ -113,8 +113,8 @@ weight = 1
 ## 操作步骤
 
 1. 创建真实数据源映射关系，key 为数据源逻辑名称，value 为 DataSource 对象；
-2. 创建分片规则对象 ShardingRuleConfiguration，并初始化对象中的分片表对象 ShardingTableRuleConfiguration、绑定表集合、广播表集合，以及数据分片所依赖的分库策略和分表策略等参数；
-3. 调用 ShardingSphereDataSourceFactory 对象的 createDataSource 方法，创建 ShardingSphereDataSource。
+1. 创建分片规则对象 ShardingRuleConfiguration，并初始化对象中的分片表对象 ShardingTableRuleConfiguration、绑定表集合、广播表集合，以及数据分片所依赖的分库策略和分表策略等参数；
+1. 调用 ShardingSphereDataSourceFactory 对象的 createDataSource 方法，创建 ShardingSphereDataSource。
 
 ## 配置示例
 
@@ -136,9 +136,9 @@ public final class ShardingDatabasesAndTablesConfigurationPrecise implements Exa
         result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration("order_id", "standard_test_tbl"));
         Properties props = new Properties();
         props.setProperty("algorithm-expression", "demo_ds_${user_id % 2}");
-        result.getShardingAlgorithms().put("inline", new ShardingSphereAlgorithmConfiguration("INLINE", props));
-        result.getShardingAlgorithms().put("standard_test_tbl", new ShardingSphereAlgorithmConfiguration("STANDARD_TEST_TBL", new Properties()));
-        result.getKeyGenerators().put("snowflake", new ShardingSphereAlgorithmConfiguration("SNOWFLAKE", new Properties()));
+        result.getShardingAlgorithms().put("inline", new AlgorithmConfiguration("INLINE", props));
+        result.getShardingAlgorithms().put("standard_test_tbl", new AlgorithmConfiguration("STANDARD_TEST_TBL", new Properties()));
+        result.getKeyGenerators().put("snowflake", new AlgorithmConfiguration("SNOWFLAKE", new Properties()));
         return result;
     }
     
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.en.md
index 0b143f02937..20c14abaadb 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.en.md
@@ -15,18 +15,18 @@ Class name: org.apache.shardingsphere.sharding.api.config.ShardingRuleConfigurat
 
 Attributes:
 
-| *Name*                              | *DataType*                                          | *Description*                             | *Default Value* |
-| ----------------------------------- | --------------------------------------------------- | ----------------------------------------- | --------------- |
-| tables (+)                          | Collection\<ShardingTableRuleConfiguration\>        | Sharding table rules                      | -               |
-| autoTables (+)                      | Collection\<ShardingAutoTableRuleConfiguration\>    | Sharding auto table rules                 | -               |
-| bindingTableGroups (*)              | Collection\<String\>                                | Binding table rules                       | Empty           |
-| broadcastTables (*)                 | Collection\<String\>                                | Broadcast table rules                     | Empty           |
-| defaultDatabaseShardingStrategy (?) | ShardingStrategyConfiguration                       | Default database sharding strategy        | Not sharding    |
-| defaultTableShardingStrategy (?)    | ShardingStrategyConfiguration                       | Default table sharding strategy           | Not sharding    |
-| defaultKeyGenerateStrategy (?)      | KeyGeneratorConfiguration                           | Default key generator                     | Snowflake       |
-| defaultShardingColumn (?)           | String                                              | Default sharding column name              | None            |
-| shardingAlgorithms (+)              | Map\<String, ShardingSphereAlgorithmConfiguration\> | Sharding algorithm name and configurations | None            |
-| keyGenerators (?)                   | Map\<String, ShardingSphereAlgorithmConfiguration\> | Key generate algorithm name and configurations | None            |
+| *Name*                              | *DataType*                                       | *Description*                             | *Default Value* |
+| ----------------------------------- | ------------------------------------------------ | ----------------------------------------- | --------------- |
+| tables (+)                          | Collection\<ShardingTableRuleConfiguration\>     | Sharding table rules                      | -               |
+| autoTables (+)                      | Collection\<ShardingAutoTableRuleConfiguration\> | Sharding auto table rules                 | -               |
+| bindingTableGroups (*)              | Collection\<String\>                             | Binding table rules                       | Empty           |
+| broadcastTables (*)                 | Collection\<String\>                             | Broadcast table rules                     | Empty           |
+| defaultDatabaseShardingStrategy (?) | ShardingStrategyConfiguration                    | Default database sharding strategy        | Not sharding    |
+| defaultTableShardingStrategy (?)    | ShardingStrategyConfiguration                    | Default table sharding strategy           | Not sharding    |
+| defaultKeyGenerateStrategy (?)      | KeyGeneratorConfiguration                        | Default key generator                     | Snowflake       |
+| defaultShardingColumn (?)           | String                                           | Default sharding column name              | None            |
+| shardingAlgorithms (+)              | Map\<String, AlgorithmConfiguration\>            | Sharding algorithm name and configurations | None            |
+| keyGenerators (?)                   | Map\<String, AlgorithmConfiguration\>            | Key generate algorithm name and configurations | None            |
 
 ### Sharding Table Configuration
 
@@ -113,8 +113,8 @@ Please refer to [Built-in Key Generate Algorithm List](/en/user-manual/shardings
 ## Procedure
 
 1. Create an authentic data source mapping relationship, with key as the logical name of the data source and value as the DataSource object.
-2. Create the sharding rule object ShardingRuleConfiguration, and initialize the sharding table objects—ShardingTableRuleConfiguration, the set of bound tables, the set of broadcast tables, and parameters like library sharding strategy and the database sharding strategy, on which the data sharding depends.
-3. Using the ShardingSphereDataSource method of calling the ShardingSphereDataSourceFactory subject to create the ShardingSphereDataSource.
+1. Create the sharding rule object ShardingRuleConfiguration, and initialize the sharding table objects—ShardingTableRuleConfiguration, the set of bound tables, the set of broadcast tables, and parameters like library sharding strategy and the database sharding strategy, on which the data sharding depends.
+1. Using the ShardingSphereDataSource method of calling the ShardingSphereDataSourceFactory subject to create the ShardingSphereDataSource.
 
 ## Sample
 
@@ -136,9 +136,9 @@ public final class ShardingDatabasesAndTablesConfigurationPrecise implements Exa
         result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration("order_id", "standard_test_tbl"));
         Properties props = new Properties();
         props.setProperty("algorithm-expression", "demo_ds_${user_id % 2}");
-        result.getShardingAlgorithms().put("inline", new ShardingSphereAlgorithmConfiguration("INLINE", props));
-        result.getShardingAlgorithms().put("standard_test_tbl", new ShardingSphereAlgorithmConfiguration("STANDARD_TEST_TBL", new Properties()));
-        result.getKeyGenerators().put("snowflake", new ShardingSphereAlgorithmConfiguration("SNOWFLAKE", new Properties()));
+        result.getShardingAlgorithms().put("inline", new AlgorithmConfiguration("INLINE", props));
+        result.getShardingAlgorithms().put("standard_test_tbl", new AlgorithmConfiguration("STANDARD_TEST_TBL", new Properties()));
+        result.getKeyGenerators().put("snowflake", new AlgorithmConfiguration("SNOWFLAKE", new Properties()));
         return result;
     }
     
