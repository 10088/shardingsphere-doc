commit 6d992c3d6089d5818455932c5ef7ef476ae9fe41
Author: Haoran Meng <menghaoranss@gmail.com>
Date:   Tue Apr 27 18:11:32 2021 +0800

    refactor document for governance (#10208)
    
    * refactor document for governance
    
    * refactor document for governance

diff --git a/docs/document/content/features/governance/management/_index.cn.md b/docs/document/content/features/governance/management/_index.cn.md
index 9272af762c..875d74da57 100644
--- a/docs/document/content/features/governance/management/_index.cn.md
+++ b/docs/document/content/features/governance/management/_index.cn.md
@@ -9,6 +9,5 @@ chapter = true
 
 本小节主要介绍 Apache ShardingSphere 分布式治理的相关功能
 
-* 配置中心
 * 注册中心
 * 第三方组件依赖
diff --git a/docs/document/content/features/governance/management/_index.en.md b/docs/document/content/features/governance/management/_index.en.md
index cd7a5ae735..18e90b6d1f 100644
--- a/docs/document/content/features/governance/management/_index.en.md
+++ b/docs/document/content/features/governance/management/_index.en.md
@@ -9,7 +9,5 @@ chapter = true
 
 This chapter mainly introduces the features of the distributed governance:
 
-* Config center
 * Registry center
-* Metadata center
 * Third-party components dependency
diff --git a/docs/document/content/features/governance/management/change-history.cn.md b/docs/document/content/features/governance/management/change-history.cn.md
new file mode 100644
index 0000000000..1a1dfb4da0
--- /dev/null
+++ b/docs/document/content/features/governance/management/change-history.cn.md
@@ -0,0 +1,46 @@
++++
+title = "变更历史"
+weight = 3
++++
+
+## 5.0.0-alpha
+
+### 配置中心
+
+#### 配置中心数据结构
+
+```yaml
+namespace
+├──users                                     # 权限配置
+├──props                                     # 属性配置
+├──schemas                                   # Schema 配置
+├      ├──${schema_1}                        # Schema 名称1
+├      ├      ├──datasource                  # 数据源配置
+├      ├      ├──rule                        # 规则配置
+├      ├      ├──table                       # 表结构配置
+├      ├──${schema_2}                        # Schema 名称2
+├      ├      ├──datasource                  # 数据源配置
+├      ├      ├──rule                        # 规则配置
+├      ├      ├──table                       # 表结构配置
+```
+
+### 注册中心
+
+#### 注册中心数据结构
+
+```yaml
+namespace
+   ├──states
+   ├    ├──proxynodes
+   ├    ├     ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}
+   ├    ├     ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID}
+   ├    ├     ├──....
+   ├    ├──datanodes
+   ├    ├     ├──${schema_1}
+   ├    ├     ├      ├──${ds_0}
+   ├    ├     ├      ├──${ds_1}
+   ├    ├     ├──${schema_2}
+   ├    ├     ├      ├──${ds_0}
+   ├    ├     ├      ├──${ds_1}
+   ├    ├     ├──....
+```
diff --git a/docs/document/content/features/governance/management/change-history.en.md b/docs/document/content/features/governance/management/change-history.en.md
new file mode 100644
index 0000000000..d31cf34241
--- /dev/null
+++ b/docs/document/content/features/governance/management/change-history.en.md
@@ -0,0 +1,46 @@
++++
+title = "Change History"
+weight = 3
++++
+
+## 5.0.0-alpha
+
+### Config Center
+
+#### Structure in Configuration Center
+
+```yaml
+namespace
+├──users                                     # Users configuration
+├──props                                     # Properties configuration
+├──schemas                                   # Schema configuration
+├      ├──${schema_1}                        # Schema name 1
+├      ├      ├──datasource                  # Datasource configuration
+├      ├      ├──rule                        # Rule configuration
+├      ├      ├──table                       # Table configuration
+├      ├──${schema_2}                        # Schema name 2
+├      ├      ├──datasource                  # Datasource configuration
+├      ├      ├──rule                        # Rule configuration
+├      ├      ├──table                       # Table configuration
+```
+
+### Registry Center
+
+#### Data Structure in Registry Center
+
+```yaml
+namespace
+   ├──states
+   ├    ├──proxynodes
+   ├    ├     ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}
+   ├    ├     ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID}
+   ├    ├     ├──....
+   ├    ├──datanodes
+   ├    ├     ├──${schema_1}
+   ├    ├     ├      ├──${ds_0}
+   ├    ├     ├      ├──${ds_1}
+   ├    ├     ├──${schema_2}
+   ├    ├     ├      ├──${ds_0}
+   ├    ├     ├      ├──${ds_1}
+   ├    ├     ├──....
+```
diff --git a/docs/document/content/features/governance/management/config-center.cn.md b/docs/document/content/features/governance/management/config-center.cn.md
deleted file mode 100644
index adee9ea22b..0000000000
--- a/docs/document/content/features/governance/management/config-center.cn.md
+++ /dev/null
@@ -1,132 +0,0 @@
-+++
-title = "配置中心"
-weight = 1
-+++
-
-## 实现动机
-
-- 配置集中化：越来越多的运行时实例，使得散落的配置难于管理，配置不同步导致的问题十分严重。将配置集中于配置中心，可以更加有效进行管理。
-
-- 配置动态化：配置修改后的分发，是配置中心可以提供的另一个重要能力。它可支持数据源和规则的动态切换。
-
-## 配置中心数据结构
-
-配置中心在定义的命名空间下，以 YAML 格式存储，包括数据源信息，规则信息、权限配置和属性配置，可通过修改节点来实现对于配置的动态管理。
-
-```
-namespace
-    ├──users                                     # 权限配置
-    ├──props                                     # 属性配置
-    ├──schemas                                   # Schema 配置
-    ├      ├──${schema_1}                        # Schema 名称1
-    ├      ├      ├──datasource                  # 数据源配置
-    ├      ├      ├──rule                        # 规则配置
-    ├      ├      ├──table                       # 表结构配置
-    ├      ├──${schema_2}                        # Schema 名称2
-    ├      ├      ├──datasource                  # 数据源配置
-    ├      ├      ├──rule                        # 规则配置
-    ├      ├      ├──table                       # 表结构配置
-```
-
-### /users
-
-权限配置，可配置访问 ShardingSphere-Proxy 的用户名和密码。
-
-```yaml
-- root@127.0.0.1:root
-- sharding@%:sharding
-```
-
-### /props
-
-属性配置，详情请参见[配置手册](/cn/user-manual/shardingsphere-jdbc/configuration/)。
-
-```yaml
-executor-size: 20
-sql-show: true
-```
-
-### /schemas/${schemeName}/datasource
-
-多个数据库连接池的集合，不同数据库连接池属性自适配（例如：DBCP，C3P0，Druid, HikariCP）。
-
-```yaml
-dataSources:
-  ds_0: 
-    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-    props:
-      url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
-      password: null
-      maxPoolSize: 50
-      maintenanceIntervalMilliseconds: 30000
-      connectionTimeoutMilliseconds: 30000
-      idleTimeoutMilliseconds: 60000
-      minPoolSize: 1
-      username: root
-      maxLifetimeMilliseconds: 1800000
-  ds_1: 
-    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-    props:
-      url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
-      password: null
-      maxPoolSize: 50
-      maintenanceIntervalMilliseconds: 30000
-      connectionTimeoutMilliseconds: 30000
-      idleTimeoutMilliseconds: 60000
-      minPoolSize: 1
-      username: root
-      maxLifetimeMilliseconds: 1800000
-```
-
-### /schemas/${schemeName}/rule
-
-规则配置，可包括数据分片、读写分离、数据加密、影子库压测等配置。
-
-```yaml
-rules:
-- !SHARDING
-  xxx
-  
-- !READ_WRITE_SPLITTING
-  xxx
-  
-- !ENCRYPT
-  xxx
-```
-
-### /schemas/${schemeName}/table
-
-表结构配置，暂不支持动态修改。
-
-```yaml
-tables:                                       # 表
-  t_order:                                    # 表名
-    columns:                                  # 列
-      id:                                     # 列名
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: id
-        primaryKey: trues
-      order_id:
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: order_id
-        primaryKey: false
-    indexs:                                   # 索引
-      t_user_order_id_index:                  # 索引名
-        name: t_user_order_id_index
-  t_order_item:
-    columns:
-      order_id:
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: order_id
-        primaryKey: false
-```
-
-## 动态生效
-
-在配置中心上修改、删除、新增相关配置，会动态推送到生产环境并立即生效。
diff --git a/docs/document/content/features/governance/management/config-center.en.md b/docs/document/content/features/governance/management/config-center.en.md
deleted file mode 100644
index ef92824f90..0000000000
--- a/docs/document/content/features/governance/management/config-center.en.md
+++ /dev/null
@@ -1,132 +0,0 @@
-+++
-title = "Config Center"
-weight = 1
-+++
-
-## Motivation
-
-- Centralized configuration: more and more running examples have made it hard to manage separate configurations and asynchronized configurations can cause serious problems. Concentrating them in the configuration center can make the management more effective.
-
-- Dynamic configuration: distribution after configuration modification is another important capability of configuration center. It can support dynamic switch between data sources and rule configurations.
-
-## Structure in Configuration Center
-
-Under defined namespace, configuration center stores data sources, rule configurations, user configurations, and properties in YAML. Modifying nodes can dynamically refresh configurations.
-
-```
-namespace
-    ├──users                                     # Users configuration
-    ├──props                                     # Properties configuration
-    ├──schemas                                   # Schema configuration
-    ├      ├──${schema_1}                        # Schema name 1
-    ├      ├      ├──datasource                  # Datasource configuration
-    ├      ├      ├──rule                        # Rule configuration
-    ├      ├      ├──table                       # Table configuration
-    ├      ├──${schema_2}                        # Schema name 2
-    ├      ├      ├──datasource                  # Datasource configuration
-    ├      ├      ├──rule                        # Rule configuration
-    ├      ├      ├──table                       # Table configuration
-```
-
-### /users
-
-user configurations. Can configure username and password for ShardingSphere-Proxy.
-
-```yaml
-- root@127.0.0.1:root
-- sharding@%:sharding
-```
-
-### /props
-
-Properties configuration. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-jdbc/configuration/) for more details.
-
-```yaml
-executor-size: 20
-sql-show: true
-```
-
-### /schemas/${schemeName}/datasource
-
-A collection of multiple database connection pools, whose properties (e.g. DBCP, C3P0, Druid and HikariCP) are configured by users themselves.
-
-```yaml
-dataSources:
-  ds_0: 
-    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-    props:
-      url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
-      password: null
-      maxPoolSize: 50
-      maintenanceIntervalMilliseconds: 30000
-      connectionTimeoutMilliseconds: 30000
-      idleTimeoutMilliseconds: 60000
-      minPoolSize: 1
-      username: root
-      maxLifetimeMilliseconds: 1800000
-  ds_1: 
-    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-    props:
-      url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
-      password: null
-      maxPoolSize: 50
-      maintenanceIntervalMilliseconds: 30000
-      connectionTimeoutMilliseconds: 30000
-      idleTimeoutMilliseconds: 60000
-      minPoolSize: 1
-      username: root
-      maxLifetimeMilliseconds: 1800000
-```
-
-### /schemas/${schemeName}/rule
-
-Rule configurations, including sharding, read write splitting, data encryption, shadow DB configurations.
-
-```yaml
-rules:
-- !SHARDING
-  xxx
-  
-- !READ_WRITE_SPLITTING
-  xxx
-  
-- !ENCRYPT
-  xxx
-```
-
-### /schemas/${schemeName}/table
-
-Dynamic modification of metadata content is not supported currently.
-
-```yaml
-tables:                                       # Tables
-  t_order:                                    # table_name
-    columns:                                  # Columns
-      id:                                     # column_name
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: id
-        primaryKey: trues
-      order_id:
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: order_id
-        primaryKey: false
-    indexs:                                   # Indexes
-      t_user_order_id_index:                  # index_name
-        name: t_user_order_id_index
-  t_order_item:
-    columns:
-      order_id:
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: order_id
-        primaryKey: false
-```
-
-## Dynamic Effectiveness
-
-Modification, deletion and insertion of relevant configurations in the config center will immediately take effect in the producing environment.
diff --git a/docs/document/content/features/governance/management/dependency.cn.md b/docs/document/content/features/governance/management/dependency.cn.md
index 1513293635..d02aa8f760 100644
--- a/docs/document/content/features/governance/management/dependency.cn.md
+++ b/docs/document/content/features/governance/management/dependency.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "第三方组件依赖"
-weight = 4
+weight = 2
 +++
 
 Apache ShardingSphere 在数据库治理模块使用 SPI 方式载入数据到配置中心和注册中心，进行实例熔断和数据库禁用。
diff --git a/docs/document/content/features/governance/management/dependency.en.md b/docs/document/content/features/governance/management/dependency.en.md
index b17236a151..cdb4e0ae4e 100644
--- a/docs/document/content/features/governance/management/dependency.en.md
+++ b/docs/document/content/features/governance/management/dependency.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Third-party Components"
-weight = 4
+weight = 2
 +++
 
 Apache ShardingSphere uses SPI to load data to the config center and registry center and disable instances and databases. 
diff --git a/docs/document/content/features/governance/management/registry-center.cn.md b/docs/document/content/features/governance/management/registry-center.cn.md
index 2dccf304f7..f53e03c683 100644
--- a/docs/document/content/features/governance/management/registry-center.cn.md
+++ b/docs/document/content/features/governance/management/registry-center.cn.md
@@ -1,20 +1,35 @@
 +++
 title = "注册中心"
-weight = 2
+weight = 1
 +++
 
 ## 实现动机
 
-- 相对于配置中心管理配置数据，注册中心存放运行时的动态/临时状态数据，比如可用的 ShardingSphere 的实例，需要禁用或熔断的数据源等。
+- 配置集中化：越来越多的运行时实例，使得散落的配置难于管理，配置不同步导致的问题十分严重。将配置集中于配置中心，可以更加有效进行管理。
 
-- 通过注册中心，可以提供熔断数据库访问程序对数据库的访问和禁用从库的访问的编排治理能力。治理模块仍然有大量未完成的功能（比如流控等）。
+- 配置动态化：配置修改后的分发，是配置中心可以提供的另一个重要能力。它可支持数据源和规则的动态切换。
+
+- 存放运行时的动态/临时状态数据，比如可用的 ShardingSphere 的实例，需要禁用或熔断的数据源等。
+
+- 提供熔断数据库访问程序对数据库的访问和禁用从库的访问的编排治理能力。治理模块仍然有大量未完成的功能（比如流控等）。
 
 ## 注册中心数据结构
 
-注册中心在定义的命名空间的 `states` 节点下，创建数据库访问对象运行节点，用于区分不同数据库访问实例。包括 `proxynodes` 和 `datanodes` 节点。
+在定义的命名空间下， `users` 、 `props` 和 `metadata` 节点以 YAML 格式存储配置，可通过修改节点来实现对于配置的动态管理。 `states` 存储数据库访问对象运行节点，用于区分不同数据库访问实例。
 
 ```
 namespace
+   ├──users                                     # 权限配置
+   ├──props                                     # 属性配置
+   ├──metadata                                  # Metadata 配置
+   ├      ├──${schema_1}                        # Schema 名称1
+   ├      ├      ├──datasource                  # 数据源配置
+   ├      ├      ├──rule                        # 规则配置
+   ├      ├      ├──schema                      # 表结构配置
+   ├      ├──${schema_2}                        # Schema 名称2
+   ├      ├      ├──datasource                  # 数据源配置
+   ├      ├      ├──rule                        # 规则配置
+   ├      ├      ├──schema                      # 表结构配置
    ├──states
    ├    ├──proxynodes
    ├    ├     ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}
@@ -30,6 +45,105 @@ namespace
    ├    ├     ├──....
 ```
 
+### /users
+
+权限配置，可配置访问 ShardingSphere-Proxy 的用户名和密码。
+
+```yaml
+- root@127.0.0.1:root
+- sharding@%:sharding
+```
+
+### /props
+
+属性配置，详情请参见[配置手册](/cn/user-manual/shardingsphere-jdbc/configuration/)。
+
+```yaml
+executor-size: 20
+sql-show: true
+```
+
+### /metadata/${schemeName}/datasource
+
+多个数据库连接池的集合，不同数据库连接池属性自适配（例如：DBCP，C3P0，Druid, HikariCP）。
+
+```yaml
+dataSources:
+  ds_0: 
+    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
+    props:
+      url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
+      password: null
+      maxPoolSize: 50
+      maintenanceIntervalMilliseconds: 30000
+      connectionTimeoutMilliseconds: 30000
+      idleTimeoutMilliseconds: 60000
+      minPoolSize: 1
+      username: root
+      maxLifetimeMilliseconds: 1800000
+  ds_1: 
+    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
+    props:
+      url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
+      password: null
+      maxPoolSize: 50
+      maintenanceIntervalMilliseconds: 30000
+      connectionTimeoutMilliseconds: 30000
+      idleTimeoutMilliseconds: 60000
+      minPoolSize: 1
+      username: root
+      maxLifetimeMilliseconds: 1800000
+```
+
+### /metadata/${schemeName}/rule
+
+规则配置，可包括数据分片、读写分离、数据加密、影子库压测等配置。
+
+```yaml
+rules:
+- !SHARDING
+  xxx
+  
+- !READ_WRITE_SPLITTING
+  xxx
+  
+- !ENCRYPT
+  xxx
+```
+
+### /metadata/${schemeName}/schema
+
+表结构配置，暂不支持动态修改。
+
+```yaml
+tables:                                       # 表
+  t_order:                                    # 表名
+    columns:                                  # 列
+      id:                                     # 列名
+        caseSensitive: false
+        dataType: 0
+        generated: false
+        name: id
+        primaryKey: trues
+      order_id:
+        caseSensitive: false
+        dataType: 0
+        generated: false
+        name: order_id
+        primaryKey: false
+    indexs:                                   # 索引
+      t_user_order_id_index:                  # 索引名
+        name: t_user_order_id_index
+  t_order_item:
+    columns:
+      order_id:
+        caseSensitive: false
+        dataType: 0
+        generated: false
+        name: order_id
+        primaryKey: false
+```
+
 ### /states/proxynodes
 
 数据库访问对象运行实例信息，子节点是当前运行实例的标识。
@@ -40,6 +154,10 @@ namespace
 
 可以治理读写分离从库，可动态添加删除以及禁用。
 
+## 动态生效
+
+在注册中心上修改、删除、新增相关配置，会动态推送到生产环境并立即生效。
+
 ## 操作指南
 
 ### 熔断实例
diff --git a/docs/document/content/features/governance/management/registry-center.en.md b/docs/document/content/features/governance/management/registry-center.en.md
index 893cfcc752..00dbc92c45 100644
--- a/docs/document/content/features/governance/management/registry-center.en.md
+++ b/docs/document/content/features/governance/management/registry-center.en.md
@@ -1,20 +1,35 @@
 +++
 title = "Registry Center"
-weight = 2
+weight = 1
 +++
 
 ## Motivation
 
-- As config center manage configuration data, registry center hold all ephemeral status data dynamically generated in runtime(such as available proxy instances, disabled datasource instances etc).
+- Centralized configuration: more and more running examples have made it hard to manage separate configurations and asynchronized configurations can cause serious problems. Concentrating them in the configuration center can make the management more effective.
 
-- Registry center can disable the access to replica database and the access of application. Governance still has many functions(such as flow control) to be developed.
+- Dynamic configuration: distribution after configuration modification is another important capability of configuration center. It can support dynamic switch between data sources and rule configurations.
+
+- Hold all ephemeral status data dynamically generated in runtime(such as available proxy instances, disabled datasource instances etc).
+
+- Disable the access to replica database and the access of application. Governance still has many functions(such as flow control) to be developed.
 
 ## Data Structure in Registry Center
 
-The registry center can create running node of database access object under `states` in defined namespace, to distinguish different database access instances, including `proxynodes` and `datanodes` nodes.
+Under defined namespace, `users`, `props` and `metadata` nodes persist in YAML, modifying nodes can dynamically refresh configurations. `states` node persist the runtime node of database access object, to distinguish different database access instances.
 
 ```
 namespace
+   ├──users                                     # Users configuration
+   ├──props                                     # Properties configuration
+   ├──metadata                                  # Metadata configuration
+   ├      ├──${schema_1}                        # Schema name 1
+   ├      ├      ├──datasource                  # Datasource configuration
+   ├      ├      ├──rule                        # Rule configuration
+   ├      ├      ├──schema                      # Table configuration
+   ├      ├──${schema_2}                        # Schema name 2
+   ├      ├      ├──datasource                  # Datasource configuration
+   ├      ├      ├──rule                        # Rule configuration
+   ├      ├      ├──schema                      # Table configuration
    ├──states
    ├    ├──proxynodes
    ├    ├     ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}
@@ -30,6 +45,105 @@ namespace
    ├    ├     ├──....
 ```
 
+### /users
+
+user configurations. Can configure the username and password for ShardingSphere-Proxy.
+
+```yaml
+- root@127.0.0.1:root
+- sharding@%:sharding
+```
+
+### /props
+
+Properties configuration. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-jdbc/configuration/) for more details.
+
+```yaml
+executor-size: 20
+sql-show: true
+```
+
+### /metadata/${schemeName}/datasource
+
+A collection of multiple database connection pools, whose properties (e.g. DBCP, C3P0, Druid and HikariCP) are configured by users themselves.
+
+```yaml
+dataSources:
+  ds_0: 
+    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
+    props:
+      url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
+      password: null
+      maxPoolSize: 50
+      maintenanceIntervalMilliseconds: 30000
+      connectionTimeoutMilliseconds: 30000
+      idleTimeoutMilliseconds: 60000
+      minPoolSize: 1
+      username: root
+      maxLifetimeMilliseconds: 1800000
+  ds_1: 
+    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
+    props:
+      url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
+      password: null
+      maxPoolSize: 50
+      maintenanceIntervalMilliseconds: 30000
+      connectionTimeoutMilliseconds: 30000
+      idleTimeoutMilliseconds: 60000
+      minPoolSize: 1
+      username: root
+      maxLifetimeMilliseconds: 1800000
+```
+
+### /metadata/${schemeName}/rule
+
+Rule configurations, including sharding, read write splitting, data encryption, shadow DB configurations.
+
+```yaml
+rules:
+- !SHARDING
+  xxx
+  
+- !READ_WRITE_SPLITTING
+  xxx
+  
+- !ENCRYPT
+  xxx
+```
+
+### /metadata/${schemeName}/schema
+
+Dynamic modification of metadata content is not supported currently.
+
+```yaml
+tables:                                       # Tables
+  t_order:                                    # table_name
+    columns:                                  # Columns
+      id:                                     # column_name
+        caseSensitive: false
+        dataType: 0
+        generated: false
+        name: id
+        primaryKey: trues
+      order_id:
+        caseSensitive: false
+        dataType: 0
+        generated: false
+        name: order_id
+        primaryKey: false
+    indexs:                                   # Indexes
+      t_user_order_id_index:                  # index_name
+        name: t_user_order_id_index
+  t_order_item:
+    columns:
+      order_id:
+        caseSensitive: false
+        dataType: 0
+        generated: false
+        name: order_id
+        primaryKey: false
+```
+
 ### /states/proxynodes
 
 It includes running instance information of database access object, with sub-nodes as the identifiers of currently running instance, which consist of IP and PID. Those identifiers are temporary nodes, which are registered when instances are on-line and cleared when instances are off-line. The registry center monitors the change of those nodes to govern the database access of running instances and other things.
@@ -38,6 +152,10 @@ It includes running instance information of database access object, with sub-nod
 
 It is able to orchestrate replica database, delete or disable data dynamically.
 
+## Dynamic Effectiveness
+
+Modification, deletion and insertion of relevant configurations in the config center will immediately take effect in the producing environment.
+
 ## Operation Guide
 
 ### Circuit Breaker
