commit 79f8d01b6d7856e113be0db2dd24096ba794dd57
Author: Liang Zhang <terrymanu@163.com>
Date:   Wed Nov 17 18:46:31 2021 +0800

    Update distsql/usage (#13664)
    
    * Update index of distsql/usage
    
    * Update distsql/usage

diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/_index.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/_index.cn.md
index 0a9e103ebe..f55411aefd 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/_index.cn.md
@@ -4,4 +4,44 @@ weight = 2
 chapter = true
 +++
 
-本章节将结合 DistSQL 的语法，并以实战的形式分别介绍如何使用 DistSQL 管理分布式数据库下数据分片、读写分离等规则。
+本章节将结合 DistSQL 的语法，并以实战的形式分别介绍如何使用 DistSQL 管理分布式数据库下的资源和规则。
+
+## 前置工作
+
+以 MySQL 为例，其他数据库可直接替换。
+
+1. 启动 MySQL 服务；
+1. 创建待注册资源的 MySQL 数据库；
+1. 在 MySQL 中为 ShardingSphere-Proxy 创建一个拥有创建权限的角色或者用户；
+1. 启动 Zookeeper 服务；
+1. 添加 `mode` 和 `authentication` 配置参数到 `server.yaml`；
+1. 启动 ShardingSphere-Proxy；
+1. 通过应用程序或终端连接到 ShardingSphere-Proxy；
+
+## 创建数据库
+
+1. 创建逻辑库
+
+```sql
+CREATE DATABASE foo_db;
+```
+
+2. 使用新创建的逻辑库
+
+```sql
+USE foo_db;
+```
+
+## 资源操作
+
+详见具体规则示例。
+
+## 规则操作
+
+详见具体规则示例。
+
+## 注意事项
+
+1. 当前, `DROP DATABASE` 只会移除 `逻辑的分布式数据库`，不会删除用户真实的数据库；
+2. `DROP TABLE` 会将逻辑分片表和数据库中真实的表全部删除；
+3. `CREATE DATABASE` 只会创建 `逻辑的分布式数据库`，所以需要用户提前创建好真实的数据库。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/_index.en.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/_index.en.md
index 66a461d7d6..c53dba17ba 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/_index.en.md
@@ -4,4 +4,44 @@ weight = 2
 chapter = true
 +++
 
-This chapter will introduce how to use DistSQL to manage sharding, readwrite-splitting and other rules in a distributed database.
\ No newline at end of file
+This chapter will introduce how to use DistSQL to manage resources and rules in a distributed database.
+
+## Pre-work
+
+Use MySQL as example, can replace to other databases.
+
+1. Start the MySQL service;
+1. Create to be registered MySQL databases;
+1. Create role and user in MySQL with creation permission for ShardingSphere-Proxy;
+1. Start Zookeeper service;
+1. Add `mode` and `authentication` configurations to `server.yaml`;
+1. Start ShardingSphere-Proxy;
+1. Use SDK or terminal connect to ShardingSphere-Proxy.
+
+## Create Logic Database
+
+1. Create logic database
+
+```sql
+CREATE DATABASE foo_db;
+```
+
+2. Use newly created logic database
+
+```sql
+USE foo_db;
+```
+
+## Resource Operation
+
+More details please see concentrate rule examples.
+
+## Rule Operation
+
+More details please see concentrate rule examples.
+
+### Notice
+
+1. Currently, `DROP DATABASE` will only remove the `logical distributed database`, not the user's actual database;
+1. `DROP TABLE` will delete all logical fragmented tables and actual tables in the database;
+1. `CREATE DATABASE` will only create a `logical distributed database`, so users need to create actual databases in advance.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/db-discovery.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/db-discovery.cn.md
index cb6d93c29a..7484f08f86 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/db-discovery.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/db-discovery.cn.md
@@ -3,36 +3,7 @@ title = "数据库发现"
 weight = 5
 +++
 
-## 使用实战
-
-### 前置工作
-
-1. 启动 MySQL 服务
-2. 创建 MySQL 数据库(参考 ShardingProxy 数据源配置规则)
-3. 为 ShardingProxy 创建一个拥有创建权限的角色或者用户
-4. 启动 Zookeeper 服务 (为了持久化配置)
-
-### 启动 ShardingProxy
-
-1. 添加 `mode` 和 `authentication` 配置参数到 `server.yaml` (请参考相关 example 案例)
-2. 启动 ShardingProxy ([相关介绍](/cn/quick-start/shardingsphere-proxy-quick-start/))
-
-### 创建分布式数据库和分片表
-
-1. 连接到 ShardingProxy
-2. 创建分布式数据库
-
-```sql
-CREATE DATABASE discovery_db;
-```
-
-3. 使用新创建的数据库
-
-```sql
-USE discovery_db;
-```
-
-4. 配置数据源信息
+## 资源操作
 
 ```sql
 ADD RESOURCE ds_0 (
@@ -56,7 +27,9 @@ PASSWORD=root
 );
 ```
 
-5. 创建数据库发现规则
+## 规则操作
+
+- 创建数据库发现规则
 
 ```sql
 CREATE DB_DISCOVERY RULE group_0 (
@@ -65,7 +38,7 @@ TYPE(NAME=mgr,PROPERTIES(groupName='92504d5b-6dec',keepAliveCron=''))
 );
 ```
 
-6. 修改数据库发现规则
+- 修改数据库发现规则
 
 ```sql
 ALTER DB_DISCOVERY RULE group_0 (
@@ -74,26 +47,20 @@ TYPE(NAME=mgr,PROPERTIES(groupName='92504d5b-6dec' ,keepAliveCron=''))
 );
 ```
 
-7. 删除数据库发现规则
+- 删除数据库发现规则
 
 ```sql
 DROP DB_DISCOVERY RULE group_0;
 ```
 
-8. 删除数据源
+- 删除数据源
 
 ```sql
 DROP RESOURCE ds_0,ds_1,ds_2;
 ```
 
-9. 删除分布式数据库
+- 删除分布式数据库
 
 ```sql
 DROP DATABASE discovery_db;
 ```
-
-### 注意事项
-
-1. 当前, `DROP DATABASE` 只会移除`逻辑的分布式数据库`，不会删除用户真实的数据库。
-2. `DROP TABLE` 会将逻辑分片表和数据库中真实的表全部删除。
-3. `CREATE DATABASE` 只会创建`逻辑的分布式数据库`，所以需要用户提前创建好真实的数据库。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/db-discovery.en.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/db-discovery.en.md
index 61d3ceaa8d..0f687e5e44 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/db-discovery.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/db-discovery.en.md
@@ -3,36 +3,7 @@ title = "DB Discovery"
 weight = 5
 +++
 
-## Usage
-
-### Pre-work
-
-1. Start the MySQL service
-2. Create MySQL database (refer to ShardingProxy data source configuration rules)
-3. Create a role or user with creation permission for ShardingProxy
-4. Start Zookeeper service (for persistent configuration)
-
-### Start ShardingProxy
-
-1. Add `mode` and `authentication` configurations to `server.yaml` (please refer to the example of ShardingProxy)
-2. Start ShardingProxy ([Related introduction](/en/quick-start/shardingsphere-proxy-quick-start/))
-
-### Create a distributed database and sharding tables
-
-1. Connect to ShardingProxy
-2. Create a distributed database
-
-```sql
-CREATE DATABASE discovery_db;
-```
-
-3. Use newly created database
-
-```sql
-USE discovery_db;
-```
-
-4. Configure data source information
+## Resource Operation
 
 ```sql
 ADD RESOURCE ds_0 (
@@ -56,7 +27,9 @@ PASSWORD=root
 );
 ```
 
-5. Create DB discovery rule
+## Rule Operation
+
+- Create DB discovery rule
 
 ```sql
 CREATE DB_DISCOVERY RULE group_0 (
@@ -65,7 +38,7 @@ TYPE(NAME=mgr,PROPERTIES(groupName='92504d5b-6dec',keepAliveCron=''))
 );
 ```
 
-6. Alter DB discovery rule
+- Alter DB discovery rule
 
 ```sql
 ALTER DB_DISCOVERY RULE group_0 (
@@ -74,26 +47,20 @@ TYPE(NAME=mgr,PROPERTIES(groupName='92504d5b-6dec' ,keepAliveCron=''))
 );
 ```
 
-7. Drop db_discovery rule
+- Drop db_discovery rule
 
 ```sql
 DROP DB_DISCOVERY RULE group_0;
 ```
 
-8. Drop resource
+- Drop resource
 
 ```sql
 DROP RESOURCE ds_0,ds_1,ds_2;
 ```
 
-9. Drop distributed database
+- Drop distributed database
 
 ```sql
 DROP DATABASE discovery_db;
 ```
-
-### Notice
-
-1. Currently, `DROP DATABASE` will only remove the `logical distributed database`, not the user's actual database. 
-2. `DROP TABLE` will delete all logical fragmented tables and actual tables in the database.
-3. `CREATE DATABASE` will only create a `logical distributed database`, so users need to create actual databases in advance .
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/encrypt-rule.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/encrypt-rule.cn.md
index 4dd76a81bf..b14832a881 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/encrypt-rule.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/encrypt-rule.cn.md
@@ -3,36 +3,7 @@ title = "数据加密"
 weight = 3
 +++
 
-## 使用实战
-
-### 前置工作
-
-1. 启动 MySQL 服务
-2. 创建 MySQL 数据库(参考 ShardingProxy 数据源配置规则)
-3. 为 ShardingProxy 创建一个拥有创建权限的角色或者用户
-4. 启动 Zookeeper 服务 (为了持久化配置)
-
-### 启动 ShardingProxy
-
-1. 添加 `mode` 和 `authentication` 配置参数到 `server.yaml` (请参考相关 example 案例)
-2. 启动 ShardingProxy ([相关介绍](/cn/quick-start/shardingsphere-proxy-quick-start/))
-
-### 创建分布式数据库和分片表
-
-1. 连接到 ShardingProxy
-2. 创建分布式数据库
-
-```sql
-CREATE DATABASE encrypt_db;
-```
-
-3. 使用新创建的数据库
-
-```sql
-USE encrypt_db;
-```
-
-4. 配置数据源信息
+## 资源操作
 
 ```sql
 ADD RESOURCE ds_0 (
@@ -44,7 +15,9 @@ PASSWORD=root
 );
 ```
 
-5. 创建加密表
+## 规则操作
+
+- 创建加密表
 
 ```sql
 CREATE TABLE `t_encrypt` (
@@ -55,7 +28,7 @@ CREATE TABLE `t_encrypt` (
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
 ```
 
-6. 创建加密规则
+- 创建加密规则
 
 ```sql
 CREATE ENCRYPT RULE t_encrypt (
@@ -65,7 +38,7 @@ COLUMNS(
 ));
 ```
 
-7. 修改加密规则
+- 修改加密规则
 
 ```sql
 CREATE ENCRYPT RULE t_encrypt (
@@ -74,26 +47,20 @@ COLUMNS(
 ));
 ```
 
-8. 删除加密规则
+- 删除加密规则
 
 ```sql
 DROP ENCRYPT RULE t_encrypt;
 ```
 
-9. 删除数据源
+- 删除数据源
 
 ```sql
 DROP RESOURCE ds_0;
 ```
 
-10. 删除分布式数据库
+- 删除分布式数据库
 
 ```sql
 DROP DATABASE encrypt_db;
 ```
-
-### 注意事项
-
-1. 当前, `DROP DATABASE` 只会移除`逻辑的分布式数据库`，不会删除用户真实的数据库。
-2. `DROP TABLE` 会将逻辑分片表和数据库中真实的表全部删除。
-3. `CREATE DATABASE` 只会创建`逻辑的分布式数据库`，所以需要用户提前创建好真实的数据库。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/encrypt-rule.en.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/encrypt-rule.en.md
index e88d080185..6b1e38c885 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/encrypt-rule.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/encrypt-rule.en.md
@@ -3,36 +3,7 @@ title = "Encrypt"
 weight = 3
 +++
 
-## Usage
-
-### Pre-work
-
-1. Start the MySQL service
-2. Create MySQL database (refer to ShardingProxy data source configuration rules)
-3. Create a role or user with creation permission for ShardingProxy
-4. Start Zookeeper service (for persistent configuration)
-
-### Start ShardingProxy
-
-1. Add `mode` and `authentication` configurations to `server.yaml` (please refer to the example of ShardingProxy)
-2. Start ShardingProxy ([Related introduction](/en/quick-start/shardingsphere-proxy-quick-start/))
-
-### Create a distributed database and sharding tables
-
-1. Connect to ShardingProxy
-2. Create a distributed database
-
-```sql
-CREATE DATABASE encrypt_db;
-```
-
-3. Use newly created database
-
-```sql
-USE encrypt_db;
-```
-
-4. Configure data source information
+## Resource Operation
 
 ```sql
 ADD RESOURCE ds_0 (
@@ -43,7 +14,10 @@ USER=root,
 PASSWORD=root
 );
 ```
-5. Create encrypt table
+
+## Rule Operation
+
+- Create encrypt table
 
 ```sql
 CREATE TABLE `t_encrypt` (
@@ -51,10 +25,10 @@ CREATE TABLE `t_encrypt` (
   `user_plain` varchar(45) DEFAULT NULL,
   `user_cipher` varchar(45) DEFAULT NULL,
   PRIMARY KEY (`order_id`)
-) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
+) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
 ```
 
-6. Create encrypt rule
+- Create encrypt rule
 
 ```sql
 CREATE ENCRYPT RULE t_encrypt (
@@ -64,7 +38,7 @@ COLUMNS(
 ));
 ```
 
-7. Alter encrypt rule
+- Alter encrypt rule
 
 ```sql
 CREATE ENCRYPT RULE t_encrypt (
@@ -73,26 +47,20 @@ COLUMNS(
 ));
 ```
 
-8. Drop encrypt rule
+- Drop encrypt rule
 
 ```sql
 DROP ENCRYPT RULE t_encrypt;
 ```
 
-9. Drop resource
+- Drop resource
 
 ```sql
 DROP RESOURCE ds_0;
 ```
 
-10. Drop distributed database
+- Drop distributed database
 
 ```sql
 DROP DATABASE encrypt_db;
 ```
-
-### Notice
-
-1. Currently, `DROP DATABASE` will only remove the `logical distributed database`, not the user's actual database. 
-2. `DROP TABLE` will delete all logical fragmented tables and actual tables in the database.
-3. `CREATE DATABASE` will only create a `logical distributed database`, so users need to create actual databases in advance.
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/readwirte-splitting-rule.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/readwirte-splitting-rule.cn.md
index 29f180af32..52700f067e 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/readwirte-splitting-rule.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/readwirte-splitting-rule.cn.md
@@ -3,36 +3,7 @@ title = "读写分离"
 weight = 2
 +++
 
-## 使用实战
-
-### 前置工作
-
-1. 启动 MySQL 服务
-2. 创建 MySQL 数据库(参考 ShardingProxy 数据源配置规则)
-3. 为 ShardingProxy 创建一个拥有创建权限的角色或者用户
-4. 启动 Zookeeper 服务 (为了持久化配置)
-
-### 启动 ShardingProxy
-
-1. 添加 `mode` 和 `authentication` 配置参数到 `server.yaml` (请参考相关 example 案例)
-2. 启动 ShardingProxy ([相关介绍](/cn/quick-start/shardingsphere-proxy-quick-start/))
-
-### 创建分布式数据库和分片表
-
-1. 连接到 ShardingProxy
-2. 创建分布式数据库
-
-```sql
-CREATE DATABASE readwrite_splitting_db;
-```
-
-3. 使用新创建的数据库
-
-```sql
-USE readwrite_splitting_db;
-```
-
-4. 配置数据源信息
+## 资源操作
 
 ```sql
 ADD RESOURCE write_ds (
@@ -50,7 +21,9 @@ PASSWORD=root
 );
 ```
 
-5. 创建读写分离规则
+## 规则操作
+
+- 创建读写分离规则
 
 ```sql
 CREATE READWRITE_SPLITTING RULE group_0 (
@@ -60,36 +33,30 @@ TYPE(NAME=random)
 );
 ```
 
-6. 修改读写分离规则
+- 修改读写分离规则
 
 ```sql
 ALTER READWRITE_SPLITTING RULE group_0 (
 WRITE_RESOURCE=write_ds,
 READ_RESOURCES(read_ds),
 TYPE(NAME=random,PROPERTIES(read_weight='2:0'))
-)
+);
 ```
 
-7. 删除读写分离规则
+- 删除读写分离规则
 
 ```sql
 DROP READWRITE_SPLITTING RULE group_0;
 ```
 
-8. 删除数据源
+- 删除数据源
 
 ```sql
 DROP RESOURCE write_ds,read_ds;
 ```
 
-9. 删除分布式数据库
+- 删除分布式数据库
 
 ```sql
 DROP DATABASE readwrite_splitting_db;
 ```
-
-### 注意事项
-
-1. 当前, `DROP DATABASE` 只会移除`逻辑的分布式数据库`，不会删除用户真实的数据库。
-2. `DROP TABLE` 会将逻辑分片表和数据库中真实的表全部删除。
-3. `CREATE DATABASE` 只会创建`逻辑的分布式数据库`，所以需要用户提前创建好真实的数据库。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/readwirte-splitting-rule.en.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/readwirte-splitting-rule.en.md
index 70b94e9dba..883111ae4f 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/readwirte-splitting-rule.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/readwirte-splitting-rule.en.md
@@ -3,36 +3,7 @@ title = "readwrite_splitting"
 weight = 2
 +++
 
-## Usage
-
-### Pre-work
-
-1. Start the MySQL service
-2. Create MySQL database (refer to ShardingProxy data source configuration rules)
-3. Create a role or user with creation permission for ShardingProxy
-4. Start Zookeeper service (for persistent configuration)
-
-### Start ShardingProxy
-
-1. Add `mode` and `authentication` configurations to `server.yaml` (please refer to the example of ShardingProxy)
-2. Start ShardingProxy ([Related introduction](/en/quick-start/shardingsphere-proxy-quick-start/))
-
-### Create a distributed database and sharding tables
-
-1. Connect to ShardingProxy
-2. Create a distributed database
-
-```sql
-CREATE DATABASE readwrite_splitting_db;
-```
-
-3. Use newly created database
-
-```sql
-USE readwrite_splitting_db;
-```
-
-4. Configure data source information
+## Resource Operation
 
 ```sql
 ADD RESOURCE write_ds (
@@ -50,7 +21,9 @@ PASSWORD=root
 );
 ```
 
-5. Create readwrite_splitting rule
+## Rule Operation
+
+- Create readwrite_splitting rule
 
 ```sql
 CREATE READWRITE_SPLITTING RULE group_0 (
@@ -60,37 +33,30 @@ TYPE(NAME=random)
 );
 ```
 
-6. Alter readwrite_splitting rule
+- Alter readwrite_splitting rule
 
 ```sql
 ALTER READWRITE_SPLITTING RULE group_0 (
 WRITE_RESOURCE=write_ds,
 READ_RESOURCES(read_ds),
 TYPE(NAME=random,PROPERTIES(read_weight='2:0'))
-)
+);
 ```
 
-7. Drop readwrite_splitting rule
+- Drop readwrite_splitting rule
 
 ```sql
 DROP READWRITE_SPLITTING RULE group_0;
 ```
 
-8. Drop resource
+- Drop resource
 
 ```sql
 DROP RESOURCE write_ds,read_ds;
 ```
 
-9. Drop distributed database
+- Drop distributed database
 
 ```sql
 DROP DATABASE readwrite_splitting_db;
 ```
-
-### Notice
-
-1. Currently, `DROP DATABASE` will only remove the `logical distributed database`, not the user's actual database. 
-2. `DROP TABLE` will delete all logical fragmented tables and actual tables in the database.
-3. `CREATE DATABASE` will only create a `logical distributed database`, so users need to create actual databases in advance .
-
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/shadow-rule.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/shadow-rule.cn.md
index d7e4af7d5a..aa75f4c05e 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/shadow-rule.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/shadow-rule.cn.md
@@ -3,36 +3,7 @@ title = "影子库压测"
 weight = 5
 +++
 
-## 使用实战
-
-### 前置工作
-
-1. 启动 MySQL 服务
-2. 创建 MySQL 数据库(参考 ShardingProxy 数据源配置规则)
-3. 为 ShardingProxy 创建一个拥有创建权限的角色或者用户
-4. 启动 Zookeeper 服务 (为了持久化配置)
-
-### 启动 ShardingProxy
-
-1. 添加 `mode` 和 `authentication` 配置参数到 `server.yaml` (请参考相关 example 案例)
-2. 启动 ShardingProxy ([相关介绍](/cn/quick-start/shardingsphere-proxy-quick-start/))
-
-### 创建分布式数据库和分片表
-
-1. 连接到 ShardingProxy
-2. 创建分布式数据库
-
-```sql
-CREATE DATABASE shadow_db;
-```
-
-3. 使用新创建的数据库
-
-```sql
-USE shadow_db;
-```
-
-4. 配置数据源信息
+## 资源操作
 
 ```sql
 ADD RESOURCE ds_0 (
@@ -56,7 +27,9 @@ PASSWORD=root
 );
 ```
 
-5. 创建影子库压测规则
+## 规则操作
+
+- 创建影子库压测规则
 
 ```sql
 CREATE SHADOW RULE group_0(
@@ -66,7 +39,7 @@ t_order((simple_note_algorithm, TYPE(NAME=SIMPLE_NOTE, PROPERTIES("shadow"="true
 t_order_item((TYPE(NAME=SIMPLE_NOTE, PROPERTIES("shadow"="true", "foo"="bar")))));
 ```
 
-6. 修改影子库压测规则
+- 修改影子库压测规则
 
 ```sql
 ALTER SHADOW RULE group_0(
@@ -75,13 +48,13 @@ SHADOW=ds_2,
 t_order_item((TYPE(NAME=SIMPLE_NOTE, PROPERTIES("shadow"="true", "foo"="bar")))));
 ```
 
-7. 删除影子库压测规则
+- 删除影子库压测规则
 
 ```sql
 DROP SHADOW RULE group_0;
 ```
 
-8. 删除数据源
+- 删除数据源
 
 ```sql
 DROP RESOURCE ds_0,ds_1,ds_2;
@@ -90,11 +63,5 @@ DROP RESOURCE ds_0,ds_1,ds_2;
 9. 删除分布式数据库
 
 ```sql
-DROP DATABASE shadow_db;
+DROP DATABASE foo_db;
 ```
-
-### 注意事项
-
-1. 当前, `DROP DATABASE` 只会移除`逻辑的分布式数据库`，不会删除用户真实的数据库。
-2. `DROP TABLE` 会将逻辑分片表和数据库中真实的表全部删除。
-3. `CREATE DATABASE` 只会创建`逻辑的分布式数据库`，所以需要用户提前创建好真实的数据库。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/shadow-rule.en.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/shadow-rule.en.md
index d4d7b3d0e3..9e35323faf 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/shadow-rule.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/shadow-rule.en.md
@@ -3,36 +3,7 @@ title = "Shadow"
 weight = 5
 +++
 
-## Usage
-
-### Pre-work
-
-1. Start the MySQL service
-2. Create MySQL database (refer to ShardingProxy data source configuration rules)
-3. Create a role or user with creation permission for ShardingProxy
-4. Start Zookeeper service (for persistent configuration)
-
-### Start ShardingProxy
-
-1. Add `mode` and `authentication` configurations to `server.yaml` (please refer to the example of ShardingProxy)
-2. Start ShardingProxy ([Related introduction](/en/quick-start/shardingsphere-proxy-quick-start/))
-
-### Create a distributed database and sharding tables
-
-1. Connect to ShardingProxy
-2. Create a distributed database
-
-```sql
-CREATE DATABASE shadow_db;
-```
-
-3. Use newly created database
-
-```sql
-USE shadow_db;
-```
-
-4. Configure data source information
+## Resource Operation
 
 ```sql
 ADD RESOURCE ds_0 (
@@ -56,7 +27,9 @@ PASSWORD=root
 );
 ```
 
-5. Create shadow rule
+## Rule Operation
+
+- Create shadow rule
 
 ```sql
 CREATE SHADOW RULE group_0(
@@ -66,7 +39,7 @@ t_order((simple_note_algorithm, TYPE(NAME=SIMPLE_NOTE, PROPERTIES("shadow"="true
 t_order_item((TYPE(NAME=SIMPLE_NOTE, PROPERTIES("shadow"="true", "foo"="bar")))));
 ```
 
-6. Alter shadow rule
+- Alter shadow rule
 
 ```sql
 ALTER SHADOW RULE group_0(
@@ -75,26 +48,20 @@ SHADOW=ds_2,
 t_order_item((TYPE(NAME=SIMPLE_NOTE, PROPERTIES("shadow"="true", "foo"="bar")))));
 ```
 
-7. Drop shadow rule
+- Drop shadow rule
 
 ```sql
 DROP SHADOW RULE group_0;
 ```
 
-8. Drop resource
+- Drop resource
 
 ```sql
 DROP RESOURCE ds_0,ds_1,ds_2;
 ```
 
-9. Drop distributed database
+- Drop distributed database
 
 ```sql
-DROP DATABASE shadow_db;
+DROP DATABASE foo_db;
 ```
-
-### Notice
-
-1. Currently, `DROP DATABASE` will only remove the `logical distributed database`, not the user's actual database. 
-2. `DROP TABLE` will delete all logical fragmented tables and actual tables in the database.
-3. `CREATE DATABASE` will only create a `logical distributed database`, so users need to create actual databases in advance .
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/sharding-rule.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/sharding-rule.cn.md
index 6d88dadb63..51646d2554 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/sharding-rule.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/sharding-rule.cn.md
@@ -3,36 +3,7 @@ title = "数据分片"
 weight = 1
 +++
 
-## 使用实战
-
-### 前置工作
-
-1. 启动 MySQL 服务
-2. 创建 MySQL 数据库(参考 ShardingSphere-Proxy 数据源配置规则)
-3. 为 ShardingSphere-Proxy 创建一个拥有创建权限的角色或者用户
-4. 启动 Zookeeper 服务 (为了持久化配置)
-
-### 启动 ShardingSphere-Proxy
-
-1. 添加 `mode` 和 `authentication` 配置参数到 `server.yaml` (请参考相关 example 案例)
-2. 启动 ShardingSphere-Proxy ([相关介绍](/cn/quick-start/shardingsphere-proxy-quick-start/))
-
-### 创建分布式数据库和分片表
-
-1. 连接到 ShardingSphere-Proxy
-2. 创建分布式数据库
-
-```sql
-CREATE DATABASE sharding_db;
-```
-
-3. 使用新创建的数据库
-
-```sql
-USE sharding_db;
-```
-
-4. 配置数据源信息
+## 资源操作
 
 ```sql
 ADD RESOURCE ds_0 (
@@ -52,7 +23,9 @@ PASSWORD=root
 );
 ```
 
-5. 创建分片规则
+## 规则操作
+
+- 创建分片规则
 
 ```sql
 CREATE SHARDING TABLE RULE t_order(
@@ -63,7 +36,7 @@ GENERATED_KEY(COLUMN=order_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
 );
 ```
 
-6. 创建切分表
+- 创建切分表
 
 ```sql
 CREATE TABLE `t_order` (
@@ -74,33 +47,26 @@ CREATE TABLE `t_order` (
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
 ```
 
-7. 删除切分表
+- 删除切分表
 
 ```sql
 DROP TABLE t_order;
 ```
 
-8. 删除分片规则
+- 删除分片规则
 
 ```sql
 DROP SHARDING TABLE RULE t_order;
 ```
 
-9. 删除数据源
+- 删除数据源
 
 ```sql
 DROP RESOURCE ds_0, ds_1;
 ```
 
-10. 删除分布式数据库
+- 删除分布式数据库
 
 ```sql
-DROP DATABASE sharding_db;
+DROP DATABASE foo_db;
 ```
-
-### 注意事项
-
-1. 当前, `DROP DATABASE` 只会移除 `逻辑的分布式数据库`，不会删除用户真实的数据库。
-2. `DROP TABLE` 会将逻辑分片表和数据库中真实的表全部删除。
-3. `CREATE DATABASE` 只会创建 `逻辑的分布式数据库`，所以需要用户提前创建好真实的数据库。
-4. `自动分片算法` 会持续增加，从而覆盖用户各大分片场景。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/sharding-rule.en.md b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/sharding-rule.en.md
index 26ed060ff9..115fa6e048 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/sharding-rule.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/distsql/usage/sharding-rule.en.md
@@ -3,36 +3,9 @@ title = "Sharding"
 weight = 1
 +++
 
-## Usage
+## Resource Operation
 
-### Pre-work
-
-1. Start the MySQL service
-2. Create MySQL database (refer to ShardingSphere-Proxy data source configuration rules)
-3. Create a role or user with creation permission for ShardingSphere-Proxy
-4. Start Zookeeper service (for persistent configuration)
-
-### Start ShardingSphere-Proxy
-
-1. Add `mode` and `authentication` configurations to `server.yaml` (please refer to the example of ShardingSphere-Proxy)
-2. Start ShardingSphere-Proxy ([Related introduction](/en/quick-start/shardingsphere-proxy-quick-start/))
-
-### Create a distributed database and sharding tables
-
-1. Connect to ShardingSphere-Proxy
-2. Create a distributed database
-
-```sql
-CREATE DATABASE sharding_db;
-```
-
-3. Use newly created database
-
-```sql
-USE sharding_db;
-```
-
-4. Configure data source information
+- Configure data source information
 
 ```sql
 ADD RESOURCE ds_0 (
@@ -52,7 +25,9 @@ PASSWORD=root
 );
 ```
 
-5. Create sharding rule
+## Rule Operation
+
+- Create sharding rule
 
 ```sql
 CREATE SHARDING TABLE RULE t_order(
@@ -63,7 +38,7 @@ GENERATED_KEY(COLUMN=order_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
 );
 ```
 
-6. Create sharding table
+- Create sharding table
 
 ```sql
 CREATE TABLE `t_order` (
@@ -74,33 +49,26 @@ CREATE TABLE `t_order` (
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
 ```
 
-7. Drop sharding table
+- Drop sharding table
 
 ```sql
 DROP TABLE t_order;
 ```
 
-8. Drop sharding rule
+- Drop sharding rule
 
 ```sql
 DROP SHARDING TABLE RULE t_order;
 ```
 
-9. Drop resource
+- Drop resource
 
 ```sql
 DROP RESOURCE ds_0, ds_1;
 ```
 
-10. Drop distributed database
+- Drop distributed database
 
 ```sql
-DROP DATABASE sharding_db;
+DROP DATABASE foo_db;
 ```
-
-### Notice
-
-1. Currently, `DROP DATABASE` will only remove the `logical distributed database`, not the user's actual database.
-2. `DROP TABLE` will delete all logical fragmented tables and actual tables in the database.
-3. `CREATE DATABASE` will only create a `logical distributed database`, so users need to create actual databases in advance.
-4. The `Auto Sharding Algorithm` will continue to increase to cover the user's various sharding scenarios.
