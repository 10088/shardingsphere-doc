commit f1622a8c1b1dddb3911100d705920754ad1f3007
Author: Liang Zhang <terrymanu@163.com>
Date:   Sat Oct 30 23:08:13 2021 +0800

    Update transaction's use-norms (#13370)

diff --git a/docs/document/content/features/encrypt/use-norms.en.md b/docs/document/content/features/encrypt/use-norms.en.md
index 9631f38874..0c55c7ac1e 100644
--- a/docs/document/content/features/encrypt/use-norms.en.md
+++ b/docs/document/content/features/encrypt/use-norms.en.md
@@ -3,13 +3,13 @@ title = "Use Norms"
 weight = 2
 +++
 
-## Supported Items
+## Supported
 
 * The back-end databases are MySQL, Oracle, PostgreSQL, and SQLServer;
 * The user needs to encrypt one or more columns in the database table (data encryption & decryption);
 * Compatible with all commonly used SQL.
 
-## Unsupported Items
+## Unsupported
 
 * Users need to deal with the original inventory data and wash numbers in the database;
 * Use encryption function + sub-database sub-table function, some special SQL is not supported, please refer to [SQL specification]( https://shardingsphere.apache.org/document/current/en/features/sharding/use-norms/sql/);
diff --git a/docs/document/content/features/readwrite-splitting/use-norms.en.md b/docs/document/content/features/readwrite-splitting/use-norms.en.md
index d5282f9641..3ca56d22cc 100644
--- a/docs/document/content/features/readwrite-splitting/use-norms.en.md
+++ b/docs/document/content/features/readwrite-splitting/use-norms.en.md
@@ -3,13 +3,13 @@ title = "Use Norms"
 weight = 2
 +++
 
-## Supported Items
+## Supported
 
 * Provide the readwrite-splitting configuration of one primary database with multiple replica databases, which can be used alone or with sharding table and database;
 * Support SQL pass-through in independent use of readwrite-splitting;
 * Forcible primary database route based on SQL Hint;
 
-## Unsupported Items
+## Unsupported
 
 * Data replication between the primary and the replica databases;
 * Data inconsistency caused by replication delay between databases;
@@ -17,7 +17,7 @@ weight = 2
 * The data for transaction across primary and replica nodes are inconsistent. 
 In the readwrite-splitting model, the primary nodes need to be used for both reading and writing in the transaction.
 
-## Optional Items
+## Optional
 
 | Item            | Description                                                                                                                                                                                 | Default | Range Of Application |
 |:--------------- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |:------- |:-------------------- |
diff --git a/docs/document/content/features/scaling/use-norms.en.md b/docs/document/content/features/scaling/use-norms.en.md
index 2663f9bff9..70553d33b8 100644
--- a/docs/document/content/features/scaling/use-norms.en.md
+++ b/docs/document/content/features/scaling/use-norms.en.md
@@ -3,12 +3,12 @@ title = "User Norms"
 weight = 2
 +++
 
-## Supported Items
+## Supported
 
 * Migrate out data into databases which managed by Apache ShardingSphere;
 * Scale out data between data nodes of Apache ShardingSphere.
 
-## Unsupported Items
+## Unsupported
 
 * Do not support to scale tables without primary key which must be single column.
 * Do not support scale on database cluster which is in use on proxy, need to prepare a new database cluster for scaling target.
diff --git a/docs/document/content/features/shadow/use-norms.en.md b/docs/document/content/features/shadow/use-norms.en.md
index 54cfb45c83..c0022aa522 100644
--- a/docs/document/content/features/shadow/use-norms.en.md
+++ b/docs/document/content/features/shadow/use-norms.en.md
@@ -5,22 +5,22 @@ weight = 2
 
 ## Shadow database
 
-### Supported Items
+### Supported
 
 * The database is MySQL, Oracle, PostgreSQL, SQLServer;
 
-### Unsupported Items
+### Unsupported
 
 * NoSQL database;
 
 ## Shadow algorithm
 
-### Supported Items
+### Supported
 
 * The note shadow algorithm supports MDL and DDL statements;
 * The column shadow algorithm basically supports commonly used MDL statements;
 
-### Unsupported Items
+### Unsupported
 
 * Column shadow algorithm does not support DDL statements；
 * The column shadow algorithm does not support range value matching operations, for example: subQuery, BETWEEN, GROUP BY ... HAVING...;
diff --git a/docs/document/content/features/transaction/use-norms/_index.en.md b/docs/document/content/features/transaction/use-norms/_index.en.md
index 69b8c2b302..399415777c 100644
--- a/docs/document/content/features/transaction/use-norms/_index.en.md
+++ b/docs/document/content/features/transaction/use-norms/_index.en.md
@@ -6,6 +6,6 @@ chapter = true
 
 ## Background
 
-Though Apache ShardingSphere intends to be compatible with all distributed scenario and best performance, under CAP theorem guidance, distributed transaction need to consider about more things.
+Though Apache ShardingSphere intends to be compatible with all distributed scenario and best performance, under CAP theorem guidance, there is no sliver bullet with distributed transaction solution.
 
 Apache ShardingSphere wants to give the user choice of distributed transaction type and use the most suitable solution in different scenarios.
diff --git a/docs/document/content/features/transaction/use-norms/base-transaction-seata.cn.md b/docs/document/content/features/transaction/use-norms/base-transaction-seata.cn.md
deleted file mode 100644
index d10ed36de1..0000000000
--- a/docs/document/content/features/transaction/use-norms/base-transaction-seata.cn.md
+++ /dev/null
@@ -1,19 +0,0 @@
-+++
-title = "Seata 柔性事务"
-weight = 3
-+++
-
-## 支持项
-
-* 支持数据分片后的跨库事务；
-* 支持RC隔离级别；
-* 通过undo快照进行事务回滚；
-* 支持服务宕机后的，自动恢复提交中的事务。
-
-## 不支持项
-
-* 不支持除RC之外的隔离级别。
-
-## 待优化项
-
-* Apache ShardingSphere 和 Seata 重复 SQL 解析。
diff --git a/docs/document/content/features/transaction/use-norms/base.cn.md b/docs/document/content/features/transaction/use-norms/base.cn.md
new file mode 100644
index 0000000000..454b7ad201
--- /dev/null
+++ b/docs/document/content/features/transaction/use-norms/base.cn.md
@@ -0,0 +1,19 @@
++++
+title = "柔性事务"
+weight = 3
++++
+
+## 支持项
+
+* 支持数据分片后的跨库事务；
+* 支持 RC 隔离级别；
+* 通过 undo 快照进行事务回滚；
+* 支持服务宕机后的，自动恢复提交中的事务。
+
+## 不支持项
+
+* 不支持除 RC 之外的隔离级别。
+
+## 待优化项
+
+* Apache ShardingSphere 和 SEATA 重复 SQL 解析。
diff --git a/docs/document/content/features/transaction/use-norms/base-transaction-seata.en.md b/docs/document/content/features/transaction/use-norms/base.en.md
similarity index 64%
rename from docs/document/content/features/transaction/use-norms/base-transaction-seata.en.md
rename to docs/document/content/features/transaction/use-norms/base.en.md
index 92648e0ce5..07a7aeacb6 100644
--- a/docs/document/content/features/transaction/use-norms/base-transaction-seata.en.md
+++ b/docs/document/content/features/transaction/use-norms/base.en.md
@@ -1,19 +1,19 @@
 +++
-title = "Seata BASE transaction"
+title = "BASE"
 weight = 3
 +++
 
-## Supported Items
+## Supported
 
 * Support cross-database transactions after sharding;
 * Support RC isolation level;
 * Rollback transaction according to undo log;
 * Support recovery committing transaction automatically after the service is down.
 
-## Unsupported Items
+## Unsupported
 
 * Do not support other isolation level except RC.
 
-## To Be Optimized Items
+## To Be Optimized
 
-* SQL will be parsed twice by Apache ShardingSphere and Seata.
+* SQL parsed twice by Apache ShardingSphere and SEATA.
diff --git a/docs/document/content/features/transaction/use-norms/local-transaction.cn.md b/docs/document/content/features/transaction/use-norms/local-transaction.cn.md
index 26d70194cf..64a77377b0 100644
--- a/docs/document/content/features/transaction/use-norms/local-transaction.cn.md
+++ b/docs/document/content/features/transaction/use-norms/local-transaction.cn.md
@@ -6,8 +6,8 @@ weight = 1
 ## 支持项
 
 * 完全支持非跨库事务，例如：仅分表，或分库但是路由的结果在单库中；
-* 完全支持因逻辑异常导致的跨库事务。例如：同一事务中，跨两个库更新。更新完毕后，抛出空指针，则两个库的内容都能回滚。
+* 完全支持因逻辑异常导致的跨库事务。例如：同一事务中，跨两个库更新。更新完毕后，抛出空指针，则两个库的内容都能够回滚。
 
 ## 不支持项
 
-* 不支持因网络、硬件异常导致的跨库事务。例如：同一事务中，跨两个库更新，更新完毕后、未提交之前，第一个库宕机，则只有第二个库数据提交。
+* 不支持因网络、硬件异常导致的跨库事务。例如：同一事务中，跨两个库更新，更新完毕后、未提交之前，第一个库宕机，则只有第二个库数据提交，且无法回滚。
diff --git a/docs/document/content/features/transaction/use-norms/local-transaction.en.md b/docs/document/content/features/transaction/use-norms/local-transaction.en.md
index 46c4d6f0f5..0018c82d2d 100644
--- a/docs/document/content/features/transaction/use-norms/local-transaction.en.md
+++ b/docs/document/content/features/transaction/use-norms/local-transaction.en.md
@@ -3,11 +3,11 @@ title = "Local Transaction"
 weight = 1
 +++
 
-## Supported Items
+## Supported
 
-* Fully support none-cross-database transactions, for example, sharding table or sharding database with its route result in one database;
-* Fully support cross-database transactions caused by logic exceptions, for example, the update of two databases in one transaction, after which, databases will throw null cursor and the content in both databases can be rolled back.
+* Support none-cross-database transactions. For example, sharding table or sharding database with its route result in same database;
+* Support cross-database transactions caused by logic exceptions. For example, update two databases in transaction with exception thrown, data can rollback in both databases.
 
-## Unsupported Items
+## Unsupported
 
-* Do not support the cross-database transactions caused by network or hardware exceptions. For example, after the update of two databases in one transaction, if one database is down before submitted, then only the data of the other database can be submitted.
+* Do not support the cross-database transactions caused by network or hardware crash. For example, when update two databases in transaction, if one database crashes before commit, then only the data of the other database can commit.
diff --git a/docs/document/content/features/transaction/use-norms/2pc-xa-transaction.cn.md b/docs/document/content/features/transaction/use-norms/xa.cn.md
similarity index 92%
rename from docs/document/content/features/transaction/use-norms/2pc-xa-transaction.cn.md
rename to docs/document/content/features/transaction/use-norms/xa.cn.md
index 8c1f14cb16..e07ac8c2ba 100644
--- a/docs/document/content/features/transaction/use-norms/2pc-xa-transaction.cn.md
+++ b/docs/document/content/features/transaction/use-norms/xa.cn.md
@@ -1,5 +1,5 @@
 +++
-title = "XA两阶段事务"
+title = "XA 事务"
 weight = 2
 +++
 
diff --git a/docs/document/content/features/transaction/use-norms/2pc-xa-transaction.en.md b/docs/document/content/features/transaction/use-norms/xa.en.md
similarity index 85%
rename from docs/document/content/features/transaction/use-norms/2pc-xa-transaction.en.md
rename to docs/document/content/features/transaction/use-norms/xa.en.md
index 40c5dc6a14..30384c526c 100644
--- a/docs/document/content/features/transaction/use-norms/2pc-xa-transaction.en.md
+++ b/docs/document/content/features/transaction/use-norms/xa.en.md
@@ -1,15 +1,15 @@
 +++
-title = "XA transaction"
+title = "XA"
 weight = 2
 +++
 
-## Supported Items
+## Supported
 
 * Support cross-database transactions after sharding;
 * Operation atomicity and high data consistency in 2PC transactions;
 * When service is down and restarted, commit and rollback transactions can be recovered automatically;
 * Support use XA and non-XA connection pool together.
 
-## Unsupported Items
+## Unsupported
 
 * Recover committing and rolling back in other machines after the service is down.
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md
index 7ae980d752..e36b8cef01 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md
@@ -671,7 +671,7 @@ Enumeration of properties.
 
 In order to relieve the pressure on the database, the write and read operations are separated into different data sources. The write library is called the master library, and the read library is called the slave library. One master library can be configured with multiple slave libraries.
 
-#### Support item
+#### Supported
 
 1. Provides a readwrite-splitting configuration with one master and multiple slaves, which can be used independently or with sub-databases and sub-meters.
 2. Independent use of readwrite-splitting to support SQL transparent transmission.
@@ -679,7 +679,7 @@ In order to relieve the pressure on the database, the write and read operations
 4. Spring namespace.
 5. Hint-based mandatory main library routing.
 
-#### Unsupported item
+#### Unsupported
 
 1. Data synchronization between the master library and the slave library.
 2. Data inconsistency caused by the data synchronization delay of the master library and the slave library.
@@ -748,14 +748,14 @@ DataSource dataSource = ShardingDataSourceFactory.createDataSource(dataSourceMap
 
 In order to relieve the pressure on the database, the write and read operations are separated into different data sources. The write library is called the master library, and the read library is called the slave library. One master library can be configured with multiple slave libraries.
 
-#### Support item
+#### Supported
 
 1. Provides a readwrite-splitting configuration with one master and multiple slaves, which can be used independently or with sub-databases and sub-meters.
 2. In the same thread and the same database connection, if there is a write operation, subsequent read operations will be read from the main library to ensure data consistency.
 3. Spring namespace.
 4. Hint-based mandatory main library routing.
 
-#### Unsupported item
+#### Unsupported
 
 1. Data synchronization between the master library and the slave library.
 2. Data inconsistency caused by the data synchronization delay of the master library and the slave library.
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md
index 577cb8bae3..a11edc814d 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md
@@ -479,7 +479,7 @@ shardingRule:
 
 In order to relieve the pressure on the database, the write and read operations are separated into different data sources. The write library is called the master library, and the read library is called the slave library. One master library can be configured with multiple slave libraries.
 
-#### Support item
+#### Supported
 
 1. Provides a read-write separation configuration with one master and multiple slaves, which can be used independently or with sub-databases and sub-meters.
 2. Independent use of read-write separation to support SQL transparent transmission.
@@ -487,7 +487,7 @@ In order to relieve the pressure on the database, the write and read operations
 4. Spring namespace.
 5. Hint-based mandatory main library routing.
 
-#### Unsupported item
+#### Unsupported
 
 1. Data synchronization between the master library and the slave library.
 2. Data inconsistency caused by the data synchronization delay of the master library and the slave library.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/change-history.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/change-history.en.md
index 5541d72ae5..72ea17827a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/change-history.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/change-history.en.md
@@ -121,7 +121,7 @@ DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(yamlFile);
 
 In order to relieve the pressure on the database, the write and read operations are separated into different data sources. The write library is called the master library, and the read library is called the slave library. One master library can be configured with multiple slave libraries.
 
-#### Support item
+#### Supported
 
 1. Provides a readwrite-splitting configuration with one master and multiple slaves, which can be used independently or with sub-databases and sub-meters.
 2. Independent use of readwrite-splitting to support SQL transparent transmission.
@@ -129,7 +129,7 @@ In order to relieve the pressure on the database, the write and read operations
 4. Spring namespace.
 5. Hint-based mandatory main library routing.
 
-#### Unsupported item
+#### Unsupported
 
 1. Data synchronization between the master library and the slave library.
 2. Data inconsistency caused by the data synchronization delay of the master library and the slave library.
