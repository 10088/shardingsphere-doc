commit 4e046d243ac68dd1b3e3861a1f3956e55bb7bc27
Author: lanchengx <52209337+lanchengx@users.noreply.github.com>
Date:   Fri Oct 29 09:03:51 2021 -0500

    [DistSQL] `CREATE SHARDING TABLE RULE` syntax enhancement (#13256)
    
    * Refactor: Modify `TableRule` to `AutoTableRule`
    
    * Refactor: Modify `TableRule` to `AutoTableRule`
    
    * Refactor: Modify `TableRule` to `AutoTableRule`
    
    * Refactor: Modify `TableRule` to `AutoTableRule`
    
    * Adjustments for compare.
    
    * Adjustments for compare.
    
    * Adjustment for CI
    
    * Modifications for review.
    
    * Modifications for review.
    
    * Modifications for review.
    
    * Refactor convert
    
    * Integrate `autoTableRule` and `tableRule`
    
    * Improve create sharding table rule
    
    * Add related tests.
    
    * Add related tests.
    
    * Adjustments for compare.
    
    * Add doc.
    
    * Add doc.
    
    * Modify the exception type.
    
    * Modify the document.
    
    * Modify the document.

diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.cn.md
index db3574b3e5..f335c53c11 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.cn.md
@@ -10,19 +10,36 @@ weight = 2
 ```sql
 CREATE SHARDING TABLE RULE shardingTableRuleDefinition [, shardingTableRuleDefinition] ...
 
-CREATE DEFAULT SHARDING (DATABASE | TABLE) STRATEGY shardingStrategy
+CREATE DEFAULT SHARDING shardingScope STRATEGY (shardingStrategy)
 
 ALTER SHARDING TABLE RULE shardingTableRuleDefinition [, shardingTableRuleDefinition] ...
 
 DROP SHARDING TABLE RULE tableName [, tableName] ...
 
+CREATE SHARDING ALGORITHM shardingAlgorithmDefinition [,  shardingAlgorithmDefinition] ...
+
 DROP SHARDING ALGORITHM algorithmName [, algorithmName] ...
 
 shardingTableRuleDefinition:
-    tableName(resources [, shardingColumn] [, algorithmDefinition] [, keyGenerateStrategy])
+    shardingAutoTableRule | shardingTableRule
+   
+shardingAutoTableRule:
+    tableName(resources (COMMA shardingColumn)? (COMMA algorithmDefinition)? (COMMA keyGenerateStrategy)?)
+    
+shardingTableRule:
+    tableName(dataNodes (COMMA  databaseStrategy)? (COMMA tableStrategy)? (COMMA keyGenerateStrategy)?)
 
 resources:
-    RESOURCES(resourceName [, resourceName] ...)
+    RESOURCES(resource [, resource] ...)
+
+dataNodes:
+    DATANODES(dataNode [, dataNode] ...)
+
+resource:
+    resourceName | inlineExpression
+
+dataNode:
+    resourceName | inlineExpression
 
 shardingColumn:
     SHARDING_COLUMN=columnName
@@ -33,15 +50,30 @@ algorithmDefinition:
 keyGenerateStrategy:
     GENERATED_KEY(COLUMN=columnName, strategyDefinition)
 
+shardingScope:
+    DATABASE | TABLE
+
+databaseStrategy:
+    DATABASE_STRATEGY(shardingStrategy)
+
+tableStrategy:
+    TABLE_STRATEGY(shardingStrategy)
+
 shardingStrategy:
-    (TYPE=strategyType, shardingColumn, shardingAlgorithm)
+    TYPE=strategyType, shardingColumn, shardingAlgorithm
 
-shardingAlgorithm
-    : SHARDING_ALGORITHM=shardingAlgorithmName
+shardingColumn:
+    SHARDING_COLUMN=columnName
+    
+shardingAlgorithm:
+    SHARDING_ALGORITHM=shardingAlgorithmName
 
 strategyDefinition:
     TYPE(NAME=keyGenerateStrategyType [, PROPERTIES([algorithmProperties])])
 
+shardingAlgorithmDefinition:
+    shardingAlgorithmName(algorithmDefinition)
+
 algorithmProperties:
     algorithmProperty [, algorithmProperty] ...
 
@@ -91,6 +123,11 @@ RESOURCES(resource_0,resource_1),
 SHARDING_COLUMN=order_id,
 TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=4)),
 GENERATED_KEY(COLUMN=another_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
+),t_order_item (
+DATANODES("resource_${0..1}.t_order${0..1}"),
+DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=user_id,SHARDING_ALGORITHM=database_inline),
+TABLE_STRATEGY(TYPE=standard,SHARDING_COLUMN=order_id,SHARDING_ALGORITHM=database_inline),
+GENERATED_KEY(COLUMN=another_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
 );
 
 ALTER SHARDING TABLE RULE t_order (
@@ -98,10 +135,23 @@ RESOURCES(resource_0,resource_1),
 SHARDING_COLUMN=order_id,
 TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=10)),
 GENERATED_KEY(COLUMN=another_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
+),t_order_item (
+DATANODES("resource_0.t_order${0..1}"),
+DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=user_id,SHARDING_ALGORITHM=database_inline),
+TABLE_STRATEGY(TYPE=standard,SHARDING_COLUMN=order_id,SHARDING_ALGORITHM=database_inline),
+GENERATED_KEY(COLUMN=another_id,TYPE(NAME=uuid,PROPERTIES("worker-id"=123)))
 );
 
 DROP SHARDING TABLE RULE t_order, t_order_item;
 
+CREATE DEFAULT SHARDING DATABASE STRATEGY (
+TYPE = standard,SHARDING_COLUMN=order_id,SHARDING_ALGORITHM=algorithmsName
+);
+
+CREATE SHARDING ALGORITHM algorithmName (
+TYPE(NAME=hash_mod,PROPERTIES("algorithm-expression"="t_order_${order_id % 2}"))
+);
+
 DROP SHARDING ALGORITHM t_order_hash_mod;
 ```
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.en.md
index c9a2a8ea9b..ad203c94cd 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.en.md
@@ -10,37 +10,69 @@ weight = 2
 ```sql
 CREATE SHARDING TABLE RULE shardingTableRuleDefinition [, shardingTableRuleDefinition] ...
 
-CREATE DEFAULT SHARDING (DATABASE | TABLE) STRATEGY shardingStrategy
+CREATE DEFAULT SHARDING shardingScope STRATEGY (shardingStrategy)
 
 ALTER SHARDING TABLE RULE shardingTableRuleDefinition [, shardingTableRuleDefinition] ...
 
 DROP SHARDING TABLE RULE tableName [, tableName] ...
 
+CREATE SHARDING ALGORITHM shardingAlgorithmDefinition [,  shardingAlgorithmDefinition] ...
+
 DROP SHARDING ALGORITHM algorithmName [, algorithmName] ...
 
 shardingTableRuleDefinition:
-    tableName(resources [, shardingColumn] [, algorithmDefinition] [, keyGenerateStrategy])
+    shardingAutoTableRule | shardingTableRule
+   
+shardingAutoTableRule:
+    tableName(resources (COMMA shardingColumn)? (COMMA algorithmDefinition)? (COMMA keyGenerateStrategy)?)
+    
+shardingTableRule:
+    tableName(dataNodes (COMMA  databaseStrategy)? (COMMA tableStrategy)? (COMMA keyGenerateStrategy)?)
 
 resources:
-    RESOURCES(resourceName [, resourceName] ...))
+    RESOURCES(resource [, resource] ...)
+
+dataNodes:
+    DATANODES(dataNode [, dataNode] ...)
+
+resource:
+    resourceName | inlineExpression
+
+dataNode:
+    resourceName | inlineExpression
 
 shardingColumn:
     SHARDING_COLUMN=columnName
 
 algorithmDefinition:
-    TYPE(NAME=shardingAlgorithmType [, PROPERTIES([algorithmProperties] )] )
+    TYPE(NAME=shardingAlgorithmType [, PROPERTIES([algorithmProperties])])
 
 keyGenerateStrategy:
     GENERATED_KEY(COLUMN=columnName, strategyDefinition)
 
+shardingScope:
+    DATABASE | TABLE
+
+databaseStrategy:
+    DATABASE_STRATEGY(shardingStrategy)
+
+tableStrategy:
+    TABLE_STRATEGY(shardingStrategy)
+
 shardingStrategy:
-    (TYPE=strategyType, shardingColumn, shardingAlgorithm )
+    TYPE=strategyType, shardingColumn, shardingAlgorithm
 
-shardingAlgorithm
-    : SHARDING_ALGORITHM=shardingAlgorithmName
+shardingColumn:
+    SHARDING_COLUMN=columnName
+    
+shardingAlgorithm:
+    SHARDING_ALGORITHM=shardingAlgorithmName
 
 strategyDefinition:
-    TYPE(NAME=keyGenerateStrategyType [, PROPERTIES([algorithmProperties] )] )
+    TYPE(NAME=keyGenerateStrategyType [, PROPERTIES([algorithmProperties])])
+
+shardingAlgorithmDefinition:
+    shardingAlgorithmName(algorithmDefinition)
 
 algorithmProperties:
     algorithmProperty [, algorithmProperty] ...
@@ -91,6 +123,11 @@ RESOURCES(resource_0,resource_1),
 SHARDING_COLUMN=order_id,
 TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=4)),
 GENERATED_KEY(COLUMN=another_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
+),t_order_item (
+DATANODES("resource_${0..1}.t_order${0..1}"),
+DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=user_id,SHARDING_ALGORITHM=database_inline),
+TABLE_STRATEGY(TYPE=standard,SHARDING_COLUMN=order_id,SHARDING_ALGORITHM=database_inline),
+GENERATED_KEY(COLUMN=another_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
 );
 
 ALTER SHARDING TABLE RULE t_order (
@@ -98,10 +135,23 @@ RESOURCES(resource_0,resource_1),
 SHARDING_COLUMN=order_id,
 TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=10)),
 GENERATED_KEY(COLUMN=another_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
+),t_order_item (
+DATANODES("resource_0.t_order${0..1}"),
+DATABASE_STRATEGY(TYPE=standard,SHARDING_COLUMN=user_id,SHARDING_ALGORITHM=database_inline),
+TABLE_STRATEGY(TYPE=standard,SHARDING_COLUMN=order_id,SHARDING_ALGORITHM=database_inline),
+GENERATED_KEY(COLUMN=another_id,TYPE(NAME=uuid,PROPERTIES("worker-id"=123)))
 );
 
 DROP SHARDING TABLE RULE t_order, t_order_item;
 
+CREATE DEFAULT SHARDING DATABASE STRATEGY (
+TYPE = standard,SHARDING_COLUMN=order_id,SHARDING_ALGORITHM=algorithmsName
+);
+
+CREATE SHARDING ALGORITHM algorithmName (
+TYPE(NAME=hash_mod,PROPERTIES("algorithm-expression"="t_order_${order_id % 2}"))
+);
+
 DROP SHARDING ALGORITHM t_order_hash_mod;
 ```
 
