commit 8b8ec76708994ba767c0f0e8f4285c993c6e0140
Author: Swastika Gupta <64654203+Swastyy@users.noreply.github.com>
Date:   Sun Oct 2 12:27:01 2022 +0530

    Correcting inline expression links (#21304)
    
    * Update sharding.en.md
    
    * Update sharding.cn.md

diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.cn.md b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.cn.md
index 3fa70f0d2ca..3bfbd87bac6 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.cn.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.cn.md
@@ -87,7 +87,7 @@ Apache ShardingSphere 内置的标准分片算法实现类包括：
 
 使用 Groovy 的表达式，提供对 SQL 语句中的 `=` 和 `IN` 的分片操作支持，只支持单分片键。
 对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的 Java 代码开发，如: `t_user_$->{u_id % 8}` 表示 `t_user` 表根据 `u_id` 模 8，而分成 8 张表，表名称为 `t_user_0` 到 `t_user_7`。
-详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
+详情请参见[行表达式](/cn/dev-manual/sharding/#implementation-classes)。
 
 类型：INLINE
 
@@ -161,7 +161,7 @@ Apache ShardingSphere 内置的标准分片算法实现类包括：
 
 #### 复合行表达式分片算法
 
-详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
+详情请参见[行表达式](/cn/dev-manual/sharding/#implementation-classes)。
 
 类型：COMPLEX_INLINE
 
@@ -176,7 +176,7 @@ Apache ShardingSphere 内置的标准分片算法实现类包括：
 
 #### Hint 行表达式分片算法
 
-详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
+详情请参见[行表达式](/cn/dev-manual/sharding/#implementation-classes)。
 
 类型：HINT_INLINE
 
diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
index df6bf478f29..d578bdb2fd3 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
@@ -90,7 +90,7 @@ Apache ShardingSphere built-in standard sharding algorithm are:
 With Groovy expressions, `InlineShardingStrategy` provides single-key support for the sharding operation of `=` and `IN` in SQL.
 Simple sharding algorithms can be used through a simple configuration to avoid laborious Java code developments.
 For example, `t_user_$->{u_id % 8}` means table t_user is divided into 8 tables according to u_id, with table names from `t_user_0` to `t_user_7`.
-Please refer to [Inline Expression](/en/features/sharding/concept/inline-expression/) for more details.
+Please refer to [Inline Expression](/en/dev-manual/sharding/#implementation-classes) for more details.
 
 Type: INLINE
 
@@ -165,7 +165,7 @@ Attributes：
 
 #### Complex Inline Sharding Algorithm
 
-Please refer to [Inline Expression](/en/features/sharding/concept/inline-expression/) for more details.
+Please refer to [Inline Expression](/en/dev-manual/sharding/#implementation-classes) for more details.
 
 Type: COMPLEX_INLINE
 
@@ -179,7 +179,7 @@ Type: COMPLEX_INLINE
 
 #### Hint Inline Sharding Algorithm
 
-Please refer to [Inline Expression](/en/features/sharding/concept/inline-expression/) for more details.
+Please refer to [Inline Expression](/en/dev-manual/sharding/#implementation-classes) for more details.
 
 Type: COMPLEX_INLINE
 
