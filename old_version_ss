commit 1924b86fddc7fdfb139705c958cc4e780231e29e
Author: 吴伟杰 <wuweijie@apache.org>
Date:   Mon Jun 20 15:33:13 2022 +0800

    Clarify procedure of releasing ShardingSphere (#18443)
    
    * Update documents about aborting release
    
    * Update English document about aborting release
    
    * Add sample commands about updating version in documents
    
    * Update header style of release documents
    
    * Do release check after prepared for release
    
    * Refactor release.cn.md
    
    * Refactor release.en.md

diff --git a/docs/community/content/contribute/release.cn.md b/docs/community/content/contribute/release.cn.md
index 26c08285dac..e604142aa74 100644
--- a/docs/community/content/contribute/release.cn.md
+++ b/docs/community/content/contribute/release.cn.md
@@ -4,9 +4,9 @@ weight = 8
 chapter = true
 +++
 
-## 准备工作
+## 发布前准备工作
 
-**1. 确认 Release Note**
+### 1. 确认 Release Note
 
 Release Note 需提供中文/英文两种版本，确认中文描述是否明确，英文翻译是否准确，并按以下标签进行分类：
 
@@ -16,7 +16,7 @@ Release Note 需提供中文/英文两种版本，确认中文描述是否明确
 4. 重构。
 5. 漏洞修复。
 
-**2. 确认 Issue 列表**
+### 2. 确认 Issue 列表
 
 打开 [Github Issues](https://github.com/apache/shardingsphere/issues) ，过滤 Milestone 为 `${RELEASE.VERSION}` 且状态为打开的 Issue:
 
@@ -24,7 +24,7 @@ Release Note 需提供中文/英文两种版本，确认中文描述是否明确
 2. 未完成的 Issue 与负责人进行沟通，如果不影响本次发版，修改 Milestone 为下一个版本；
 3. 确认发布版本的 Milestone 下没有打开状态的 Issue。
 
-**3. 确认 Pull request 列表**
+### 3. 确认 Pull request 列表
 
 打开 [Github Pull requests](https://github.com/apache/shardingsphere/pulls) ，过滤 Milestone 为 `${RELEASE.VERSION}` 且状态为打开的 Pull request:
 
@@ -32,14 +32,14 @@ Release Note 需提供中文/英文两种版本，确认中文描述是否明确
 2. 无法 Merge 且不影响本次发版的 Pull request，修改 Milestone 为下一个版本；
 3. 确认发布版本的 Milestone 下没有打开状态的 Pull request。
 
-**4. 关闭 Milestone**
+### 4. 关闭 Milestone
 
 打开 [Github Milestone](https://github.com/apache/shardingsphere/milestones) 
 
 1. 确认 `${RELEASE.VERSION}` 的 Milestone 完成状态为 100%；
 2. 点击 `Close` 关闭 Milestone。
 
-**5. 发送讨论邮件**
+### 5. 发送讨论邮件
 
 1. 创建 [GitHub Discussion](https://github.com/apache/shardingsphere/discussions) 并在讨论内容中列出 Release Note；
 2. 发送邮件至 [dev@shardingsphere.apache.org](mailto:dev@shardingsphere.apache.org)，在邮件正文中链接 GitHub Discussion；
@@ -47,7 +47,7 @@ Release Note 需提供中文/英文两种版本，确认中文描述是否明确
 
 ## GPG 设置
 
-**1. 安装 GPG**
+### 1. 安装 GPG
 
 在 [GnuPG 官网](https://www.gnupg.org/download/index.html)下载安装包。
 GnuPG 的 1.x 版本和 2.x 版本的命令有细微差别，下列说明以 `GnuPG-2.1.23` 版本为例。
@@ -58,7 +58,7 @@ GnuPG 的 1.x 版本和 2.x 版本的命令有细微差别，下列说明以 `Gn
 gpg --version
 ```
 
-**2. 创建 key**
+### 2. 创建 key
 
 安装完成后，执行以下命令创建 key。
 
@@ -114,7 +114,7 @@ Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
 You need a Passphrase to protect your secret key. # 输入密码
 ```
 
-**3. 查看生成的 key**
+### 3. 查看生成的 key
 
 ```shell
 gpg --list-keys
@@ -130,7 +130,7 @@ sub   4096R/0B7EF5B2 2019-03-20
 
 其中 700E6065 为公钥 ID。
 
-**4. 将公钥同步到服务器**
+### 4. 将公钥同步到服务器
 
 命令如下：
 
@@ -140,31 +140,9 @@ gpg --keyserver hkp://keyserver.ubuntu.com --send-key 700E6065
 
 `keyserver.ubuntu.com` 为随意挑选的公钥服务器，每个服务器之间是自动同步的，选任意一个即可。
 
-## 发布 Apache Maven 中央仓库
-
-**1. 设置 settings.xml 文件**
-
-将以下模板添加到 `~/.m2/settings.xml` 中，所有密码需要加密后再填入。
-加密设置可参考[这里](http://maven.apache.org/guides/mini/guide-encryption.html)。
-
-```xml
-<settings>
-  <servers>
-    <server>
-      <id>apache.snapshots.https</id>
-      <username> <!-- APACHE LDAP 用户名 --> </username>
-      <password> <!-- APACHE LDAP 加密后的密码 --> </password>
-    </server>
-    <server>
-      <id>apache.releases.https</id>
-      <username> <!-- APACHE LDAP 用户名 --> </username>
-      <password> <!-- APACHE LDAP 加密后的密码 --> </password>
-    </server>
-  </servers>
-</settings>
-```
+## 准备发布分支
 
-**2. 创建发布分支**
+### 1. 创建发布分支
 
 假设从 Github 下载的 ShardingSphere 源代码在 `~/shardingsphere/` 目录；假设即将发布的版本为 `${RELEASE.VERSION}`。
 创建 `${RELEASE.VERSION}-release` 分支，接下来的操作都在该分支进行。
@@ -178,7 +156,7 @@ git checkout -b ${RELEASE.VERSION}-release
 git push origin ${RELEASE.VERSION}-release
 ```
 
-**3. 更新版本说明和示例版本**
+### 2. 更新版本说明和示例版本
 
 在发布分支上更新如下文件，并提交 PR 到发布分支：
 
@@ -188,7 +166,15 @@ https://github.com/apache/shardingsphere/blob/${RELEASE.VERSION}-release/RELEASE
 
 更新 `examples` 模块的 pom，将版本由 `${CURRENT.VERSION}` 替换为 `${RELEASE.VERSION}`，并提交 PR 到发布分支。
 
-**4. 更新 ShardingSphere-JDBC Spring 文档中 xsd 文件链接**
+### 3. 更新下载页面
+
+更新如下页面：
+* <https://shardingsphere.apache.org/document/current/en/downloads/>
+* <https://shardingsphere.apache.org/document/current/cn/downloads/>
+
+GPG 签名文件和哈希校验文件的下载连接应该使用这个前缀：`https://downloads.apache.org/shardingsphere/`。
+
+### 4. 更新 ShardingSphere-JDBC Spring 文档中 xsd 文件链接
 
 更新目录 `docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace` 下文档内的所有 xsd 链接。
 
@@ -202,9 +188,43 @@ http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-${PREVI
 http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-${RELEASE.VERSION}.xsd
 ```
 
+参考命令：
+```shell
+cd docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace
+grep -l -r "${PREVIOUS.RELEASE.VERSION}" . | xargs sed -i -e "s/${PREVIOUS.RELEASE.VERSION}/${RELEASE.VERSION}/g"
+```
+
 在文档中指定 xsd 版本，而不是直接使用 `sharding.xsd`，是为了让历史版本的文档能够对应到正确版本的 xsd 文件。
 
-**5. 发布预校验**
+### 5. 修改 README 文件
+
+将 `README.md` 和 `README_ZH.md` 里的 `${PREVIOUS.RELEASE.VERSION}` 修改为 `${RELEASE.VERSION}`。
+
+## 发布 Apache Maven 中央仓库
+
+### 1. 设置 settings.xml 文件
+
+将以下模板添加到 `~/.m2/settings.xml` 中，所有密码需要加密后再填入。
+加密设置可参考[这里](http://maven.apache.org/guides/mini/guide-encryption.html)。
+
+```xml
+<settings>
+  <servers>
+    <server>
+      <id>apache.snapshots.https</id>
+      <username> <!-- APACHE LDAP 用户名 --> </username>
+      <password> <!-- APACHE LDAP 加密后的密码 --> </password>
+    </server>
+    <server>
+      <id>apache.releases.https</id>
+      <username> <!-- APACHE LDAP 用户名 --> </username>
+      <password> <!-- APACHE LDAP 加密后的密码 --> </password>
+    </server>
+  </servers>
+</settings>
+```
+
+### 2. 发布预校验
 
 ```shell
 mvn release:prepare -Prelease -Darguments="-DskipTests -Dspotless.apply.skip=true" -DautoVersionSubmodules=true -DdryRun=true -Dusername=${Github用户名}
@@ -216,7 +236,7 @@ mvn release:prepare -Prelease -Darguments="-DskipTests -Dspotless.apply.skip=tru
 
 -DdryRun=true：演练，即不产生版本号提交，不生成新的 tag。
 
-**6. 准备发布**
+### 3. 准备发布
 
 首先清理发布预校验本地信息。
 
@@ -232,14 +252,14 @@ mvn release:prepare -Prelease -Darguments="-DskipTests -Dspotless.apply.skip=tru
 
 -DpushChanges=false：不要将修改后的版本号和 tag 自动提交至 Github。
 
-将本地文件检查无误后，提交至 Github。
+**按照 [检查发布结果](#检查发布结果) 步骤，将本地文件检查无误后**，提交至 Github。
 
 ```shell
 git push origin ${RELEASE.VERSION}-release
 git push origin --tags
 ```
 
-**7. 部署发布**
+### 4. 部署发布
 
 ```shell
 mvn release:perform -Prelease -Darguments="-DskipTests -Dspotless.apply.skip=true" -DautoVersionSubmodules=true -Dusername=${Github 用户名}
@@ -252,7 +272,7 @@ mvn release:perform -Prelease -Darguments="-DskipTests -Dspotless.apply.skip=tru
 
 ## 发布 Apache SVN 仓库
 
-**1. 检出 ShardingSphere 发布目录**
+### 1. 检出 ShardingSphere 发布目录
 
 如无本地工作目录，则先创建本地工作目录。
 
@@ -268,7 +288,7 @@ svn --username=${APACHE LDAP 用户名} co https://dist.apache.org/repos/dist/de
 cd ~/ss_svn/dev/shardingsphere
 ```
 
-**2. 添加 gpg 公钥**
+### 2. 添加 gpg 公钥
 
 仅第一次部署的账号需要添加，只要 `KEYS` 中包含已经部署过的账户的公钥即可。
 
@@ -276,7 +296,7 @@ cd ~/ss_svn/dev/shardingsphere
 gpg -a --export ${GPG用户名} >> KEYS
 ```
 
-**3. 将待发布的内容添加至 SVN 目录**
+### 3. 将待发布的内容添加至 SVN 目录
 
 创建版本号目录。
 
@@ -294,7 +314,7 @@ cp -f ~/shardingsphere/shardingsphere-distribution/shardingsphere-proxy-distribu
 cp -f ~/shardingsphere/shardingsphere-agent/shardingsphere-agent-distribution/target/*.tar.gz* ~/ss_svn/dev/shardingsphere/${RELEASE.VERSION}
 ```
 
-**4. 提交 Apache SVN**
+### 4. 提交 Apache SVN
 
 ```shell
 svn add *
@@ -303,13 +323,13 @@ svn --username=${APACHE LDAP 用户名} commit -m "release ${RELEASE.VERSION}"
 
 ## 检查发布结果
 
-**检查 sha512 哈希**
+### 1. 检查 sha512 哈希
 
 ```shell
 shasum -c *.sha512
 ```
 
-**检查 gpg 签名**
+### 2. 检查 gpg 签名
 
 首先导入发布人公钥。从 svn 仓库导入 KEYS 到本地环境。（发布版本的人不需要再导入，帮助做验证的人需要导入，用户名填发版人的即可）
 
@@ -350,9 +370,9 @@ gpg --verify apache-shardingsphere-${RELEASE.VERSION}-shardingsphere-agent-bin.t
 gpg --verify apache-shardingsphere-proxy-chart-${CHART.RELEASE.VERSION}.tgz.asc apache-shardingsphere-proxy-chart-${CHART.RELEASE.VERSION}.tgz
 ```
 
-**检查发布文件内容**
+### 3. 检查发布文件内容
 
-**对比源码包与 Github 上 tag 的内容差异**
+**3.1 对比源码包与 Github 上 tag 的内容差异**
 
 ```
 curl -Lo tag-${RELEASE.VERSION}.zip https://github.com/apache/shardingsphere/archive/${RELEASE.VERSION}.zip
@@ -361,7 +381,7 @@ unzip apache-shardingsphere-${RELEASE.VERSION}-src.zip
 diff -r apache-shardingsphere-${RELEASE.VERSION}-src-release shardingsphere-${RELEASE.VERSION}
 ```
 
-**检查源码包的文件内容**
+**3.2 检查源码包的文件内容**
 
 - 检查源码包是否包含由于包含不必要文件，致使 tarball 过于庞大；
 - 存在 `LICENSE` 和 `NOTICE` 文件；
@@ -371,7 +391,7 @@ diff -r apache-shardingsphere-${RELEASE.VERSION}-src-release shardingsphere-${RE
 - 能够正确编译，单元测试可以通过（./mvnw -T 1C install）；
 - 检查是否有多余文件或文件夹，例如空文件夹等。
 
-**检查二进制包的文件内容**
+**3.3 检查二进制包的文件内容**
 
 解压缩
 - `apache-shardingsphere-${RELEASE.VERSION}-shardingsphere-jdbc-bin.tar.gz`
@@ -491,7 +511,7 @@ I will process to publish the release and send ANNOUNCE.
 
 ## 完成发布
 
-**1. 将源码、二进制包以及 KEYS 从 svn 的 dev 目录移动到 release 目录**
+### 1. 将源码、二进制包以及 KEYS 从 svn 的 dev 目录移动到 release 目录
 
 ```shell
 svn mv https://dist.apache.org/repos/dist/dev/shardingsphere/${RELEASE.VERSION} https://dist.apache.org/repos/dist/release/shardingsphere/ -m "transfer packages for ${RELEASE.VERSION}"
@@ -499,26 +519,11 @@ svn delete https://dist.apache.org/repos/dist/release/shardingsphere/KEYS -m "de
 svn cp https://dist.apache.org/repos/dist/dev/shardingsphere/KEYS https://dist.apache.org/repos/dist/release/shardingsphere/ -m "transfer KEYS for ${RELEASE.VERSION}"
 ```
 
-**2. 在 Apache Staging 仓库找到 ShardingSphere 并点击 `Release`**
+### 2. 在 Apache Staging 仓库找到 ShardingSphere 并点击 `Release`
 
-**3. （可选）合并 Github 的 release 分支到 `master`，合并完成后删除 release 分支**
+### 3. 发布 Docker
 
-```shell
-git checkout master
-git merge origin/${RELEASE.VERSION}-release
-git pull
-git push origin master
-git push --delete origin ${RELEASE.VERSION}-release
-git branch -d ${RELEASE.VERSION}-release
-```
-
-**4. 修改 README 文件**
-
-将 `README.md` 和 `README_ZH.md` 里的 `${PREVIOUS.RELEASE.VERSION}` 修改为 `${RELEASE.VERSION}`。
-
-**5. 发布 Docker**
-
-5.1 准备工作
+3.1 准备工作
 
 本地安装 Docker，并启动服务。
 
@@ -529,38 +534,30 @@ docker run --privileged --rm tonistiigi/binfmt --install all
 
 参考文档：[Docker Buildx: Build multi-platform images](https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images)
 
-5.2 登录 Docker Registry
+3.2 登录 Docker Registry
 
 ```shell
 docker login
 ```
 
-5.3 构建并推送 ShardingSphere-Proxy Docker image
+3.3 构建并推送 ShardingSphere-Proxy Docker image
 
 ```shell
 git checkout ${RELEASE.VERSION}
 ./mvnw -pl shardingsphere-distribution/shardingsphere-proxy-distribution -B -Prelease,docker.buildx.push clean package
 ```
 
-5.4 确认发布成功
+3.4 确认发布成功
 
 查看 [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-proxy/) 是否有发布的镜像，确保镜像同时支持 `linux/amd64` 和 `linux/arm64`。
 
-**6. GitHub版本发布**
+### 4. GitHub版本发布
 
 在 [GitHub Releases](https://github.com/apache/shardingsphere/releases) 页面的 `${RELEASE.VERSION}` 版本上点击 `Edit`。
 
 编辑版本号及版本说明，并点击 `Publish release`。
 
-**7. 更新下载页面**
-
-等待并确认新的发布版本同步至 Apache 镜像后，更新如下页面：
-
-https://shardingsphere.apache.org/document/current/en/downloads/
-
-https://shardingsphere.apache.org/document/current/cn/downloads/
-
-GPG 签名文件和哈希校验文件的下载连接应该使用这个前缀：`https://downloads.apache.org/shardingsphere/`。
+### 5. 从发布区移除上一版本内容
 
 [**发布区**](https://dist.apache.org/repos/dist/release/shardingsphere/) 中仅保留一个最新的版本。
 确认 [Archive repository](https://archive.apache.org/dist/shardingsphere/) 中存在上一版本后，从 [**发布区**](https://dist.apache.org/repos/dist/release/shardingsphere/) 删除上一版本：
@@ -575,7 +572,7 @@ svn del -m "Archiving release ${PREVIOUS.RELEASE.VERSION}" https://dist.apache.o
 
 参考：[Release Download Pages for Projects](https://infra.apache.org/release-download-pages.html)。
 
-**8. 上传 Spring namespace xsd 文件至官方网站**
+### 6. 上传 Spring namespace xsd 文件至官方网站
 
 提交 pull request 将源码中的 xsd 文件以及发布版本的 xsd 文件上传至 https://github.com/apache/shardingsphere-doc/tree/asf-site/schema/shardingsphere
 
@@ -598,13 +595,18 @@ svn del -m "Archiving release ${PREVIOUS.RELEASE.VERSION}" https://dist.apache.o
 - database-discovery.xsd
 - database-discovery-${RELEASE.VERSION}.xsd
 
-**9. 官网首页增加发布版本文档入口**
+### 7. 官网首页增加发布版本文档入口
 
 参考以下代码：
 - [英文首页](https://github.com/apache/shardingsphere-doc/blob/10fb1b5f610fe2cac00c66abe2df7a8cc30c2a18/index.html#L88-L126)
 - [中文首页](https://github.com/apache/shardingsphere-doc/blob/10fb1b5f610fe2cac00c66abe2df7a8cc30c2a18/index_zh.html#L88-L125)
 
-**10. 邮件通知版本发布完成**
+### 8. 合并 GitHub 的 release 分支到 `master`，合并完成后删除 release 分支
+
+确认下载页面中的新发布版本的链接可用后，在 GitHub 页面创建 Pull Request 将分支 `${RELEASE.VERSION}-release` 合并到 `master`。
+如果代码存在冲突，可以先把 master 分支合并到 `${RELEASE.VERSION}-release`。
+
+### 9. 邮件通知版本发布完成
 
 发送邮件到 `dev@shardingsphere.apache.org` 和 `announce@apache.org` 通知完成版本发布。
 
@@ -644,3 +646,36 @@ ShardingSphere Resources:
 - Apache ShardingSphere Team
 
 ```
+
+## 附录：如何中止发布流程
+
+当发布过程中发现问题，需要中止发布流程并待问题修复后重新发布，可以参考以下流程进行。
+
+### 在投票邮件回复 -1 并说明中止原因
+
+在 `[VOTE]` 邮件回复 -1，并说明中止投票的原因。
+
+### 从 dev 区域移除 release candidates
+
+```shell
+svn del https://dist.apache.org/repos/dist/dev/shardingsphere/${RELEASE.VERSION} -m "Drop ${RELEASE.VERSION} release candidates"
+```
+
+### Drop Maven Staging Repository
+
+在 <https://repository.apache.org/#stagingRepositories> 勾选本次发布的 Staging Repository，点击 **Drop** 按钮。
+
+### Reset 发布分支并删除 tag
+
+Reset `${RELEASE.VERSION}-release` 分支到 `maven-release-plugin` 自动提交之前的 commit：
+```shell
+git checkout ${RELEASE.VERSION}-release
+git reset --hard ${COMMIT_ID_BEFORE_RELEASE}
+git push origin --force
+```
+
+删除 tag：
+```shell
+git tag -d ${RELEASE.VERSION}
+git push origin -d ${RELEASE.VERSION}
+```
diff --git a/docs/community/content/contribute/release.en.md b/docs/community/content/contribute/release.en.md
index 7f6730349a0..cb308c10083 100644
--- a/docs/community/content/contribute/release.en.md
+++ b/docs/community/content/contribute/release.en.md
@@ -4,9 +4,9 @@ weight = 8
 chapter = true
 +++
 
-## Prepare
+## Prepare before release procedure
 
-**1. Confirm release notes**
+### 1. Confirm release notes
 
 The release note should be provided in Chinese / English, confirm whether the Chinese description is clear and whether the English translation is accurate, 
 and shall be classified according to the following labels:
@@ -17,7 +17,7 @@ and shall be classified according to the following labels:
 4. Refactor
 5. Bug Fix
 
-**2. Confirm issue list**
+### 2. Confirm issue list
 
 Open [GitHub issues](https://github.com/apache/shardingsphere/issues), filter the issue whose milestone is `${RELEASE.VERSION}` and status is open:
 
@@ -25,7 +25,7 @@ Open [GitHub issues](https://github.com/apache/shardingsphere/issues), filter th
 2. For outstanding issues, communicate with the developer in charge. If this release is not affected, modify milestone to the next version
 3. Confirm that there is no issue in open status under milestone of release version
 
-**3. Confirm pull request list**
+### 3. Confirm pull request list
 
 Open [GitHub pull requests](https://github.com/apache/shardingsphere/pulls), filter pull requests whose milestone is `${RELEASE.VERSION}` and status is open:
 
@@ -33,14 +33,14 @@ Open [GitHub pull requests](https://github.com/apache/shardingsphere/pulls), fil
 2. For pull requests that cannot merge and do not affect this release, modify milestone to the next version
 3. Confirm that there is no open pull request under milestone of release version
 
-**4. Close milestone**
+### 4. Close milestone
 
 Open [GitHub milestone](https://github.com/apache/shardingsphere/milestones)
 
 1. Confirm that the milestone completion status of `${RELEASE.VERSION}` is 100%
 2. Click `close` to close milestone
 
-**5. Call for a discussion**
+### 5. Call for a discussion
 
 1. Create a [GitHub Discussion](https://github.com/apache/shardingsphere/discussions) contains all the release notes
 2. Send email to [dev@shardingsphere.apache.org](mailto:dev@shardingsphere.apache.org) with the GitHub Discussion in the message body
@@ -48,7 +48,7 @@ Open [GitHub milestone](https://github.com/apache/shardingsphere/milestones)
 
 ## GPG Settings
 
-**1. Install GPG**
+### 1. Install GPG
 
 Download installation package on [official GnuPG website](https://www.gnupg.org/download/index.html). 
 The command of GnuPG 1.x version can differ a little from that of 2.x version. 
@@ -59,7 +59,7 @@ After the installation, execute the following command to check the version numbe
 gpg --version
 ```
 
-**2. Create Key**
+### 2. Create Key
 
 After the installation, execute the following command to create key.
 
@@ -115,7 +115,7 @@ Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
 You need a Passphrase to protect your secret key. # Input passwords
 ```
 
-**3. Check Generated Key**
+### 3. Check Generated Key
 
 ```shell
 gpg --list-keys
@@ -131,7 +131,7 @@ sub   4096R/0B7EF5B2 2019-03-20
 
 Among them, 700E6065 is public key ID.
 
-**4. Upload the Public Key to Key Server**
+### 4. Upload the Public Key to Key Server
 
 The command is as follows:
 
@@ -142,33 +142,11 @@ gpg --keyserver hkp://keyserver.ubuntu.com --send-key 700E6065
 `keyserver.ubuntu.com` is randomly chosen from public key server. 
 Each server will automatically synchronize with one another, so it would be okay to choose any one.
 
-## Apache Maven Central Repository Release
-
-**1. Set settings.xml**
-
-Add the following template to `~/.m2/settings.xml`, all the passwords need to be filled in after encryption. 
-For encryption settings, please see [here](http://maven.apache.org/guides/mini/guide-encryption.html).
-
-```xml
-<settings>
-    <servers>
-      <server>
-          <id>apache.snapshots.https</id>
-          <username> <!-- APACHE LDAP username --> </username>
-          <password> <!-- APACHE LDAP encrypted password --> </password>
-      </server>
-      <server>
-          <id>apache.releases.https</id>
-          <username> <!-- APACHE LDAP username --> </username>
-          <password> <!-- APACHE LDAP encrypted password --> </password>
-      </server>
-    </servers>
-</settings>
-```
+## Prepare Branch for Release
 
-**2. Create Release Branch**
+### 1. Create Release Branch
 
-Suppose ShardingSphere source codes downloaded from github is under `~/shardingsphere/` directory and the version to be released is `4.0.0-RC`. 
+Suppose ShardingSphere source codes downloaded from github is under `~/shardingsphere/` directory and the version to be released is `4.0.0-RC`.
 Create `${RELEASE.VERSION}-release` branch, where all the following operations are performed.
 
 ```shell
@@ -180,7 +158,7 @@ git checkout -b ${RELEASE.VERSION}-release
 git push origin ${RELEASE.VERSION}-release
 ```
 
-**3. Update Release Notes And Example Version**
+### 2. Update Release Notes And Example Version
 
 Update the following file in release branch, and submit a PR to release branch:
 
@@ -190,7 +168,15 @@ https://github.com/apache/shardingsphere/blob/${RELEASE.VERSION}-release/RELEASE
 
 Update the POM of the module `examples`, changing the version from ${CURRENT.VERSION} to ${RELEASE.VERSION}, and submit a PR to release branch.
 
-**4. Update links of Spring xsd in documents of ShardingSphere-JDBC**
+### 3. Update the download page
+
+Update the following pages:
+* <https://shardingsphere.apache.org/document/current/en/downloads/>
+* <https://shardingsphere.apache.org/document/current/cn/downloads/>
+
+GPG signatures and hashes (SHA* etc) should be prefixed with `https://downloads.apache.org/shardingsphere/`
+
+### 4. Update links of Spring xsd in documents of ShardingSphere-JDBC
 
 Update all links of xsd in documents under `docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace`.
 
@@ -204,9 +190,43 @@ to:
 http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-${RELEASE.VERSION}.xsd
 ```
 
+Sample commands:
+```shell
+cd docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace
+grep -l -r "${PREVIOUS.RELEASE.VERSION}" . | xargs sed -i -e "s/${PREVIOUS.RELEASE.VERSION}/${RELEASE.VERSION}/g"
+```
+
 Specifying version of xsd instead of using `sharding.xsd`, is to make legacy documents can be mapped to corresponding version of xsd.
 
-**5. Pre-Release Check**
+### 5. Update README files
+
+Update `${PREVIOUS.RELEASE.VERSION}` to `${RELEASE.VERSION}` in README.md and README_ZH.md
+
+## Apache Maven Central Repository Release
+
+### 1. Set settings.xml
+
+Add the following template to `~/.m2/settings.xml`, all the passwords need to be filled in after encryption. 
+For encryption settings, please see [here](http://maven.apache.org/guides/mini/guide-encryption.html).
+
+```xml
+<settings>
+    <servers>
+      <server>
+          <id>apache.snapshots.https</id>
+          <username> <!-- APACHE LDAP username --> </username>
+          <password> <!-- APACHE LDAP encrypted password --> </password>
+      </server>
+      <server>
+          <id>apache.releases.https</id>
+          <username> <!-- APACHE LDAP username --> </username>
+          <password> <!-- APACHE LDAP encrypted password --> </password>
+      </server>
+    </servers>
+</settings>
+```
+
+### 2. Pre-Release Check
 
 ```shell
 mvn release:prepare -Prelease -Darguments="-DskipTests -Dspotless.apply.skip=true" -DautoVersionSubmodules=true -DdryRun=true -Dusername=${Github username}
@@ -218,7 +238,7 @@ mvn release:prepare -Prelease -Darguments="-DskipTests -Dspotless.apply.skip=tru
 
 -DdryRun=true: rehearsal, which means not to generate or submit new version number and new tag.
 
-**6. Prepare for the Release**
+### 3. Prepare for the Release
 
 First, clean local pre-release check information.
 
@@ -236,13 +256,13 @@ It is basically the same as the previous rehearsal command, but deleting -DdryRu
 
 -DpushChanges=false: do not submit the edited version number and tag to Github automatically.
 
-After making sure there is no mistake in local files, submit them to GitHub.
+**Refer to [Check Release](#check-release), after making sure there is no mistake in local files**, submit them to GitHub.
 
 ```shell
 git push origin ${RELEASE.VERSION}-release
 git push origin --tags
 ```
-**7. Deploy the Release**
+### 4. Deploy the Release
 
 ```shell
 mvn release:perform -Prelease -Darguments="-DskipTests -Dspotless.apply.skip=true" -DautoVersionSubmodules=true -Dusername=${Github username}
@@ -255,7 +275,7 @@ If there is any problem in gpg signature, `Close` will fail, but you can see the
 
 ## Apache SVN Repository Release
 
-**1. Checkout ShardingSphere Release Directory**
+### 1. Checkout ShardingSphere Release Directory
 
 If there is no local work directory, create one at first.
 
@@ -271,7 +291,7 @@ svn --username=${APACHE LDAP username} co https://dist.apache.org/repos/dist/dev
 cd ~/ss_svn/dev/shardingsphere
 ```
 
-**2. Add gpg Public Key**
+### 2. Add gpg Public Key
 
 Only the account in its first deployment needs to add that. 
 It is alright for `KEYS` to only include the public key of the deployed account.
@@ -280,7 +300,7 @@ It is alright for `KEYS` to only include the public key of the deployed account.
 gpg -a --export ${GPG username} >> KEYS
 ```
 
-**3. Add the Release Content to SVN Directory**
+### 3. Add the Release Content to SVN Directory
 
 Create folder by version number.
 
@@ -298,7 +318,7 @@ cp -f ~/shardingsphere/shardingsphere-distribution/shardingsphere-proxy-distribu
 cp -f ~/shardingsphere/shardingsphere-agent/shardingsphere-agent-distribution/target/*.tar.gz* ~/ss_svn/dev/shardingsphere/${RELEASE.VERSION}
 ```
 
-**4. Commit to Apache SVN**
+### 4. Commit to Apache SVN
 
 ```shell
 svn add *
@@ -307,13 +327,13 @@ svn --username=${APACHE LDAP username} commit -m "release ${RELEASE.VERSION}"
 
 ## Check Release
 
-**Check sha512 hash**
+### 1. Check sha512 hash
 
 ```shell
 shasum -c *.sha512
 ```
 
-**Check gpg Signature**
+### 2. Check gpg Signature
 
 First, import releaser's public key. Import KEYS from SVN repository to local. (The releaser does not need to import again; the checking assistant needs to import it, with the user name filled as the releaser's. )
 
@@ -354,9 +374,9 @@ gpg --verify apache-shardingsphere-${RELEASE.VERSION}-shardingsphere-agent-bin.t
 gpg --verify apache-shardingsphere-proxy-chart-${CHART.RELEASE.VERSION}.tgz.asc apache-shardingsphere-proxy-chart-${CHART.RELEASE.VERSION}.tgz
 ```
 
-**Check Released Files**
+### 3. Check Released Files
 
-**Compare release source with github tag**
+**3.1 Compare release source with github tag**
 
 ```
 curl -Lo tag-${RELEASE.VERSION}.zip https://github.com/apache/shardingsphere/archive/${RELEASE.VERSION}.zip
@@ -365,7 +385,7 @@ unzip apache-shardingsphere-${RELEASE.VERSION}-src.zip
 diff -r apache-shardingsphere-${RELEASE.VERSION}-src-release shardingsphere-${RELEASE.VERSION}
 ```
 
-**Check source package**
+**3.2 Check source package**
 
 *   Check whether source tarball is oversized for including nonessential files
 *   `LICENSE` and `NOTICE` files exist
@@ -375,7 +395,7 @@ diff -r apache-shardingsphere-${RELEASE.VERSION}-src-release shardingsphere-${RE
 *   Codes can be compiled and pass the unit tests (./mvnw -T 1C install)
 *   Check if there is any extra files or folders, empty folders for example
 
-**Check binary packages**
+**3.3 Check binary packages**
 
 Decompress 
 - `apache-shardingsphere-${RELEASE.VERSION}-shardingsphere-jdbc-bin.tar.gz`
@@ -498,7 +518,7 @@ I will process to publish the release and send ANNOUNCE.
 
 ## Finish the Release
 
-**1. Move source packages, binary packages and KEYS from the `dev` directory to `release` directory**
+### 1. Move source packages, binary packages and KEYS from the `dev` directory to `release` directory
 
 ```shell
 svn mv https://dist.apache.org/repos/dist/dev/shardingsphere/${RELEASE.VERSION} https://dist.apache.org/repos/dist/release/shardingsphere/ -m "transfer packages for ${RELEASE.VERSION}"
@@ -506,26 +526,11 @@ svn delete https://dist.apache.org/repos/dist/release/shardingsphere/KEYS -m "de
 svn cp https://dist.apache.org/repos/dist/dev/shardingsphere/KEYS https://dist.apache.org/repos/dist/release/shardingsphere/ -m "transfer KEYS for ${RELEASE.VERSION}"
 ```
 
-**2. Find ShardingSphere in staging repository and click `Release`**
+### 2. Find ShardingSphere in staging repository and click `Release`
 
-**3. (Optional) Merge release branch to `master` and delete release branch on Github**
+### 3. Docker Release
 
-```shell
-git checkout master
-git merge origin/${RELEASE.VERSION}-release
-git pull
-git push origin master
-git push --delete origin ${RELEASE.VERSION}-release
-git branch -d ${RELEASE.VERSION}-release
-```
-
-**4. Update README files**
-
-Update `${PREVIOUS.RELEASE.VERSION}` to `${RELEASE.VERSION}` in README.md and README_ZH.md
-
-**5. Docker Release**
-
-5.1 Preparation
+3.1 Preparation
 
 Install and start docker service
 
@@ -536,40 +541,33 @@ docker run --privileged --rm tonistiigi/binfmt --install all
 
 Refer to: [Docker Buildx: Build multi-platform images](https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images)
 
-5.2 Login Docker Registry
+3.2 Login Docker Registry
 
 ```shell
 docker login
 ```
 
-5.3 Build and push ShardingSphere-Proxy Docker image
+3.3 Build and push ShardingSphere-Proxy Docker image
 
 ```shell
 git checkout ${RELEASE.VERSION}
 ./mvnw -pl shardingsphere-distribution/shardingsphere-proxy-distribution -B -Prelease,docker.buildx.push clean package
 ```
 
-5.4 Confirm the successful release
+3.4 Confirm the successful release
 
 Go to [Docker Hub](https://hub.docker.com/r/apache/shardingsphere-proxy/) and check whether there is a published image. And make sure that the image supports both `linux/amd64` and `linux/arm64`.
 
-**6. Publish release in GitHub**
+### 4. Publish release in GitHub
 
 Click `Edit` in [GitHub Releases](https://github.com/apache/shardingsphere/releases)'s `${RELEASE.VERSION}` version
 
 Edit version number and release notes, click `Publish release`
 
-**7. Update the download page**
-
-https://shardingsphere.apache.org/document/current/en/downloads/
-
-https://shardingsphere.apache.org/document/current/cn/downloads/
-
-GPG signatures and hashes (SHA* etc) should use URL start with `https://downloads.apache.org/shardingsphere/`
+### 5. Remove previous release from Release Area
 
 Keep the latest version in [**Release Area**](https://dist.apache.org/repos/dist/release/shardingsphere/) only.
 
-
 Incubating stage versions will be archived automatically in [Archive repository](https://archive.apache.org/dist/incubator/shardingsphere/)
 
 Remove the previous release from the [**Release Area**](https://dist.apache.org/repos/dist/release/shardingsphere/) after confirming the previous release exists in [Archive repository](https://archive.apache.org/dist/shardingsphere/), 
@@ -584,7 +582,7 @@ Incubating stage versions will be archived automatically in [Incubator Archive r
 
 Refer to [Release Download Pages for Projects](https://infra.apache.org/release-download-pages.html).
 
-**8. Upload xsd files of Spring namespace to official website**
+### 6. Upload xsd files of Spring namespace to official website
 
 Submit a pull request to upload the xsd files of Spring namespace to https://github.com/apache/shardingsphere-doc/tree/asf-site/schema/shardingsphere
 
@@ -607,13 +605,18 @@ The list of files to be uploaded is as follows:
 - database-discovery.xsd
 - database-discovery-${RELEASE.VERSION}.xsd
 
-**9. Add entrance of documents of the new release into home page**
+### 7. Add entrance of documents of the new release into home page
 
 Refer to:
 - [English home page](https://github.com/apache/shardingsphere-doc/blob/10fb1b5f610fe2cac00c66abe2df7a8cc30c2a18/index.html#L88-L126)
 - [Chinese home page](https://github.com/apache/shardingsphere-doc/blob/10fb1b5f610fe2cac00c66abe2df7a8cc30c2a18/index_zh.html#L88-L125)
 
-**10. Announce release completed by email**
+### 8. Merge release branch to `master` and delete release branch on GitHub
+
+After confirmed that download links of new release in download pages are available, create a Pull Request on GitHub to merge `${RELEASE.VERSION}-release` into `master.
+If code conflicted, you may merge `master` into `${RELEASE.VERSION}-release` before merging Pull Request.
+
+### 9. Announce release completed by email
 
 Send e-mail to `dev@shardingsphere.apache.org` and `announce@apache.org` to announce the release is finished
 
@@ -653,3 +656,36 @@ ShardingSphere Resources:
 - Apache ShardingSphere Team
 
 ```
+
+## Appendix: How to abort release procedure
+
+You may refer to the following steps to abort current release procedure if you found any problem which blocks the release procedure.
+
+### Vote down the release and describe the reason
+
+Reply -1 to voting e-mail and describe the reason.
+
+### Remove release candidates from dev area
+
+```shell
+svn del https://dist.apache.org/repos/dist/dev/shardingsphere/${RELEASE.VERSION} -m "Drop ${RELEASE.VERSION} release candidates"
+```
+
+### Drop Maven Staging Repository
+
+Check the Staging Repository in <https://repository.apache.org/#stagingRepositories> and **Drop** it。
+
+### Reset release branch and delete tag
+
+Reset branch `${RELEASE.VERSION}-release` to the commit before the commits made by `maven-release-plugin`:
+```shell
+git checkout ${RELEASE.VERSION}-release
+git reset --hard ${COMMIT_ID_BEFORE_RELEASE}
+git push origin --force
+```
+
+Delete tag：
+```shell
+git tag -d ${RELEASE.VERSION}
+git push origin -d ${RELEASE.VERSION}
+```
