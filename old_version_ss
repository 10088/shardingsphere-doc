commit aecd4c92e5e28d566116f4783a3739c63d9a01c5
Author: Hongsheng Zhong <sandynz@126.com>
Date:   Fri Oct 29 18:52:49 2021 +0800

    Update scaling doc for 5.0.0 (#13355)

diff --git a/docs/document/content/dev-manual/scaling.cn.md b/docs/document/content/dev-manual/scaling.cn.md
index 83d91ffc11..4f01ba3a8c 100644
--- a/docs/document/content/dev-manual/scaling.cn.md
+++ b/docs/document/content/dev-manual/scaling.cn.md
@@ -15,3 +15,23 @@ chapter = true
 | ---------------------- | ---------------------------- |
 | MySQLScalingEntry      | 基于 MySQL 的弹性伸缩入口      |
 | PostgreSQLScalingEntry | 基于 PostgreSQL 的弹性伸缩入口 |
+
+## ScalingClusterAutoSwitchAlgorithm
+
+| *SPI 名称*                                   | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| ScalingClusterAutoSwitchAlgorithm           | 迁移任务完成度自动检测算法                      |
+
+| *已知实现类*                                  | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| ScalingIdleClusterAutoSwitchAlgorithm       | 基于增量迁移任务空闲时长的检测算法                |
+
+## ScalingDataConsistencyCheckAlgorithm
+
+| *SPI 名称*                                   | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| ScalingDataConsistencyCheckAlgorithm        | 数据一致性校验算法                             |
+
+| *已知实现类*                                  | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| ScalingDefaultDataConsistencyCheckAlgorithm | 默认数据一致性校验算法。对全量数据做CRC32计算。    |
diff --git a/docs/document/content/dev-manual/scaling.en.md b/docs/document/content/dev-manual/scaling.en.md
index 4f45fbe34d..2a79012cf7 100644
--- a/docs/document/content/dev-manual/scaling.en.md
+++ b/docs/document/content/dev-manual/scaling.en.md
@@ -15,3 +15,23 @@ chapter = true
 | ---------------------- | --------------------------- |
 | MySQLScalingEntry      | MySQL entry of scaling      |
 | PostgreSQLScalingEntry | PostgreSQL entry of scaling |
+
+## ScalingClusterAutoSwitchAlgorithm
+
+| *SPI Name*                                  | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| ScalingClusterAutoSwitchAlgorithm           | Scaling job completion check algorithm      |
+
+| *Implementation Class*                      | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| ScalingIdleClusterAutoSwitchAlgorithm       | Incremental task idle time based algorithm  |
+
+## ScalingDataConsistencyCheckAlgorithm
+
+| *SPI Name*                                  | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| ScalingDataConsistencyCheckAlgorithm        | Data consistency check algorithm on source and target database cluster |
+
+| *Implementation Class*                      | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| ScalingDefaultDataConsistencyCheckAlgorithm | Default implementation with CRC32 of all records. |
diff --git a/docs/document/content/features/scaling/use-norms.cn.md b/docs/document/content/features/scaling/use-norms.cn.md
index 630669df15..6eea3a286b 100644
--- a/docs/document/content/features/scaling/use-norms.cn.md
+++ b/docs/document/content/features/scaling/use-norms.cn.md
@@ -11,3 +11,4 @@ weight = 2
 ## 不支持项
 
 * 不支持无主键表的扩容和缩容，主键必须是单字段。
+* 不支持在当前proxy使用中的数据库集群做迁移，需要准备一个新的数据库集群作为迁移目标库。
diff --git a/docs/document/content/features/scaling/use-norms.en.md b/docs/document/content/features/scaling/use-norms.en.md
index 96049d48d5..2663f9bff9 100644
--- a/docs/document/content/features/scaling/use-norms.en.md
+++ b/docs/document/content/features/scaling/use-norms.en.md
@@ -11,3 +11,4 @@ weight = 2
 ## Unsupported Items
 
 * Do not support to scale tables without primary key which must be single column.
+* Do not support scale on database cluster which is in use on proxy, need to prepare a new database cluster for scaling target.
diff --git a/docs/document/content/quick-start/shardingsphere-scaling-quick-start.cn.md b/docs/document/content/quick-start/shardingsphere-scaling-quick-start.cn.md
index 9aa563221e..44a4939c0e 100644
--- a/docs/document/content/quick-start/shardingsphere-scaling-quick-start.cn.md
+++ b/docs/document/content/quick-start/shardingsphere-scaling-quick-start.cn.md
@@ -6,24 +6,30 @@ weight = 3
 
 ## 1. 规则配置
 
-编辑`%SHARDINGSPHERE_SCALING_HOME%/conf/server.yaml`。详情请参见[使用手册](/cn/user-manual/shardingsphere-scaling/usage/)。
+编辑`%SHARDINGSPHERE_PROXY_HOME%/conf/server.yaml`。详情请参见[使用手册](/cn/user-manual/shardingsphere-scaling/usage/)。
 
-> %SHARDINGSPHERE_PROXY_HOME% 为 Scaling 解压后的路径，例：/Users/ss/shardingsphere-scaling-bin/
+> %SHARDINGSPHERE_PROXY_HOME% 为 Proxy 解压后的路径，例：/Users/ss/shardingsphere-proxy-bin/
 
 ## 2. 引入依赖
 
 如果后端连接 PostgreSQL 数据库，不需要引入额外依赖。
 
-如果后端连接 MySQL 数据库，请下载 [mysql-connector-java-5.1.47.jar](https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar)，并将其放入 `%SHARDINGSPHERE_SCALING_HOME%/lib` 目录。
+如果后端连接 MySQL 数据库，请下载 [mysql-connector-java-5.1.47.jar](https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar)，并将其放入 `%SHARDINGSPHERE_PROXY_HOME%/lib` 目录。
 
 ## 3. 启动服务
 
 ```bash
-sh %SHARDINGSPHERE_SCALING_HOME%/bin/start.sh
+sh %SHARDINGSPHERE_PROXY_HOME%/bin/start.sh
 ```
 
 ## 4. 任务管理
 
-通过相应的 HTTP 接口管理迁移任务。
+通过相应的 DistSQL 接口管理迁移任务。
 
-详情参见[使用手册](/cn/user-manual/shardingsphere-scaling/usage/)。
+详情请参见[使用手册](/cn/user-manual/shardingsphere-scaling/usage/)。
+
+## 5. 相关文档
+- [功能#弹性伸缩](/cn/features/scaling/)：核心概念、使用规范
+- [用户手册#弹性伸缩](/cn/user-manual/shardingsphere-scaling/)：运行部署、使用手册
+- [RAL#弹性伸缩](/cn/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral/#%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9)：弹性伸缩的DistSQL
+- [开发者手册#弹性伸缩](/cn/dev-manual/scaling/)：SPI接口及实现类
diff --git a/docs/document/content/quick-start/shardingsphere-scaling-quick-start.en.md b/docs/document/content/quick-start/shardingsphere-scaling-quick-start.en.md
index d5dd03853b..aaea1dbe89 100644
--- a/docs/document/content/quick-start/shardingsphere-scaling-quick-start.en.md
+++ b/docs/document/content/quick-start/shardingsphere-scaling-quick-start.en.md
@@ -6,24 +6,30 @@ weight = 3
 
 ## 1. Rule Configuration
 
-Edit `%SHARDINGSPHERE_SCALING_HOME%/conf/server.yaml`. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-scaling/usage/) for more details.
+Edit `%SHARDINGSPHERE_PROXY_HOME%/conf/server.yaml`. Please refer to [Configuration Manual](/en/user-manual/shardingsphere-scaling/usage/) for more details.
 
-> %SHARDINGSPHERE_PROXY_HOME% is the shardingsphere scaling extract path. for example: /Users/ss/shardingsphere-scaling-bin/
+> %SHARDINGSPHERE_PROXY_HOME% is the shardingsphere proxy extract path. for example: /Users/ss/shardingsphere-proxy-bin/
 
 ## 2. Import Dependencies
 
 If the backend database is PostgreSQL, there's no need for additional dependencies.
 
-If the backend database is MySQL, please download [mysql-connector-java-5.1.47.jar](https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar) and put it into `%SHARDINGSPHERE_SCALING_HOME%/lib` directory.
+If the backend database is MySQL, please download [mysql-connector-java-5.1.47.jar](https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar) and put it into `%SHARDINGSPHERE_PROXY_HOME%/lib` directory.
 
 ## 3. Start Server
 
 ```bash
-sh %SHARDINGSPHERE_SCALING_HOME%/bin/start.sh
+sh %SHARDINGSPHERE_PROXY_HOME%/bin/start.sh
 ```
 
 ## 4. Create Migration Job
 
-Use HTTP interface to manage the migration jobs.
+Use DistSQL interface to manage the migration jobs.
 
 Please refer to [Configuration Manual](/en/user-manual/shardingsphere-scaling/usage/) for more details. 
+
+## 5. Related documents
+- [Features#Scaling](/en/features/scaling/) : Core Concept, User Norms
+- [User Manual#Scaling](/en/user-manual/shardingsphere-scaling/) : Build, Manual
+- [RAL#Scaling](/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral/#scaling) : DistSQL for Scaling
+- [Dev Manual#Scaling](/en/dev-manual/scaling/) : SPI interfaces and implementations
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral.cn.md
index 4960669e98..9111d3b3e2 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral.cn.md
@@ -31,8 +31,9 @@ RAL (Resource & Rule Administration Language) 为 Apache ShardingSphere 的管
 |stop scaling xx                                     | 停止运行任务，xx：任务id                                         | stop scaling 12345                              |  
 |drop scaling xx                                     | 移除任务，xx：任务id                                            | drop scaling 1234                              |  
 |reset scaling xx                                    | 重置任务进度，xx：任务id                                         | reset scaling 1234                             |  
-|check scaling xx                                    | 数据一致性校验，xx：任务id                                        | check scaling 1234                             |  
+|check scaling xx                                    | 数据一致性校验，使用`server.yaml`里的校验算法，xx：任务id            | check scaling 1234                             |  
 |show scaling check algorithms                       | 展示可用的一致性校验算法                                          | show scaling check algorithms                  |  
+|check scaling {jobId} by type(name={algorithmType}) | 数据一致性校验，使用指定的校验算法                                  | check scaling 1234 by type(name=DEFAULT)       |  
 |stop scaling source writing xx                      | 旧的 ShardingSphere 数据源停写，xx：任务id                        | stop scaling source writing 1234               |  
 |checkout scaling xx                                 | 切换至新的 ShardingSphere 数据源，xx：任务id                      | checkout scaling 1234                         |  
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral.en.md
index 81fe1817a0..3a83f100df 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral.en.md
@@ -30,8 +30,9 @@ RAL (Resource & Rule Administration Language) responsible for the added-on featu
 |stop scaling xx                                     | Stop scaling, xx：jobId                                             | stop scaling 1234                              |  
 |drop scaling xx                                     | Drop scaling, xx：jobId                                             | drop scaling 1234                              |  
 |reset scaling xx                                    | reset progress, xx：jobId                                           | reset scaling 1234                             |  
-|check scaling xx                                    | Data consistency check, xx：jobId                                   | check scaling 1234                             |  
+|check scaling xx                                    | Data consistency check with algorithm in `server.yaml`, xx: jobId   | check scaling 1234                             |  
 |show scaling check algorithms                       | Show available consistency check algorithms                         | show scaling check algorithms                  |  
+|check scaling {jobId} by type(name={algorithmType}) | Data consistency check with defined algorithm                       | check scaling 1234 by type(name=DEFAULT)       |  
 |stop scaling source writing xx                      | The source ShardingSphere data source is discontinued, xx：jobId     | stop scaling source writing 1234               |  
 |checkout scaling xx                                 | Switch to target ShardingSphere data source, xx：jobId               | checkout scaling 1234                          |  
 
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/build.cn.md b/docs/document/content/user-manual/shardingsphere-scaling/build.cn.md
index da95607f98..b76807ab0d 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/build.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/build.cn.md
@@ -5,7 +5,7 @@ weight = 1
 
 ## 部署启动
 
-1. 执行以下命令，编译生成 ShardingSphere-Scaling 和 ShardingSphere-Proxy 二进制包：
+1. 执行以下命令，编译生成 ShardingSphere-Proxy 二进制包：
 
 ```
 git clone --depth 1 https://github.com/apache/shardingsphere.git
@@ -14,49 +14,11 @@ mvn clean install -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Drat.skip=tr
 ```
 
 发布包：
-- /shardingsphere-distribution/shardingsphere-scaling-distribution/target/apache-shardingsphere-${latest.release.version}-shardingsphere-scaling-bin.tar.gz
 - /shardingsphere-distribution/shardingsphere-proxy-distribution/target/apache-shardingsphere-${latest.release.version}-shardingsphere-proxy-bin.tar.gz
 
 或者通过[下载页面]( https://shardingsphere.apache.org/document/current/cn/downloads/ )获取安装包。
 
-2. 解压缩 scaling 发布包，修改配置文件 `conf/server.yaml`，这里主要修改启动端口，保证不与本机其他端口冲突，同时修改断点续传服务（可选）地址即可：
-
-```yaml
-scaling:
-  port: 8888
-  blockQueueSize: 10000
-  workerThread: 30
-
-mode:
-  type: Cluster
-  repository:
-    type: ZooKeeper
-    props:
-      namespace: governance_ds
-      server-lists: localhost:2181
-```
-
-3. 启动 ShardingSphere-Scaling：
-
-```
-sh bin/server_start.sh
-```
-
-4. 查看 scaling 日志 `logs/stdout.log`，确保启动成功。
-
-5. 使用 curl 命令再次确认 scaling 正常运行。
-
-```
-curl -X GET http://localhost:8888/scaling/job/list
-```
-
-响应应为：
-
-```
-{"success":true,"errorCode":0,"errorMsg":null,"model":[]}
-```
-
-6. 解压缩 proxy 发布包，修改配置文件 `conf/server.yaml`，这里主要是开启 `scaling` 和 `mode` 配置：
+2. 解压缩 proxy 发布包，修改配置文件 `conf/server.yaml`，这里主要是开启 `scaling` 和 `mode` 配置：
 ```yaml
 scaling:
   blockQueueSize: 10000
@@ -82,22 +44,26 @@ mode:
   overwrite: false
 ```
 
-7. 启动 ShardingSphere-Proxy：
+打开`clusterAutoSwitchAlgorithm`配置代表开启自动检测任务是否完成及切换配置，目前系统提供了`IDLE`类型实现。
 
-```
-sh bin/start.sh
-```
+打开`dataConsistencyCheckAlgorithm`配置设置数据校验算法，目前系统提供了`DEFAULT`类型实现。`DEFAULT`算法目前支持的数据库：`MySQL`。其他数据库还不能打开这个配置项。其他数据库的支持还在开发中。
 
-8. 查看 proxy 日志 `logs/stdout.log`，确保启动成功。
+可以通过`ScalingClusterAutoSwitchAlgorithm`接口自定义一个SPI实现。
 
-## 结束
+可以通过`ScalingDataConsistencyCheckAlgorithm`接口自定义一个SPI实现。
 
-### ShardingSphere-Scaling
+详情请参见[开发者手册#弹性伸缩](/cn/dev-manual/scaling/)。
+
+3. 启动 ShardingSphere-Proxy：
 
 ```
- sh bin/server_stop.sh
+sh bin/start.sh
 ```
 
+4. 查看 proxy 日志 `logs/stdout.log`，确保启动成功。
+
+## 结束
+
 ### ShardingSphere-Proxy
 
 ```
@@ -112,7 +78,5 @@ sh bin/start.sh
 
 | 名称           | 说明                                    | 默认值 |
 | -------------- | -------------------------------------- | ------ |
-| port           | HTTP服务监听端口                         | 8888   |
 | blockQueueSize | 数据传输通道队列大小                      | 10000  |
-| workerThread   | 工作线程池大小，允许同时运行的迁移任务线程数 | 30     |
- 
+| workerThread   | 工作线程池大小，允许同时运行的迁移任务线程数 | 40     |
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/build.en.md b/docs/document/content/user-manual/shardingsphere-scaling/build.en.md
index 72c72da55d..5fab5a5b89 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/build.en.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/build.en.md
@@ -5,7 +5,7 @@ weight = 1
 
 ## Build&Deployment
 
-1. Execute the following command to compile and generate the ShardingSphere-Scaling and ShardingSphere-Proxy binary package:
+1. Execute the following command to compile and generate the ShardingSphere-Proxy binary package:
 
 ```
 git clone --depth 1 https://github.com/apache/shardingsphere.git
@@ -14,49 +14,11 @@ mvn clean install -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Drat.skip=tr
 ```
 
 The binary packages:
-- /shardingsphere-distribution/shardingsphere-scaling-distribution/target/apache-shardingsphere-${latest.release.version}-shardingsphere-scaling-bin.tar.gz
 - /shardingsphere-distribution/shardingsphere-proxy-distribution/target/apache-shardingsphere-${latest.release.version}-shardingsphere-proxy-bin.tar.gz
 
 Or get binary package from [download page]( https://shardingsphere.apache.org/document/current/en/downloads/ ).
 
-2. Unzip the scaling distribution package, modify the configuration file `conf/server.yaml`, we should ensure the port does not conflict with others, and modify the resume from break-point(optional) server lists:
-
-```yaml
-scaling:
-  port: 8888
-  blockQueueSize: 10000
-  workerThread: 30
-
-mode:
-  type: Cluster
-  repository:
-    type: ZooKeeper
-    props:
-      namespace: governance_ds
-      server-lists: localhost:2181
-```
-
-3. Start up ShardingSphere-Scaling:
-
-```
-sh bin/server_start.sh
-```
-
-4. See the scaling log file `logs/stdout.log`，ensure startup successfully.
-
-5. Ensure scaling startup successfully by `curl`.
-
-```
-curl -X GET http://localhost:8888/scaling/job/list
-```
-
-response:
-
-```
-{"success":true,"errorCode":0,"errorMsg":null,"model":[]}
-```
-
-6. Unzip the proxy distribution package, modify the configuration file `conf/server.yaml`, enable `scaling` and `mode`:
+2. Unzip the proxy distribution package, modify the configuration file `conf/server.yaml`, enable `scaling` and `mode`:
 ```yaml
 scaling:
   blockQueueSize: 10000
@@ -82,22 +44,26 @@ mode:
   overwrite: false
 ```
 
-7. Start up ShardingSphere-Proxy:
+Enable `clusterAutoSwitchAlgorithm` indicate system will detect when scaling job is finished and switch cluster configuration automatically. Currently, system supply `IDLE` type implementation.
 
-```
-sh bin/start.sh
-```
+Enable `dataConsistencyCheckAlgorithm` indicate system will use this defined algorithm to do data consistency check when it's emitted. Currently, system supply `DEFAULT` type implementation. `DEFAULT` type algorithm support following database types: `MySQL`, you could not enable it if you're running other database types for now. Support of other database types is under development.
 
-8. See the proxy log file `logs/stdout.log`，ensure startup successfully.
+You could customize an auto switch algorithm by implementing `ScalingClusterAutoSwitchAlgorithm` SPI interface.
 
-## Shutdown
+You could customize a check algorithm by implementing `ScalingDataConsistencyCheckAlgorithm` SPI interface.
 
-### ShardingSphere-Scaling
+Please refer to [Dev Manual#Scaling](/en/dev-manual/scaling/).
+
+3. Start up ShardingSphere-Proxy:
 
 ```
-sh bin/server_stop.sh
+sh bin/start.sh
 ```
 
+4. See the proxy log file `logs/stdout.log`，ensure startup successfully.
+
+## Shutdown
+
 ### ShardingSphere-Proxy
 
 ```
@@ -112,6 +78,5 @@ The existing configuration items are as follows, we can modify them in `conf/ser
 
 | Name           | Description                                                                               | Default value |
 | -------------- | ----------------------------------------------------------------------------------------- | ------------- |
-| port           | Listening port of HTTP server                                                             | 8888          |
 | blockQueueSize | Queue size of data transmission channel                                                   | 10000         |
-| workerThread   | Worker thread pool size, the number of migration task threads allowed to run concurrently | 30            |
+| workerThread   | Worker thread pool size, the number of migration task threads allowed to run concurrently | 40            |
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md b/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
index e906d01753..6698de78fb 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
@@ -18,11 +18,11 @@ weight = 2
 
 **注意**：
 
-如果后端连接 MySQL 数据库，请下载 [mysql-connector-java-5.1.47.jar](https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar)，并将其放入 `${shardingsphere-scaling}\lib` 目录。
+如果后端连接 MySQL 数据库，请下载 [mysql-connector-java-5.1.47.jar](https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar)，并将其放入 `${shardingsphere-proxy}\lib` 目录。
 
 ### 权限要求
 
-MySQL 需要开启 `binlog`，`binlog format` 为Row模式，且迁移时所使用用户需要赋予 Replication 相关权限。
+MySQL 需要开启 `binlog`，且迁移时所使用用户需要赋予 Replication 相关权限。
 
 ```
 +-----------------------------------------+---------------------------------------+
@@ -43,259 +43,138 @@ MySQL 需要开启 `binlog`，`binlog format` 为Row模式，且迁移时所使
 
 PostgreSQL 需要开启 [test_decoding](https://www.postgresql.org/docs/9.4/test-decoding.html)
 
-### API接口
+### DistSQL 接口
 
-弹性迁移组件提供了简单的 HTTP API 接口
+弹性迁移组件提供了 DistSQL 接口
 
-#### 创建迁移任务
-
-接口描述：POST /scaling/job/start
-
-请求体：
-
-| 参数                                               | 描述                                                         |
-| ------------------------------------------------- | ------------------------------------------------------------ |
-| ruleConfig.source                                 | 源端数据源相关配置                                             |
-| ruleConfig.target                                 | 目标端数据源相关配置                                           |
-| handleConfig.concurrency                          | 迁移并发度，举例：如果设置为3，则待迁移的表将会有三个线程同时对该表进行迁移，前提是该表有整数型主键 |
+#### 预览当前分片规则
 
-数据源配置：
+示例：
+```sql
+preview select count(1) from t_order;
+```
 
-| 参数                                               | 描述                                                         |
-| ------------------------------------------------- | ------------------------------------------------------------ |
-| type                                              | 数据源类型（可选参数：shardingSphereJdbc、jdbc）                |
-| parameter                                         | 数据源参数                                                    |
+返回信息：
+```
+mysql> preview select count(1) from t_order;
++------------------+--------------------------------+
+| data_source_name | sql                            |
++------------------+--------------------------------+
+| ds_0             | select count(1) from t_order_0 |
+| ds_0             | select count(1) from t_order_1 |
+| ds_1             | select count(1) from t_order_0 |
+| ds_1             | select count(1) from t_order_1 |
++------------------+--------------------------------+
+4 rows in set (0.00 sec)
+```
 
-*** 注意 ***
+#### 创建迁移任务
 
-当前 source type 和 target type 必须是 shardingSphereJdbc
+1. 添加新的数据源
+详情请参见[RDL#数据源资源](/cn/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-resource/)。
 
 示例：
-
-```
-curl -X POST \
-  http://localhost:8888/scaling/job/start \
-  -H 'content-type: application/json' \
-  -d '{
-        "ruleConfig": {
-          "source": {
-            "schemaName": "sharding_db",
-            "type": "shardingSphereJdbc",
-            "parameter": "
-                dataSources:
-                  ds_0:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_0?useSSL=false
-                    username: root
-                    password: root
-                  ds_1:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_1?useSSL=false
-                    username: root
-                    password: root
-                rules:
-                - !SHARDING
-                  tables:
-                    t_order:
-                      actualDataNodes: ds_$->{0..1}.t_order_$->{0..1}
-                      databaseStrategy:
-                        standard:
-                          shardingColumn: user_id
-                          shardingAlgorithmName: t_order_db_algorith
-                      logicTable: t_order
-                      tableStrategy:
-                        standard:
-                          shardingColumn: order_id
-                          shardingAlgorithmName: t_order_tbl_algorith
-                  shardingAlgorithms:
-                    t_order_db_algorith:
-                      type: INLINE
-                      props:
-                        algorithm-expression: ds_$->{user_id % 2}
-                    t_order_tbl_algorith:
-                      type: INLINE
-                      props:
-                        algorithm-expression: t_order_$->{order_id % 2}
-                "
-          },
-          "target": {
-            "schemaName": "sharding_db",
-            "type": "shardingSphereJdbc",
-            "parameter": "
-                dataSources:
-                  ds_0:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_2?useSSL=false
-                    username: root
-                    password: root
-                  ds_1:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_3?useSSL=false
-                    username: root
-                    password: root
-                  ds_2:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_4?useSSL=false
-                    username: root
-                    password: root
-                  ds_3:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_5?useSSL=false
-                    username: root
-                    password: root
-                rules:
-                - !SHARDING
-                  tables:
-                    t_order:
-                      actualDataNodes: ds_$->{0..3}.t_order_$->{0..3}
-                      databaseStrategy:
-                        standard:
-                          shardingColumn: user_id
-                          shardingAlgorithmName: t_order_db_algorith
-                      logicTable: t_order
-                      tableStrategy:
-                        standard:
-                          shardingColumn: order_id
-                          shardingAlgorithmName: t_order_tbl_algorith
-                  shardingAlgorithms:
-                    t_order_db_algorith:
-                      type: INLINE
-                      props:
-                        algorithm-expression: ds_$->{user_id % 4}
-                    t_order_tbl_algorith:
-                      type: INLINE
-                      props:
-                        algorithm-expression: t_order_$->{order_id % 4}
-                "
-          }
-        },
-        "handleConfig":{
-          "concurrency":"3"
-        }
-      }'
+```sql
+ADD RESOURCE ds_2 (
+    URL="jdbc:mysql://127.0.0.1:3306/db2?serverTimezone=UTC&useSSL=false",
+    USER=root,
+    PASSWORD=root,
+    PROPERTIES("maximumPoolSize"=10,"idleTimeout"="30000")
+);
+-- ds_3, ds_4
 ```
 
-返回信息：
+2. 修改分片规则
+详情请参见[RDL#数据分片](/cn/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule/)。
 
-```
-{
-   "success": true,
-   "errorCode": 0,
-   "errorMsg": null,
-   "model": null
-}
+示例：
+```sql
+ALTER SHARDING TABLE RULE t_order (
+RESOURCES(ds_2, ds_3, ds_4),
+SHARDING_COLUMN=order_id,
+TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=10)),
+GENERATED_KEY(COLUMN=another_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
+);
 ```
 
-#### 查询迁移任务进度
+比如说`RESOURCES`和`sharding-count`修改了会触发迁移。
 
-接口描述：GET /scaling/job/progress/{jobId}
+#### 查询所有迁移任务
+详情请参见[RAL#弹性伸缩](/cn/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral/#%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9)。
 
 示例：
-```
-curl -X GET \
-  http://localhost:8888/scaling/job/progress/1
+```sql
+show scaling list;
 ```
 
 返回信息：
 ```
-{
-   "success": true,
-   "errorCode": 0,
-   "errorMsg": null,
-   "model": {
-        "id": 1,
-        "jobName": "Local Sharding Scaling Job",
-        "status": "RUNNING/STOPPED"
-        "syncTaskProgress": [{
-            "id": "127.0.0.1-3306-test",
-            "status": "PREPARING/MIGRATE_HISTORY_DATA/SYNCHRONIZE_REALTIME_DATA/STOPPING/STOPPED",
-            "historySyncTaskProgress": [{
-                "id": "history-test-t1#0",
-                "estimatedRows": 41147,
-                "syncedRows": 41147
-            }, {
-                "id": "history-test-t1#1",
-                "estimatedRows": 42917,
-                "syncedRows": 42917
-            }, {
-                "id": "history-test-t1#2",
-                "estimatedRows": 43543,
-                "syncedRows": 43543
-            }, {
-                "id": "history-test-t2#0",
-                "estimatedRows": 39679,
-                "syncedRows": 39679
-            }, {
-                "id": "history-test-t2#1",
-                "estimatedRows": 41483,
-                "syncedRows": 41483
-            }, {
-                "id": "history-test-t2#2",
-                "estimatedRows": 42107,
-                "syncedRows": 42107
-            }],
-            "realTimeSyncTaskProgress": {
-                "id": "realtime-test",
-                "delayMillisecond": 1576563771372,
-                "position": {
-                    "filename": "ON.000007",
-                    "position": 177532875,
-                    "serverId": 0
-                }
-            }
-        }]
-   }
-}
+mysql> show scaling list;
++--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
+| id                 | tables                | sharding_total_count | active | create_time         | stop_time           |
++--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
+| 659853312085983232 | t_order_item, t_order | 2                    | 0      | 2021-10-26 20:21:31 | 2021-10-26 20:24:01 |
+| 660152090995195904 | t_order_item, t_order | 2                    | 0      | 2021-10-27 16:08:43 | 2021-10-27 16:11:00 |
++--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
+2 rows in set (0.04 sec)
 ```
 
-#### 查询所有迁移任务
-
-接口描述：GET /scaling/job/list
+#### 查询迁移任务进度
 
 示例：
-
-```
-curl -X GET \
-  http://localhost:8888/scaling/job/list
+```sql
+show scaling status {jobId};
 ```
 
 返回信息：
-
 ```
-{
-  "success": true,
-  "errorCode": 0,
-  "model": [
-    {
-      "jobId": 1,
-      "jobName": "Local Sharding Scaling Job",
-      "status": "RUNNING"
-    }
-  ]
-}
+mysql> show scaling status 660152090995195904;
++------+-------------+----------+-------------------------------+--------------------------+
+| item | data_source | status   | inventory_finished_percentage | incremental_idle_minutes |
++------+-------------+----------+-------------------------------+--------------------------+
+| 0    | ds_1        | FINISHED | 100                           | 2834                     |
+| 1    | ds_0        | FINISHED | 100                           | 2834                     |
++------+-------------+----------+-------------------------------+--------------------------+
+2 rows in set (0.00 sec)
 ```
+当前迁移任务已完成，新的分片规则已生效。如果迁移失败，新的分片规则不会生效。
 
-#### 停止迁移任务
-
-接口描述：GET /scaling/job/stop
-
-请求体：
+`status`的取值：
 
-| 参数      | 描述      |
-| --------- | -------- |
-| jobId     | job id   |
+| 取值                                               | 描述                                                         |
+| ------------------------------------------------- | ------------------------------------------------------------ |
+| PREPARING                                         | 准备中                                                        |
+| RUNNING                                           | 运行中                                                        |
+| EXECUTE_INVENTORY_TASK                            | 全量迁移中                                                     |
+| EXECUTE_INCREMENTAL_TASK                          | 增量迁移中                                                     |
+| ALMOST_FINISHED                                   | 基本完成                                                       |
+| FINISHED                                          | 已完成                                                         |
+| PREPARING_FAILURE                                 | 准备阶段失败                                                    |
+| EXECUTE_INVENTORY_TASK_FAILURE                    | 全量迁移阶段失败                                                 |
+| EXECUTE_INCREMENTAL_TASK_FAILURE                  | 增量迁移阶段失败                                                 |
+
+#### 预览新的分片规则是否生效
 
 示例：
+```sql
+preview select count(1) from t_order;
 ```
-curl -X GET \
-  http://localhost:8888/scaling/job/stop/1
-```
+
 返回信息：
 ```
-{
-   "success": true,
-   "errorCode": 0,
-   "errorMsg": null,
-   "model": null
-}
-```
+mysql> preview select count(1) from t_order;
++------------------+--------------------------------+
+| data_source_name | sql                            |
++------------------+--------------------------------+
+| ds_2             | select count(1) from t_order_0 |
+| ds_2             | select count(1) from t_order_1 |
+| ds_3             | select count(1) from t_order_0 |
+| ds_3             | select count(1) from t_order_1 |
+| ds_4             | select count(1) from t_order_0 |
+| ds_4             | select count(1) from t_order_1 |
++------------------+--------------------------------+
+6 rows in set (0.01 sec)
+```
+
+#### 其他DistSQL
+详情请参见[RAL#弹性伸缩](/cn/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral/#%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9)。
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md b/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
index b1475a2cb6..bf56f93693 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
@@ -22,7 +22,7 @@ If the backend database is MySQL, please download [mysql-connector-java-5.1.47.j
 
 ### Privileges
 
-MySQL need to open `binlog`, and `binlog format` should be Row model. Privileges of users scaling used should include Replication privileges.
+We need to enable `binlog` for MySQL. Privileges of users scaling used should include Replication privileges.
 
 ```
 +-----------------------------------------+---------------------------------------+
@@ -43,258 +43,138 @@ MySQL need to open `binlog`, and `binlog format` should be Row model. Privileges
 
 PostgreSQL need to support and open [test_decoding](https://www.postgresql.org/docs/9.4/test-decoding.html) feature.
 
-### API
+### DistSQL API
 
-ShardingSphere-Scaling provides a simple HTTP API
+ShardingSphere-Scaling provides DistSQL API
 
-#### Start scaling job
-
-Interface description: POST /scaling/job/start
-
-Body:
-
-| Parameter                                         | Describe                                                     |
-| ------------------------------------------------- | ------------------------------------------------------------ |
-| ruleConfig.source                                 | source data source configuration                             |
-| ruleConfig.target                                 | target data source configuration                             |
-| handleConfig.concurrency                          | sync task proposed concurrency                               |
+#### Preview current sharding rule
 
-Data source configuration:
+Example:
+```sql
+preview select count(1) from t_order;
+```
 
-| Parameter                                         | Describe                                                     |
-| ------------------------------------------------- | ------------------------------------------------------------ |
-| type                                              | data source type(available parameters:shardingSphereJdbc,jdbc)|
-| parameter                                         | data source parameter                                        |
+Response:
+```
+mysql> preview select count(1) from t_order;
++------------------+--------------------------------+
+| data_source_name | sql                            |
++------------------+--------------------------------+
+| ds_0             | select count(1) from t_order_0 |
+| ds_0             | select count(1) from t_order_1 |
+| ds_1             | select count(1) from t_order_0 |
+| ds_1             | select count(1) from t_order_1 |
++------------------+--------------------------------+
+4 rows in set (0.00 sec)
+```
 
-*** Notice ***
+#### Start scaling job
 
-Currently, source type and target type must be shardingSphereJdbc
+1. Add new data source resources
+Please refer to [RDL#Data Source](/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-resource/).
 
 Example:
-
-```
-curl -X POST \
-  http://localhost:8888/scaling/job/start \
-  -H 'content-type: application/json' \
-  -d '{
-        "ruleConfig": {
-          "source": {
-            "schemaName": "sharding_db",
-            "type": "shardingSphereJdbc",
-            "parameter": "
-                dataSources:
-                  ds_0:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_0?useSSL=false
-                    username: root
-                    password: root
-                  ds_1:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_1?useSSL=false
-                    username: root
-                    password: root
-                rules:
-                - !SHARDING
-                  tables:
-                    t_order:
-                      actualDataNodes: ds_$->{0..1}.t_order_$->{0..1}
-                      databaseStrategy:
-                        standard:
-                          shardingColumn: user_id
-                          shardingAlgorithmName: t_order_db_algorith
-                      logicTable: t_order
-                      tableStrategy:
-                        standard:
-                          shardingColumn: order_id
-                          shardingAlgorithmName: t_order_tbl_algorith
-                  shardingAlgorithms:
-                    t_order_db_algorith:
-                      type: INLINE
-                      props:
-                        algorithm-expression: ds_$->{user_id % 2}
-                    t_order_tbl_algorith:
-                      type: INLINE
-                      props:
-                        algorithm-expression: t_order_$->{order_id % 2}
-                "
-          },
-          "target": {
-            "schemaName": "sharding_db",
-            "type": "shardingSphereJdbc",
-            "parameter": "
-                dataSources:
-                  ds_0:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_2?useSSL=false
-                    username: root
-                    password: root
-                  ds_1:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_3?useSSL=false
-                    username: root
-                    password: root
-                  ds_2:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_4?useSSL=false
-                    username: root
-                    password: root
-                  ds_3:
-                    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
-                    jdbcUrl: jdbc:mysql://127.0.0.1:3306/scaling_5?useSSL=false
-                    username: root
-                    password: root
-                rules:
-                - !SHARDING
-                  tables:
-                    t_order:
-                      actualDataNodes: ds_$->{0..3}.t_order_$->{0..3}
-                      databaseStrategy:
-                        standard:
-                          shardingColumn: user_id
-                          shardingAlgorithmName: t_order_db_algorith
-                      logicTable: t_order
-                      tableStrategy:
-                        standard:
-                          shardingColumn: order_id
-                          shardingAlgorithmName: t_order_tbl_algorith
-                  shardingAlgorithms:
-                    t_order_db_algorith:
-                      type: INLINE
-                      props:
-                        algorithm-expression: ds_$->{user_id % 4}
-                    t_order_tbl_algorith:
-                      type: INLINE
-                      props:
-                        algorithm-expression: t_order_$->{order_id % 4}
-                "
-          }
-        },
-        "handleConfig":{
-          "concurrency":"3"
-        }
-      }'
+```sql
+ADD RESOURCE ds_2 (
+    URL="jdbc:mysql://127.0.0.1:3306/db2?serverTimezone=UTC&useSSL=false",
+    USER=root,
+    PASSWORD=root,
+    PROPERTIES("maximumPoolSize"=10,"idleTimeout"="30000")
+);
+-- ds_3, ds_4
 ```
 
-Response:
+2. Alter sharding table rule
+Please refer to [RDL#Sharding](/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule/).
 
-```
-{
-   "success": true,
-   "errorCode": 0,
-   "errorMsg": null,
-   "model": null
-}
+Example:
+```sql
+ALTER SHARDING TABLE RULE t_order (
+RESOURCES(ds_2, ds_3, ds_4),
+SHARDING_COLUMN=order_id,
+TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=10)),
+GENERATED_KEY(COLUMN=another_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
+);
 ```
 
-#### Get scaling progress
+If `RESOURCES` and `sharding-count` is changed, then scaling job will be emitted.
 
-Interface description: GET /scaling/job/progress/{jobId}
+#### List scaling jobs
+Please refer to [RAL#Scaling](/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral/#scaling).
 
 Example:
-```
-curl -X GET \
-  http://localhost:8888/scaling/job/progress/1
+```sql
+show scaling list;
 ```
 
 Response:
 ```
-{
-   "success": true,
-   "errorCode": 0,
-   "errorMsg": null,
-   "model": {
-        "id": 1,
-        "jobName": "Local Sharding Scaling Job",
-        "status": "RUNNING/STOPPED"
-        "syncTaskProgress": [{
-            "id": "127.0.0.1-3306-test",
-            "status": "PREPARING/MIGRATE_HISTORY_DATA/SYNCHRONIZE_REALTIME_DATA/STOPPING/STOPPED",
-            "historySyncTaskProgress": [{
-                "id": "history-test-t1#0",
-                "estimatedRows": 41147,
-                "syncedRows": 41147
-            }, {
-                "id": "history-test-t1#1",
-                "estimatedRows": 42917,
-                "syncedRows": 42917
-            }, {
-                "id": "history-test-t1#2",
-                "estimatedRows": 43543,
-                "syncedRows": 43543
-            }, {
-                "id": "history-test-t2#0",
-                "estimatedRows": 39679,
-                "syncedRows": 39679
-            }, {
-                "id": "history-test-t2#1",
-                "estimatedRows": 41483,
-                "syncedRows": 41483
-            }, {
-                "id": "history-test-t2#2",
-                "estimatedRows": 42107,
-                "syncedRows": 42107
-            }],
-            "realTimeSyncTaskProgress": {
-                "id": "realtime-test",
-                "delayMillisecond": 1576563771372,
-                "position": {
-                    "filename": "ON.000007",
-                    "position": 177532875,
-                    "serverId": 0
-                }
-            }
-        }]
-   }
-}
+mysql> show scaling list;
++--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
+| id                 | tables                | sharding_total_count | active | create_time         | stop_time           |
++--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
+| 659853312085983232 | t_order_item, t_order | 2                    | 0      | 2021-10-26 20:21:31 | 2021-10-26 20:24:01 |
+| 660152090995195904 | t_order_item, t_order | 2                    | 0      | 2021-10-27 16:08:43 | 2021-10-27 16:11:00 |
++--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
+2 rows in set (0.04 sec)
 ```
 
-#### List scaling jobs
-
-Interface description: GET /scaling/job/list
+#### Get scaling progress
 
 Example:
-```
-curl -X GET \
-  http://localhost:8888/scaling/job/list
+```sql
+show scaling status {jobId};
 ```
 
 Response:
-
 ```
-{
-  "success": true,
-  "errorCode": 0,
-  "model": [
-    {
-      "jobId": 1,
-      "jobName": "Local Sharding Scaling Job",
-      "status": "RUNNING"
-    }
-  ]
-}
+mysql> show scaling status 660152090995195904;
++------+-------------+----------+-------------------------------+--------------------------+
+| item | data_source | status   | inventory_finished_percentage | incremental_idle_minutes |
++------+-------------+----------+-------------------------------+--------------------------+
+| 0    | ds_1        | FINISHED | 100                           | 2834                     |
+| 1    | ds_0        | FINISHED | 100                           | 2834                     |
++------+-------------+----------+-------------------------------+--------------------------+
+2 rows in set (0.00 sec)
 ```
+Current scaling job is finished, new sharding rule should take effect, and not if scaling job is failed.
 
-#### Stop scaling job
-
-Interface description: GET /scaling/job/stop
+`status` values:
 
-Body:
-
-| Parameter | Describe |
-| --------- | -------- |
-| jobId     | job id   |
+| Value                                             | Description                                                  |
+| ------------------------------------------------- | ------------------------------------------------------------ |
+| PREPARING                                         | preparing                                                    |
+| RUNNING                                           | running                                                      |
+| EXECUTE_INVENTORY_TASK                            | inventory task running                                       |
+| EXECUTE_INCREMENTAL_TASK                          | incremental task running                                     |
+| ALMOST_FINISHED                                   | almost finished                                              |
+| FINISHED                                          | finished                                                     |
+| PREPARING_FAILURE                                 | preparation failed                                           |
+| EXECUTE_INVENTORY_TASK_FAILURE                    | inventory task failed                                        |
+| EXECUTE_INCREMENTAL_TASK_FAILURE                  | incremental task failed                                      |
+
+#### Preview new sharding rule
 
 Example:
+```sql
+preview select count(1) from t_order;
 ```
-curl -X GET \
-  http://localhost:8888/scaling/job/stop/1
-```
+
 Response:
 ```
-{
-   "success": true,
-   "errorCode": 0,
-   "errorMsg": null,
-   "model": null
-}
-```
+mysql> preview select count(1) from t_order;
++------------------+--------------------------------+
+| data_source_name | sql                            |
++------------------+--------------------------------+
+| ds_2             | select count(1) from t_order_0 |
+| ds_2             | select count(1) from t_order_1 |
+| ds_3             | select count(1) from t_order_0 |
+| ds_3             | select count(1) from t_order_1 |
+| ds_4             | select count(1) from t_order_0 |
+| ds_4             | select count(1) from t_order_1 |
++------------------+--------------------------------+
+6 rows in set (0.01 sec)
+```
+
+#### Other DistSQL
+Please refer to [RAL#Scaling](/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral/#scaling).
