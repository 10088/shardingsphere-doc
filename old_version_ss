commit f776372381b08db7435570e70261d0dbcc922941
Author: Mike0601 <40025573+Mike0601@users.noreply.github.com>
Date:   Thu Aug 4 18:51:44 2022 +0800

    remove how it works (#19872)

diff --git a/docs/document/content/features/observability/_index.cn.md b/docs/document/content/features/observability/_index.cn.md
index cb9e10349a4..810f1d5cdb6 100644
--- a/docs/document/content/features/observability/_index.cn.md
+++ b/docs/document/content/features/observability/_index.cn.md
@@ -5,6 +5,7 @@ weight = 12
 +++
 
 ## 定义
+
 如何观测集群的运行状态，使运维人员可以快速掌握当前系统现状，并进行进一步的维护工作，是分布式系统的全新挑战。
 登录到具体服务器的点对点运维方式，无法适用于面向大量分布式服务器的场景。
 通过对可系统观察性数据的遥测是分布式系统推荐的运维方式。
@@ -12,31 +13,27 @@ weight = 12
 ## 相关概念
 
 ### Agent
+
 基于字节码增强和插件化设计，以提供 Tracing 和 Metrics 埋点，以及日志输出功能。
 需要开启 Agent 的插件功能后，才能将监控指标数据输出至第三方 APM 中展示。
 
 ### APM
+
 APM 是应用性能监控的缩写。
 着眼于分布式系统的性能诊断，其主要功能包括调用链展示，应用拓扑分析等。
 
 ### Tracing
+
 链路跟踪，通过探针收集调用链数据，并发送到第三方 APM 系统。
 
 ### Metrics
+
 系统统计指标，通过探针收集，并且写入到时序数据库，供第三方应用展示。
 
 ### Logging
-日志，通过 Agent 能够方便的扩展日志内容，为分析系统运行状态提供更多信息。
-
- ## 原理介绍
-ShardingSphere-Agent 模块为 ShardingSphere 提供了可观察性的框架，它是基于 Java Agent 技术实现的。
-Metrics、Tracing 和 Logging 等功能均通过插件的方式集成在 Agent 中，如图：
-
-![Overview](https://shardingsphere.apache.org/document/current/img/apm/overview_v4.png)
 
-- Metrics 插件用于收集和展示整个集群的统计指标。Apache ShardingSphere 默认提供了对 Prometheus 的支持。
-- Tracing 插件用于获取 SQL 解析与 SQL 执行的链路跟踪信息。Apache ShardingSphere 默认提供了对 Jaeger、OpenTelemetry、OpenTracing（SkyWalking）和 Zipkin 的支持，也支持用户通过插件化的方式开发自定义的 Tracing 组件。
-- 默认的 Logging 插件展示了如何在 ShardingSphere 中记录额外的日志，实际应用中需要用户根据自己的需求进行探索。
+日志，通过 Agent 能够方便的扩展日志内容，为分析系统运行状态提供更多信息。
 
 ## 相关参考
+
 [特殊 API：可观察性](/cn/user-manual/shardingsphere-jdbc/special-api/observability/)
diff --git a/docs/document/content/features/observability/_index.en.md b/docs/document/content/features/observability/_index.en.md
index cd29a5ecce8..1c28d802bf4 100644
--- a/docs/document/content/features/observability/_index.en.md
+++ b/docs/document/content/features/observability/_index.en.md
@@ -5,6 +5,7 @@ weight = 12
 +++
 
 ## Definition
+
 Observing a cluster's operation status in order to quickly grasp the system's current status and efficiently be able to carry out maintenance work, represents a new challenge for distributed systems.
 
 The point-to-point operation and maintenance method of logging into a specific server cannot be applied to scenarios facing a large number of distributed servers.
@@ -14,34 +15,29 @@ Telemetry of system-observable data is the recommended way of operating and main
 ## Related Concepts
 
 ### Agent
+
 Based on bytecode enhancement and plugin design to provide tracing, metrics and logging features.
 
 Only after the plugin of the Agent is enabled, the monitoring indicator data can be output to the third-party APM for display.
 
 ### APM
+
 APM is an acronym for Application Performance Monitoring.
 
 Focusing on the performance diagnosis of distributed systems, its main functions include call chain display, application topology analysis, etc.
 
 ### Tracing
+
 Tracing data between distributed services or internal processes will be collected by agent. It will then be sent to third-party APM systems.
 
 ### Metrics
+
 System statistical indicators are collected through probes and written to the time series database for display by third-party applications.
 
 ### Logging
-The log can be easily expanded through the agent to provide more information for analyzing the system running status.
 
-## How it works
-ShardingSphere-Agent module provides an observable framework for ShardingSphere, which is implemented based on Java Agent.
-
-Metrics, tracing and logging functions are integrated into the agent through plugins, as shown in the following figure:
-
-![Overview](https://shardingsphere.apache.org/document/current/img/apm/overview_v4.png)
-
-- The Metrics plugin is used to collect and display statistical indicators for the entire cluster. Apache ShardingSphere supports Prometheus by default.
-- The tracing plugin is used to obtain the link trace information of SQL parsing and SQL execution. Apache ShardingSphere provides support for Jaeger, OpenTelemetry, OpenTracing(SkyWalking) and Zipkin by default. It also supports users developing customized tracing components through plugin.
-- The default logging plugin shows how to record additional logs in ShardingSphere. In practical applications, users need to explore according to their own needs.
+The log can be easily expanded through the agent to provide more information for analyzing the system running status.
 
 ## Related References
+
 [Special API: Observability](/en/user-manual/shardingsphere-jdbc/special-api/observability/)
