commit aeac16dff491f38d41d007e0e3969e920bd8450f
Author: Liang Zhang <terrymanu@163.com>
Date:   Tue Jan 19 19:50:29 2021 +0800

    Update index of test engine (#9093)
    
    * Add dal test engine
    
    * Update index of test engine

diff --git a/docs/document/content/features/test-engine/_index.cn.md b/docs/document/content/features/test-engine/_index.cn.md
index 40574def40..61e9f3bb42 100644
--- a/docs/document/content/features/test-engine/_index.cn.md
+++ b/docs/document/content/features/test-engine/_index.cn.md
@@ -5,16 +5,7 @@ weight = 10
 chapter = true
 +++
 
-ShardingSphere提供了完善的测试引擎。它以XML方式定义SQL，每条SQL由SQL解析单元测试引擎和整合测试引擎驱动，每个引擎分别为H2、MySQL、PostgreSQL、SQLServer和Oracle数据库运行测试用例。
+Apache ShardingSphere 提供了完善的测试引擎。
+它以 XML 方式定义 SQL，每个引擎分别为MySQL、PostgreSQL、SQLServer 和 Oracle 数据库运行测试用例。
 
-为了使测试更容易上手，shardingsphere 中的测试引擎不必修改任何 **Java** 代码，只需要修改相应的配置文件即可运行断言。
-
-SQL解析单元测试全面覆盖SQL占位符和字面量维度。整合测试进一步拆分为策略和JDBC两个维度，策略维度包括分库分表、仅分表、仅分库、读写分离等策略，JDBC维度包括Statement、PreparedStatement。
-
-因此，1条SQL会驱动5种数据库的解析 * 2种参数传递类型 + 5种数据库 * 5种分片策略 * 2 种 JDBC 运行方式 = 60个测试用例，以达到ShardingSphere对于高质量的追求。
-
-> 鉴于表述路径时，子路径可能不止一个，名称为某一类术语的集合，这里用 SQL-TYPE 以及 SHARDING-TYPE 表述如下：
->
->SQL-TYPE : 是 DAL，DCL，DDL，DML，DQL，TCL 中的某一个或者集合
->
->SHARDING-TYPE : 是 db，dbtbl_with_replica_query，replica_query，tbl 中的某一个或者集合
+为了方便上手，测试引擎不必修改任何 **Java** 代码，只需要修改相应的配置文件即可运行断言。
diff --git a/docs/document/content/features/test-engine/_index.en.md b/docs/document/content/features/test-engine/_index.en.md
index 2f9dc907e8..af829e8225 100644
--- a/docs/document/content/features/test-engine/_index.en.md
+++ b/docs/document/content/features/test-engine/_index.en.md
@@ -5,18 +5,7 @@ weight = 10
 chapter = true
 +++
 
-ShardingSphere provided a full functionality test engine. it defines SQLs in xml files, every single SQL is drove by SQL parse unit test engine and integration test engine,
-each engine is suit for H2、MySQL、PostgreSQL、SQLServer and Oracle.
+Apache ShardingSphere provided a full functionality test engine.
+They define SQLs in xml files, each engine is suit for MySQL, PostgreSQL, SQLServer and Oracle.
 
-To make the test engine more easy to get start, all test engines in shardingsphere are designed to modify the configuration files to execute all assertions without any **Java code** modification.
-
-The SQL parsing unit test covers both SQL placeholder and literal dimension. 
-Integration test can be further divided into two dimensions of strategy and JDBC; the former one includes strategies as Sharding, table Sharding, database Sharding, and replica query while the latter one includes `Statement` and `PreparedStatement`.
-
-Therefore, one SQL can drive 5 kinds of database parsing * 2 kinds of parameter transmission modes + 5 kinds of databases * 5 kinds of Sharding strategies * 2 kinds of JDBC operation modes = 60 test cases, to enable ShardingSphere to achieve the pursuit of high quality.
-
-> whenever describe the sub-path under a specific path, there may be more than one, here represent SQL-TYPE and SHARDING-TYPE as following :
->
->SQL-TYPE : is one of or collection of dal,dcl，ddl，dml，dql，tcl
->
->SHARDING-TYPE : is one of or collection of db，dbtbl_with_replica_query，replica_query，tbl
+All test engines designed to modify the configuration files to execute all assertions without any **Java code** modification.
diff --git a/docs/document/content/features/test-engine/integration-test-engine.cn.md b/docs/document/content/features/test-engine/integration-test-engine.cn.md
index 8f694b787e..a8180fa447 100644
--- a/docs/document/content/features/test-engine/integration-test-engine.cn.md
+++ b/docs/document/content/features/test-engine/integration-test-engine.cn.md
@@ -4,6 +4,11 @@ title = "整合测试引擎"
 weight = 2
 +++
 
+SQL解析单元测试全面覆盖SQL占位符和字面量维度。
+整合测试进一步拆分为策略和JDBC两个维度，策略维度包括分库分表、仅分表、仅分库、读写分离等策略，JDBC维度包括Statement、PreparedStatement。
+
+因此，1条SQL会驱动5种数据库的解析 * 2种参数传递类型 + 5种数据库 * 5种分片策略 * 2 种 JDBC 运行方式 = 60个测试用例，以达到ShardingSphere对于高质量的追求。
+
 ## 流程
 
 Junit 中的 `Parameterized` 会聚合起所有的测试数据，并将测试数据一一传递给测试方法进行断言。数据处理就像是沙漏中的流沙：
diff --git a/docs/document/content/features/test-engine/integration-test-engine.en.md b/docs/document/content/features/test-engine/integration-test-engine.en.md
index b0edc565a6..cbdb5c92ea 100644
--- a/docs/document/content/features/test-engine/integration-test-engine.en.md
+++ b/docs/document/content/features/test-engine/integration-test-engine.en.md
@@ -4,7 +4,13 @@ title = "Integration Test Engine"
 weight = 2
 +++
 
+The SQL parsing unit test covers both SQL placeholder and literal dimension. 
+Integration test can be further divided into two dimensions of strategy and JDBC; the former one includes strategies as Sharding, table Sharding, database Sharding, and replica query while the latter one includes `Statement` and `PreparedStatement`.
+
+Therefore, one SQL can drive 5 kinds of database parsing * 2 kinds of parameter transmission modes + 5 kinds of databases * 5 kinds of Sharding strategies * 2 kinds of JDBC operation modes = 60 test cases, to enable ShardingSphere to achieve the pursuit of high quality.
+
 ## Process
+
 The `Parameterized` in JUnit will collect all test data, and pass to test method to assert one by one. The process of handling test data is just like a leaking hourglass:
 
 ![](https://shardingsphere.apache.org/document/current/img/test-engine/integration-test.jpg)
