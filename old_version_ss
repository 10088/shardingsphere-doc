commit 87808928d60a3970b6df0463af55116c9a23c81f
Author: Mike0601 <40025573+Mike0601@users.noreply.github.com>
Date:   Fri Aug 5 17:35:25 2022 +0800

    modify according to new template (#19902)

diff --git a/docs/document/content/features/transaction/_index.cn.md b/docs/document/content/features/transaction/_index.cn.md
index 46a26ffed75..7e74565aafd 100644
--- a/docs/document/content/features/transaction/_index.cn.md
+++ b/docs/document/content/features/transaction/_index.cn.md
@@ -16,61 +16,6 @@ chapter = true
 
 在分布式的场景下，一个事务内，包含对多个数据节点的操作，分布式事务保证了在分布式场景下 ACID 的特性。
 
-## 相关概念
-
-### XA 协议
-
-XA 协议最早的分布式事务模型是由 `X/Open` 国际联盟提出的 `X/Open Distributed Transaction Processing (DTP)` 模型，简称 XA 协议。
-
-## 使用限制
-
-虽然 Apache ShardingSphere 希望能够完全兼容所有的分布式事务场景，并在性能上达到最优，但在 CAP 定理所指导下，分布式事务必然有所取舍。
-Apache ShardingSphere 希望能够将分布式事务的选择权交给使用者，在不同的场景用使用最适合的分布式事务解决方案。
-
-### LOCAL 事务
-
-#### 支持项
-
-* 完全支持非跨库事务，例如：仅分表，或分库但是路由的结果在单库中；
-* 完全支持因逻辑异常导致的跨库事务。例如：同一事务中，跨两个库更新。更新完毕后，抛出空指针，则两个库的内容都能够回滚。
-
-#### 不支持项
-
-* 不支持因网络、硬件异常导致的跨库事务。例如：同一事务中，跨两个库更新，更新完毕后、未提交之前，第一个库宕机，则只有第二个库数据提交，且无法回滚。
-
-### XA 事务
-
-#### 支持项
-
-* 支持 Savepoint 嵌套事务；
-* PostgreSQL/OpenGauss 事务块内，SQL 执行出现异常，执行 `Commit`，事务自动回滚；
-* 支持数据分片后的跨库事务；
-* 两阶段提交保证操作的原子性和数据的强一致性；
-* 服务宕机重启后，提交/回滚中的事务可自动恢复；
-* 支持同时使用 XA 和非 XA 的连接池。
-
-#### 不支持项
-
-* 服务宕机后，在其它机器上恢复提交/回滚中的数据；
-* MySQL 事务块内，SQL 执行出现异常，执行 `Commit`，数据保持一致。
-
-### BASE 事务
-
-#### 支持项
-
-* 支持数据分片后的跨库事务；
-* 支持 RC 隔离级别；
-* 通过 undo 快照进行事务回滚；
-* 支持服务宕机后的，自动恢复提交中的事务。
-
-#### 不支持项
-
-* 不支持除 RC 之外的隔离级别。
-
-#### 待优化项
-
-* Apache ShardingSphere 和 SEATA 重复 SQL 解析。
-
 ## 原理介绍
 
 ShardingSphere 对外提供 begin/commit/rollback 传统事务接口，通过 LOCAL，XA，BASE 三种模式提供了分布式事务的能力，
@@ -124,4 +69,5 @@ Apache ShardingSphere 集成了 SEATA 作为柔性事务的使用方案。
 | 适合场景  | 业务方处理不一致 | 短事务 & 低并发   | 长事务 & 高并发 |
 
 ## 相关参考
+
 - [分布式事务的 YAML 配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/)
diff --git a/docs/document/content/features/transaction/_index.en.md b/docs/document/content/features/transaction/_index.en.md
index 38d3f420d16..3d7f88eaf95 100644
--- a/docs/document/content/features/transaction/_index.en.md
+++ b/docs/document/content/features/transaction/_index.en.md
@@ -16,63 +16,6 @@ Four properties of transactions: ACID （Atomicity、Consistency、Isolation、D
 
 Distributed transactions guarantee the ACID properties in distributed scenarios, where a single transaction involves operations on multiple data nodes.
 
-## Related Concepts
-
-### XA Protocol
-
-The original distributed transaction model of XA protocol is the "X/Open Distributed Transaction Processing (DTP)" model, XA protocol for short, which was proposed by the X/Open international consortium.
-
-## Limitations
-
-Though Apache ShardingSphere intends to be compatible with all distributed scenario and best performance, under CAP theorem guidance, there is no sliver bullet with distributed transaction solution.
-
-Apache ShardingSphere wants to give the user choice of distributed transaction type and use the most suitable solution in different scenarios.
-
-### LOCAL Transaction
-
-#### Supported
-
-* Support none-cross-database transactions. For example, sharding table or sharding database with its route result in same database;
-* Support cross-database transactions caused by logic exceptions. For example, update two databases in transaction with exception thrown, data can rollback in both databases.
-
-#### Unsupported
-
-* Do not support the cross-database transactions caused by network or hardware crash. For example, when update two databases in transaction, if one database crashes before commit, then only the data of the other database can commit.
-
-### XA Transaction
-
-#### Supported
-
-* Support Savepoint;
-* PostgreSQL/OpenGauss, in the transaction block, the SQL execution is abnormal，then run `Commit`，transactions are automatically rollback;
-* Support cross-database transactions after sharding;
-* Operation atomicity and high data consistency in 2PC transactions;
-* When service is down and restarted, commit and rollback transactions can be recovered automatically;
-* Support use XA and non-XA connection pool together.
-
-#### Unsupported
-
-* Recover committing and rolling back in other machines after the service is down;
-* MySQL,in the transaction block, the SQL execution is abnormal, and run `Commit`, and data remains consistent.
-
-### BASE Transaction
-
-#### Supported
-
-* Support cross-database transactions after sharding;
-* Support RC isolation level;
-* Rollback transaction according to undo log;
-* Support recovery committing transaction automatically after the service is down.
-
-#### Unsupported
-
-* Do not support other isolation level except RC.
-
-#### To Be Optimized
-
-* SQL parsed twice by Apache ShardingSphere and SEATA.
-
-
 ## How it works
 
 ShardingSphere provides begin/ commit/rollback traditional transaction interfaces externally, and provides distributed transaction capabilities through LOCAL, XA and BASE modes.
