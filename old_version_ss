commit b357cf801f8a90228089b901573a64dbda41afc8
Author: Ling Hengqian <linghengqian@outlook.com>
Date:   Fri Jan 28 16:51:56 2022 +0800

    Enhanced timestamp parsing in AutoIntervalShardingAlgorithm (#15131)
    
    * Provides the AutoIntervalShardingAlgorithm with the ability to specify milliseconds in arbitrary digits

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.cn.md
index e051bfdd5c..5372104261 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.cn.md
@@ -53,11 +53,11 @@ weight = 2
 
 可配置属性：
 
-| *属性名称*        | *数据类型* | *说明*                                         |
-| ---------------- | -------- | --------------------------------------------- |
-| datetime-lower   | String   | 分片的起始时间范围，时间戳格式：yyyy-MM-dd HH:mm:ss |
-| datetime-upper   | String   | 分片的结束时间范围，时间戳格式：yyyy-MM-dd HH:mm:ss |
-| sharding-seconds | long     | 单一分片所能承载的最大时间，单位：秒                 |
+| *属性名称*        | *数据类型* | *说明*                                                                                 |
+| ---------------- | -------- | ------------------------------------------------------------------------------------- |
+| datetime-lower   | String   | 分片的起始时间范围，时间戳格式：yyyy-MM-dd HH:mm:ss                                         |
+| datetime-upper   | String   | 分片的结束时间范围，时间戳格式：yyyy-MM-dd HH:mm:ss                                         |
+| sharding-seconds | long     | 单一分片所能承载的最大时间，单位：秒，允许分片键的时间戳格式的秒带有时间精度，但秒后的时间精度会被自动抹去 |
 
 ## 标准分片算法
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.en.md
index 3d61b8e989..c0c77a37c1 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.en.md
@@ -53,11 +53,11 @@ Type: AUTO_INTERVAL
 
 Attributes:
 
-| *Name*           | *DataType* | *Description*                                               |
-| ---------------- | ---------- | ----------------------------------------------------------- |
-| datetime-lower   | String     | Shard datetime begin boundary, pattern: yyyy-MM-dd HH:mm:ss |
-| datetime-upper   | String     | Shard datetime end boundary, pattern: yyyy-MM-dd HH:mm:ss   |
-| sharding-seconds | long       | Max seconds for the data in one shard                       |
+| *Name*           | *DataType* | *Description*                                                                                                                                                     |
+| ---------------- | ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |
+| datetime-lower   | String     | Shard datetime begin boundary, pattern: yyyy-MM-dd HH:mm:ss                                                                                                       |
+| datetime-upper   | String     | Shard datetime end boundary, pattern: yyyy-MM-dd HH:mm:ss                                                                                                         |
+| sharding-seconds | long       | Max seconds for the data in one shard, allows sharding key timestamp format seconds with time precision, but time precision after seconds is automatically erased |
 
 ## Standard Sharding Algorithm
 
@@ -65,8 +65,8 @@ Apache ShardingSphere built-in standard sharding algorithm are:
 
 ### Inline Sharding Algorithm
 
-With Groovy expressions, `InlineShardingStrategy` provides single-key support for the sharding operation of `=` and `IN` in SQL. 
-Simple sharding algorithms can be used through a simple configuration to avoid laborious Java code developments. 
+With Groovy expressions, `InlineShardingStrategy` provides single-key support for the sharding operation of `=` and `IN` in SQL.
+Simple sharding algorithms can be used through a simple configuration to avoid laborious Java code developments.
 For example, `t_user_$->{u_id % 8}` means table t_user is divided into 8 tables according to u_id, with table names from `t_user_0` to `t_user_7`.
 Please refer to [Inline Expression](/en/features/sharding/concept/inline-expression/) for more details.
 
