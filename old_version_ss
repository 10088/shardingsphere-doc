commit 000325fdfde5c3773bc8062f1bf37bec53f72e67
Author: Liang Zhang <terrymanu@163.com>
Date:   Sun Nov 14 07:01:53 2021 +0800

    Refactor user-manual of shardingsphere-jdbc (#13592)
    
    * Refactor java api document
    
    * Refactor mode document
    
    * Refactor data-source document
    
    * Move config to java-api
    
    * update config to yaml
    
    * update mode config to yaml
    
    * update index config to yaml
    
    * update data source config to yaml
    
    * Move rule config to yaml
    
    * Update data source config to spring boot
    
    * Update mode config to spring boot
    
    * Move rule config to spring boot
    
    * Update index to spring namespace
    
    * Update data source to spring namespace
    
    * Update mode to spring namespace
    
    * Move rule to spring namespace
    
    * Move builtin
    
    * Move special-api
    
    * Delete useless folders
    
    * Update props
    
    * Rename unsupported
    
    * Update shadow
    
    * Update mix
    
    * Update builtin-algorithm
    
    * Update sharding-algorithm
    
    * Update encrypt-algorithm
    
    * Update keygen-algorithm
    
    * Update sharding-algorithm
    
    * Update props

diff --git a/docs/blog/content/material/Oct_12_4_Updates_and_FAQ_Your_1_Minute_Quick_Start_Guide_to_ShardingSphere.cn.md b/docs/blog/content/material/Oct_12_4_Updates_and_FAQ_Your_1_Minute_Quick_Start_Guide_to_ShardingSphere.cn.md
index 0e0203f619..e92d0846fe 100644
--- a/docs/blog/content/material/Oct_12_4_Updates_and_FAQ_Your_1_Minute_Quick_Start_Guide_to_ShardingSphere.cn.md
+++ b/docs/blog/content/material/Oct_12_4_Updates_and_FAQ_Your_1_Minute_Quick_Start_Guide_to_ShardingSphere.cn.md
@@ -314,7 +314,7 @@ examples/shardingsphere-jdbc-example/extension-example/custom-sharding-algortihm
 * 注意 shardingAlgorithms 配置项，当 type 为 CLASS_BASED 时，可以通过 props 指定自定义算法的类别和全路径，这样就可以完成自定义算法的配置。
 
 详细配置说明请阅读配置手册：
-https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding/
+https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/
 
 4.启动运行
 
diff --git a/docs/blog/content/material/Oct_12_6_AutoTable_Your_Butler-Like_Sharding_Configuration_Tool.cn.md b/docs/blog/content/material/Oct_12_6_AutoTable_Your_Butler-Like_Sharding_Configuration_Tool.cn.md
index 164e6dc047..e4a9aea68d 100644
--- a/docs/blog/content/material/Oct_12_6_AutoTable_Your_Butler-Like_Sharding_Configuration_Tool.cn.md
+++ b/docs/blog/content/material/Oct_12_6_AutoTable_Your_Butler-Like_Sharding_Configuration_Tool.cn.md
@@ -141,7 +141,7 @@ AutoTable 支持全部的自动分片算法，包括：
 * AUTO_INTERVAL：自动时间段分片算法
 
 关于以上算法的更多详细信息，请阅读 **Apache ShardingSphere 官方文档-自动分片算法：**
-https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding/
+https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/
 
 除内置算法外，用户也可以通过 SPI 扩展的方式加载自定义的分片算法，满足更加定制化的分片需求。
 
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.cn.md
index c0cb086f61..34600b1e09 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.cn.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.cn.md
@@ -92,7 +92,7 @@ weight = 2
 
 可配置属性：无
 
-算法类型的详情，请参见 [内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding)。
+算法类型的详情，请参见 [内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)。
 
 ##### 分布式序列策略配置
 
@@ -105,7 +105,7 @@ weight = 2
 | column           | String   | 分布式序列列名称   |
 | keyGeneratorName | String   | 分布式序列算法名称 |
 
-算法类型的详情，请参见 [内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen)。
+算法类型的详情，请参见 [内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen)。
 
 ### 读写分离
 
@@ -133,7 +133,7 @@ weight = 2
 | readDataSourceNames (+)    | Collection\<String\> | 读库数据源名称列表   | -             |
 | loadBalancerName (?)       | String               | 读库负载均衡算法名称 | 轮询负载均衡算法 |
 
-算法类型的详情，请参见 [内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
+算法类型的详情，请参见 [内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
 
 ### 数据加密
 
@@ -186,7 +186,7 @@ weight = 2
 | type       | String     | 加解密算法类型     |
 | properties | Properties | 加解密算法属性配置 |
 
-算法类型的详情，请参见 [内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt)。
+算法类型的详情，请参见 [内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
 
 ### 影子库
 
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md
index e36b8cef01..72230a3e27 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/java-api.en.md
@@ -92,7 +92,7 @@ Class name: org.apache.shardingsphere.sharding.api.config.strategy.sharding.None
 
 Attributes: None
 
-Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding) for more details about type of algorithm.
+Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) for more details about type of algorithm.
 
 ##### Key Generate Strategy Configuration
 
@@ -105,7 +105,7 @@ Attributes:
 | column           | String     | Column name of key generate |
 | keyGeneratorName | String     | key generate algorithm name |
 
-Please refer to [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen) for more details about type of algorithm.
+Please refer to [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen) for more details about type of algorithm.
 
 ### Readwrite-splitting
 
@@ -133,7 +133,7 @@ Attributes:
 | readDataSourceNames (+)    | Collection\<String\> | Read sources source name list                  | -                                  |
 | loadBalancerName (?)       | String               | Load balance algorithm name of replica sources | Round robin load balance algorithm |
 
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
 
 ### Encryption
 
@@ -186,7 +186,7 @@ Attributes:
 | type       | String     | Encrypt algorithm type       |
 | properties | Properties | Encrypt algorithm properties |
 
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt) for more details about type of algorithm.
+Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
 
 ### Shadow DB
 
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.en.md
index fd9d8e751a..da81c8922a 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.en.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter.en.md
@@ -62,7 +62,7 @@ spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name
 spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # Key generate algorithm properties
 ```
 
-Please refer to [Built-in sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding) and [Built-in keygen Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen)。
+Please refer to [Built-in sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) and [Built-in keygen Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen)。
 
 ### Readwrite-splitting
 
@@ -80,7 +80,7 @@ spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-alg
 spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
 ```
 
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
 
 ### Encryption
 
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.cn.md
index bde556cd8b..934ba1978a 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.cn.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.cn.md
@@ -132,7 +132,7 @@ weight = 3
 | type      | 属性  | 分布式序列算法类型    |
 | props (?) | 标签  | 分布式序列算法属性配置 |
 
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen)。
+算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen)。
 
 #### 注意事项
 
@@ -169,7 +169,7 @@ weight = 3
 | type      | 属性  | 负载均衡算法类型    |
 | props (?) | 标签  | 负载均衡算法属性配置 |
 
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
 
 ### 数据加密
 
@@ -210,7 +210,7 @@ weight = 3
 | type      | 属性  | 加密算法类型    |
 | props (?) | 标签  | 加密算法属性配置 |
 
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt)。
+算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
 
 ### 影子库
 
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.en.md
index 8fb1c1264d..9490265c52 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.en.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration.en.md
@@ -115,7 +115,7 @@ Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/sharding/shar
 | type      | Attribute | Key generate algorithm type       |
 | props (?) | Tag       | Key generate algorithm properties |
 
-Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding) and [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen) for more details about type of algorithm.
+Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) and [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen) for more details about type of algorithm.
 
 ##### Attention
 
@@ -151,7 +151,7 @@ Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/readwrite-spl
 | type      | Attribute  | Load balance algorithm type       |
 | props (?) | Tag        | Load balance algorithm properties |
 
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
 Please refer to [Use Norms](/en/features/readwrite-splitting/use-norms) for more details about query consistent routing.
 
 ### Encryption
@@ -193,7 +193,7 @@ Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encry
 | type      | Attribute  | Encrypt algorithm type       |
 | props (?) | Tag        | Encrypt algorithm properties |
 
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt) for more details about type of algorithm.
+Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
 
 ### Shadow-DB
 
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.cn.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.cn.md
index 8ad26a6f4a..aa6a254725 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.cn.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.cn.md
@@ -93,7 +93,7 @@ props:
   # ...
 ```
 
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
 
 ### 数据加密
 
@@ -123,7 +123,7 @@ rules:
   queryWithCipherColumn: # 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询
 ```
 
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt)。
+算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
 
 ### 影子库
 
diff --git a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md
index a11edc814d..141d90dc15 100644
--- a/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md
+++ b/docs/document/content/reference/api-change-history/shardingsphere-jdbc/yaml-configuration.en.md
@@ -93,7 +93,7 @@ props:
   # ...
 ```
 
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
 
 ### Encryption
 
@@ -123,7 +123,7 @@ rules:
   queryWithCipherColumn: # Whether query with cipher column for data encrypt. User you can use plaintext to query if have
 ```
 
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt) for more details about type of algorithm.
+Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
 
 ### Shadow DB
 
diff --git a/docs/document/content/reference/shadow/_index.cn.md b/docs/document/content/reference/shadow/_index.cn.md
index cf7034742e..ff616e512c 100644
--- a/docs/document/content/reference/shadow/_index.cn.md
+++ b/docs/document/content/reference/shadow/_index.cn.md
@@ -49,7 +49,7 @@ Apache ShardingSphere 通过解析 SQL，对传入的 SQL 进行影子判定，
 
 ## 影子算法
 
-影子算法详情，请参见[内置影子算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow)
+影子算法详情，请参见[内置影子算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow)
 
 ## 使用案例
 
diff --git a/docs/document/content/reference/shadow/_index.en.md b/docs/document/content/reference/shadow/_index.en.md
index 92197612ae..d4c3952e7d 100644
--- a/docs/document/content/reference/shadow/_index.en.md
+++ b/docs/document/content/reference/shadow/_index.en.md
@@ -66,7 +66,7 @@ The executed SQL does not contain notes, or shadow algorithms are unsuccessful,
 
 ## Shadow Algorithm
 
-Shadow algorithm details, please refer to [List of built-in shadow algorithms](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow)
+Shadow algorithm details, please refer to [List of built-in shadow algorithms](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow)
 
 ## Use Example
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/_index.cn.md
index c38083ebbf..a0b520beea 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/_index.cn.md
@@ -5,5 +5,17 @@ weight = 1
 chapter = true
 +++
 
-本章节面向 ShardingSphere-JDBC 的用户，详细阐述项目的使用说明。
+配置是 ShardingSphere-JDBC 中唯一与应用开发者交互的模块，通过它可以快速清晰的理解 ShardingSphere-JDBC 所提供的功能。
+
+本章节是 ShardingSphere-JDBC 的配置参考手册，需要时可当做字典查阅。
+
+ShardingSphere-JDBC 提供了 4 种配置方式，用于不同的使用场景。
+通过配置，应用开发者可以灵活的使用数据分片、读写分离、数据加密、影子库等功能，并且能够叠加使用。
+
+混合规则配置与单一规则配置一脉相承，只是从配置单一的规则项到配置多个规则项的异同。
+
+需要注意的是，规则项之间的叠加使用是通过数据源名称和表名称关联的。
+如果前一个规则是面向数据源聚合的，下一个规则在配置数据源时，则需要使用前一个规则配置的聚合后的逻辑数据源名称；
+同理，如果前一个规则是面向表聚合的，下一个规则在配置表时，则需要使用前一个规则配置的聚合后的逻辑表名称。
+
 更多使用细节请参见[使用示例](https://github.com/apache/shardingsphere/tree/master/examples)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/_index.en.md
index cc4d99eb02..0746ea77e4 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/_index.en.md
@@ -5,5 +5,18 @@ weight = 1
 chapter = true
 +++
 
-This chapter describes how to use projects of ShardingSphere-JDBC.
-Please refer to [Example](https://github.com/apache/shardingsphere/tree/master/examples) for more details.
\ No newline at end of file
+Configuration is the only module in ShardingSphere-JDBC that interacts with application developers,
+through which developers can quickly and clearly understand the functions provided by ShardingSphere-JDBC.
+
+This chapter is a configuration manual for ShardingSphere-JDBC, which can also be referred to as a dictionary if necessary.
+
+ShardingSphere-JDBC has provided 4 kinds of configuration methods for different situations.
+By configuration, application developers can flexibly use data sharding, readwrite-splitting, data encryption, shadow database or the combination of them.
+
+Mixed rule configurations are very similar to single rule configuration, except for the differences from single rule to multiple rules.
+
+It should be noted that the superposition between rules are data source and table name related.
+If the previous rule is data source oriented aggregation, the next rule needs to use the aggregated logical data source name configured by the previous rule when configuring the data source;
+Similarly, if the previous rule is table oriented aggregation, the next rule needs to use the aggregated logical table name configured by the previous rule when configuring the table.
+
+Please refer to [Example](https://github.com/apache/shardingsphere/tree/master/examples) for more details.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/_index.cn.md
deleted file mode 100644
index 721a288076..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/_index.cn.md
+++ /dev/null
@@ -1,7 +0,0 @@
-+++
-title = "API"
-weight = 1
-chapter = true
-+++
-
-本章节将介绍 ShardingSphere-JDBC 使用 API。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/_index.en.md
deleted file mode 100644
index 108c0267e8..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/_index.en.md
+++ /dev/null
@@ -1,7 +0,0 @@
-+++
-title = "API"
-weight = 1
-chapter = true
-+++
-
-This chapter will introduce the API of ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/_index.cn.md
deleted file mode 100644
index 08a2561591..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/_index.cn.md
+++ /dev/null
@@ -1,7 +0,0 @@
-+++
-title = "标准 API"
-weight = 1
-chapter = true
-+++
-
-本章节将介绍 ShardingSphere-JDBC 的标准 API。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/_index.en.md
deleted file mode 100644
index 34a10c3266..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/_index.en.md
+++ /dev/null
@@ -1,7 +0,0 @@
-+++
-title = "Standard API"
-weight = 1
-chapter = true
-+++
-
-This chapter will introduce the standard API of ShardingSphere-JDBC. 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.cn.md
deleted file mode 100644
index f7dc8be5a2..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.cn.md
+++ /dev/null
@@ -1,112 +0,0 @@
-+++
-title = "Java API"
-weight = 1
-+++
-
-## 引入 Maven 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core</artifactId>
-    <version>${shardingsphere.version}</version>
-</dependency>
-```
-
-## 构建数据源
-
-ShardingSphere-JDBC 的 Java API 通过 Schema 名称、运行模式、数据源集合、规则集合以及属性配置组成。
-
-### 构建运行模式
-
-运行模式配置对象包含三个参数，分别是运行模式类型、用于存储配置数据的仓库配置和是否用当前的 Java 配置覆盖已经持久化的配置。
-
-目前包括三种运行模式，分别是：内存模式、本地模式、集群模式。
-
-对于用于存储配置数据的仓库配置根据运行模式不同，有不同的配置类：
-
-- 内存模式无需仓库配置对象；
-- 本地模式和集群模式均需要使用各自的仓库配置对象。
-
-三种运行模式的配置示例分别是：
-
-- 内存模式
-
-```java
-ModeConfiguration modeConfig = new ModeConfiguration("Memory", null, true);
-```
-
-- 本地模式
-
-```java
-StandalonePersistRepositoryConfiguration repositoryConfig = new StandalonePersistRepositoryConfiguration("Local", new Properties());
-ModeConfiguration modeConfig = new ModeConfiguration("Standalone", repositoryConfig, false);
-```
-
-- 集群模式
-
-```java
-ClusterPersistRepositoryConfiguration repositoryConfig = new ClusterPersistRepositoryConfiguration("ZooKeeper", "my_schema", "localhost:2181", new Properties());
-ModeConfiguration modeConfig = new ModeConfiguration("Cluster", repositoryConfig, false);
-```
-
-### 构建真实数据源
-
-示例的数据库连接池为 HikariCP，可根据业务场景更换为其他数据库连接池。
-
-```java
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-
-// 配置第 1 个数据源
-HikariDataSource dataSource1 = new HikariDataSource();
-dataSource1.setDriverClassName("com.mysql.jdbc.Driver");
-dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
-dataSource1.setUsername("root");
-dataSource1.setPassword("");
-dataSourceMap.put("ds_1", dataSource1);
-
-// 配置第 2 个数据源
-HikariDataSource dataSource2 = new HikariDataSource();
-dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
-dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
-dataSource2.setUsername("root");
-dataSource2.setPassword("");
-dataSourceMap.put("ds_2", dataSource2);
-```
-
-### 构建规则
-
-规则属于 Apache ShardingSphere 的可插拔增量功能，请参见相应规则的配置手册。
-
-### 构建 ShardingSphere 数据源
-
-```java
-ModeConfiguration modeConfig = ... // 构建运行模式
-Map<String, DataSource> dataSourceMap = ... // 构建真实数据源
-Collection<RuleConfiguration> ruleConfigs = ... // 构建具体规则
-Properties props = ... // 构建属性配置
-DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource("my_schema", modeConfig, dataSourceMap, ruleConfigs, props);
-```
-
-## 使用 ShardingSphere 数据源
-
-通过 ShardingSphereDataSourceFactory 工厂创建的 ShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
-可通过 DataSource 选择使用原生 JDBC，或 JPA、Hibernate、MyBatis 等 ORM 框架。
-
-以原生 JDBC 使用方式为例：
-
-```java
-DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource("my_schema", modeConfig, dataSourceMap, ruleConfigs, props);
-String sql = "SELECT xxx FROM xxx WHERE xxx=? AND xxx=?";
-try (
-        Connection conn = dataSource.getConnection();
-        PreparedStatement ps = conn.prepareStatement(sql)) {
-    ps.setInt(1, 10);
-    ps.setInt(2, 1000);
-    try (ResultSet rs = ps.executeQuery()) {
-        while(rs.next()) {
-            // ...
-        }
-    }
-}
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.en.md
deleted file mode 100644
index f2dfeaa765..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/java-api.en.md
+++ /dev/null
@@ -1,113 +0,0 @@
-+++
-title = "Java API"
-weight = 1
-+++
-
-## Import Maven Dependency
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core</artifactId>
-    <version>${shardingsphere.version}</version>
-</dependency>
-```
-
-## Build Data Source
-
-ShardingSphere-JDBC Java API consists of schema name, mode configuration, data source map, rule configurations and properties.
-
-### Build Mode Configuration
-
-Mode configuration include 3 parameters, which are mode type, repository configuration and whether overwrite of local configuration to persist repository.
-
-Mode include memory, standalone and cluster.
-
-There are different repository configuration for each mode:
-
-- Memory mode do not need repository configuration;
-- Standalone and cluster mode need to customized repository configuration.
-
-Example for each mode are:
-
-- Memory Mode
-
-```java
-ModeConfiguration modeConfig = new ModeConfiguration("Memory", null, true);
-```
-
-- Standalone Mode
-
-```java
-StandalonePersistRepositoryConfiguration repositoryConfig = new StandalonePersistRepositoryConfiguration("Local", new Properties());
-ModeConfiguration modeConfig = new ModeConfiguration("Standalone", repositoryConfig, false);
-```
-
-- Cluster Mode
-
-```java
-ClusterPersistRepositoryConfiguration repositoryConfig = new ClusterPersistRepositoryConfiguration("ZooKeeper", "my_schema", "localhost:2181", new Properties());
-ModeConfiguration modeConfig = new ModeConfiguration("Cluster", repositoryConfig, false);
-```
-
-### Build Physical Data Sources
-
-The data sour
-The example connection pool is HikariCP, which can be replaced with other connection pools according to business scenarios.
-
-```java
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-
-// Configure the 1st data source
-HikariDataSource dataSource1 = new HikariDataSource();
-dataSource1.setDriverClassName("com.mysql.jdbc.Driver");
-dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
-dataSource1.setUsername("root");
-dataSource1.setPassword("");
-dataSourceMap.put("ds_1", dataSource1);
-        
-// Configure the 2ND data source
-HikariDataSource dataSource2 = new HikariDataSource();
-dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
-dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
-dataSource2.setUsername("root");
-dataSource2.setPassword("");
-dataSourceMap.put("ds_2", dataSource2);
-```
-
-### Build Rules
-
-Rules belong to pluggable features, please reference rule configuration manual. 
-
-### Build ShardingSphere Data Source
-
-```java
-ModeConfiguration modeConfig = ... // Build mode
-Map<String, DataSource> dataSourceMap = ... // Build physical data sources
-Collection<RuleConfiguration> ruleConfigs = ... // Build rules
-Properties props = ... // Build properties
-DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource("my_schema", modeConfig, dataSourceMap, ruleConfigs, props);
-```
-
-## Use ShardingSphere Data Source
-
-The ShardingSphereDataSource created by ShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
-Developer can choose to use native JDBC or ORM frameworks such as JPA, Hibernate or MyBatis through the DataSource.
-
-Take native JDBC usage as an example:
-
-```java
-DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource("my_schema", modeConfig, dataSourceMap, ruleConfigs, props);
-String sql = "SELECT xxx FROM xxx WHERE xxx=? AND xxx=?";
-try (
-        Connection conn = dataSource.getConnection();
-        PreparedStatement ps = conn.prepareStatement(sql)) {
-    ps.setInt(1, 10);
-    ps.setInt(2, 1000);
-    try (ResultSet rs = ps.executeQuery()) {
-        while(rs.next()) {
-            // ...
-        }
-    }
-}
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.cn.md
deleted file mode 100644
index 34bea762d1..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.cn.md
+++ /dev/null
@@ -1,68 +0,0 @@
-+++
-title = "使用 Spring Boot Starter"
-weight = 3
-+++
-
-## 引入 Maven 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
-    <version>${shardingsphere.version}</version>
-</dependency>
-```
-
-## 规则配置
-
-注：示例的数据库连接池为 HikariCP，可根据业务场景更换为其他数据库连接池。
-
-```properties
-# 配置真实数据源
-spring.shardingsphere.datasource.names=ds1,ds2
-
-# 配置第 1 个数据源
-spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
-spring.shardingsphere.datasource.ds1.username=root
-spring.shardingsphere.datasource.ds1.password=
-
-# 配置第 2 个数据源
-spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
-spring.shardingsphere.datasource.ds2.username=root
-spring.shardingsphere.datasource.ds2.password=
-
-# 规则请参见具体配置
-# ...
-```
-
-### 使用 JNDI 数据源
-
-如果计划使用 JNDI 配置数据库，在应用容器（如 Tomcat）中使用 ShardingSphere-JDBC 时，
-可使用 `spring.shardingsphere.datasource.${datasourceName}.jndiName` 来代替数据源的一系列配置。如：
-
-```properties
-# 配置真实数据源
-spring.shardingsphere.datasource.names=ds1,ds2
-
-# 配置第 1 个数据源
-spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
-# 配置第 2 个数据源
-spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
-
-# 规则请参见具体配置
-# ...
-```
-
-## 在 Spring 中使用 ShardingSphere 数据源
-
-直接通过注入的方式即可使用 ShardingSphereDataSource；
-或者将 ShardingSphereDataSource 配置在 JPA、Hibernate、MyBatis 等 ORM 框架中配合使用。
-
-```java
-@Resource
-private DataSource dataSource;
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.en.md
deleted file mode 100644
index c839a6da12..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-boot-starter.en.md
+++ /dev/null
@@ -1,63 +0,0 @@
-+++
-title = "Use Spring Boot Starter"
-weight = 3
-+++
-
-## Import Maven Dependency
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
-    <version>${shardingsphere.version}</version>
-</dependency>
-```
-
-## Configure Rule
-
-Note: The example connection pool is HikariCP, which can be replaced with other connection pools according to business scenarios.
-
-```properties
-# Configure actual data sources
-spring.shardingsphere.datasource.names=ds1,ds2
-
-# Configure the 1st data source
-spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
-spring.shardingsphere.datasource.ds1.username=root
-spring.shardingsphere.datasource.ds1.password=
-
-# Configure the 2nd data source
-spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
-spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
-spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
-spring.shardingsphere.datasource.ds2.username=root
-spring.shardingsphere.datasource.ds2.password=
-
-# Please reference concentrate rule configurations
-# ...
-```
-
-### Use JNDI Data Source
-
-If developer plan to use ShardingSphere-JDBC in Web Server (such as Tomcat) with JNDI data source, 
-`spring.shardingsphere.datasource.${datasourceName}.jndiName` can be used as an alternative to series of configuration of datasource. 
-For example:
-
-```properties
-# Configure actual data sources
-spring.shardingsphere.datasource.names=ds1,ds2
-
-# Configure the first data source
-spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
-# Configure the second data source
-spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
-
-# Please reference concentrate rule configurations
-# ...
-```
-
-## Use ShardingSphere Data Source in Spring
-
-Same with Spring Boot Starter.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.cn.md
deleted file mode 100644
index 575c942d89..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.cn.md
+++ /dev/null
@@ -1,54 +0,0 @@
-+++
-title = "使用 Spring 命名空间"
-weight = 4
-+++
-
-## 引入 Maven 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
-    <version>${shardingsphere.version}</version>
-</dependency>
-```
-
-## 规则配置
-
-注：示例的数据库连接池为 HikariCP，可根据业务场景更换为其他数据库连接池。
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                        http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                        http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd">
-    <!-- 配置真实数据源 -->
-    <!-- 配置第 1 个数据源 -->
-    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    <!-- 配置第 2 个数据源 -->
-    <bean id="ds2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds2" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <!-- 规则请参见具体配置 -->
-    
-    <!-- 配置 ShardingSphereDataSource -->
-    <shardingsphere:data-source id="shardingDataSource" data-source-names="ds1, ds2" rule-refs="fooRule, barRule" />
-</beans>
-```
-
-## 在 Spring 中使用 ShardingSphere 数据源
-
-使用方式同 Spring Boot Starter。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.en.md
deleted file mode 100644
index 8b3c4baf6e..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/spring-namespace.en.md
+++ /dev/null
@@ -1,54 +0,0 @@
-+++
-title = "Use Spring Namespace"
-weight = 4
-+++
-
-## Import Maven Dependency
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
-    <version>${shardingsphere.version}</version>
-</dependency>
-```
-
-## Configure Rule
-
-Note: The example connection pool is HikariCP, which can be replaced with other connection pools according to business scenarios.
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                        http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                        http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd">
-    <!-- Configure actual data sources -->
-    <!-- Configure the 1st data source -->
-    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    <!-- Configure the 2nd data source -->
-    <bean id="ds2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds2" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-
-    <!-- Please reference concentrate rule configurations -->
-
-    <!-- Configure ShardingSphereDataSource -->
-    <shardingsphere:data-source id="shardingDataSource" data-source-names="ds0, ds1" rule-refs="fooRule, barRule" />
-</beans>
-```
-
-## Use ShardingSphere Data Source in Spring
-
-Same with Spring Boot Starter.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.cn.md
deleted file mode 100644
index b67c578832..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.cn.md
+++ /dev/null
@@ -1,63 +0,0 @@
-+++
-title = "使用 YAML 配置"
-weight = 2
-+++
-
-## 引入 Maven 依赖
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core</artifactId>
-    <version>${shardingsphere.version}</version>
-</dependency>
-```
-
-## 构建数据源
-
-### YAML 配置
-
-ShardingSphere-JDBC 的 YAML 配置文件通过 Schema 名称、运行模式、数据源集合、规则集合以及属性配置组成。
-
-注：示例的数据库连接池为 HikariCP，可根据业务场景更换为其他数据库连接池。
-
-```yaml
-schemaName: my_schema
-
-mode:
-  type: Memory
-
-dataSources:
-  # 配置第 1 个数据源
-  ds_1: !!com.zaxxer.hikari.HikariDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    jdbcUrl: jdbc:mysql://localhost:3306/ds_1
-    username: root
-    password:
-  # 配置第 2 个数据源
-  ds_2: !!com.zaxxer.hikari.HikariDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    jdbcUrl: jdbc:mysql://localhost:3306/ds_2
-    username: root
-    password: 
-
-rules:
-- !FOO_XXX
-    ...
-- !BAR_XXX
-    ...
-
-props:
-  key_1: value_1
-  key_2: value_2
-```
-
-### 构建 ShardingSphere 数据源
-
-```java
-DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile);
-```
-
-## 使用 ShardingSphere 数据源
-
-使用方式同 Java API。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.en.md
deleted file mode 100644
index b0ac5eb4dd..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/standard/yaml.en.md
+++ /dev/null
@@ -1,63 +0,0 @@
-+++
-title = "Use YAML"
-weight = 2
-+++
-
-## Import Maven Dependency
-
-```xml
-<dependency>
-    <groupId>org.apache.shardingsphere</groupId>
-    <artifactId>shardingsphere-jdbc-core</artifactId>
-    <version>${shardingsphere.version}</version>
-</dependency>
-```
-
-## Build Data Source
-
-### YAML Configuration
-
-ShardingSphere-JDBC YAML file consists of schema name, mode configuration, data source map, rule configurations and properties.
-
-Note: The example connection pool is HikariCP, which can be replaced with other connection pools according to business scenarios.
-
-```yaml
-schemaName: my_schema
-
-mode:
-  type: Memory
-
-dataSources:
-  # Configure 1st data source
-  ds_1: !!com.zaxxer.hikari.HikariDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    jdbcUrl: jdbc:mysql://localhost:3306/ds_1
-    username: root
-    password:
-  # Configure 2nd data source
-  ds_2: !!com.zaxxer.hikari.HikariDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    jdbcUrl: jdbc:mysql://localhost:3306/ds_2
-    username: root
-    password:
-
-rules:
-  - !FOO_XXX
-    ...
-  - !BAR_XXX
-    ...
-
-props:
-  key_1: value_1
-  key_2: value_2
-```
-
-### Build ShardingSphere Data Source
-
-```java
-DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile);
-```
-
-## Use ShardingSphere Data Source
-
-Same with Java API.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/_index.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/_index.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/_index.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/_index.en.md
similarity index 61%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/_index.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/_index.en.md
index c941c9aca9..562b1ef67a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/_index.en.md
@@ -1,5 +1,5 @@
 +++
-title = "Built-in Algorithm"
+title = "Builtin Algorithm"
 weight = 5
 chapter = true
 +++
@@ -7,12 +7,12 @@ chapter = true
 ## Introduction
 
 Apache ShardingSphere allows developers to implement algorithms via SPI;
-At the same time, Apache ShardingSphere also provides a couple of built-in algorithms for simplify developers.
+At the same time, Apache ShardingSphere also provides a couple of builtin algorithms for simplify developers.
 
 ## Usage
 
-The built-in algorithms are configured by type and props. 
+The builtin algorithms are configured by type and props. 
 Type is defined by the algorithm in SPI, and props is used to deliver the customized parameters of the algorithm.
 
 No matter which configuration type is used, the configured algorithm is named and passed to the corresponding rule configuration.
-This chapter distinguishes and lists all the built-in algorithms of Apache ShardingSphere according to its functions for developers' reference.
+This chapter distinguishes and lists all the builtin algorithms of Apache ShardingSphere according to its functions for developers' reference.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt.cn.md
similarity index 75%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt.cn.md
index 653c697662..9ce66d6d51 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "加密算法"
-weight = 4
+weight = 5
 +++
 
 ## MD5 加密算法
@@ -15,7 +15,7 @@ weight = 4
 
 可配置属性：
 
-| *名称*         | *数据类型* | *说明*        |
+| *名称*         | *数据类型* | *说明*         |
 | ------------- | --------- | ------------- |
 | aes-key-value | String    | AES 使用的 KEY |
 
@@ -25,6 +25,6 @@ weight = 4
 
 可配置属性：
 
-| *名称*         | *数据类型* | *说明*        |
+| *名称*         | *数据类型* | *说明*         |
 | ------------- | --------- | ------------- |
 | rc4-key-value | String    | RC4 使用的 KEY |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt.en.md
similarity index 97%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt.en.md
index c4268ea249..c4d491d70e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Encryption Algorithm"
-weight = 4
+weight = 5
 +++
 
 ## MD5 Encrypt Algorithm
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen.cn.md
new file mode 100644
index 0000000000..76f76b49dc
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen.cn.md
@@ -0,0 +1,22 @@
++++
+title = "分布式序列算法"
+weight = 3
++++
+
+## 雪花算法
+
+类型：SNOWFLAKE
+
+可配置属性：
+
+| *属性名称*                                     | *数据类型* | *说明*                                                                                                                                                                               | *默认值* |
+| --------------------------------------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
+| worker-id (?)                                 | long     | 工作机器唯一标识                                                                                                                                                                       | 0       |
+| max-vibration-offset (?)                      | int      | 最大抖动上限值，范围[0, 4096)。注：若使用此算法生成值作分片值，建议配置此属性。此算法在不同毫秒内所生成的 key 取模 2^n (2^n一般为分库或分表数) 之后结果总为 0 或 1。为防止上述分片问题，建议将此属性值配置为 (2^n)-1 | 1      |
+| max-tolerate-time-difference-milliseconds (?) | long     | 最大容忍时钟回退时间，单位：毫秒                                                                                                                                                          | 10 毫秒 |
+
+## UUID
+
+类型：UUID
+
+可配置属性：无
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen.en.md
similarity index 99%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen.en.md
index 220d8cb3de..0ffd010c53 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Key Generate Algorithm"
-weight = 2
+weight = 3
 +++
 
 ## Snowflake
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance.cn.md
similarity index 93%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance.cn.md
index 64ef03d56a..6be093873f 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "负载均衡算法"
-weight = 3
+weight = 4
 +++
 
 ## 轮询算法
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance.en.md
similarity index 93%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance.en.md
index c2204bbddc..a75af6e37b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Load Balance Algorithm"
-weight = 3
+weight = 4
 +++
 
 ## Round Robin Algorithm
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/metadata-repository.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/metadata-repository.cn.md
new file mode 100644
index 0000000000..136dcdf649
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/metadata-repository.cn.md
@@ -0,0 +1,6 @@
++++
+title = "元数据持久化仓库"
+weight = 1
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/metadata-repository.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/metadata-repository.en.md
new file mode 100644
index 0000000000..88cfef4e68
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/metadata-repository.en.md
@@ -0,0 +1,6 @@
++++
+title = "Metadata Repository"
+weight = 1
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.cn.md
similarity index 98%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.cn.md
index a0310a2638..b1e603a496 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "影子算法"
-weight = 5
+weight = 6
 +++
 
 ## 列影子算法
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.en.md
similarity index 99%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.en.md
index 178fdd8b95..8934fd2b43 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Shadow Algorithm"
-weight = 5
+weight = 6
 +++
 
 ## Column Shadow Algorithm
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.cn.md
new file mode 100644
index 0000000000..e051bfdd5c
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.cn.md
@@ -0,0 +1,134 @@
++++
+title = "分片算法"
+weight = 2
++++
+
+## 自动分片算法
+
+### 取模分片算法
+
+类型：MOD
+
+可配置属性：
+
+| *属性名称*      | *数据类型* | *说明*  |
+| -------------- | -------- | ------ |
+| sharding-count | int      | 分片数量 |
+
+### 哈希取模分片算法
+
+类型：HASH_MOD
+
+可配置属性：
+
+| *属性名称*      | *数据类型* | *说明*  |
+| -------------- | -------- | ------ |
+| sharding-count | int      | 分片数量 |
+
+### 基于分片容量的范围分片算法
+
+类型：VOLUME_RANGE
+
+可配置属性：
+
+| *属性名称*       | *数据类型* | *说明*                    |
+| --------------- | -------- | ------------------------ |
+| range-lower     | long     | 范围下界，超过边界的数据会报错 |
+| range-upper     | long     | 范围上界，超过边界的数据会报错 |
+| sharding-volume | long     | 分片容量                   |
+
+### 基于分片边界的范围分片算法
+
+类型：BOUNDARY_RANGE
+
+可配置属性：
+
+| *属性名称*       | *数据类型* | *说明*                           |
+| --------------- | -------- | ------------------------------- |
+| sharding-ranges | String   | 分片的范围边界，多个范围边界以逗号分隔 |
+
+### 自动时间段分片算法
+
+类型：AUTO_INTERVAL
+
+可配置属性：
+
+| *属性名称*        | *数据类型* | *说明*                                         |
+| ---------------- | -------- | --------------------------------------------- |
+| datetime-lower   | String   | 分片的起始时间范围，时间戳格式：yyyy-MM-dd HH:mm:ss |
+| datetime-upper   | String   | 分片的结束时间范围，时间戳格式：yyyy-MM-dd HH:mm:ss |
+| sharding-seconds | long     | 单一分片所能承载的最大时间，单位：秒                 |
+
+## 标准分片算法
+
+Apache ShardingSphere 内置的标准分片算法实现类包括：
+
+### 行表达式分片算法
+
+使用 Groovy 的表达式，提供对 SQL 语句中的 `=` 和 `IN` 的分片操作支持，只支持单分片键。
+对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的 Java 代码开发，如: `t_user_$->{u_id % 8}` 表示 `t_user` 表根据 `u_id` 模 8，而分成 8 张表，表名称为 `t_user_0` 到 `t_user_7`。
+详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
+
+类型：INLINE
+
+可配置属性：
+
+| *属性名称*                                  | *数据类型* | *说明*                                           | *默认值* |
+| ------------------------------------------ | -------- | ----------------------------------------------- | ------- |
+| algorithm-expression                       | String   | 分片算法的行表达式                                 |         |
+| allow-range-query-with-inline-sharding (?) | boolean  | 是否允许范围查询。注意：范围查询会无视分片策略，进行全路由 | false   |
+
+### 时间范围分片算法
+
+类型：INTERVAL
+
+可配置属性：
+
+| *属性名称*                    | *数据类型* | *说明*                                                                                                            | *默认值* |
+| ---------------------------- | -------- | ---------------------------------------------------------------------------------------------------------------- | ------- |
+| datetime-pattern             | String   | 分片键的时间戳格式，必须遵循 Java DateTimeFormatter 的格式。例如：yyyy-MM-dd HH:mm:ss                                    |         |
+| datetime-lower               | String   | 时间分片下界值，格式与 `datetime-pattern` 定义的时间戳格式一致                                                           |         |
+| datetime-upper (?)           | String   | 时间分片上界值，格式与 `datetime-pattern` 定义的时间戳格式一致                                                           | 当前时间 |
+| sharding-suffix-pattern      | String   | 分片数据源或真实表的后缀格式，必须遵循 Java DateTimeFormatter 的格式，必须和 `datetime-interval-unit` 保持一致。例如：yyyyMM |         |
+| datetime-interval-amount (?) | int      | 分片键时间间隔，超过该时间间隔将进入下一分片                                                                             | 1       |
+| datetime-interval-unit (?)   | String   | 分片键时间间隔单位，必须遵循 Java ChronoUnit 的枚举值。例如：MONTHS                                                      | DAYS    |
+
+## 复合分片算法
+
+### 复合行表达式分片算法
+
+详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
+
+类型：COMPLEX_INLINE
+
+| *属性名称*                                 | *数据类型* | *说明*                                           | *默认值* |
+| ----------------------------------------- | -------- | ----------------------------------------------- | ------- |
+| sharding-columns (?)                      | String   | 分片列名称，多个列用逗号分隔。如不配置无法则不能校验      |         |
+| algorithm-expression                      | String   | 分片算法的行表达式                                 |         |
+| allow-range-query-with-inline-sharding (?)| boolean  | 是否允许范围查询。注意：范围查询会无视分片策略，进行全路由 | false   |
+
+
+## Hint 分片算法
+
+### Hint 行表达式分片算法
+
+详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
+
+类型：HINT_INLINE
+
+| *属性名称*                 | *数据类型* | *说明*           | *默认值*  |
+| ------------------------ | --------- | --------------- | -------- |
+| algorithm-expression (?) | String    | 分片算法的行表达式 | ${value} |
+
+## 自定义类分片算法
+
+通过配置分片策略类型和算法类名，实现自定义扩展。
+
+类型：CLASS_BASED
+
+可配置属性：
+
+| *属性名称*           | *数据类型* | *说明*                                               |
+| ------------------ | --------- | ---------------------------------------------------- |
+| strategy           | String    | 分片策略类型，支持 STANDARD、COMPLEX 或 HINT（不区分大小写）|
+| algorithmClassName | String    | 分片算法全限定名                                       |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.en.md
similarity index 99%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.en.md
index cae69c32af..3d61b8e989 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Sharding Algorithm"
-weight = 1
+weight = 2
 +++
 
 ## Auto Sharding Algorithm
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.cn.md
deleted file mode 100644
index 9aa9f3f311..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.cn.md
+++ /dev/null
@@ -1,20 +0,0 @@
-+++
-title = "配置手册"
-weight = 2
-chapter = true
-+++
-
-配置是 ShardingSphere-JDBC 中唯一与应用开发者交互的模块，通过它可以快速清晰的理解 ShardingSphere-JDBC 所提供的功能。
-
-本章节是 ShardingSphere-JDBC 的配置参考手册，需要时可当做字典查阅。
-
-ShardingSphere-JDBC 提供了 4 种配置方式，用于不同的使用场景。
-通过配置，应用开发者可以灵活的使用数据分片、读写分离、数据加密、影子库等功能，并且能够叠加使用。
-
-混合规则配置与单一规则配置一脉相承，只是从配置单一的规则项到配置多个规则项的异同。
-
-需要注意的是，规则项之间的叠加使用是通过数据源名称和表名称关联的。
-如果前一个规则是面向数据源聚合的，下一个规则在配置数据源时，则需要使用前一个规则配置的聚合后的逻辑数据源名称；
-同理，如果前一个规则是面向表聚合的，下一个规则在配置表时，则需要使用前一个规则配置的聚合后的逻辑表名称。
-
-用户不必通读本章节，可以在需要时当作字典查阅。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md
deleted file mode 100644
index 7b1f95fd74..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/_index.en.md
+++ /dev/null
@@ -1,21 +0,0 @@
-+++
-title = "Configuration Manual"
-weight = 2
-chapter = true
-+++
-
-Configuration is the only module in ShardingSphere-JDBC that interacts with application developers, 
-through which developers can quickly and clearly understand the functions provided by ShardingSphere-JDBC.
-
-This chapter is a configuration manual for ShardingSphere-JDBC, which can also be referred to as a dictionary if necessary.
-
-ShardingSphere-JDBC has provided 4 kinds of configuration methods for different situations. 
-By configuration, application developers can flexibly use data sharding, readwrite-splitting, data encryption, shadow database or the combination of them.
-
-Mixed rule configurations are very similar to single rule configuration, except for the differences from single rule to multiple rules.
-
-It should be noted that the superposition between rules are data source and table name related.
-If the previous rule is data source oriented aggregation, the next rule needs to use the aggregated logical data source name configured by the previous rule when configuring the data source;
-Similarly, if the previous rule is table oriented aggregation, the next rule needs to use the aggregated logical table name configured by the previous rule when configuring the table.
-
-Users do not have to read this chapter through, but can refer to it as a dictionary when necessary.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen.cn.md
deleted file mode 100644
index c3a860e096..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen.cn.md
+++ /dev/null
@@ -1,22 +0,0 @@
-+++
-title = "分布式序列算法"
-weight = 2
-+++
-
-## 雪花算法
-
-类型：SNOWFLAKE
-
-可配置属性：
-
-| *属性名称*                                     | *数据类型* | *说明*                                                                                                                                                                                         | *默认值* |
-| --------------------------------------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ |
-| worker-id (?)                                 | long      | 工作机器唯一标识                                                                                                                                                                                 | 0      |
-| max-vibration-offset (?)                      | int       | 最大抖动上限值，范围[0, 4096)。注：若使用此算法生成值作分片值，建议配置此属性。此算法在不同毫秒内所生成的 key 取模 2^n (2^n一般为分库或分表数) 之后结果总为 0 或 1。为防止上述分片问题，建议将此属性值配置为 (2^n)-1 | 1      |
-| max-tolerate-time-difference-milliseconds (?) | long      | 最大容忍时钟回退时间，单位：毫秒                                                                                                                                                                   | 10 毫秒 |
-
-## UUID
-
-类型：UUID
-
-可配置属性：无
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.cn.md
deleted file mode 100644
index cd8d012808..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding.cn.md
+++ /dev/null
@@ -1,135 +0,0 @@
-+++
-title = "分片算法"
-weight = 1
-+++
-
-## 自动分片算法
-
-### 取模分片算法
-
-类型：MOD
-
-可配置属性：
-
-| *属性名称*      | *数据类型* | *说明*  |
-| -------------- | --------- | ------- |
-| sharding-count | int       | 分片数量 |
-
-### 哈希取模分片算法
-
-类型：HASH_MOD
-
-可配置属性：
-
-| *属性名称*      | *数据类型* | *说明*  |
-| -------------- | --------- | ------- |
-| sharding-count | int       | 分片数量 |
-
-### 基于分片容量的范围分片算法
-
-类型：VOLUME_RANGE
-
-可配置属性：
-
-| *属性名称*       | *数据类型* | *说明*                      |
-| --------------- | --------- | -------------------------- |
-| range-lower     | long      | 范围下界，超过边界的数据会报错 |
-| range-upper     | long      | 范围上界，超过边界的数据会报错 |
-| sharding-volume | long      | 分片容量                    |
-
-### 基于分片边界的范围分片算法
-
-类型：BOUNDARY_RANGE
-
-可配置属性：
-
-| *属性名称*       | *数据类型* | *说明*                            |
-| --------------- | --------- | --------------------------------- |
-| sharding-ranges | String    | 分片的范围边界，多个范围边界以逗号分隔 |
-
-### 自动时间段分片算法
-
-类型：AUTO_INTERVAL
-
-可配置属性：
-
-| *属性名称*        | *数据类型* | *说明*                                          |
-| ---------------- | --------- | ----------------------------------------------- |
-| datetime-lower   | String    | 分片的起始时间范围，时间戳格式：yyyy-MM-dd HH:mm:ss |
-| datetime-upper   | String    | 分片的结束时间范围，时间戳格式：yyyy-MM-dd HH:mm:ss |
-| sharding-seconds | long      | 单一分片所能承载的最大时间，单位：秒                |
-
-## 标准分片算法
-
-Apache ShardingSphere 内置的标准分片算法实现类包括：
-
-### 行表达式分片算法
-
-使用 Groovy 的表达式，提供对 SQL 语句中的 `=` 和 `IN` 的分片操作支持，只支持单分片键。
-对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的 Java 代码开发，如: `t_user_$->{u_id % 8}` 表示 `t_user` 表根据 `u_id` 模 8，而分成 8 张表，表名称为 `t_user_0` 到 `t_user_7`。
-详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
-
-类型：INLINE
-
-可配置属性：
-
-| *属性名称*                                 | *数据类型* | *说明*                                              | *默认值* |
-| ----------------------------------------- | --------- | --------------------------------------------------- | ------- |
-| algorithm-expression                      | String    | 分片算法的行表达式                                    | -       |
-| allow-range-query-with-inline-sharding (?)| boolean   | 是否允许范围查询。注意：范围查询会无视分片策略，进行全路由 | false   |
-
-### 时间范围分片算法
-
-类型：INTERVAL
-
-可配置属性：
-
-| *属性名称*                    | *数据类型* | *说明*                                                                                                                     | *默认值* |
-| ---------------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------- | ------- |
-| datetime-pattern             | String    | 分片键的时间戳格式，必须遵循 Java DateTimeFormatter 的格式。例如：yyyy-MM-dd HH:mm:ss                                           | -       |
-| datetime-lower               | String    | 时间分片下界值，格式与 `datetime-pattern` 定义的时间戳格式一致                                                                  | -       |
-| datetime-upper (?)           | String    | 时间分片上界值，格式与 `datetime-pattern` 定义的时间戳格式一致                                                                  | 当前时间 |
-| sharding-suffix-pattern      | String    | 分片数据源或真实表的后缀格式，必须遵循 Java DateTimeFormatter 的格式，必须和 `datetime-interval-unit` 保持一致。例如：yyyyMM       | -       |
-| datetime-interval-amount (?) | int       | 分片键时间间隔，超过该时间间隔将进入下一分片                                                                                    | 1       |
-| datetime-interval-unit (?)   | String    | 分片键时间间隔单位，必须遵循 Java ChronoUnit 的枚举值。例如：MONTHS                                                             | DAYS    |
-
-## 复合分片算法
-
-### 复合行表达式分片算法
-
-详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
-
-类型：COMPLEX_INLINE
-
-| *属性名称*                                 | *数据类型* | *说明*                                              | *默认值* |
-| ----------------------------------------- | --------- | --------------------------------------------------- | ------- |
-| sharding-columns (?)                      | String    | 分片列名称，多个列用逗号分隔。如不配置无法则不能校验       | -       |
-| algorithm-expression                      | String    | 分片算法的行表达式                                    | -       |
-| allow-range-query-with-inline-sharding (?)| boolean   | 是否允许范围查询。注意：范围查询会无视分片策略，进行全路由 | false   |
-
-
-## Hint 分片算法
-
-### Hint 行表达式分片算法
-
-详情请参见[行表达式](/cn/features/sharding/concept/inline-expression/)。
-
-类型：HINT_INLINE
-
-| *属性名称*                                 | *数据类型* | *说明*                                              | *默认值* |
-| ----------------------------------------- | --------- | --------------------------------------------------- | ------- |
-| algorithm-expression (?)                  | String    | 分片算法的行表达式                                    | ${value}|
-
-## 自定义类分片算法
-
-通过配置分片策略类型和算法类名，实现自定义扩展。
-
-类型：CLASS_BASED
-
-可配置属性：
-
-| *属性名称*           | *数据类型* | *说明*                                              |
-| ------------------ | --------- | -------------------------------------------------- |
-| strategy           | String    | 分片策略类型，支持STANDARD、COMPLEX或HINT（不区分大小写） |
-| algorithmClassName | String    | 分片算法全限定名                                      |
-
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.cn.md
deleted file mode 100644
index d02b3a7685..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.cn.md
+++ /dev/null
@@ -1,72 +0,0 @@
-+++
-title = "Java API"
-weight = 1
-chapter = true
-+++
-
-## 简介
-
-Java API 是 ShardingSphere-JDBC 中所有配置方式的基础，其他配置最终都将转化成为 Java API 的配置方式。
-
-Java API 是最复杂也是最灵活的配置方式，适合需要通过编程进行动态配置的场景下使用。
-
-## 使用方式
-
-### 创建简单数据源
-
-通过 ShardingSphereDataSourceFactory 工厂创建的 ShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
-
-```java
-// 构建数据源
-Map<String, DataSource> dataSourceMap = // ...
-
-// 构建配置规则
-Collection<RuleConfiguration> configurations = // ...
-
-// 构建属性配置
-Properties props = // ...
-
-DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props);
-```
-
-### 创建携带治理功能的数据源
-
-通过 GovernanceShardingSphereDataSourceFactory 工厂创建的 GovernanceShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
-
-```java
-// 构建数据源
-Map<String, DataSource> dataSourceMap = // ...
-
-// 构建配置规则
-Collection<RuleConfiguration> configurations = // ...
-
-// 构建属性配置
-Properties props = // ...
-
-// 构建注册中心配置对象
-GovernanceConfiguration governanceConfig = // ...
-
-DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props, governanceConfig);
-```
-
-### 使用数据源
-
-可通过 DataSource 选择使用原生 JDBC，或JPA， MyBatis 等 ORM 框架。
-
-以原生 JDBC 使用方式为例：
-
-```java
-DataSource dataSource = // 通过Apache ShardingSphere 工厂创建的数据源
-String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
-try (
-        Connection conn = dataSource.getConnection();
-        PreparedStatement ps = conn.prepareStatement(sql)) {
-    ps.setInt(1, 10);
-    ps.setInt(2, 1000);
-    try (ResultSet rs = preparedStatement.executeQuery()) {
-        while(rs.next()) {
-            // ...
-        }
-    }
-}
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.en.md
deleted file mode 100644
index b914d72c4c..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/_index.en.md
+++ /dev/null
@@ -1,74 +0,0 @@
-+++
-title = "Java API"
-weight = 1
-chapter = true
-+++
-
-## Introduction
-
-Java API is the foundation of all configuration methods in ShardingSphere-JDBC, 
-and other configurations will eventually be transformed into Java API configuration methods.
-
-The Java API is the most complex and flexible configuration method, which is suitable for the scenarios requiring dynamic configuration through programming.
-
-## Usage
-
-### Create Simple DataSource
-
-The ShardingSphereDataSource created by ShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
-
-```java
-// Build data source map
-Map<String, DataSource> dataSourceMap = // ...
-
-// Build rule configurations
-Collection<RuleConfiguration> configurations = // ...
-
-// Build properties
-Properties props = // ...
-
-DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props);
-```
-
-### Create Governance DataSource
-
-The GovernanceShardingSphereDataSource created by GovernanceShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
-
-
-```java
-// Build data source map
-Map<String, DataSource> dataSourceMap = // ...
-
-// Build rule configurations
-Collection<RuleConfiguration> configurations = // ...
-
-// Build properties
-Properties props = // ...
-
-// Build governance configuration
-GovernanceConfiguration governanceConfig = // ...
-
-DataSource dataSource = GovernanceShardingSphereDataSourceFactory.createDataSource(dataSourceMap, configurations, props, governanceConfig);
-```
-
-### Use DataSource
-
-Developer can choose to use native JDBC or ORM frameworks such as JPA or MyBatis through the DataSource.
-
-Take native JDBC usage as an example:
-
-```java
-DataSource dataSource = // Use Apache ShardingSphere factory to create DataSource
-String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
-try (
-        Connection conn = dataSource.getConnection();
-        PreparedStatement ps = conn.prepareStatement(sql)) {
-    ps.setInt(1, 10);
-    ps.setInt(2, 1000);
-    try (ResultSet rs = preparedStatement.executeQuery()) {
-        while(rs.next()) {
-            // ...
-        }
-    }
-}
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mode.cn.md
deleted file mode 100644
index 1dd52aa11f..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mode.cn.md
+++ /dev/null
@@ -1,90 +0,0 @@
-+++
-title = "Mode"
-weight = 5
-+++
-
-## 配置项说明
-
-### Memory 模式
-
-*配置入口*
-
-类名称：org.apache.shardingsphere.infra.config.mode.ModeConfiguration
-
-可配置属性：
-
-| *名称*                           | *数据类型*                    | *说明*                                                 |
-| ---------------------------     | --------------------------- | ------------------------------------------------------ |
-| type (?)                        | String                      | Memory                                                 |
-
-### Standalone 模式
-
-*配置入口*
-
-类名称：org.apache.shardingsphere.infra.config.mode.ModeConfiguration
-
-| *名称*                       | *数据类型*                      | *说明*                                                       |
-| --------------------------- | -------------------------------| ------------------------------------------------------------ |
-| type                        | String                         | Standalone                                                   |
-| repository                  | PersistRepositoryConfiguration | 配置 StandalonePersistRepositoryConfiguration                 |
-| overwrite                   | boolean                        | 本地配置是否覆盖文件配置，如果可覆盖，每次启动都以本地配置为准        |
-
-*StandalonePersistRepositoryConfiguration配置*
-
-类名称：org.apache.shardingsphere.mode.repository.standalone.StandalonePersistRepositoryConfiguration
-
-可配置属性：
-
-| *名称*         | *数据类型* | *说明*                                                                    |
-| ------------- | ---------- | -----------------------------------------------------------------------  |
-| type          | String     | Standalone 配置持久化类型。如：File                                         |
-| props (?)     | Properties | Standalone 配置持久化的属性 如：path 路径                                   |
-
-Standalone 属性配置：
-
-| *名称*                            | *数据类型* | *说明*                | *默认值*             |
-| -------------------------------- | --------- | -------------------- | -------------------- |
-| path                            | String    | 配置信息存储路径       | .shardingsphere 目录  |
-
-### Cluster 模式
-
-*配置入口*
-
-类名称：org.apache.shardingsphere.infra.config.mode.ModeConfiguration
-
-可配置属性：
-
-| *名称*                       | *数据类型*                    | *说明*                                                 |
-| --------------------------- | --------------------------- | ------------------------------------------------------ |
-| type                        | String                      | Cluster                                                |
-| repository                  | RegistryCenterConfiguration | 配置 Cluster ClusterPersistRepositoryConfiguration       |
-| overwrite                   | boolean                     | 本地配置是否覆盖配置中心配置，如果可覆盖，每次启动都以本地配置为准 |
-
-*ClusterPersistRepositoryConfiguration配置*
-
-类名称：org.apache.shardingsphere.mode.repository.cluster.ClusterPersistRepositoryConfiguration
-
-可配置属性：
-
-| *名称*         | *数据类型* | *说明*                                                                                   |
-| ------------- | ---------- | -------------------------------------------------------------------------------------- |
-| type          | String     | Cluster mode 类型，如：Zookeeper, Etcd                                                  |
-| namespace     | String     | Cluster mode 实例命名空间 如：cluster-sharding-mode                                      |
-| server-lists  | String     | Zookeeper / Etcd服务列表，包括 IP 地址和端口号，多个地址用逗号分隔，如: host1:2181,host2:2181 |
-| props         | Properties | 配置本实例需要的其他参数，例如 ZooKeeper 的连接参数等                                        |
-
-ZooKeeper 属性配置
-
-| *名称*                            | *数据类型* | *说明*                | *默认值* |
-| -------------------------------- | --------- | -------------------- | ------- |
-| digest (?)                       | String    | 连接注册中心的权限令牌   | 无需验证  |
-| operationTimeoutMilliseconds (?) | int       | 操作超时的毫秒数        | 500 毫秒 |
-| maxRetries (?)                   | int       | 连接失败后的最大重试次数  | 3 次    |
-| retryIntervalMilliseconds (?)    | int       | 重试间隔毫秒数          | 500 毫秒 |
-| timeToLiveSeconds (?)            | int       | 临时节点存活秒数        | 60 秒    |
-
-Etcd 属性配置
-
-| *名称*                 | *数据类型* | *说明*     | *默认值* |
-| --------------------- | --------- | ---------- | ------ |
-| timeToLiveSeconds (?) | long      | 数据存活秒数 | 30秒    |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mode.en.md
deleted file mode 100644
index 1d7b68d310..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mode.en.md
+++ /dev/null
@@ -1,91 +0,0 @@
-+++
-title = "Mode"
-weight = 5
-+++
-
-## Configuration Item Explanation
-
-### Memory mode
-
-*Configuration Entrance*
-
-Class name: org.apache.shardingsphere.infra.config.mode.ModeConfiguration
-
-Attributes:
-
-| *Name*                      | *Data Type*                  | *Description*                                                                                                                             |
-| --------------------------- | ---------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
-| type (?)                    | String                       | Memory                                                                                                                                    |
-
-### Standalone mode
-
-*Configuration Entrance*
-
-Class name: org.apache.shardingsphere.infra.config.mode.ModeConfiguration
-
-| *Name*      | *Data Type*                    | *Description*                                                                                                                       |
-| ----------- | ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------|
-| type        | String                         | Standalone     　                                                                                                                    |
-| repository  | PersistRepositoryConfiguration | Configuration StandalonePersistRepositoryConfiguration                                                                               |
-| overwrite   | boolean                        | Local configurations overwrite file configurations or not; if they overwrite, each start takes reference of local configurations    |
-
-*StandalonePersistRepositoryConfiguration Configuration*
-
-Class name: org.apache.shardingsphere.mode.repository.standalone.StandalonePersistRepositoryConfiguration
-
-Attributes:
-
-| *Name*         | *Data Type* | *Description*                                        |
-| ------------- | ---------- | ------------------------------------------------------|
-| type          | String     | Standalone Configuration persist type, such as: File  |
-| props (?)     | Properties | Configuration persist properties, such as: path      |
-
-Standalone Properties Configuration:
-
-| *Name*                            | *Data Type* | *Description*                           | *Default*                 |
-| --------------------------------  | ---------   | --------------------------------------- | ------------------------  |
-| path                             | String       | Configuration information persist path  | .shardingsphere directory |
-
-### Cluster mode
-
-*Configuration Entrance*
-
-Class name: org.apache.shardingsphere.infra.config.mode.ModeConfiguration
-
-Attributes:
-
-| *Name*      | *Data Type*                    | *Description*                                                                                                                              |
-| ----------- | ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------|
-| type        | String                         | Cluster    　                                                                                                                              |
-| repository  | PersistRepositoryConfiguration | Configuration ClusterPersistRepositoryConfiguration                                                                                        |
-| overwrite   | boolean                        | Local configurations overwrite config center configurations or not; if they overwrite, each start takes reference of local configurations  |
-
-*ClusterPersistRepositoryConfiguration Configuration*
-
-Class name: org.apache.shardingsphere.mode.repository.cluster.ClusterPersistRepositoryConfiguration
-
-Attributes:
-
-| *Name*         | *Data Type* | *Description*                                                                                                     |
-| ------------- | ---------- | ------------------------------------------------------------------------------------------------------------------- |
-| type          | String     | Cluster mode typ, such as: Zookeeper, Etcd                                                                          |
-| namespace     | String     | Cluster mode instance namespace, such as: cluster-sharding-mode                                                     |
-| server-lists  | String     | Zookeeper or Etcd server list，including IP and port number, use commas to separate, such as: host1:2181,host2:2181 |
-| props         | Properties | Properties for center instance config, such as options of zookeeper                                                |
-
-ZooKeeper Properties Configuration
-
-| *Name*                           | *Data Type* | *Description*                                  | *Default Value*       |
-| -------------------------------- | ----------- | ---------------------------------------------- | --------------------- |
-| digest (?)                       | String      | Connect to authority tokens in registry center | No need for authority |
-| operationTimeoutMilliseconds (?) | int         | The operation timeout milliseconds             | 500 milliseconds      |
-| maxRetries (?)                   | int         | The maximum retry count                        | 3                     |
-| retryIntervalMilliseconds (?)    | int         | The retry interval milliseconds                | 500 milliseconds      |
-| timeToLiveSeconds (?)            | int         | Time to live seconds for ephemeral nodes       | 60 seconds            |
-
-
-Etcd Properties Configuration
-
-| *Name*                | *Data Type* | *Description*                         | *Default Value* |
-| --------------------- | ----------- | ------------------------------------- | --------------- |
-| timeToLiveSeconds (?) | long        | Time to live seconds for data persist | 30 seconds      |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/shadow.cn.md
deleted file mode 100644
index c409b3b50d..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/shadow.cn.md
+++ /dev/null
@@ -1,44 +0,0 @@
-+++
-title = "影子库"
-weight = 4
-+++
-
-## 配置入口
-
-类名称：org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
-
-可配置属性：
-
-| *名称* | *数据类型* | *说明* | *默认值* |
-| ------ | ---------- | ------ | -------- |
-| enable | boolean    | 影子库开关。可选值：true/false |false|
-| dataSources | Map\<String, ShadowDataSourceConfiguration\> | 影子数据源映射名称和配置 |无|
-| tables | Map\<String, ShadowTableConfiguration\> | 影子表名称和配置 |无|
-| defaultShadowAlgorithmName | String | 默认影子算法名称 | 选配项 |
-| shadowAlgorithms | Map\<String, ShardingSphereAlgorithmConfiguration\> | 影子算法名称和配置 |无|
-
-## 影子数据源配置
-
-类名称：org.apache.shardingsphere.shadow.api.config.datasource.ShadowDataSourceConfiguration
-
-可配置属性：
-
-| *名称* | *数据类型* | *说明* | *默认值* |
-| ------ | ---------- | ------ | -------- |
-| sourceDataSourceName | String | 生产数据源名称 |无|
-| shadowDataSourceName | String | 影子数据源名称 |无|
-
-## 影子表配置
-
-类名称：org.apache.shardingsphere.shadow.api.config.table.ShadowTableConfiguration
-
-可配置属性：
-
-| *名称* | *数据类型* | *说明* | *默认值* |
-| ------ | ---------- | ------ | -------- |
-| dataSourceNames | Collection\<String\> | 影子表关联影子数据源名称列表 |无|
-| shadowAlgorithmNames | Collection\<String\> | 影子表关联影子算法名称列表 |无|
-
-## 影子算法配置
-
-算法类型的详情，请参见[内置影子算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/shadow.en.md
deleted file mode 100644
index 92e12e6134..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/shadow.en.md
+++ /dev/null
@@ -1,44 +0,0 @@
-+++
-title = "Shadow DB"
-weight = 4
-+++
-
-## Root Configuration
-
-Class name: org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
-
-Attributes:
-
-| *Name* | *DataType* | *Description* | *Default Value* |
-| ------ | ---------- | ------------- | --------------- |
-| enable | boolean    | Shadow DB switch. Optional values: true/false |false|
-| dataSources | Map\<String, ShadowDataSourceConfiguration\> | Shadow data source mapping name and configuration | None |
-| tables | Map\<String, ShadowTableConfiguration\> | Shadow table name and configuration | None |
-| defaultShadowAlgorithmName | String | default shadow algorithm name | Option item |
-| shadowAlgorithms | Map\<String, ShardingSphereAlgorithmConfiguration\> | Shadow algorithm name and configuration | None |
-
-## Shadow Data Source Configuration
-
-Class name: org.apache.shardingsphere.shadow.api.config.datasource.ShadowDataSourceConfiguration
-
-Attributes:
-
-| *Name* | *DataType* | *Description* | *Default Value* |
-| ------ | ---------- | ------------- | --------------- |
-| sourceDataSourceName | String | Production data source name | None |
-| shadowDataSourceName | String | Shadow data source name | None |
-
-## Shadow Table Configuration
-
-Class name: org.apache.shardingsphere.shadow.api.config.table.ShadowTableConfiguration
-
-Attributes:
-
-| *Name* | *DataType* | *Description* | *Default Value* |
-| ------ | ---------- | ------------- | --------------- |
-| dataSourceNames | Collection\<String\> | Shadow table location shadow data source names | None |
-| shadowAlgorithmNames | Collection\<String\> | Shadow table location shadow algorithm names | None |
-
-## Shadow Algorithm Configuration
-
-Please refer to [Built-in Shadow Algorithm List](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow).
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/props.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/props.cn.md
deleted file mode 100644
index baacdef9a6..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/props.cn.md
+++ /dev/null
@@ -1,22 +0,0 @@
-+++
-title = "属性配置"
-weight = 6
-chapter = true
-+++
-
-## 简介
-
-Apache ShardingSphere 提供属性配置的方式配置系统级配置。
-
-## 配置项说明
-
-| *名称*                             | *数据类型*   | *说明*                                                                                                                                                                          | *默认值*  |
-| ---------------------------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------- |
-| sql-show (?)                       | boolean    | 是否在日志中打印 SQL。 <br /> 打印 SQL 可以帮助开发者快速定位系统问题。日志内容包含：逻辑 SQL，真实 SQL 和 SQL 解析结果。<br /> 如果开启配置，日志将使用 Topic `ShardingSphere-SQL`，日志级别是 INFO。 | false    |
-| sql-simple (?)                     | boolean    | 是否在日志中打印简单风格的 SQL。                                                                                                                                                    | false    |
-| kernel-executor-size (?)                  | int        | 用于设置任务处理线程池的大小。每个 ShardingSphereDataSource 使用一个独立的线程池，同一个 JVM 的不同数据源不共享线程池。                                                                         | infinite |
-| max-connections-size-per-query (?) | int        | 一次查询请求在每个数据库实例中所能使用的最大连接数。                                                                                                                                     | 1        |
-| check-table-metadata-enabled (?)   | boolean    | 在程序启动和更新时，是否检查分片元数据的结构一致性。                                                                                                                                     | false    |
-| check-duplicate-table-enabled (?)  | boolean    | 在程序启动和更新时，是否检查重复表。                                                                                                                                                  | false    |
-| sql-comment-parse-enabled (?)      | boolean    | 是否解析 SQL 注释。                                                                                                                                                               | false    |
-| sql-federation-enabled (?)         | boolean    | 是否开启 federation 查询。                                                                                                                                                        | false    |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/_index.cn.md
deleted file mode 100644
index 61957409c7..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/_index.cn.md
+++ /dev/null
@@ -1,40 +0,0 @@
-+++
-title = "Spring Boot Starter 配置"
-weight = 3
-+++
-
-## 简介
-
-ShardingSphere-JDBC 提供官方的 Spring Boot Starter，使开发者可以非常便捷的整合 ShardingSphere-JDBC 和 Spring Boot。
-
-## 数据源配置
-
-```properties
-spring.shardingsphere.schema.name= # JDBC 数据源别名，该参数为可选项，不配置则默认采用 logic_db 作为 schemaName。
-
-spring.shardingsphere.datasource.names= # 数据源名称，多数据源以逗号分隔
-
-spring.shardingsphere.datasource.<datasource-name>.type= # 数据库连接池类名称
-spring.shardingsphere.datasource.<datasource-name>.driver-class-name= # 数据库驱动类名
-spring.shardingsphere.datasource.<datasource-name>.jdbc-url= # 数据库 URL 连接
-spring.shardingsphere.datasource.<datasource-name>.username= # 数据库用户名
-spring.shardingsphere.datasource.<datasource-name>.password= # 数据库密码
-spring.shardingsphere.datasource.<datasource-name>.xxx=  # 数据库连接池的其它属性
-```
-
-## 规则配置
-
-```properties
-spring.shardingsphere.rules.<rule-type>.xxx= # 规则配置
-  # ... 具体的规则配置
-```
-
-更多详细配置请参见具体的规则配置部分。
-
-## 属性配置
-
-```properties
-spring.shardingsphere.props.xxx.xxx= # 具体的属性配置
-```
-
-详情请参见[属性配置](/cn/user-manual/shardingsphere-jdbc/configuration/props)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/_index.en.md
deleted file mode 100644
index a81ddb1049..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/_index.en.md
+++ /dev/null
@@ -1,40 +0,0 @@
-+++
-title = "Spring Boot Starter Configuration"
-weight = 3
-+++
-
-## Introduction
-
-ShardingSphere-JDBC provides official Spring Boot Starter to make convenient for developers to integrate ShardingSphere-JDBC and Spring Boot.
-
-## Data Source Configuration
-
-```properties
-spring.shardingsphere.schema.name= # JDBC data source alias, this parameter is optional. If it is not configured, logic_db is used as the schemaName by default.
-
-spring.shardingsphere.datasource.names= # Data source name, multiple data sources are separated by commas
-
-spring.shardingsphere.datasource.<datasource-name>.type= # Database connection pool type name
-spring.shardingsphere.datasource.<datasource-name>.driver-class-name= # Database driver class name
-spring.shardingsphere.datasource.<datasource-name>.jdbc-url= # Database URL connection
-spring.shardingsphere.datasource.<datasource-name>.username= # Database username
-spring.shardingsphere.datasource.<datasource-name>.password= # Database password
-spring.shardingsphere.datasource.<datasource-name>.xxx= # Other properties of database connection pool
-```
-
-## Rule Configuration
-
-```properties
-spring.shardingsphere.rules.<rule-type>.xxx= # rule configurations
-  # ... Specific rule configurations
-```
-
-Please refer to specific rule configuration for more details.
-
-## Properties Configuration
-
-```properties
-spring.shardingsphere.props.xxx.xxx= # Properties key and value
-```
-
-Please refer to [Properties Configuration](/en/user-manual/shardingsphere-jdbc/configuration/props) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/change-history.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/change-history.cn.md
deleted file mode 100644
index 466b77235a..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/change-history.cn.md
+++ /dev/null
@@ -1,495 +0,0 @@
-+++
-title = "变更历史"
-weight = 7
-+++
-
-## 5.0.0-alpha
-
-### 读写分离
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.primary-data-source-name= # 主数据源名称
-spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.replica-data-source-names= # 从数据源名称，多个从数据源用逗号分隔
-spring.shardingsphere.rules.replica-query.data-sources.<replica-query-data-source-name>.load-balancer-name= # 负载均衡算法名称
-
-# 负载均衡算法配置
-spring.shardingsphere.rules.replica-query.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
-spring.shardingsphere.rules.replica-query.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
-```
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
-
-### 数据分片
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-# 标准分片表配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-
-# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-
-# 用于单分片键的标准分片场景
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.<sharding-algorithm-name>.sharding-column= # 分片列名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
-
-# 用于多分片键的复合分片场景
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-columns= # 分片列名称，多个列以逗号分隔
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
-
-# 用于Hint 的分片策略
-spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
-
-# 分表策略，同分库策略
-spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略
-
-# 自动分片表配置
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # 数据源名
-
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # 分片列名称
-spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm= # 自动分片算法名称
-
-# 分布式序列策略配置
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
-spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
-
-spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
-spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
-spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
-
-spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
-spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
-spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表
-
-spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略
-spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略
-spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
-
-# 分片算法配置
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
-spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=# 分片算法属性配置
-
-# 分布式序列算法配置
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
-spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置
-```
-
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen)。
-
-### 数据加密
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.cipher-column= # 加密列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.assisted-query-column= # 查询列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.plain-column= # 原文列名称
-spring.shardingsphere.rules.encrypt.tables.<table-name>.columns.<column-name>.encryptor-name= # 加密算法名称
-
-# 加密算法配置
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.type= # 加密算法类型
-spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xxx= # 加密算法属性配置
-```
-
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt)
-
-### 影子库
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 省略数据源配置，请参考使用手册
-
-spring.shardingsphere.rules.shadow.column= # 影子字段名称名称
-spring.shardingsphere.rules.shadow.shadow-mappings.<product-data-source-name>= # 影子数据库名称
-```
-
-### 分布式治理
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.governance.name= # 治理名称
-spring.shardingsphere.governance.registry-center.type= # 治理持久化类型。如：Zookeeper, etcd, Apollo, Nacos
-spring.shardingsphere.governance.registry-center.server-lists= # 治理服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-spring.shardingsphere.governance.registry-center.props= # 其它配置
-spring.shardingsphere.governance.overwrite= # 本地配置是否覆盖配置中心配置。如果可覆盖，每次启动都以本地配置为准.
-```
-
-### 混合规则
-
-#### 配置项说明
-
-```properties
-# 数据源配置
-# 数据源名称，多数据源以逗号分隔
-spring.shardingsphere.datasource.names= write-ds0,write-ds1,write-ds0-read0,write-ds1-read0
-
-spring.shardingsphere.datasource.write-ds0.url= # 数据库 URL 连接
-spring.shardingsphere.datasource.write-ds0.type=  # 数据库连接池类名称
-spring.shardingsphere.datasource.write-ds0.driver-class-name= # 数据库驱动类名
-spring.shardingsphere.datasource.write-ds0.username= # 数据库用户名
-spring.shardingsphere.datasource.write-ds0.password= # 数据库密码
-spring.shardingsphere.datasource.write-ds0.xxx=  # 数据库连接池的其它属性
-
-spring.shardingsphere.datasource.write-ds1.url= # 数据库 URL 连接
-
-spring.shardingsphere.datasource.write-ds0-read0.url= # 数据库 URL 连接
-
-spring.shardingsphere.datasource.write-ds1-read0.url= # 数据库 URL 连接
-
-# 分片规则配置
-# 分库策略
-spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=default-database-strategy-inline
-# 绑定表规则，多组绑定规则使用数组形式配置
-spring.shardingsphere.rules.sharding.binding-tables[0]=t_user,t_user_detail # 绑定表名称，多个表之间以逗号分隔
-spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表名称，多个表之间以逗号分隔
-spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表名称，多个表之间以逗号分隔
-# 广播表规则配置
-spring.shardingsphere.rules.sharding.broadcast-tables= # 广播表名称，多个表之间以逗号分隔
-
-# 分表策略
-# 表达式 `ds_$->{0..1}`枚举的数据源为读写分离配置的逻辑数据源名称
-spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=ds_$->{0..1}.t_user_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.standard.sharding-algorithm-name=user-table-strategy-inline
-
-spring.shardingsphere.rules.sharding.tables.t_user_detail.actual-data-nodes=ds_$->{0..1}.t_user_detail_$->{0..1}
-spring.shardingsphere.rules.sharding.tables.t_user_detail.table-strategy.standard.sharding-column=user_id
-spring.shardingsphere.rules.sharding.tables.t_user_detail.table-strategy.standard.sharding-algorithm-name=user-detail-table-strategy-inline
-
-# 数据加密配置
-# `t_user` 使用分片规则配置的逻辑表名称
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.user_name.cipher-column=user_name
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.user_name.encryptor-name=name-encryptor
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.cipher-column=pwd
-spring.shardingsphere.rules.encrypt.tables.t_user.columns.pwd.encryptor-name=pwd-encryptor
-
-# 数据加密算法配置
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.name-encryptor.props.aes-key-value=123456abc
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.type=AES
-spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.props.aes-key-value=123456abc
-
-# 分布式序列策略配置
-spring.shardingsphere.rules.sharding.tables.t_user.key-generate-strategy.column=user_id
-spring.shardingsphere.rules.sharding.tables.t_user.key-generate-strategy.key-generator-name=snowflake
-
-# 分片算法配置
-spring.shardingsphere.rules.sharding.sharding-algorithms.default-database-strategy-inline.type=INLINE
-# 表达式`ds_$->{user_id % 2}` 枚举的数据源为读写分离配置的逻辑数据源名称
-spring.shardingsphere.rules.sharding.sharding-algorithms.default-database-strategy-inline.algorithm-expression=ds_$->{user_id % 2}
-spring.shardingsphere.rules.sharding.sharding-algorithms.user-table-strategy-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.user-table-strategy-inline.algorithm-expression=t_user_$->{user_id % 2}
-
-spring.shardingsphere.rules.sharding.sharding-algorithms.user-detail-table-strategy-inline.type=INLINE
-spring.shardingsphere.rules.sharding.sharding-algorithms.user-detail-table-strategy-inline.algorithm-expression=t_user_detail_$->{user_id % 2}
-
-# 分布式序列算法配置
-spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
-spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123
-
-# 读写分离策略配置
-# ds_0,ds_1为读写分离配置的逻辑数据源名称
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.write-data-source-name=write-ds0
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.read-data-source-names=write-ds0-read0
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_0.load-balancer-name=read-random
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.write-data-source-name=write-ds1
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.read-data-source-names=write-ds1-read0
-spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.load-balancer-name=read-random
-
-# 负载均衡算法配置
-spring.shardingsphere.rules.readwrite-splitting.load-balancers.read-random.type=RANDOM
-```
-
-## shardingsphere-4.x
-
-### 读写分离
-
-#### 配置项说明
-
-```properties
-#省略数据源配置，与数据分片一致
-
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= #主库数据源名称
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= #从库数据源名称列表
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= #从库数据源名称列表
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= #从库数据源名称列表
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= #从库负载均衡算法类名称。该类需实现MasterSlaveLoadBalanceAlgorithm接口且提供无参数构造器
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= #从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若`load-balance-algorithm-class-name`存在则忽略该配置
-
-spring.shardingsphere.props.sql.show= #是否开启SQL显示，默认值: false
-spring.shardingsphere.props.executor.size= #工作线程数量，默认值: CPU核数
-spring.shardingsphere.props.check.table.metadata.enabled= #是否在启动时检查分表元数据一致性，默认值: false
-```
-
-### 数据分片
-
-#### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= #数据源名称，多数据源以逗号分隔
-
-spring.shardingsphere.datasource.<data-source-name>.type= #数据库连接池类名称
-spring.shardingsphere.datasource.<data-source-name>.driver-class-name= #数据库驱动类名
-spring.shardingsphere.datasource.<data-source-name>.url= #数据库url连接
-spring.shardingsphere.datasource.<data-source-name>.username= #数据库用户名
-spring.shardingsphere.datasource.<data-source-name>.password= #数据库密码
-spring.shardingsphere.datasource.<data-source-name>.xxx= #数据库连接池的其它属性
-
-spring.shardingsphere.sharding.tables.<logic-table-name>.actual-data-nodes= #由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-
-#分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-
-#用于单分片键的标准分片场景
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.sharding-column= #分片列名称
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.precise-algorithm-class-name= #精确分片算法类名称，用于=和IN。该类需实现PreciseShardingAlgorithm接口并提供无参数的构造器
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.standard.range-algorithm-class-name= #范围分片算法类名称，用于BETWEEN，可选。该类需实现RangeShardingAlgorithm接口并提供无参数的构造器
-
-#用于多分片键的复合分片场景
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.complex.sharding-columns= #分片列名称，多个列以逗号分隔
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.complex.algorithm-class-name= #复合分片算法类名称。该类需实现ComplexKeysShardingAlgorithm接口并提供无参数的构造器
-
-#行表达式分片策略
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.inline.sharding-column= #分片列名称
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.inline.algorithm-expression= #分片算法行表达式，需符合groovy语法
-
-#Hint分片策略
-spring.shardingsphere.sharding.tables.<logic-table-name>.database-strategy.hint.algorithm-class-name= #Hint分片算法类名称。该类需实现HintShardingAlgorithm接口并提供无参数的构造器
-
-#分表策略，同分库策略
-spring.shardingsphere.sharding.tables.<logic-table-name>.table-strategy.xxx= #省略
-
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.column= #自增列名称，缺省表示不使用自增主键生成器
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.type= #自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
-spring.shardingsphere.sharding.tables.<logic-table-name>.key-generator.props.<property-name>= #属性配置, 注意：使用SNOWFLAKE算法，需要配置worker.id与max.tolerate.time.difference.milliseconds属性。若使用此算法生成值作分片值，建议配置max.vibration.offset属性
-
-spring.shardingsphere.sharding.binding-tables[0]= #绑定表规则列表
-spring.shardingsphere.sharding.binding-tables[1]= #绑定表规则列表
-spring.shardingsphere.sharding.binding-tables[x]= #绑定表规则列表
-
-spring.shardingsphere.sharding.broadcast-tables[0]= #广播表规则列表
-spring.shardingsphere.sharding.broadcast-tables[1]= #广播表规则列表
-spring.shardingsphere.sharding.broadcast-tables[x]= #广播表规则列表
-
-spring.shardingsphere.sharding.default-data-source-name= #未配置分片规则的表将通过默认数据源定位
-spring.shardingsphere.sharding.default-database-strategy.xxx= #默认数据库分片策略，同分库策略
-spring.shardingsphere.sharding.default-table-strategy.xxx= #默认表分片策略，同分表策略
-spring.shardingsphere.sharding.default-key-generator.type= #默认自增列值生成器类型，缺省将使用org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
-spring.shardingsphere.sharding.default-key-generator.props.<property-name>= #自增列值生成器属性配置, 比如SNOWFLAKE算法的worker.id与max.tolerate.time.difference.milliseconds
-
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= #详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= #详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= #详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= #详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= #详见读写分离部分
-spring.shardingsphere.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= #详见读写分离部分
-
-spring.shardingsphere.props.sql.show= #是否开启SQL显示，默认值: false
-spring.shardingsphere.props.executor.size= #工作线程数量，默认值: CPU核数
-```
-
-### 编排治理
-
-#### 治理
-
-##### 配置项说明
-
-```properties
-#省略数据源、数据分片、读写分离和数据脱敏配置
-
-spring.shardingsphere.orchestration.name= #治理实例名称
-spring.shardingsphere.orchestration.overwrite= #本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-spring.shardingsphere.orchestration.registry.type= #配置中心类型。如：zookeeper
-spring.shardingsphere.orchestration.registry.server-lists= #连接注册中心服务器的列表。包括IP地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-spring.shardingsphere.orchestration.registry.namespace= #注册中心的命名空间
-spring.shardingsphere.orchestration.registry.digest= #连接注册中心的权限令牌。缺省为不需要权限验证
-spring.shardingsphere.orchestration.registry.operation-timeout-milliseconds= #操作超时的毫秒数，默认500毫秒
-spring.shardingsphere.orchestration.registry.max-retries= #连接失败后的最大重试次数，默认3次
-spring.shardingsphere.orchestration.registry.retry-interval-milliseconds= #重试间隔毫秒数，默认500毫秒
-spring.shardingsphere.orchestration.registry.time-to-live-seconds= #临时节点存活秒数，默认60秒
-spring.shardingsphere.orchestration.registry.props= #配置中心其它属性
-```
-
-### 数据脱敏
-
-#### 配置项说明
-
-```properties
-#省略数据源配置，与数据分片一致
-
-spring.shardingsphere.encrypt.encryptors.<encryptor-name>.type= #加解密器类型，可自定义或选择内置类型：MD5/AES
-spring.shardingsphere.encrypt.encryptors.<encryptor-name>.props.<property-name>= #属性配置, 注意：使用AES加密器，需要配置AES加密器的KEY属性：aes.key.value
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.plainColumn= #存储明文的字段
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.cipherColumn= #存储密文的字段
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.assistedQueryColumn= #辅助查询字段，针对ShardingQueryAssistedEncryptor类型的加解密器进行辅助查询
-spring.shardingsphere.encrypt.tables.<table-name>.columns.<logic-column-name>.encryptor= #加密器名字
-```
-
-## shardingsphere-3.x
-
-### 数据分片
-
-#### 配置项说明
-
-```properties
-sharding.jdbc.datasource.names= #数据源名称，多数据源以逗号分隔
-
-sharding.jdbc.datasource.<data-source-name>.type= #数据库连接池类名称
-sharding.jdbc.datasource.<data-source-name>.driver-class-name= #数据库驱动类名
-sharding.jdbc.datasource.<data-source-name>.url= #数据库url连接
-sharding.jdbc.datasource.<data-source-name>.username= #数据库用户名
-sharding.jdbc.datasource.<data-source-name>.password= #数据库密码
-sharding.jdbc.datasource.<data-source-name>.xxx= #数据库连接池的其它属性
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.actual-data-nodes= #由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-
-#分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
-
-#用于单分片键的标准分片场景
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.sharding-column= #分片列名称
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.precise-algorithm-class-name= #精确分片算法类名称，用于=和IN。该类需实现PreciseShardingAlgorithm接口并提供无参数的构造器
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.standard.range-algorithm-class-name= #范围分片算法类名称，用于BETWEEN，可选。该类需实现RangeShardingAlgorithm接口并提供无参数的构造器
-
-#用于多分片键的复合分片场景
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.complex.sharding-columns= #分片列名称，多个列以逗号分隔
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.complex.algorithm-class-name= #复合分片算法类名称。该类需实现ComplexKeysShardingAlgorithm接口并提供无参数的构造器
-
-#行表达式分片策略
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.inline.sharding-column= #分片列名称
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.inline.algorithm-expression= #分片算法行表达式，需符合groovy语法
-
-#Hint分片策略
-sharding.jdbc.config.sharding.tables.<logic-table-name>.database-strategy.hint.algorithm-class-name= #Hint分片算法类名称。该类需实现HintShardingAlgorithm接口并提供无参数的构造器
-
-#分表策略，同分库策略
-sharding.jdbc.config.sharding.tables.<logic-table-name>.table-strategy.xxx= #省略
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-column-name= #自增列名称，缺省表示不使用自增主键生成器
-sharding.jdbc.config.sharding.tables.<logic-table-name>.key-generator-class-name= #自增列值生成器类名称，缺省表示使用默认自增列值生成器。该类需提供无参数的构造器
-
-sharding.jdbc.config.sharding.tables.<logic-table-name>.logic-index= #逻辑索引名称，对于分表的Oracle/PostgreSQL数据库中DROP INDEX XXX语句，需要通过配置逻辑索引名称定位所执行SQL的真实分表
-
-sharding.jdbc.config.sharding.binding-tables[0]= #绑定表规则列表
-sharding.jdbc.config.sharding.binding-tables[1]= #绑定表规则列表
-sharding.jdbc.config.sharding.binding-tables[x]= #绑定表规则列表
-
-sharding.jdbc.config.sharding.broadcast-tables[0]= #广播表规则列表
-sharding.jdbc.config.sharding.broadcast-tables[1]= #广播表规则列表
-sharding.jdbc.config.sharding.broadcast-tables[x]= #广播表规则列表
-
-sharding.jdbc.config.sharding.default-data-source-name= #未配置分片规则的表将通过默认数据源定位
-sharding.jdbc.config.sharding.default-database-strategy.xxx= #默认数据库分片策略，同分库策略
-sharding.jdbc.config.sharding.default-table-strategy.xxx= #默认表分片策略，同分表策略
-sharding.jdbc.config.sharding.default-key-generator-class-name= #默认自增列值生成器类名称，缺省使用io.shardingsphere.core.keygen.DefaultKeyGenerator。该类需实现KeyGenerator接口并提供无参数的构造器
-
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= #详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= #详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= #详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= #详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= #详见读写分离部分
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= #详见读写分离部分
-
-sharding.jdbc.config.props.sql.show= #是否开启SQL显示，默认值: false
-sharding.jdbc.config.props.executor.size= #工作线程数量，默认值: CPU核数
-
-sharding.jdbc.config.config.map.key1= #用户自定义配置
-sharding.jdbc.config.config.map.key2= #用户自定义配置
-sharding.jdbc.config.config.map.keyx= #用户自定义配置
-```
-
-### 读写分离
-
-#### 配置项说明
-
-```properties
-#省略数据源配置，与数据分片一致
-
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.master-data-source-name= #主库数据源名称
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[0]= #从库数据源名称列表
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[1]= #从库数据源名称列表
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.slave-data-source-names[x]= #从库数据源名称列表
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-class-name= #从库负载均衡算法类名称。该类需实现MasterSlaveLoadBalanceAlgorithm接口且提供无参数构造器
-sharding.jdbc.config.sharding.master-slave-rules.<master-slave-data-source-name>.load-balance-algorithm-type= #从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若`load-balance-algorithm-class-name`存在则忽略该配置
-
-sharding.jdbc.config.config.map.key1= #用户自定义配置
-sharding.jdbc.config.config.map.key2= #用户自定义配置
-sharding.jdbc.config.config.map.keyx= #用户自定义配置
-
-sharding.jdbc.config.props.sql.show= #是否开启SQL显示，默认值: false
-sharding.jdbc.config.props.executor.size= #工作线程数量，默认值: CPU核数
-sharding.jdbc.config.props.check.table.metadata.enabled= #是否在启动时检查分表元数据一致性，默认值: false
-```
-
-### 数据治理
-
-#### 配置项说明
-
-```properties
-#省略数据源、数据分片和读写分离配置
-
-sharding.jdbc.config.sharding.orchestration.name= #数据治理实例名称
-sharding.jdbc.config.sharding.orchestration.overwrite= #本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-sharding.jdbc.config.sharding.orchestration.registry.server-lists= #连接注册中心服务器的列表。包括IP地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-sharding.jdbc.config.sharding.orchestration.registry.namespace= #注册中心的命名空间
-sharding.jdbc.config.sharding.orchestration.registry.digest= #连接注册中心的权限令牌。缺省为不需要权限验证
-sharding.jdbc.config.sharding.orchestration.registry.operation-timeout-milliseconds= #操作超时的毫秒数，默认500毫秒
-sharding.jdbc.config.sharding.orchestration.registry.max-retries= #连接失败后的最大重试次数，默认3次
-sharding.jdbc.config.sharding.orchestration.registry.retry-interval-milliseconds= #重试间隔毫秒数，默认500毫秒
-sharding.jdbc.config.sharding.orchestration.registry.time-to-live-seconds= #临时节点存活秒数，默认60秒
-```
-
-## shardingsphere-2.x
-
-### 读写分离
-
-#### 配置项说明
-
-```properties
-
-sharding.jdbc.config.masterslave.load-balance-algorithm-type= #从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若`load-balance-algorithm-class-name`存在则忽略该配置
-sharding.jdbc.config.masterslave.name= #主库名称
-sharding.jdbc.config.masterslave.master-data-source-name= #主库数据源名称
-sharding.jdbc.config.masterslave.slave-data-source-names= #从数据源名称，多个使用逗号隔开
-```
-
-### 分库分表
-
-#### 配置说明
-
-```properties
-
-sharding.jdbc.config.sharding.default-data-source-name= #未配置分片规则的表将通过默认数据源定位
-sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column= #默认分库数据列
-sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression= # 默认分库inline表达式
-sharding.jdbc.config.sharding.tables.<logic-table-name>.actualDataNodes= #由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
-sharding.jdbc.config.sharding.tables.<logic-table-name>.tableStrategy.inline.shardingColumn= #默认分表的列
-sharding.jdbc.config.sharding.tables.<logic-table-name>.tableStrategy.inline.algorithmInlineExpression= #默认分表inline表达式
-sharding.jdbc.config.sharding.tables.<logic-table-name>.keyGeneratorColumnName=  #默认自增列值生成器类名称
-```
-
-### 编排治理
-
-#### 配置项说明
-
-```properties
-
-sharding.jdbc.config.orchestration.name= #数据治理实例名称
-sharding.jdbc.config.orchestration.overwrite= #本地配置是否覆盖注册中心配置。如果可覆盖，每次启动都以本地配置为准
-
-# zookeeper配置说明
-sharding.jdbc.config.orchestration.zookeeper.namespace= # zookeeper配置中心命名空间
-sharding.jdbc.config.orchestration.zookeeper.server-lists= #连接zookeeper注册中心服务器的列表。包括IP地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-
-# etcd配置说明
-sharding.jdbc.config.orchestration.etcd.server-lists= #连接etcd注册中心服务器的列表。包括IP地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-```
\ No newline at end of file
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mode.cn.md
deleted file mode 100644
index b1625803f5..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mode.cn.md
+++ /dev/null
@@ -1,28 +0,0 @@
-+++
-title = "Mode"
-weight = 5
-+++
-
-## 配置项说明
-
-### Memory mode
-```properties
-spring.shardingsphere.mode.type= # Memory
-```
-
-### Standalone mode
-```properties
-spring.shardingsphere.mode.type= # Standalone
-spring.shardingsphere.mode.repository.type= # Standalone 配置持久化类型。如：File
-spring.shardingsphere.mode.repository.props.path= # 配置信息存储路径
-spring.shardingsphere.mode.overwrite= # 本地配置是否覆盖文件配置。如果可覆盖，每次启动都以本地配置为准。
-```
-
-### Cluster mode
-```properties
-spring.shardingsphere.mode.type= # Cluster
-spring.shardingsphere.mode.repository.type= # Cluster 持久化类型。如：Zookeeper，Etcd
-spring.shardingsphere.mode.repository.props.namespace= # Cluster 实例名称
-spring.shardingsphere.mode.repository.props.server-lists= # Zookeeper 或 Etcd 服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-spring.shardingsphere.mode.overwrite= # 本地配置是否覆盖配置中心配置。如果可覆盖，每次启动都以本地配置为准。
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mode.en.md
deleted file mode 100644
index f156900c22..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mode.en.md
+++ /dev/null
@@ -1,28 +0,0 @@
-+++
-title = "Mode"
-weight = 5
-+++
-
-## Configuration Item Explanation
-
-### Memory mode
-```properties
-spring.shardingsphere.mode.type= # Memory
-```
-
-### Standalone mode
-```properties
-spring.shardingsphere.mode.type= # Standalone
-spring.shardingsphere.mode.repository.type= # Standalone Configuration persist type, such as: File
-spring.shardingsphere.mode.repository.props.path= # Configuration persist path
-spring.shardingsphere.mode.overwrite= # Local configurations overwrite file configurations or not; if they overwrite, each start takes reference of local configurations.
-```
-
-### Cluster mode
-```properties
-spring.shardingsphere.mode.type= # Cluster
-spring.shardingsphere.mode.repository.type= # Cluster persist type. Such as : Zookeeper，Etcd
-spring.shardingsphere.mode.repository.props.namespace= # Cluster instance namespace
-spring.shardingsphere.mode.repository.props.server-lists= # Zookeeper or Etcd server list. including IP and port number; use commas to separate
-spring.shardingsphere.mode.overwrite= # Local configurations overwrite config center configurations or not; if they overwrite, each start takes reference of local configurations.
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/_index.cn.md
deleted file mode 100644
index 4d8519a792..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/_index.cn.md
+++ /dev/null
@@ -1,60 +0,0 @@
-+++
-title = "Spring 命名空间配置"
-weight = 4
-+++
-
-## 简介
-
-ShardingSphere-JDBC 提供官方的 Spring 命名空间配置，使开发者可以非常便捷的整合 ShardingSphere-JDBC 和 Spring 框架。
-
-## Spring 命名空间配置项
-
-### 配置示例
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           ">
-    <bean id="ds0" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds0" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds1" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <!-- 配置规则，更多详细配置请参见具体的规则配置部分。 -->
-    <!-- ... -->
-    
-    <shardingsphere:data-source id="shardingDataSource" data-source-names="ds0,ds1" rule-refs="..." schema-name="sharding_db" >
-        <props>
-            <prop key="xxx.xxx">${xxx.xxx}</prop>
-        </props>
-    </shardingsphere:data-source>
-</beans>
-```
-
-### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd)
-
-\<shardingsphere:data-source />
-
-| *名称*                | *类型* | *说明*                       |
-| --------------------- | ----- | --------------------------- |
-| id                    | 属性  | Spring Bean Id               |
-| schema-name (?)       | 属性  | JDBC 数据源别名                |
-| data-source-names     | 标签  | 数据源名称，多个数据源以逗号分隔 |
-| rule-refs             | 标签  | 规则名称，多个规则以逗号分隔     |
-| props (?)             | 标签  | 属性配置，详情请参见[属性配置](/cn/user-manual/shardingsphere-jdbc/configuration/props) |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/_index.en.md
deleted file mode 100644
index eace68a44d..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/_index.en.md
+++ /dev/null
@@ -1,60 +0,0 @@
-+++
-title = "Spring Namespace Configuration"
-weight = 4
-+++
-
-## Introduction
-
-ShardingSphere-JDBC provides official Spring namespace to make convenient for developers to integrate ShardingSphere-JDBC and Spring Framework.
-
-## Spring Namespace Configuration Item
-
-### Configuration Example
-
-```xml
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                           http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           ">
-    <bean id="ds0" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds0" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds1" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <!-- Rule configurations, please refer to specific rule configuration for more details. -->
-    <!-- ... -->
-    
-    <shardingsphere:data-source id="shardingDataSource" data-source-names="ds0,ds1" rule-refs="..." schema-name="sharding_db" >
-        <props>
-            <prop key="xxx.xxx">${xxx.xxx}</prop>
-        </props>
-    </shardingsphere:data-source>
-</beans>
-```
-
-### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd)
-
-\<shardingsphere:data-source />
-
-| *Name*                | *Type*    | *Description*                                                        |
-| --------------------- | --------- | -------------------------------------------------------------------- |
-| id                    | Attribute | Spring Bean Id                                                       |
-| schema-name (?)       | Attribute | JDBC data source alias                                               |
-| data-source-names     | Attribute | Data source name, multiple data source names are separated by commas |
-| rule-refs             | Attribute | Rule name, multiple rule names are separated by commas               |
-| props (?)             | Tag       | Properties configuration, Please refer to [Properties Configuration](/en/user-manual/shardingsphere-jdbc/configuration/props) for more details |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/change-history.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/change-history.cn.md
deleted file mode 100644
index 5770a18c34..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/change-history.cn.md
+++ /dev/null
@@ -1,313 +0,0 @@
-+++
-title = "变更历史"
-weight = 7
-+++
-
-## 5.0.0-alpha
-
-### 读写分离
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd)
-
-\<replica-query:rule />
-
-| *名称*                | *类型* | *说明*           |
-| -------------------- | ------ | --------------- |
-| id                   | 属性   | Spring Bean Id   |
-| data-source-rule (+) | 标签   | 读写分离数据源规则配置 |
-
-\<replica-query:data-source-rule />
-
-| *名称*                     | *类型* | *说明*                          |
-| -------------------------- | ----- | ------------------------------- |
-| id                         | 属性  | 读写分离数据源规则名称             |
-| primary-data-source-name   | 属性  | 主数据源名称                      |
-| replica-data-source-names  | 属性  | 从数据源名称，多个从数据源用逗号分隔 |
-| load-balance-algorithm-ref | 属性  | 负载均衡算法名称                   |
-
-
-\<replica-query:load-balance-algorithm />
-
-| *名称*    | *类型* | *说明*            |
-| --------- | ----- | ----------------- |
-| id        | 属性  | 负载均衡算法名称    |
-| type      | 属性  | 负载均衡算法类型    |
-| props (?) | 标签  | 负载均衡算法属性配置 |
-
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
-
-## 4.x
-
-### 读写分离
-
-#### 配置项说明
-
-命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd](http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd)
-
-\<master-slave:data-source />
-
-| *名称*                  | *类型* | *说明*                                                       |
-| :---------------------- | :----- | :----------------------------------------------------------- |
-| id                      | 属性   | Spring Bean Id                                               |
-| master-data-source-name | 属性   | 主库数据源Bean Id                                            |
-| slave-data-source-names | 属性   | 从库数据源Bean Id列表，多个Bean以逗号分隔                    |
-| strategy-ref (?)        | 属性   | 从库负载均衡算法引用。该类需实现MasterSlaveLoadBalanceAlgorithm接口 |
-| strategy-type (?)       | 属性   | 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若`strategy-ref`存在则忽略该配置 |
-| props (?)               | 标签   | 属性配置                                                     |
-
-\<master-slave:props />
-
-| *名称*                             | *类型* | *说明*                                                |
-| :--------------------------------- | :----- | :---------------------------------------------------- |
-| sql.show (?)                       | 属性   | 是否开启SQL显示，默认值: false                        |
-| executor.size (?)                  | 属性   | 工作线程数量，默认值: CPU核数                         |
-| max.connections.size.per.query (?) | 属性   | 每个物理数据库为每次查询分配的最大连接数量。默认值: 1 |
-| check.table.metadata.enabled (?)   | 属性   | 是否在启动时检查分表元数据一致性，默认值: false       |
-
-\<master-slave:load-balance-algorithm />
-
-4.0.0-RC2 版本 添加
-
-| *名称*        | *类型* | *说明*                                                    |
-| :------------ | :----- | :-------------------------------------------------------- |
-| id            | 属性   | Spring Bean Id                                            |
-| type          | 属性   | 负载均衡算法类型，‘RANDOM'或’ROUND_ROBIN’，支持自定义拓展 |
-| props-ref (?) | 属性   | 负载均衡算法配置参数                                      |
-
-## 3.x
-
-### 读写分离
-
-#### 配置项说明
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:p="http://www.springframework.org/schema/p"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:master-slave="http://shardingsphere.io/schema/shardingsphere/masterslave"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                        http://www.springframework.org/schema/beans/spring-beans.xsd 
-                        http://www.springframework.org/schema/context 
-                        http://www.springframework.org/schema/context/spring-context.xsd
-                        http://www.springframework.org/schema/tx 
-                        http://www.springframework.org/schema/tx/spring-tx.xsd
-                        http://shardingsphere.io/schema/shardingsphere/masterslave  
-                        http://shardingsphere.io/schema/shardingsphere/masterslave/master-slave.xsd">
-    <context:annotation-config />
-    <context:component-scan base-package="io.shardingsphere.example.spring.namespace.jpa" />
-    
-    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
-        <property name="dataSource" ref="masterSlaveDataSource" />
-        <property name="jpaVendorAdapter">
-            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:database="MYSQL" />
-        </property>
-        <property name="packagesToScan" value="io.shardingsphere.example.spring.namespace.jpa.entity" />
-        <property name="jpaProperties">
-            <props>
-                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
-                <prop key="hibernate.hbm2ddl.auto">create</prop>
-                <prop key="hibernate.show_sql">true</prop>
-            </props>
-        </property>
-    </bean>
-    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" p:entityManagerFactory-ref="entityManagerFactory" />
-    <tx:annotation-driven />
-    
-    <bean id="ds_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_master" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds_slave0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_slave0" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds_slave1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_slave1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="randomStrategy" class="io.shardingsphere.api.algorithm.masterslave.RandomMasterSlaveLoadBalanceAlgorithm" />
-    <master-slave:data-source id="masterSlaveDataSource" master-data-source-name="ds_master" slave-data-source-names="ds_slave0, ds_slave1" strategy-ref="randomStrategy">
-            <master-slave:props>
-                <prop key="sql.show">${sql_show}</prop>
-                <prop key="executor.size">10</prop>
-                <prop key="foo">bar</prop>
-            </master-slave:props>
-    </master-slave:data-source>
-</beans>
-```
-
-## 2.x
-
-### 读写分离
-
-#### Spring命名空间配置示例
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-    xmlns:context="http://www.springframework.org/schema/context"
-    xmlns:sharding="http://shardingsphere.io/schema/shardingjdbc/sharding"
-    xmlns:masterslave="http://shardingsphere.io/schema/shardingjdbc/masterslave"
-    xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                        http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://www.springframework.org/schema/context 
-                        http://www.springframework.org/schema/context/spring-context.xsd 
-                        http://shardingsphere.io/schema/shardingjdbc/sharding
-                        http://shardingsphere.io/schema/shardingjdbc/sharding/sharding.xsd
-                        http://shardingsphere.io/schema/shardingjdbc/masterslave
-                        http://shardingsphere.io/schema/shardingjdbc/masterslave/master-slave.xsd
-                        ">
-    <!-- 配置真实数据源 -->
-    <bean id="dbtbl_0_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <!-- 定义读写分离数据源, 读写分离数据源实现了DataSource接口, 可直接当做数据源处理 -->
-    <master-slave:data-source id="dbtbl_0" master-data-source-name="dbtbl_0_master" slave-data-source-names="dbtbl_0_slave_0, dbtbl_0_slave_1" strategy-type="ROUND_ROBIN" />
-    <master-slave:data-source id="dbtbl_1" master-data-source-name="dbtbl_1_master" slave-data-source-names="dbtbl_1_slave_0, dbtbl_1_slave_1" strategy-type="ROUND_ROBIN" />
-    
-    <sharding:inline-strategy id="databaseStrategy" sharding-column="user_id" algorithm-expression="dbtbl_${user_id % 2}" />
-    <sharding:inline-strategy id="orderTableStrategy" sharding-column="order_id" algorithm-expression="t_order_${order_id % 4}" />
-    
-    <sharding:data-source id="shardingDataSource">
-        <sharding:sharding-rule data-source-names="dbtbl_0, dbtbl_1">
-            <sharding:table-rules>
-                <sharding:table-rule logic-table="t_order" actual-data-nodes="dbtbl_${0..1}.t_order_${0..3}" database-strategy-ref="databaseStrategy" table-strategy-ref="orderTableStrategy"/>
-            </sharding:table-rules>
-        </sharding:sharding-rule>
-    </sharding:data-source>
-</beans>
-```
-
-## 1.x
-
-### 读写分离
-
-#### Spring命名空间配置示例
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-    xmlns:context="http://www.springframework.org/schema/context"
-    xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb" 
-    xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                        http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://www.springframework.org/schema/context 
-                        http://www.springframework.org/schema/context/spring-context.xsd 
-                        http://www.dangdang.com/schema/ddframe/rdb 
-                        http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd 
-                        ">
-    <!-- 配置真实数据源 -->
-    <bean id="dbtbl_0_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <!-- 定义读写分离数据源, 读写分离数据源实现了DataSource接口, 可直接当做数据源处理 -->
-    <rdb:master-slave-data-source id="dbtbl_0" master-data-source-ref="dbtbl_0_master" slave-data-sources-ref="dbtbl_0_slave_0, dbtbl_0_slave_1" strategy-type="ROUND_ROBIN" />
-    <rdb:master-slave-data-source id="dbtbl_1" master-data-source-ref="dbtbl_1_master" slave-data-sources-ref="dbtbl_1_slave_0, dbtbl_1_slave_1" strategy-type="ROUND_ROBIN" />
-    
-    <!-- 通过rdb:strategy和rdb:data-source继续构建分片数据源 -->
-    <rdb:strategy id="databaseStrategy" sharding-columns="user_id" algorithm-expression="dbtbl_${user_id.longValue() % 2}"/>
-    <rdb:strategy id="orderTableStrategy" sharding-columns="order_id" algorithm-expression="t_order_${order_id.longValue() % 4}"/>
-    
-    <rdb:data-source id="shardingDataSource">
-        <rdb:sharding-rule data-sources="dbtbl_0, dbtbl_1">
-            <rdb:table-rules>
-                <rdb:table-rule logic-table="t_order" actual-tables="t_order_${0..3}" database-strategy="databaseStrategy" table-strategy="orderTableStrategy"/>
-            </rdb:table-rules>
-        </rdb:sharding-rule>
-    </rdb:data-source>
-</beans>
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/change-history.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/change-history.en.md
deleted file mode 100644
index 4960870da8..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/change-history.en.md
+++ /dev/null
@@ -1,313 +0,0 @@
-+++
-title = "Change History"
-weight = 7
-+++
-
-## 5.0.0-alpha
-
-### Replica Query
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd)
-
-\<replica-query:rule />
-
-| *Name*               | *Type*    | *Description*                                |
-| -------------------- | --------- | -------------------------------------------- |
-| id                   | Attribute | Spring Bean Id                               |
-| data-source-rule (+) | Tag       | Replica query data source rule configuration |
-
-\<replica-query:data-source-rule />
-
-| *Name*                     | *Type*     | *Description*                                                              |
-| -------------------------- | ---------- | -------------------------------------------------------------------------- |
-| id                         | Attribute  | Primary-replica data source rule name                                      |
-| primary-data-source-name   | Attribute  | Primary data source name                                                   |
-| replica-data-source-names  | Attribute  | Replica data source names, multiple data source names separated with comma |
-| load-balance-algorithm-ref | Attribute  | Load balance algorithm name                                                |
-
-\<replica-query:load-balance-algorithm />
-
-| *Name*    | *Type*     | *Description*                     |
-| --------- | ---------- | --------------------------------- |
-| id        | Attribute  | Load balance algorithm name       |
-| type      | Attribute  | Load balance algorithm type       |
-| props (?) | Tag        | Load balance algorithm properties |
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
-
-## 4.x
-
-### Readwrite-splitting
-
-#### Configuration Item Explanation
-
-Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd](http://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd)
-
-\<master-slave:data-source />
-
-| *Name*                  | *Type*    | *Explanation*                                                |
-| :---------------------- | :-------- | :----------------------------------------------------------- |
-| id                      | Attribute | Spring Bean id                                               |
-| master-data-source-name | Attribute | Bean id of data source in master database                    |
-| slave-data-source-names | Attribute | Bean id list of data source in slave database; multiple Beans are separated by commas |
-| strategy-ref (?)        | Attribute | Slave database load balance algorithm reference; the class needs to implement `MasterSlaveLoadBalanceAlgorithm` interface |
-| strategy-type (?)       | Attribute | Load balance algorithm type of slave database; optional value: ROUND_ROBIN and RANDOM; if there is `load-balance-algorithm-class-name`, the configuration can be omitted |
-| config-map (?)          | Tag       | Users’ self-defined configurations                           |
-| props (?)               | Tag       | Attribute configurations                                     |
-
-\<master-slave:props />
-
-| *Name*                             | *Type*    | *Explanation*                                                |
-| :--------------------------------- | :-------- | :----------------------------------------------------------- |
-| sql.show (?)                       | Attribute | Show SQL or not; default value: false                        |
-| executor.size (?)                  | Attribute | Executing thread number; default value: CPU core number      |
-| max.connections.size.per.query (?) | Attribute | The maximum connection number that each physical database allocates to each query; default value: 1 |
-| check.table.metadata.enabled (?)   | Attribute | Whether to check meta-data consistency of sharding table when it initializes; default value: false |
-
-\<master-slave:load-balance-algorithm />
-
-4.0.0-RC2 version added
-
-| *Name*        | *Type*    | *Explanation*                                                |
-| :------------ | :-------- | :----------------------------------------------------------- |
-| id            | Attribute | Spring Bean Id                                               |
-| type          | Attribute | Type of load balance algorithm, ‘RANDOM'或’ROUND_ROBIN’, support custom extension |
-| props-ref (?) | Attribute | Properties of load balance algorithm                         |
-
-## 3.x
-
-### Readwrite-splitting
-
-#### Configuration Item Explanation
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:p="http://www.springframework.org/schema/p"
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       xmlns:master-slave="http://shardingsphere.io/schema/shardingsphere/masterslave"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                        http://www.springframework.org/schema/beans/spring-beans.xsd 
-                        http://www.springframework.org/schema/context 
-                        http://www.springframework.org/schema/context/spring-context.xsd
-                        http://www.springframework.org/schema/tx 
-                        http://www.springframework.org/schema/tx/spring-tx.xsd
-                        http://shardingsphere.io/schema/shardingsphere/masterslave  
-                        http://shardingsphere.io/schema/shardingsphere/masterslave/master-slave.xsd">
-    <context:annotation-config />
-    <context:component-scan base-package="io.shardingsphere.example.spring.namespace.jpa" />
-    
-    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
-        <property name="dataSource" ref="masterSlaveDataSource" />
-        <property name="jpaVendorAdapter">
-            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:database="MYSQL" />
-        </property>
-        <property name="packagesToScan" value="io.shardingsphere.example.spring.namespace.jpa.entity" />
-        <property name="jpaProperties">
-            <props>
-                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
-                <prop key="hibernate.hbm2ddl.auto">create</prop>
-                <prop key="hibernate.show_sql">true</prop>
-            </props>
-        </property>
-    </bean>
-    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" p:entityManagerFactory-ref="entityManagerFactory" />
-    <tx:annotation-driven />
-    
-    <bean id="ds_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_master" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds_slave0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_slave0" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="ds_slave1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
-        <property name="url" value="jdbc:mysql://localhost:3306/ds_slave1" />
-        <property name="username" value="root" />
-        <property name="password" value="" />
-    </bean>
-    
-    <bean id="randomStrategy" class="io.shardingsphere.api.algorithm.masterslave.RandomMasterSlaveLoadBalanceAlgorithm" />
-    <master-slave:data-source id="masterSlaveDataSource" master-data-source-name="ds_master" slave-data-source-names="ds_slave0, ds_slave1" strategy-ref="randomStrategy">
-            <master-slave:props>
-                <prop key="sql.show">${sql_show}</prop>
-                <prop key="executor.size">10</prop>
-                <prop key="foo">bar</prop>
-            </master-slave:props>
-    </master-slave:data-source>
-</beans>
-```
-
-## 2.x
-
-### Readwrite-splitting
-
-#### The configuration example for Spring namespace
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xmlns:context="http://www.springframework.org/schema/context"
-    xmlns:sharding="http://shardingsphere.io/schema/shardingjdbc/sharding"
-    xmlns:masterslave="http://shardingsphere.io/schema/shardingjdbc/masterslave"
-    xsi:schemaLocation="http://www.springframework.org/schema/beans
-                        http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://www.springframework.org/schema/context
-                        http://www.springframework.org/schema/context/spring-context.xsd
-                        http://shardingsphere.io/schema/shardingjdbc/sharding
-                        http://shardingsphere.io/schema/shardingjdbc/sharding/sharding.xsd
-                        http://shardingsphere.io/schema/shardingjdbc/masterslave
-                        http://shardingsphere.io/schema/shardingjdbc/masterslave/master-slave.xsd
-                        ">
-    <!-- Actual source data Configuration -->
-    <bean id="dbtbl_0_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <!-- Readwrite-splitting DataSource Configuration -->
-    <master-slave:data-source id="dbtbl_0" master-data-source-name="dbtbl_0_master" slave-data-source-names="dbtbl_0_slave_0, dbtbl_0_slave_1" strategy-type="ROUND_ROBIN" />
-    <master-slave:data-source id="dbtbl_1" master-data-source-name="dbtbl_1_master" slave-data-source-names="dbtbl_1_slave_0, dbtbl_1_slave_1" strategy-type="ROUND_ROBIN" />
-    
-    <sharding:inline-strategy id="databaseStrategy" sharding-column="user_id" algorithm-expression="dbtbl_${user_id % 2}" />
-    <sharding:inline-strategy id="orderTableStrategy" sharding-column="order_id" algorithm-expression="t_order_${order_id % 4}" />
-    
-    <sharding:data-source id="shardingDataSource">
-        <sharding:sharding-rule data-source-names="dbtbl_0, dbtbl_1">
-            <sharding:table-rules>
-                <sharding:table-rule logic-table="t_order" actual-data-nodes="dbtbl_${0..1}.t_order_${0..3}" database-strategy-ref="databaseStrategy" table-strategy-ref="orderTableStrategy"/>
-            </sharding:table-rules>
-        </sharding:sharding-rule>
-    </sharding:data-source>
-</beans>
-```
-
-## 1.x
-
-### Readwrite-splitting
-
-#### The configuration example for Spring namespace
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-    xmlns:context="http://www.springframework.org/schema/context"
-    xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb" 
-    xsi:schemaLocation="http://www.springframework.org/schema/beans 
-                        http://www.springframework.org/schema/beans/spring-beans.xsd
-                        http://www.springframework.org/schema/context 
-                        http://www.springframework.org/schema/context/spring-context.xsd 
-                        http://www.dangdang.com/schema/ddframe/rdb 
-                        http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd 
-                        ">
-    <!-- 配置真实数据源 -->
-    <bean id="dbtbl_0_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_0_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_0_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_master"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_0"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <bean id="dbtbl_1_slave_1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
-        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
-        <property name="url" value="jdbc:mysql://localhost:3306/dbtbl_1_slave_1"/>
-        <property name="username" value="root"/>
-        <property name="password" value=""/>
-    </bean>
-    
-    <!-- 定义读写分离数据源, 读写分离数据源实现了DataSource接口, 可直接当做数据源处理 -->
-    <rdb:master-slave-data-source id="dbtbl_0" master-data-source-ref="dbtbl_0_master" slave-data-sources-ref="dbtbl_0_slave_0, dbtbl_0_slave_1" strategy-type="ROUND_ROBIN" />
-    <rdb:master-slave-data-source id="dbtbl_1" master-data-source-ref="dbtbl_1_master" slave-data-sources-ref="dbtbl_1_slave_0, dbtbl_1_slave_1" strategy-type="ROUND_ROBIN" />
-    
-    <!-- 通过rdb:strategy和rdb:data-source继续构建分片数据源 -->
-    <rdb:strategy id="databaseStrategy" sharding-columns="user_id" algorithm-expression="dbtbl_${user_id.longValue() % 2}"/>
-    <rdb:strategy id="orderTableStrategy" sharding-columns="order_id" algorithm-expression="t_order_${order_id.longValue() % 4}"/>
-    
-    <rdb:data-source id="shardingDataSource">
-        <rdb:sharding-rule data-sources="dbtbl_0, dbtbl_1">
-            <rdb:table-rules>
-                <rdb:table-rule logic-table="t_order" actual-tables="t_order_${0..3}" database-strategy="databaseStrategy" table-strategy="orderTableStrategy"/>
-            </rdb:table-rules>
-        </rdb:sharding-rule>
-    </rdb:data-source>
-</beans>
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mode.cn.md
deleted file mode 100644
index edfaebcaa1..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mode.cn.md
+++ /dev/null
@@ -1,85 +0,0 @@
-+++
-title = "Mode"
-weight = 5
-+++
-
-## 配置项说明
-
-### Standalone mode
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:standalone="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository.xsd">
-    <standalone:repository id="standaloneRepository" type="File">
-        <props>
-            <prop key="path">target</prop>
-        </props>
-    </standalone:repository>
-    <shardingsphere:data-source id="shardingDatabasesTablesDataSource" data-source-names="demo_ds_0, demo_ds_1" rule-refs="shardingRule" schema-name="sharding_db">
-        <shardingsphere:mode type="Standalone" repository-ref="standaloneRepository" overwrite="true"/>
-    </shardingsphere:data-source>
-</beans>
-```
-
-<standalone:repository />
-
-| *名称*         | *类型* | *说明*                                                                                    |
-| ------------- | ------ | ---------------------------------------------------------------------------------------  |
-| id            | 属性   | Standalone 模式实例名称                                                                     |
-| type          | 属性   | Standalone 配置持久化类型。如：File                                                         |
-| props (?)     | 属性   | Standalone 配置持久化的属性 如：path 路径                                                    |
-
-<shardingsphere:data-source />
-
-| *名称*            | *类型* | *说明*                                                                                    |
-| ----------------- | ----- | ---------------------------------------------------------------------------------------  |
-| schema-name (?)   | 属性   | JDBC 数据源别名，该参数可实现 JDBC 与 PROXY 共享配置                                               |
-
-### Cluster mode
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:cluster="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd">
-    <cluster:repository id="clusterRepository" type="Zookeeper" namespace="regCenter" server-lists="localhost:3182">
-        <props>
-            <prop key="max-retries">3</prop>
-            <prop key="operation-timeout-milliseconds">1000</prop>
-        </props>
-    </cluster:repository>
-    <shardingsphere:data-source id="shardingDatabasesTablesDataSource" data-source-names="demo_ds_0, demo_ds_1" rule-refs="shardingRule" schema-name="sharding_db">
-        <shardingsphere:mode type="Cluster" repository-ref="clusterRepository" overwrite="true"/>
-    </shardingsphere:data-source>
-</beans>
-```
-
-<cluster:repository />
-
-| *名称*         | *类型* | *说明*                                                                                    |
-| ------------- | ------ | ---------------------------------------------------------------------------------------  |
-| id            | 属性   | Cluster 模式实例名称                                                                       |
-| type          | 属性   | Cluster 模式类型。如：ZooKeeper, Etcd                                                      |
-| namespace     | 属性   | Cluster 模式命名空间                                                                       |
-| server-lists  | 属性   | Zookeeper 或 Etcd 服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181 |
-| props (?)     | 属性   | 配置本实例需要的其他参数，例如 ZooKeeper 的连接参数等                                         |
-
-<shardingsphere:data-source />
-
-| *名称*             | *类型* | *说明*                                                                                    |
-| ----------------- | ------ | ---------------------------------------------------------------------------------------  |
-| schema-name (?)   | 属性   | JDBC 数据源别名，该参数可实现 JDBC 与 PROXY 共享配置                                               |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mode.en.md
deleted file mode 100644
index 7f91bb6943..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mode.en.md
+++ /dev/null
@@ -1,87 +0,0 @@
-+++
-title = "Mode"
-weight = 5
-+++
-
-## Configuration Item Explanation
-
-### Standalone mode
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:standalone="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository.xsd">
-    <standalone:repository id="standaloneRepository" type="File">
-        <props>
-            <prop key="path">target</prop>
-        </props>
-    </standalone:repository>
-    <shardingsphere:data-source id="shardingDatabasesTablesDataSource" data-source-names="demo_ds_0, demo_ds_1" rule-refs="shardingRule" schema-name="sharding_db">
-        <shardingsphere:mode type="Standalone" repository-ref="standaloneRepository" overwrite="true"/>
-    </shardingsphere:data-source>
-</beans>
-```
-
-<standalone:repository />
-
-| *Name*        | *Type*     | *Description*                                                                                             |
-| ------------- | ---------- | --------------------------------------------------------------------------------------------------------- |
-| id            | Attribute  | Standalone mode instance name                                                                              |
-| type          | Attribute  | Standalone Configuration persist type, such as: File                                                       |
-| props (?)     | Attribute  | Configuration persist properties, such as: path                                                            |
-
-<shardingsphere:data-source />
-
-| *Name*            | *Type*     | *Description*                                                                                             |
-| ----------------- | ---------- | --------------------------------------------------------------------------------------------------------- |
-| schema-name (?)   | Attribute  | JDBC data source alias, this parameter can help the configuration shared between JDBC driver and Proxy    |
-
-### Cluster mode
-
-```xml
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
-       xmlns:cluster="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans
-                           http://www.springframework.org/schema/beans/spring-beans.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
-                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster
-                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd">
-    <cluster:repository id="clusterRepository" type="Zookeeper" namespace="regCenter" server-lists="localhost:3182">
-        <props>
-            <prop key="max-retries">3</prop>
-            <prop key="operation-timeout-milliseconds">1000</prop>
-        </props>
-    </cluster:repository>
-    <shardingsphere:data-source id="shardingDatabasesTablesDataSource" data-source-names="demo_ds_0, demo_ds_1" rule-refs="shardingRule" schema-name="sharding_db">
-        <shardingsphere:mode type="Cluster" repository-ref="clusterRepository" overwrite="true"/>
-    </shardingsphere:data-source>
-</beans>
-```
-
-<cluster:repository />
-
-| *Name*        | *Type*     | *Description*                                                                                             |
-| ------------- | ---------- | --------------------------------------------------------------------------------------------------------- |
-| id            | Attribute  | Cluster mode instance name                                                                                |
-| type          | Attribute  | Cluster mode type. Example: ZooKeeper, etcd                                                               |
-| namespace     | Attribute  | Cluster mode namespace                                                                                    |
-| server-lists  | Attribute  | Zookeeper or Etcd server list, including IP and port number; use commas to separate                       |
-| props (?)     | Attribute  | Properties for center instance config, such as options of zookeeper                                       |
-
-<shardingsphere:data-source />
-
-| *Name*            | *Type*     | *Description*                                                                                             |
-| ----------------- | ---------- | --------------------------------------------------------------------------------------------------------- |
-| schema-name (?)   | Attribute  | JDBC data source alias, this parameter can help the configuration shared between JDBC driver and Proxy    |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.cn.md
deleted file mode 100644
index 87e1a0bba9..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.cn.md
+++ /dev/null
@@ -1,181 +0,0 @@
-+++
-title = "YAML 配置"
-weight = 2
-+++
-
-## 简介
-
-YAML 提供通过配置文件的方式与 ShardingSphere-JDBC 交互。配合治理模块一同使用时，持久化在配置中心的配置均为 YAML 格式。
-
-YAML 配置是最常见的配置方式，可以省略编程的复杂度，简化用户配置。
-
-## 使用方式
-
-### 创建简单数据源
-
-通过 YamlShardingSphereDataSourceFactory 工厂创建的 ShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
-
-```java
-// 指定 YAML 文件路径
-File yamlFile = // ...
-
-DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile);
-```
-
-### 创建携带治理功能的数据源
-
-通过 YamlGovernanceShardingSphereDataSourceFactory 工厂创建的 GovernanceShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
-
-```java
-// 指定 YAML 文件路径
-File yamlFile = // ...
-
-DataSource dataSource = YamlGovernanceShardingSphereDataSourceFactory.createDataSource(yamlFile);
-```
-
-### 使用数据源
-
-可通过 DataSource 选择使用原生 JDBC，或JPA， MyBatis 等 ORM 框架。
-
-以原生 JDBC 使用方式为例：
-
-```java
-DataSource dataSource = // 通过Apache ShardingSphere 工厂创建的数据源
-String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
-try (
-        Connection conn = dataSource.getConnection();
-        PreparedStatement ps = conn.prepareStatement(sql)) {
-    ps.setInt(1, 10);
-    ps.setInt(2, 1000);
-    try (ResultSet rs = preparedStatement.executeQuery()) {
-        while(rs.next()) {
-            // ...
-        }
-    }
-}
-```
-
-## YAML 配置项
-
-### schemaName配置
-
-该参数为可选项，不配置则默认采用 logic_db 作为 schemaName。 
-schemaName 可理解为数据库中的 schema，JDBC 中的 datasource 的别名
-通过该参数与治理模块可实现 JDBC 与 PROXY 同时在线，共享配置。
-
-##### 配置示例
-
-```yaml
-schemaName: sharding_db
-```
-
-### 数据源配置
-
-分为单数据源配置和多数据源配置。
-单数据源配置用于数据加密规则；多数据源配置用于分片、读写分离等规则。
-如果加密和分片等功能混合使用，则应该使用多数据源配置。
-
-#### 单数据源配置
-
-##### 配置示例
-
-```yaml
-dataSource: !!org.apache.commons.dbcp2.BasicDataSource
-  driverClassName: com.mysql.jdbc.Driver
-  url: jdbc:mysql://127.0.0.1:3306/ds_name
-  username: root
-  password: root
-```
-
-##### 配置项说明
-
-```yaml
-dataSource: # <!!数据库连接池实现类> `!!`表示实例化该类
-  driverClassName: # 数据库驱动类名
-  url: # 数据库 URL 连接
-  username: # 数据库用户名
-  password: # 数据库密码
-  # ... 数据库连接池的其它属性
-```
-
-#### 多数据源配置
-
-##### 配置示例
-
-```yaml
-dataSources:
-  ds_0: !!org.apache.commons.dbcp2.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:ds_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password:
-  ds_1: !!org.apache.commons.dbcp2.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:ds_1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password:
-```
-
-##### 配置项说明
-
-```yaml
-dataSources: # 数据源配置，可配置多个 <data-source-name>
-  <data-source-name>: # <!!数据库连接池实现类>，`!!` 表示实例化该类
-    driverClassName: # 数据库驱动类名
-    url: # 数据库 URL 连接
-    username: # 数据库用户名
-    password: # 数据库密码
-    # ... 数据库连接池的其它属性
-```
-
-### 规则配置
-
-以规则别名开启配置，可配置多个规则。
-
-#### 配置示例
-
-```yaml
-rules:
--! XXX_RULE_0
-  xxx
--! XXX_RULE_1
-  xxx
-```
-
-#### 配置项说明
-
-```yaml
-rules:
--! XXX_RULE # 规则别名，`-` 表示可配置多个规则
-  # ... 具体的规则配置
-```
-
-更多详细配置请参见具体的规则配置部分。
-
-### 属性配置
-
-#### 配置示例
-
-```yaml
-props:
-  xxx: xxx
-```
-
-#### 配置项说明
-
-```yaml
-props:
-  xxx: xxx # 属性名称以及对应的值
-```
-
-更多详细配置请参见具体的规则配置部分。
-
-### 语法说明
-
-`!!` 表示实例化该类
-
-`!` 表示自定义别名
-
-`-` 表示可以包含一个或多个
-
-`[]` 表示数组，可以与减号相互替换使用
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
deleted file mode 100644
index 1b12384e14..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/_index.en.md
+++ /dev/null
@@ -1,183 +0,0 @@
-+++
-title = "YAML Configuration"
-weight = 2
-+++
-
-## Introduction
-
-YAML configuration provides interaction with ShardingSphere JDBC through configuration files. 
-When used with the governance module together, the configuration of persistence in the configuration center is YAML format.
-
-YAML configuration is the most common configuration mode, which can omit the complexity of programming and simplify user configuration.
-
-## Usage
-
-### Create Simple DataSource
-
-The ShardingSphereDataSource created by YamlShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
-
-```java
-// Indicate YAML file path
-File yamlFile = // ...
-
-DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile);
-```
-
-### Create Governance DataSource
-
-The GovernanceShardingSphereDataSource created by YamlGovernanceShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
-
-
-```java
-// Indicate YAML file path
-File yamlFile = // ...
-
-DataSource dataSource = YamlGovernanceShardingSphereDataSourceFactory.createDataSource(yamlFile);
-```
-
-### Use DataSource
-
-Developer can choose to use native JDBC or ORM frameworks such as JPA or MyBatis through the DataSource.
-
-Take native JDBC usage as an example:
-
-```java
-DataSource dataSource = // Use Apache ShardingSphere factory to create DataSource
-String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
-try (
-        Connection conn = dataSource.getConnection();
-        PreparedStatement ps = conn.prepareStatement(sql)) {
-    ps.setInt(1, 10);
-    ps.setInt(2, 1000);
-    try (ResultSet rs = preparedStatement.executeQuery()) {
-        while(rs.next()) {
-            // ...
-        }
-    }
-}
-```
-
-## YAML Configuration Item
-
-### schemaName Configuration
-
-This parameter is optional. If it is not configured, logic_db is used as the schemaName by default.
-schemaName can be understood as the schema in the database, the alias of the datasource in JDBC
-Through this parameter and the management module, JDBC and PROXY can be online at the same time, and the configuration can be shared.
-
-##### Configuration Example
-
-```yaml
-schemaName: sharding_db
-```
-
-### Data Source Configuration
-
-It is divided into single data source configuration and multi data source configuration.
-Single data source configuration used for data encryption rules; and multi data source configuration used for fragmentation, readwrite-splitting and other rules.
-If features such as encryption and sharding are used in combination, a multi data source configuration should be used.
-
-#### Single Data Source Configuration
-
-##### Configuration Example
-
-```yaml
-dataSource: !!org.apache.commons.dbcp2.BasicDataSource
-  driverClassName: com.mysql.jdbc.Driver
-  url: jdbc:mysql://127.0.0.1:3306/ds_name
-  username: root
-  password: root
-```
-
-##### Configuration Item Explanation
-
-```yaml
-dataSource: # <!!Data source pool implementation class> `!!` means class instantiation
-  driverClassName: # Class name of database driver
-  url: # Database URL
-  username: # Database username
-  password: # Database password
-    # ... Other properties for data source pool
-```
-
-#### Multi Data Source Configuration
-
-##### Configuration Example
-
-```yaml
-dataSources:
-  ds_0: !!org.apache.commons.dbcp2.BasicDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    url: jdbc:mysql://127.0.0.1:3306/ds_0
-    username: sa
-    password:
-  ds_1: !!org.apache.commons.dbcp2.BasicDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    url: jdbc:mysql://127.0.0.1:3306/ds_1
-    username: sa
-    password:
-```
-
-##### Configuration Item Explanation
-
-```yaml
-dataSources: # Data sources configuration, multiple <data-source-name> available
-  <data-source-name>: # <!!Data source pool implementation class> `!!` means class instantiation
-    driverClassName: # Class name of database driver
-    url: # Database URL
-    username: # Database username
-    password: # Database password
-    # ... Other properties for data source pool
-```
-
-### Rule Configuration
-
-Begin to configure with the rule alias to configure multiple rules.
-
-#### Configuration Example
-
-```yaml
-rules:
--! XXX_RULE_0
-  xxx
--! XXX_RULE_1
-  xxx
-```
-
-#### Configuration Item Explanation
-
-```yaml
-rules:
--! XXX_RULE # Rule alias, `-` means can configure multi rules
-  # ... Specific rule configurations
-```
-
-Please refer to specific rule configuration for more details.
-
-### Properties Configuration
-
-#### Configuration Example
-
-```yaml
-props:
-  xxx: xxx
-```
-
-#### Configuration Item Explanation
-
-```yaml
-props:
-  xxx: xxx # Properties key and value
-```
-
-Please refer to specific rule configuration for more details.
-
-### YAML Syntax Explanation
-
-`!!` means instantiation of that class
-
-`!` means self-defined alias
-
-`-` means one or multiple can be included
-
-`[]` means array, can substitutable with `-` each other
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/change-history.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/change-history.en.md
deleted file mode 100644
index 72ea17827a..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/change-history.en.md
+++ /dev/null
@@ -1,173 +0,0 @@
-+++
-title = "Change History"
-weight = 7
-+++
-
-## 5.0.0-alpha
-
-### Replica Query
-
-#### Configuration Item Explanation
-
-```yaml
-dataSource: # Omit the data source configuration, please refer to the usage
-
-rules:
-- !REPLICA_QUERY
-  dataSources:
-    <data-source-name> (+): # Logic data source name of replica query
-      primaryDataSourceName: # Primary data source name
-      replicaDataSourceNames: 
-        - <replica-data-source-name> (+) # Replica data source name
-      loadBalancerName: # Load balance algorithm name
-  
-  # Load balance algorithm configuration
-  loadBalancers:
-    <load-balancer-name> (+): # Load balance algorithm name
-      type: # Load balance algorithm type
-      props: # Load balance algorithm properties
-        # ...
-
-props:
-  # ...
-```
-
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
-
-## ShardingSphere-4.x
-
-### Readwrite-splitting
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources:
-  ds_master: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    url: jdbc:mysql://localhost:3306/ds_master
-    username: root
-    password: 
-  ds_slave0: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    url: jdbc:mysql://localhost:3306/ds_slave0
-    username: root
-    password:
-  ds_slave1: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    url: jdbc:mysql://localhost:3306/ds_slave1
-    username: root
-    password: 
-
-masterSlaveRule:
-  name: ds_ms
-  masterDataSourceName: ds_master
-  slaveDataSourceNames: [ds_slave0, ds_slave1]
-  
-props:
-  sql.show: true
-```
-
-Create a `DataSource` through the `YamlMasterSlaveDataSourceFactory` factory class:
-
-```java
-DataSource dataSource = YamlMasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
-
-## ShardingSphere-3.x
-
-### Readwrite-splitting
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources:
-  ds_master: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    url: jdbc:mysql://localhost:3306/ds_master
-    username: root
-    password: 
-  ds_slave0: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    url: jdbc:mysql://localhost:3306/ds_slave0
-    username: root
-    password:
-  ds_slave1: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: com.mysql.jdbc.Driver
-    url: jdbc:mysql://localhost:3306/ds_slave1
-    username: root
-    password: 
-
-masterSlaveRule:
-  name: ds_ms
-  masterDataSourceName: ds_master
-  slaveDataSourceNames: [ds_slave0, ds_slave1]
-  props:
-      sql.show: true
-  configMap:
-      key1: value1
-```
-
-Create a `DataSource` through the `MasterSlaveDataSourceFactory` factory class:
-
-```java
-DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
-
-## ShardingSphere-2.x
-
-### Readwrite-splitting
-
-#### Concept
-
-In order to relieve the pressure on the database, the write and read operations are separated into different data sources. The write library is called the master library, and the read library is called the slave library. One master library can be configured with multiple slave libraries.
-
-#### Supported
-
-1. Provides a readwrite-splitting configuration with one master and multiple slaves, which can be used independently or with sub-databases and sub-meters.
-2. Independent use of readwrite-splitting to support SQL transparent transmission.
-3. In the same thread and the same database connection, if there is a write operation, subsequent read operations will be read from the main library to ensure data consistency.
-4. Spring namespace.
-5. Hint-based mandatory main library routing.
-
-#### Unsupported
-
-1. Data synchronization between the master library and the slave library.
-2. Data inconsistency caused by the data synchronization delay of the master library and the slave library.
-3. Double writing or multiple writing in the main library.
-
-#### Configuration Item Explanation
-
-```yaml
-dataSources:
-  db_master: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db_master;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-  db_slave_0: !!org.apache.commons.dbcp.BasicDataSource
-    driverClassName: org.h2.Driver
-    url: jdbc:h2:mem:db_slave_0;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-    username: sa
-    password: 
-    maxActive: 100
-  db_slave_1: !!org.apache.commons.dbcp.BasicDataSource
-      driverClassName: org.h2.Driver
-      url: jdbc:h2:mem:db_slave_1;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
-      username: sa
-      password: 
-      maxActive: 100
-
-masterSlaveRule:
-  name: db_ms
-  masterDataSourceName: db_master
-  slaveDataSourceNames: [db_slave_0, db_slave_1]
-  configMap:
-    key1: value1
-```
-
-Create a `DataSource` through the `MasterSlaveDataSourceFactory` factory class:
-
-```java
-DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(yamlFile);
-```
\ No newline at end of file
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mode.cn.md
deleted file mode 100644
index 5b6eadc9bc..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mode.cn.md
+++ /dev/null
@@ -1,42 +0,0 @@
-+++
-title = "Mode"
-weight = 5
-+++
-
-## 配置项说明
-
-### Memory mode
-```yaml
-schema:
-  name: # JDBC 数据源别名。可选项，不配置则默认采用 logic_db 作为 schemaName，该参数可实现 JDBC 与 PROXY 共享配置 
-mode:
-  type: # Memory
-```
-
-### Standalone mode
-```yaml
-schema:
-  name: # JDBC 数据源别名。可选项，不配置则默认采用 logic_db 作为 schemaName，该参数可实现 JDBC 与 PROXY 共享配置
-mode:
-  type: # Standalone
-  repository:
-    type: # Standalone 配置持久化类型。如：File
-    props:
-      path: # 配置信息存储路径
-  overwrite: true # 本地配置是否覆盖文件配置。如果可覆盖，每次启动都以本地配置为准。
-```
-
-### Cluster mode
-
-```yaml
-schema:
-  name: # JDBC 数据源别名。可选项，不配置则默认采用 logic_db 作为 schemaName，该参数可实现 JDBC 与 PROXY 共享配置
-mode:
-  type: # Cluster
-  repository:
-    type: # Cluster 持久化类型。如：Zookeeper，Etcd
-    props:
-      namespace: # Cluster 实例名称
-      server-lists: # Zookeeper 或 Etcd 服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。如: host1:2181,host2:2181
-  overwrite: true # 本地配置是否覆盖配置中心配置。如果可覆盖，每次启动都以本地配置为准。
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mode.en.md
deleted file mode 100644
index 4e883306ec..0000000000
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mode.en.md
+++ /dev/null
@@ -1,41 +0,0 @@
-+++
-title = "Mode"
-weight = 5
-+++
-
-## Configuration Item Explanation
-
-### Memory mode
-```yaml
-schema:
-  name: # JDBC data source alias. Optional, if it is not configured, logic_db is used as the schemaName by default, this parameter can help the configuration shared between JDBC driver and Proxy
-mode:
-  type: # Memory
-```
-
-### Standalone mode
-```yaml
-schema:
-  name: # JDBC data source alias. Optional, if it is not configured, logic_db is used as the schemaName by default, this parameter can help the configuration shared between JDBC driver and Proxy
-mode:
-  type: # Standalone
-  repository:
-    type: # Standalone Configuration persist type, such as: File
-    props:
-      path: # Configuration persist path
-  overwrite: true # Local configurations overwrite file configurations or not; if they overwrite, each start takes reference of local configurations.
-```
-
-### Cluster mode
-```yaml
-schema:
-  name: # JDBC data source alias. Optional, if it is not configured, logic_db is used as the schemaName by default, this parameter can help the configuration shared between JDBC driver and Proxy
-mode:
-  type: # Cluster
-  repository:
-    type: # Cluster persist type. Such as : Zookeeper，Etcd
-    props:
-      namespace: # Cluster instance namespace
-      server-lists: # Zookeeper or Etcd server list. including IP and port number; use commas to separate
-  overwrite: true # Local configurations overwrite config center configurations or not; if they overwrite, each start takes reference of local configurations.
-```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/_index.cn.md
new file mode 100644
index 0000000000..f383c0453d
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/_index.cn.md
@@ -0,0 +1,68 @@
++++
+title = "Java API"
+weight = 1
+chapter = true
++++
+
+## 简介
+
+Java API 是 ShardingSphere-JDBC 中所有配置方式的基础，其他配置最终都将转化成为 Java API 的配置方式。
+
+Java API 是最繁琐也是最灵活的配置方式，适合需要通过编程进行动态配置的场景下使用。
+
+## 使用步骤
+
+### 引入 Maven 依赖
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
+### 构建数据源
+
+ShardingSphere-JDBC 的 Java API 通过 Schema 名称、运行模式、数据源集合、规则集合以及属性配置组成。
+
+通过 ShardingSphereDataSourceFactory 工厂创建的 ShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
+
+```java
+String schemaName = "foo_schema"; // 指定逻辑 Schema 名称
+ModeConfiguration modeConfig = ... // 构建运行模式
+Map<String, DataSource> dataSourceMap = ... // 构建真实数据源
+Collection<RuleConfiguration> ruleConfigs = ... // 构建具体规则
+Properties props = ... // 构建属性配置
+DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(schemaName, modeConfig, dataSourceMap, ruleConfigs, props);
+```
+
+模式详情请参见[模式配置](/cn/user-manual/shardingsphere-jdbc/java-api/mode)。
+
+数据源详情请参见[数据源配置](/cn/user-manual/shardingsphere-jdbc/java-api/data-source)。
+
+规则详情请参见[规则配置](/cn/user-manual/shardingsphere-jdbc/java-api/rules)。
+
+### 使用数据源
+
+可通过 DataSource 选择使用原生 JDBC，或 JPA、Hibernate、MyBatis 等 ORM 框架。
+
+以原生 JDBC 使用方式为例：
+
+```java
+// 创建 ShardingSphereDataSource
+DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(schemaName, modeConfig, dataSourceMap, ruleConfigs, props);
+
+String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
+try (
+        Connection conn = dataSource.getConnection();
+        PreparedStatement ps = conn.prepareStatement(sql)) {
+    ps.setInt(1, 10);
+    ps.setInt(2, 1000);
+    try (ResultSet rs = preparedStatement.executeQuery()) {
+        while(rs.next()) {
+            // ...
+        }
+    }
+}
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/_index.en.md
new file mode 100644
index 0000000000..5dee8ee34d
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/_index.en.md
@@ -0,0 +1,69 @@
++++
+title = "Java API"
+weight = 1
+chapter = true
++++
+
+## Overview
+
+Java API is the basic configuration methods in ShardingSphere-JDBC,
+and other configurations will eventually be transformed into Java API configuration methods.
+
+The Java API is the most complex and flexible configuration method, which is suitable for the scenarios requiring dynamic configuration through programming.
+
+## Usage
+
+### Import Maven Dependency
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
+### Create Data Source
+
+ShardingSphere-JDBC Java API consists of schema name, mode configuration, data source map, rule configurations and properties.
+
+The ShardingSphereDataSource created by ShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
+
+```java
+String schemaName = "foo_schema"; // Indicate logic schema name
+ModeConfiguration modeConfig = ... // Build mode configuration
+Map<String, DataSource> dataSourceMap = ... // Build actual data sources
+Collection<RuleConfiguration> ruleConfigs = ... // Build concentrate rule configurations
+Properties props = ... // Build properties
+DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(schemaName, modeConfig, dataSourceMap, ruleConfigs, props);
+```
+
+Please refer to [Mode Confiugration](/en/user-manual/shardingsphere-jdbc/java-api/mode) for more mode details.
+
+Please refer to [Data Source Confiugration](/en/user-manual/shardingsphere-jdbc/java-api/data-source) for more data source details.
+
+Please refer to [Rules Confiugration](/en/user-manual/shardingsphere-jdbc/java-api/rules) for more rule details.
+
+### Use Data Source
+
+Developer can choose to use native JDBC or ORM frameworks such as JPA, Hibernate or MyBatis through the DataSource.
+
+Take native JDBC usage as an example:
+
+```java
+// Create ShardingSphereDataSource
+DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(schemaName, modeConfig, dataSourceMap, ruleConfigs, props);
+
+String sql = "SELECT i.* FROM t_order o JOIN t_order_item i ON o.order_id=i.order_id WHERE o.user_id=? AND o.order_id=?";
+try (
+        Connection conn = dataSource.getConnection();
+        PreparedStatement ps = conn.prepareStatement(sql)) {
+    ps.setInt(1, 10);
+    ps.setInt(2, 1000);
+    try (ResultSet rs = preparedStatement.executeQuery()) {
+        while(rs.next()) {
+            // ...
+        }
+    }
+}
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.cn.md
new file mode 100644
index 0000000000..27ecefff47
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.cn.md
@@ -0,0 +1,32 @@
++++
+title = "数据源配置"
+weight = 2
+chapter = true
++++
+
+ShardingSphere-JDBC 支持所有的数据库 JDBC 驱动和连接池。
+
+示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。
+
+```java
+Map<String, DataSource> dataSourceMap = new HashMap<>();
+
+// 配置第 1 个数据源
+HikariDataSource dataSource1 = new HikariDataSource();
+dataSource1.setDriverClassName("com.mysql.jdbc.Driver");
+dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
+dataSource1.setUsername("root");
+dataSource1.setPassword("");
+dataSourceMap.put("ds_1", dataSource1);
+
+// 配置第 2 个数据源
+HikariDataSource dataSource2 = new HikariDataSource();
+dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
+dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
+dataSource2.setUsername("root");
+dataSource2.setPassword("");
+dataSourceMap.put("ds_2", dataSource2);
+
+// 配置其他数据源
+...
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.en.md
new file mode 100644
index 0000000000..40f19ee629
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.en.md
@@ -0,0 +1,32 @@
++++
+title = "Data Source"
+weight = 2
+chapter = true
++++
+
+ShardingSphere-JDBC Supports all JDBC drivers and database connection pools.
+
+In this example, the database driver is MySQL, and connection pool is HikariCP, which can be replaced with other database drivers and connection pools.
+
+```java
+Map<String, DataSource> dataSourceMap = new HashMap<>();
+        
+// Configure the 1st data source
+HikariDataSource dataSource1 = new HikariDataSource();
+dataSource1.setDriverClassName("com.mysql.jdbc.Driver");
+dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
+dataSource1.setUsername("root");
+dataSource1.setPassword("");
+dataSourceMap.put("ds_1", dataSource1);
+        
+// Configure the 2nd data source
+HikariDataSource dataSource2 = new HikariDataSource();
+dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
+dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
+dataSource2.setUsername("root");
+dataSource2.setPassword("");
+dataSourceMap.put("ds_2", dataSource2);
+
+// Configure other data sources
+...
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/mode.cn.md
new file mode 100644
index 0000000000..4eaa747d84
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/mode.cn.md
@@ -0,0 +1,41 @@
++++
+title = "模式配置"
+weight = 1
+chapter = true
++++
+
+## 配置入口
+
+类名称：org.apache.shardingsphere.infra.config.mode.ModeConfiguration
+
+可配置属性：
+
+| *名称*      | *数据类型*                      | *说明*                                                                                                                                                                      | *默认值* |
+| ---------- | ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
+| type       | String                         | 运行模式类型<br />可选配置：Memory、Standalone、Cluster                                                                                                                         | Memory  |
+| repository | PersistRepositoryConfiguration | 持久化仓库配置<br />Memory 类型无需持久化，可以为 null<br />Standalone 类型使用 StandalonePersistRepositoryConfiguration<br />Cluster 类型使用 ClusterPersistRepositoryConfiguration |         |
+| overwrite  | boolean                        | 是否使用本地配置覆盖持久化配置                                                                                                                                                   | false   |
+
+## Standalone 持久化配置
+
+类名称：org.apache.shardingsphere.mode.repository.standalone.StandalonePersistRepositoryConfiguration
+
+可配置属性：
+
+| *名称* | *数据类型*  | *说明*           |
+| ----- | ---------- | --------------- |
+| type  | String     | 持久化仓库类型    |
+| props | Properties | 持久化仓库所需属性 |
+
+## Cluster 持久化配置
+
+类名称：org.apache.shardingsphere.mode.repository.cluster.ClusterPersistRepositoryConfiguration
+
+可配置属性：
+
+| *名称*       | *数据类型*  | *说明*           |
+| ----------- | ---------- | --------------- |
+| type        | String     | 持久化仓库类型     |
+| namespace   | String     | 注册中心命名空间   |
+| serverLists | String     | 注册中心连接地址   |
+| props       | Properties | 持久化仓库所需属性 |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/mode.en.md
new file mode 100644
index 0000000000..07d50de097
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/mode.en.md
@@ -0,0 +1,41 @@
++++
+title = "Mode Configuration"
+weight = 1
+chapter = true
++++
+
+## Root Configuration
+
+Class name: org.apache.shardingsphere.infra.config.mode.ModeConfiguration
+
+Attributes:
+
+| *Name*     | *DataType*                     | *Description*                                                                                                                                                                                                          | *Default Value* |
+| ---------- | ------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- |
+| type       | String                         | Type of mode configuration<br />Values could be: Memory, Standalone, Cluster                                                                                                                                           | Memory          |
+| repository | PersistRepositoryConfiguration | Persist repository configuration<br />Memory type does not need persist, could be null<br />Standalone type uses StandalonePersistRepositoryConfiguration<br />Cluster type uses ClusterPersistRepositoryConfiguration |                 |
+| overwrite  | boolean                        | Whether overwrite persistent configuration with local configuration                                                                                                                                                    | false           |
+
+## Standalone Persist Configuration
+
+Class name: org.apache.shardingsphere.mode.repository.standalone.StandalonePersistRepositoryConfiguration
+
+Attributes:
+
+| *Name* | *DataType* | *Description*                    |
+| ------ | ---------- | -------------------------------- |
+| type   | String     | Type of persist repository       |
+| props  | Properties | Properties of persist repository |
+
+## Cluster Persist Configuration
+
+Class name: org.apache.shardingsphere.mode.repository.cluster.ClusterPersistRepositoryConfiguration
+
+Attributes:
+
+| *Name*      | *DataType* | *Description*                    |
+| ----------- | ---------- | -------------------------------- |
+| type        | String     | Type of persist repository       |
+| namespace   | String     | Namespace of registry center     |
+| serverLists | String     | Server lists of registry center  |
+| props       | Properties | Properties of persist repository |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/_index.cn.md
new file mode 100644
index 0000000000..922eea7f4b
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/_index.cn.md
@@ -0,0 +1,8 @@
++++
+title = "规则配置"
+weight = 3
+chapter = true
++++
+
+规则是 Apache ShardingSphere 面向可插拔的一部分。
+本章节是 ShardingSphere-JDBC 的 Java 规则配置参考手册。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/_index.en.md
new file mode 100644
index 0000000000..d88fb5251a
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/_index.en.md
@@ -0,0 +1,8 @@
++++
+title = "Rules"
+weight = 3
+chapter = true
++++
+
+Rules are pluggable part of Apache ShardingSphere.
+This chapter is a java rule configuration manual for ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/encrypt.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.cn.md
similarity index 93%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/encrypt.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.cn.md
index b0e47c0e88..fda9917419 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/encrypt.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "数据加密"
-weight = 3
+weight = 4
 +++
 
 ## 配置入口
@@ -21,7 +21,7 @@ weight = 3
 
 可配置属性：
 
-| *名称*      | *数据类型*                                    | *说明*           |
+| *名称*       | *数据类型*                                    | *说明*           |
 | ----------- | -------------------------------------------- | --------------- |
 | name        | String                                       | 表名称           |
 | columns (+) | Collection\<EncryptColumnRuleConfiguration\> | 加密列规则配置列表 |
@@ -52,4 +52,4 @@ weight = 3
 | type       | String     | 加解密算法类型     |
 | properties | Properties | 加解密算法属性配置 |
 
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt)。
+算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/encrypt.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.en.md
similarity index 96%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/encrypt.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.en.md
index 6fb615561e..4868e2d2b6 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/encrypt.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/encrypt.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Encryption"
-weight = 3
+weight = 4
 +++
 
 ## Root Configuration
@@ -52,4 +52,4 @@ Attributes:
 | type       | String     | Encrypt algorithm type       |
 | properties | Properties | Encrypt algorithm properties |
 
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt) for more details about type of algorithm.
+Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.cn.md
new file mode 100644
index 0000000000..d8c4af64b6
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.cn.md
@@ -0,0 +1,6 @@
++++
+title = "高可用"
+weight = 3
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.en.md
new file mode 100644
index 0000000000..fdbdfbf1ef
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/ha.en.md
@@ -0,0 +1,6 @@
++++
+title = "HA"
+weight = 3
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mix.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mix.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mix.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/mix.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/mix.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/readwrite-splitting.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.cn.md
similarity index 94%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/readwrite-splitting.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.cn.md
index 18ecef0273..5bc151a51e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/readwrite-splitting.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.cn.md
@@ -27,5 +27,5 @@ weight = 2
 | readDataSourceNames (+)    | Collection\<String\> | 读库数据源名称列表    | -             |
 | loadBalancerName (?)       | String               | 读库负载均衡算法名称  | 轮询负载均衡算法 |
 
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
 查询一致性路由的详情，请参见[使用规范](/cn/features/readwrite-splitting/use-norms)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/readwrite-splitting.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.en.md
similarity index 94%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/readwrite-splitting.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.en.md
index 89a6a3a627..b003e13923 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/readwrite-splitting.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting.en.md
@@ -27,5 +27,5 @@ Attributes:
 | readDataSourceNames (+)    | Collection\<String\> | Read sources source name list                  | -                                  |
 | loadBalancerName (?)       | String               | Load balance algorithm name of replica sources | Round robin load balance algorithm |
 
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
 Please refer to [Use Norms](/en/features/readwrite-splitting/use-norms) for more details about query consistent routing.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.cn.md
new file mode 100644
index 0000000000..d0b3955c59
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.cn.md
@@ -0,0 +1,44 @@
++++
+title = "影子库"
+weight = 5
++++
+
+## 配置入口
+
+类名称：org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
+
+可配置属性：
+
+| *名称*                      | *数据类型*                                           | *说明*               | *默认值* |
+| -------------------------- | --------------------------------------------------- | ------------------- | ------- |
+| enable                     | boolean                                             | 影子库开关            | false   |
+| dataSources                | Map\<String, ShadowDataSourceConfiguration\>        | 影子数据源映射名称和配置 |        |
+| tables                     | Map\<String, ShadowTableConfiguration\>             | 影子表名称和配置       |        |
+| defaultShadowAlgorithmName | String                                              | 默认影子算法名称       |        |
+| shadowAlgorithms           | Map\<String, ShardingSphereAlgorithmConfiguration\> | 影子算法名称和配置     | 无      |
+
+## 影子数据源配置
+
+类名称：org.apache.shardingsphere.shadow.api.config.datasource.ShadowDataSourceConfiguration
+
+可配置属性：
+
+| *名称*                | *数据类型* | *说明*       |
+| -------------------- | --------- | ----------- |
+| sourceDataSourceName | String    | 生产数据源名称 |
+| shadowDataSourceName | String    | 影子数据源名称 |
+
+## 影子表配置
+
+类名称：org.apache.shardingsphere.shadow.api.config.table.ShadowTableConfiguration
+
+可配置属性：
+
+| *名称*                | *数据类型*            | *说明*                   |
+| -------------------- | -------------------- | ----------------------- |
+| dataSourceNames      | Collection\<String\> | 影子表关联影子数据源名称列表 |
+| shadowAlgorithmNames | Collection\<String\> | 影子表关联影子算法名称列表   |
+
+## 影子算法配置
+
+算法类型的详情，请参见[内置影子算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.en.md
new file mode 100644
index 0000000000..784d028aff
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/shadow.en.md
@@ -0,0 +1,44 @@
++++
+title = "Shadow DB"
+weight = 5
++++
+
+## Root Configuration
+
+Class name: org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
+
+Attributes:
+
+| *Name*                     | *DataType*                                          | *Description*                                     | *Default Value* |
+| -------------------------- | --------------------------------------------------- | ------------------------------------------------- | --------------- |
+| enable                     | boolean                                             | Shadow database switch                            | false           |
+| dataSources                | Map\<String, ShadowDataSourceConfiguration\>        | Shadow data source mapping name and configuration |                 |
+| tables                     | Map\<String, ShadowTableConfiguration\>             | Shadow table name and configuration               |                 |
+| defaultShadowAlgorithmName | String                                              | default shadow algorithm name                     |                 |
+| shadowAlgorithms           | Map\<String, ShardingSphereAlgorithmConfiguration\> | Shadow algorithm name and configuration           |                 |
+
+## Shadow Data Source Configuration
+
+Class name: org.apache.shardingsphere.shadow.api.config.datasource.ShadowDataSourceConfiguration
+
+Attributes:
+
+| *Name*               | *DataType* | *Description*               |
+| -------------------- | ---------- | --------------------------- |
+| sourceDataSourceName | String     | Production data source name |
+| shadowDataSourceName | String     | Shadow data source name     |
+
+## Shadow Table Configuration
+
+Class name: org.apache.shardingsphere.shadow.api.config.table.ShadowTableConfiguration
+
+Attributes:
+
+| *Name*               | *DataType*           | *Description*                                  |
+| -------------------- | -------------------- | ---------------------------------------------- |
+| dataSourceNames      | Collection\<String\> | Shadow table location shadow data source names |
+| shadowAlgorithmNames | Collection\<String\> | Shadow table location shadow algorithm names   |
+
+## Shadow Algorithm Configuration
+
+Please refer to [Built-in Shadow Algorithm List](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/shadow).
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.cn.md
similarity index 97%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/sharding.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.cn.md
index 5562c2d32d..c324c1328f 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/sharding.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.cn.md
@@ -89,7 +89,7 @@ weight = 1
 
 可配置属性：无
 
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding)。
+算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)。
 
 ## 分布式序列策略配置
 
@@ -102,4 +102,4 @@ weight = 1
 | column           | String   | 分布式序列列名称   |
 | keyGeneratorName | String   | 分布式序列算法名称 |
 
-算法类型的详情，请参见[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen)。
+算法类型的详情，请参见[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.en.md
similarity index 97%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/sharding.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.en.md
index 86d3081e88..580b048e12 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/java-api/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/rules/sharding.en.md
@@ -89,7 +89,7 @@ Class name: org.apache.shardingsphere.sharding.api.config.strategy.sharding.None
 
 Attributes: None
 
-Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding) for more details about type of algorithm.
+Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) for more details about type of algorithm.
 
 ## Key Generate Strategy Configuration
 
@@ -102,4 +102,4 @@ Attributes:
 | column           | String     | Column name of key generate |
 | keyGeneratorName | String     | key generate algorithm name |
 
-Please refer to [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen) for more details about type of algorithm.
+Please refer to [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/props.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/props.cn.md
new file mode 100644
index 0000000000..944409298b
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/props.cn.md
@@ -0,0 +1,20 @@
++++
+title = "属性配置"
+weight = 6
+chapter = true
++++
+
+Apache ShardingSphere 提供属性配置的方式配置系统级配置。
+
+## 配置项说明
+
+| *名称*                              | *数据类型*  | *说明*                                                                                                                                                                      | *默认值*  |
+| ---------------------------------- | ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- |
+| sql-show (?)                       | boolean    | 是否在日志中打印 SQL<br /> 打印 SQL 可以帮助开发者快速定位系统问题。日志内容包含：逻辑 SQL，真实 SQL 和 SQL 解析结果。<br /> 如果开启配置，日志将使用 Topic `ShardingSphere-SQL`，日志级别是 INFO | false    |
+| sql-simple (?)                     | boolean    | 是否在日志中打印简单风格的 SQL                                                                                                                                                  | false    |
+| kernel-executor-size (?)           | int        | 用于设置任务处理线程池的大小<br />每个 ShardingSphereDataSource 使用一个独立的线程池，同一个 JVM 的不同数据源不共享线程池                                                                  | infinite |
+| max-connections-size-per-query (?) | int        | 一次查询请求在每个数据库实例中所能使用的最大连接数                                                                                                                                   | 1        |
+| check-table-metadata-enabled (?)   | boolean    | 在程序启动和更新时，是否检查分片元数据的结构一致性                                                                                                                                   | false    |
+| check-duplicate-table-enabled (?)  | boolean    | 在程序启动和更新时，是否检查重复表                                                                                                                                                | false    |
+| sql-comment-parse-enabled (?)      | boolean    | 是否解析 SQL 注释                                                                                                                                                             | false    |
+| sql-federation-enabled (?)         | boolean    | 是否开启联邦查询                                                                                                                                                               | false    |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/props.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/props.en.md
similarity index 66%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/props.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/props.en.md
index d5ba5e56f5..d2c70927ff 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/props.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/props.en.md
@@ -4,19 +4,17 @@ weight = 6
 chapter = true
 +++
 
-## Introduction
-
 Apache ShardingSphere provides the way of property configuration to configure system level configuration.
 
 ## Configuration Item Explanation
 
-| *Name*                             | *Data Type* | *Description*                                                                                                                                                                                                                                                | *Default Value* |
-| ---------------------------------- | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------- |
-| sql-show (?)                       | boolean     | Whether show SQL or not in log. <br /> Print SQL details can help developers debug easier. The log details include: logic SQL, actual SQL and SQL parse result. <br /> Enable this property will log into log topic `ShardingSphere-SQL`, log level is INFO. | false           |
-| sql-simple (?)                     | boolean     | Whether show SQL details in simple style.                                                                                                                                                                                                                    | false           |
-| kernel-executor-size (?)           | int         | The max thread size of worker group to execute SQL. One ShardingSphereDataSource will use a independent thread pool, it does not share thread pool even different data source in same JVM.                                                                   | infinite        |
-| max-connections-size-per-query (?) | int         | Max opened connection size for each query.                                                                                                                                                                                                                   | 1               |
-| check-table-metadata-enabled (?)   | boolean     | Whether validate table meta data consistency when application startup or updated.                                                                                                                                                                            | false           |
-| check-duplicate-table-enabled (?)  | boolean     | Whether validate duplicate table when application startup or updated.                                                                                                                                                                                        | false           |
-| sql-comment-parse-enabled (?)      | boolean     | Whether parse the comment of SQL.                                                                                                                                                                                                                            | false           |
-| sql-federation-enabled (?)         | boolean     | Whether enable sql federation.                                                                                                                                                                                                                               | false           |
+| *Name*                             | *Data Type* | *Description*                                                                                                                                                                                                                                               | *Default Value* |
+| ---------------------------------- | ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- |
+| sql-show (?)                       | boolean     | Whether show SQL or not in log. <br /> Print SQL details can help developers debug easier. The log details include: logic SQL, actual SQL and SQL parse result. <br /> Enable this property will log into log topic `ShardingSphere-SQL`, log level is INFO | false           |
+| sql-simple (?)                     | boolean     | Whether show SQL details in simple style                                                                                                                                                                                                                    | false           |
+| kernel-executor-size (?)           | int         | The max thread size of worker group to execute SQL. One ShardingSphereDataSource will use a independent thread pool, it does not share thread pool even different data source in same JVM                                                                   | infinite        |
+| max-connections-size-per-query (?) | int         | Max opened connection size for each query                                                                                                                                                                                                                   | 1               |
+| check-table-metadata-enabled (?)   | boolean     | Whether validate table meta data consistency when application startup or updated                                                                                                                                                                            | false           |
+| check-duplicate-table-enabled (?)  | boolean     | Whether validate duplicate table when application startup or updated                                                                                                                                                                                        | false           |
+| sql-comment-parse-enabled (?)      | boolean     | Whether parse the comment of SQL                                                                                                                                                                                                                            | false           |
+| sql-federation-enabled (?)         | boolean     | Whether enable SQL federation                                                                                                                                                                                                                               | false           |
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/_index.cn.md
similarity index 90%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/_index.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/_index.cn.md
index 370d4e623a..bd0d6f87a6 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/_index.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "特殊 API"
-weight = 2
+weight = 7
 chapter = true
 +++
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/_index.en.md
similarity index 91%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/_index.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/_index.en.md
index 74081020fe..0945cf6839 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/_index.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Special API"
-weight = 2
+weight = 7
 chapter = true
 +++
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/_index.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/_index.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/_index.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/_index.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/_index.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/_index.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/agent.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/agent.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/agent.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/agent.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/agent.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/agent.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/agent.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/agent.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/apm-integration.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/apm-integration.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/apm-integration.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/apm-integration.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/apm-integration.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/apm-integration.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/observability/apm-integration.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/observability/apm-integration.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/sharding/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/sharding/_index.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/sharding/_index.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/sharding/_index.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/sharding/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/sharding/_index.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/sharding/_index.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/sharding/_index.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/sharding/hint.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/sharding/hint.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/sharding/hint.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/sharding/hint.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/sharding/hint.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/sharding/hint.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/sharding/hint.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/sharding/hint.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/_index.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/_index.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/_index.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/_index.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/_index.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/_index.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/atomikos.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/atomikos.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/atomikos.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/atomikos.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/atomikos.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/atomikos.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/atomikos.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/atomikos.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/bitronix.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/bitronix.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/bitronix.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/bitronix.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/bitronix.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/bitronix.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/bitronix.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/bitronix.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/java-api.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/java-api.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/java-api.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/java-api.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/java-api.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/java-api.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/java-api.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/java-api.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/narayana.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/narayana.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/narayana.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/narayana.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/narayana.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/narayana.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/narayana.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/narayana.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/seata.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/seata.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/seata.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/seata.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/spring-boot-starter.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/spring-boot-starter.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/spring-boot-starter.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/spring-boot-starter.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/spring-boot-starter.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/spring-boot-starter.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/spring-boot-starter.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/spring-boot-starter.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/spring-namespace.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/spring-namespace.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/spring-namespace.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/spring-namespace.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/spring-namespace.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/spring-namespace.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/api/special/transaction/spring-namespace.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/spring-namespace.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/_index.cn.md
new file mode 100644
index 0000000000..460f3f0c30
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/_index.cn.md	
@@ -0,0 +1,62 @@
++++
+title = "Spring 命名空间"
+weight = 4
+chapter = true
++++
+
+## 简介
+
+ShardingSphere-JDBC 提供官方的 Spring 命名空间，使开发者可以非常便捷的整合 ShardingSphere-JDBC 和 Spring。
+
+## 使用步骤
+
+### 引入 Maven 依赖
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
+## 配置 Spring Bean
+
+### 配置项说明
+
+命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd)
+
+\<shardingsphere:data-source />
+
+| *名称*             | *类型* | *说明*                                                                            |
+| ----------------- | ----- | --------------------------------------------------------------------------------- |
+| id                | 属性  | Spring Bean Id                                                                     |
+| schema-name (?)   | 属性  | JDBC 数据源别名                                                                      |
+| data-source-names | 标签  | 数据源名称，多个数据源以逗号分隔                                                         |
+| rule-refs         | 标签  | 规则名称，多个规则以逗号分隔                                                            |
+| mode (?)          | 标签  | 运行模式配置                                                                         |
+| props (?)         | 标签  | 属性配置，详情请参见[属性配置](/cn/user-manual/shardingsphere-jdbc/configuration/props) |
+
+### 配置示例
+
+```xml
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans 
+                           http://www.springframework.org/schema/beans/spring-beans.xsd 
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
+                           ">
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="..." rule-refs="...">
+        <shardingsphere:mode type="..." />
+        <props>
+            <prop key="xxx.xxx">${xxx.xxx}</prop>
+        </props>
+    </shardingsphere:data-source>
+</beans>
+```
+
+## 在 Spring 中使用 ShardingSphere 数据源
+
+使用方式同 Spring Boot Starter。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/_index.en.md
new file mode 100644
index 0000000000..37375c5c1a
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/_index.en.md	
@@ -0,0 +1,62 @@
++++
+title = "Spring Namespace"
+weight = 4
+chapter = true
++++
+
+## Overview
+
+ShardingSphere-JDBC provides official Spring Namespace to make convenient for developers to integrate ShardingSphere-JDBC and Spring.
+
+## Usage
+
+### Import Maven Dependency
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
+## Configure Spring Bean
+
+### Configuration Item Explanation
+
+Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd)
+
+\<shardingsphere:data-source />
+
+| *Name*            | *Type*    | *Description*                                                                                                                                  |
+| ----------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |
+| id                | Attribute | Spring Bean Id                                                                                                                                 |
+| schema-name (?)   | Attribute | JDBC data source alias                                                                                                                         |
+| data-source-names | Attribute | Data source name, multiple data source names are separated by commas                                                                           |
+| rule-refs         | Attribute | Rule name, multiple rule names are separated by commas                                                                                         |
+| mode (?)          | Tag       | Mode configuration                                                                                                                             |
+| props (?)         | Tag       | Properties configuration, Please refer to [Properties Configuration](/en/user-manual/shardingsphere-jdbc/configuration/props) for more details |
+
+### Example
+
+```xml
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans 
+                           http://www.springframework.org/schema/beans/spring-beans.xsd 
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
+                           ">
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="..." rule-refs="...">
+        <shardingsphere:mode type="..." />
+        <props>
+            <prop key="xxx.xxx">${xxx.xxx}</prop>
+        </props>
+    </shardingsphere:data-source>
+</beans>
+```
+
+## Use ShardingSphere Data Source in Spring
+
+Same with Spring Boot Starter.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/data-source.cn.md
new file mode 100644
index 0000000000..2dadf9b2d5
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/data-source.cn.md	
@@ -0,0 +1,38 @@
++++
+title = "数据源配置"
+weight = 2
+chapter = true
++++
+
+任何配置成为 Spring Bean 的数据源对象即可与 ShardingSphere-JDBC 的 Spring 命名空间配合使用。
+
+## 配置示例
+
+示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。
+
+```xml
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans 
+                           http://www.springframework.org/schema/beans/spring-beans.xsd 
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
+                           ">
+    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
+        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
+        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
+        <property name="username" value="root" />
+        <property name="password" value="" />
+    </bean>
+    
+    <bean id="ds2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
+        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
+        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds2" />
+        <property name="username" value="root" />
+        <property name="password" value="" />
+    </bean>
+    
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="ds1,ds2" rule-refs="..." />
+</beans>
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/data-source.en.md
new file mode 100644
index 0000000000..4b76d39142
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/data-source.en.md	
@@ -0,0 +1,38 @@
++++
+title = "Data Source"
+weight = 2
+chapter = true
++++
+
+Any data source configured as spring bean can be cooperated with spring namespace.
+
+## Example
+
+In this example, the database driver is MySQL, and connection pool is HikariCP, which can be replaced with other database drivers and connection pools.
+
+```xml
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans 
+                           http://www.springframework.org/schema/beans/spring-beans.xsd 
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
+                           ">
+    <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
+        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
+        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds1" />
+        <property name="username" value="root" />
+        <property name="password" value="" />
+    </bean>
+    
+    <bean id="ds2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
+        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
+        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ds2" />
+        <property name="username" value="root" />
+        <property name="password" value="" />
+    </bean>
+    
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="ds1,ds2" rule-refs="..." />
+</beans>
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/mode.cn.md
new file mode 100644
index 0000000000..0ee180d881
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/mode.cn.md	
@@ -0,0 +1,119 @@
++++
+title = "模式配置"
+weight = 1
++++
+
+## 配置项说明
+
+命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd)
+
+\<shardingsphere:mode />
+
+| *名称*              | *类型* | *说明*                                         | *默认值* |
+| ------------------ | ------ | --------------------------------------------- | ------- |
+| type               | 属性   | 运行模式类型。可选配置：Memory、Standalone、Cluster |         |
+| repository-ref (?) | 属性   | 持久化仓库 Bean 引用。Memory 类型无需持久化         |         |
+| overwrite (?)      | 属性   | 是否使用本地配置覆盖持久化配置                      | false   |
+
+### 内存模式
+
+缺省配置。
+
+#### 配置示例
+
+```xml
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd">
+    
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="..." rule-refs="..." />
+</beans>
+```
+
+### 单机模式
+
+#### 配置项说明
+
+命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone-5.0.0.xsd)
+
+<standalone:repository />
+
+| *名称*     | *类型* | *说明*             |
+| --------- | ------ | ----------------- |
+| id        | 属性   | 持久化仓库 Bean 名称 |
+| type      | 属性   | 持久化仓库类型       |
+| props (?) | 标签   | 持久化仓库所需属性    |
+
+#### 配置示例
+
+```xml
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xmlns:standalone="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone
+                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository.xsd">
+    <standalone:repository id="standaloneRepository" type="File">
+        <props>
+            <prop key="path">target</prop>
+        </props>
+    </standalone:repository>
+
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="..." rule-refs="..." >
+        <shardingsphere:mode type="Standalone" repository-ref="standaloneRepository" overwrite="true" />
+    </shardingsphere:data-source>
+</beans>
+```
+
+### 集群模式
+
+#### 配置项说明
+
+命名空间：[http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster-5.0.0.xsd)
+
+<cluster:repository />
+
+| *名称*         | *类型* | *说明*             |
+| ------------- | ------ | ----------------- |
+| id            | 属性   | 持久化仓库 Bean 名称 |
+| type          | 属性   | 持久化仓库类型       |
+| namespace     | 属性   | 注册中心命名空间     |
+| server-lists  | 属性   | 注册中心连接地址     |
+| props (?)     | 标签   | 持久化仓库所需属性    |
+
+#### 配置示例
+
+```xml
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xmlns:cluster="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster
+                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd">
+    <cluster:repository id="clusterRepository" type="Zookeeper" namespace="regCenter" server-lists="localhost:3182">
+        <props>
+            <prop key="max-retries">3</prop>
+            <prop key="operation-timeout-milliseconds">1000</prop>
+        </props>
+    </cluster:repository>
+    
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="..." rule-refs="...">
+        <shardingsphere:mode type="Cluster" repository-ref="clusterRepository" overwrite="true" />
+    </shardingsphere:data-source>
+</beans>
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/mode.en.md
new file mode 100644
index 0000000000..6076c654c5
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/mode.en.md	
@@ -0,0 +1,119 @@
++++
+title = "Mode Configuration"
+weight = 1
++++
+
+## Configuration Item Explanation
+
+Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource-5.0.0.xsd)
+
+\<shardingsphere:mode />
+
+| *Name*             | *Type*      | *Description*                                                            | *Default Value* |
+| ------------------ | ----------- | ------------------------------------------------------------------------ | --------------- |
+| type               | Attribute   | Type of mode configuration. Values could be: Memory, Standalone, Cluster |                 |
+| repository-ref (?) | Attribute   | Persist repository configuration. Memory type does not need persist      |                 |
+| overwrite (?)      | Attribute   | Whether overwrite persistent configuration with local configuration      | false           |
+
+### Memory Mode
+
+It is the default value.
+
+#### Example
+
+```xml
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd">
+    
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="..." rule-refs="..." />
+</beans>
+```
+
+### Standalone Mode
+
+#### Configuration Item Explanation
+
+Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone-5.0.0.xsd)
+
+<standalone:repository />
+
+| *Name*    | *Type*    | *Description*                    |
+| --------- | --------- | -------------------------------- |
+| id        | Attribute | Name of persist repository bean  |
+| type      | Attribute | Type of persist repository       |
+| props (?) | Tag       | Properties of persist repository |
+
+#### Example
+
+```xml
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xmlns:standalone="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone
+                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository.xsd">
+    <standalone:repository id="standaloneRepository" type="File">
+        <props>
+            <prop key="path">target</prop>
+        </props>
+    </standalone:repository>
+
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="..." rule-refs="..." >
+        <shardingsphere:mode type="Standalone" repository-ref="standaloneRepository" overwrite="true" />
+    </shardingsphere:data-source>
+</beans>
+```
+
+### Cluster Mode
+
+#### Configuration Item Explanation
+
+Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster-5.0.0.xsd](http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster-5.0.0.xsd)
+
+<cluster:repository />
+
+| *Name*        | *Type*    | *Description*                    |
+| ------------- | --------- | -------------------------------- |
+| id            | Attribute | Name of persist repository bean  |
+| type          | Attribute | Type of persist repository       |
+| namespace     | Attribute | Namespace of registry center     |
+| server-lists  | Attribute | Server lists of registry center  |
+| props (?)     | Tag       | Properties of persist repository |
+
+#### Example
+
+```xml
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
+       xmlns:cluster="http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource
+                           http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
+                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster
+                           http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd">
+    <cluster:repository id="clusterRepository" type="Zookeeper" namespace="regCenter" server-lists="localhost:3182">
+        <props>
+            <prop key="max-retries">3</prop>
+            <prop key="operation-timeout-milliseconds">1000</prop>
+        </props>
+    </cluster:repository>
+    
+    <shardingsphere:data-source id="ds" schema-name="foo_schema" data-source-names="..." rule-refs="...">
+        <shardingsphere:mode type="Cluster" repository-ref="clusterRepository" overwrite="true" />
+    </shardingsphere:data-source>
+</beans>
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/_index.cn.md
new file mode 100644
index 0000000000..3b131fed61
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/_index.cn.md	
@@ -0,0 +1,8 @@
++++
+title = "规则配置"
+weight = 3
+chapter = true
++++
+
+规则是 Apache ShardingSphere 面向可插拔的一部分。
+本章节是 ShardingSphere-JDBC 的 Spring 命名空间规则配置参考手册。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/_index.en.md
new file mode 100644
index 0000000000..9a000a6b7f
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/_index.en.md	
@@ -0,0 +1,8 @@
++++
+title = "Rules"
+weight = 3
+chapter = true
++++
+
+Rules are pluggable part of Apache ShardingSphere.
+This chapter is a Spring namespace rule configuration manual for ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/encrypt.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/encrypt.cn.md
similarity index 79%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/encrypt.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/encrypt.cn.md
index f3088cb7d2..129789cb4d 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/encrypt.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/encrypt.cn.md	
@@ -1,6 +1,6 @@
 +++
 title = "数据加密"
-weight = 3
+weight = 4
 +++
 
 ## 配置项说明
@@ -17,28 +17,28 @@ weight = 3
 
 \<encrypt:table />
 
-| *名称*                       | *类型* | *说明*                                                      |
-| --------------------------- | ------ | ---------------------------------------------------------- |
-| name                        | 属性    | 加密表名称                                                   |
-| column (+)                  | 标签    | 加密列配置                                                   |
+| *名称*                       | *类型* | *说明*                                                     |
+| --------------------------- | ------ | --------------------------------------------------------- |
+| name                        | 属性    | 加密表名称                                                  |
+| column (+)                  | 标签    | 加密列配置                                                  |
 | query-with-cipher-column(?) | 属性    | 该表是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 |
 
 \<encrypt:column />
 
 | *名称*                    | *类型* | *说明*       |
-| ------------------------- | ----- | ------------ |
+| ------------------------- | ----- | ----------- |
 | logic-column              | 属性  | 加密列逻辑名称 |
 | cipher-column             | 属性  | 加密列名称    |
 | assisted-query-column (?) | 属性  | 查询辅助列名称 |
-| plain-column (?)          | 属性  | 原文列名称     |
+| plain-column (?)          | 属性  | 原文列名称    |
 | encrypt-algorithm-ref     | 属性  | 加密算法名称   |
 
 \<encrypt:encrypt-algorithm />
 
-| *名称*    | *类型* | *说明*         |
-| --------- | ----- | ------------- |
+| *名称*    | *类型* | *说明*        |
+| --------- | ----- | ------------ |
 | id        | 属性  | 加密算法名称    |
 | type      | 属性  | 加密算法类型    |
 | props (?) | 标签  | 加密算法属性配置 |
 
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt)。
+算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/encrypt.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/encrypt.en.md
similarity index 95%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/encrypt.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/encrypt.en.md
index c848b6c68a..c97042f645 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/encrypt.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/encrypt.en.md	
@@ -1,6 +1,6 @@
 +++
 title = "Encryption"
-weight = 3
+weight = 4
 +++
 
 ## Configuration Item Explanation
@@ -41,4 +41,4 @@ Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encry
 | type      | Attribute  | Encrypt algorithm type       |
 | props (?) | Tag        | Encrypt algorithm properties |
 
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt) for more details about type of algorithm.
+Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/ha.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/ha.cn.md
new file mode 100644
index 0000000000..d8c4af64b6
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/ha.cn.md	
@@ -0,0 +1,6 @@
++++
+title = "高可用"
+weight = 3
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/ha.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/ha.en.md
new file mode 100644
index 0000000000..fdbdfbf1ef
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/ha.en.md	
@@ -0,0 +1,6 @@
++++
+title = "HA"
+weight = 3
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mix.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/mix.cn.md
similarity index 84%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mix.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/mix.cn.md
index 8ec65d7f98..d54a4e62a1 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mix.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/mix.cn.md	
@@ -12,17 +12,11 @@ weight = 6
 ```xml
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
        xmlns:readwrite-splitting="http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting"
        xmlns:encrypt="http://shardingsphere.apache.org/schema/shardingsphere/encrypt"
        xsi:schemaLocation="http://www.springframework.org/schema/beans 
                            http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://www.springframework.org/schema/context 
-                           http://www.springframework.org/schema/context/spring-context.xsd
-                           http://www.springframework.org/schema/tx 
-                           http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://shardingsphere.apache.org/schema/shardingsphere/datasource
                            http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
                            http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting
@@ -30,30 +24,30 @@ weight = 6
                            http://shardingsphere.apache.org/schema/shardingsphere/encrypt
                            http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd
                            ">
-    <bean id="write_ds0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="write_ds0" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <property name="driverClassName" value="com.mysql.jdbc.Driver" />
         <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/write_ds?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8" />
         <property name="username" value="root" />
         <property name="password" value="" />
     </bean>
     
-    <bean id="read_ds0_0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="read_ds0_0" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- 省略详细数据源配置详情 -->
     </bean>
     
-    <bean id="read_ds0_1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="read_ds0_1" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- 省略详细数据源配置详情 -->
     </bean>
     
-    <bean id="write_ds1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="write_ds1" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- 省略详细数据源配置详情 -->
     </bean>
     
-    <bean id="read_ds1_0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="read_ds1_0" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- 省略详细数据源配置详情 -->
     </bean>
     
-    <bean id="read_ds1_1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="read_ds1_1" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- 省略详细数据源配置详情 -->
     </bean>
     
@@ -87,9 +81,9 @@ weight = 6
             <prop key="algorithm-expression">t_order_item_${order_item_id % 2}</prop>
         </props>
     </sharding:sharding-algorithm>
-	
-	<!-- 分片规则配置 -->	
-	<sharding:rule id="shardingRule">
+    
+    <!-- 分片规则配置 -->	
+    <sharding:rule id="shardingRule">
         <sharding:table-rules>
             <!-- 表达式 ds_${0..1} 枚举的数据源名称为主从配置的逻辑数据源名称  -->
             <sharding:table-rule logic-table="t_order" actual-data-nodes="ds_${0..1}.t_order_${0..1}" database-strategy-ref="databaseStrategy" table-strategy-ref="orderTableStrategy" key-generate-strategy-ref="orderKeyGenerator"/>
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mix.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/mix.en.md
similarity index 84%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mix.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/mix.en.md
index b04e2706b8..ef3b764739 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mix.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/mix.en.md	
@@ -7,17 +7,11 @@ weight = 6
 ```xml
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:context="http://www.springframework.org/schema/context"
-       xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
        xmlns:readwrite-splitting="http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting"
        xmlns:encrypt="http://shardingsphere.apache.org/schema/shardingsphere/encrypt"
        xsi:schemaLocation="http://www.springframework.org/schema/beans 
                            http://www.springframework.org/schema/beans/spring-beans.xsd 
-                           http://www.springframework.org/schema/context 
-                           http://www.springframework.org/schema/context/spring-context.xsd
-                           http://www.springframework.org/schema/tx 
-                           http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://shardingsphere.apache.org/schema/shardingsphere/datasource
                            http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
                            http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting
@@ -25,30 +19,30 @@ weight = 6
                            http://shardingsphere.apache.org/schema/shardingsphere/encrypt
                            http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd
                            ">
-    <bean id="write_ds0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="write_ds0" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <property name="driverClassName" value="com.mysql.jdbc.Driver" />
         <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/write_ds?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8" />
         <property name="username" value="root" />
         <property name="password" value="" />
     </bean>
     
-    <bean id="read_ds0_0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="read_ds0_0" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- ...Omit specific configuration. -->
     </bean>
     
-    <bean id="read_ds0_1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="read_ds0_1" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- ...Omit specific configuration. -->
     </bean>
     
-    <bean id="write_ds1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="write_ds1" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- ...Omit specific configuration. -->
     </bean>
     
-    <bean id="read_ds1_0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="read_ds1_0" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- ...Omit specific configuration. -->
     </bean>
     
-    <bean id="read_ds1_1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
+    <bean id="read_ds1_1" class="  com.zaxxer.hikari.HikariDataSource" init-method="init" destroy-method="close">
         <!-- ...Omit specific configuration. -->
     </bean>
     
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/readwrite-splitting.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/readwrite-splitting.cn.md
similarity index 94%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/readwrite-splitting.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/readwrite-splitting.cn.md
index 360cb9f045..57b231e0c3 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/readwrite-splitting.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/readwrite-splitting.cn.md	
@@ -32,5 +32,5 @@ weight = 2
 | type      | 属性  | 负载均衡算法类型    |
 | props (?) | 标签  | 负载均衡算法属性配置 |
 
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
 查询一致性路由的详情，请参见[使用规范](/cn/features/readwrite-splitting/use-norms)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/readwrite-splitting.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/readwrite-splitting.en.md
similarity index 94%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/readwrite-splitting.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/readwrite-splitting.en.md
index da7fb1432d..74595602a5 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/readwrite-splitting.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/readwrite-splitting.en.md	
@@ -31,5 +31,5 @@ Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/readwrite-spl
 | type      | Attribute  | Load balance algorithm type       |
 | props (?) | Tag        | Load balance algorithm properties |
 
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
 Please refer to [Use Norms](/en/features/readwrite-splitting/use-norms) for more details about query consistent routing.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/shadow.cn.md
similarity index 99%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/shadow.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/shadow.cn.md
index 7391002731..31bfa3d90e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/shadow.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/shadow.cn.md	
@@ -1,6 +1,6 @@
 +++
 title = "影子库"
-weight = 4
+weight = 5
 +++
 
 ## 配置项说明
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/shadow.en.md
similarity index 99%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/shadow.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/shadow.en.md
index 244be325f8..15b8e2a034 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/shadow.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/shadow.en.md	
@@ -1,6 +1,6 @@
 +++
 title = "Shadow DB"
-weight = 4
+weight = 5
 +++
 
 ## Configuration Item Explanation
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/sharding.cn.md
similarity index 96%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/sharding.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/sharding.cn.md
index b2fa56cf22..3249af0b36 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/sharding.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/sharding.cn.md	
@@ -110,7 +110,7 @@ weight = 1
 | type      | 属性  | 分布式序列算法类型    |
 | props (?) | 标签  | 分布式序列算法属性配置 |
 
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen)。
+算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen)。
 
 ## 注意事项
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/sharding.en.md
similarity index 96%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/sharding.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/sharding.en.md
index aefaec8737..3e91f70607 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-namespace/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring- namespace/rules/sharding.en.md	
@@ -110,7 +110,7 @@ Namespace: [http://shardingsphere.apache.org/schema/shardingsphere/sharding/shar
 | type      | Attribute | Key generate algorithm type       |
 | props (?) | Tag       | Key generate algorithm properties |
 
-Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding) and [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen) for more details about type of algorithm.
+Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) and [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen) for more details about type of algorithm.
 
 ## Attention
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.cn.md
new file mode 100644
index 0000000000..082ce380b7
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.cn.md
@@ -0,0 +1,31 @@
++++
+title = "Spring Boot Starter"
+weight = 3
+chapter = true
++++
+
+## 简介
+
+ShardingSphere-JDBC 提供官方的 Spring Boot Starter，使开发者可以非常便捷的整合 ShardingSphere-JDBC 和 Spring Boot。
+
+## 使用步骤
+
+### 引入 Maven 依赖
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
+## 在 Spring 中使用 ShardingSphere 数据源
+
+直接通过注入的方式即可使用 ShardingSphereDataSource；
+或者将 ShardingSphereDataSource 配置在 JPA、Hibernate、MyBatis 等 ORM 框架中配合使用。
+
+```java
+@Resource
+private DataSource dataSource;
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.en.md
new file mode 100644
index 0000000000..e42145508a
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/_index.en.md
@@ -0,0 +1,32 @@
++++
+title = "Spring Boot Starter"
+weight = 3
+chapter = true
++++
+
+## Overview
+
+ShardingSphere-JDBC provides official Spring Boot Starter to make convenient for developers to integrate ShardingSphere-JDBC and Spring Boot.
+
+## Usage
+
+### Import Maven Dependency
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
+## Use ShardingSphere Data Source in Spring
+
+Developer can inject to use native JDBC or ORM frameworks such as JPA, Hibernate or MyBatis through the DataSource.
+
+Take native JDBC usage as an example:
+
+```java
+@Resource
+private DataSource dataSource;
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md
new file mode 100644
index 0000000000..8c5edb34f9
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md
@@ -0,0 +1,70 @@
++++
+title = "数据源配置"
+weight = 2
+chapter = true
++++
+
+## 使用本地数据源
+
+### 配置项说明
+
+```properties
+spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分
+
+# <actual-data-source-name> 表示真实数据源名称
+spring.shardingsphere.datasource.<actual-data-source-name>.type= # 数据库连接池全类名
+spring.shardingsphere.datasource.<actual-data-source-name>.driver-class-name= # 数据库驱动类名，以数据库连接池自身配置为准
+spring.shardingsphere.datasource.<actual-data-source-name>.jdbc-url= # 数据库 URL 连接，以数据库连接池自身配置为准
+spring.shardingsphere.datasource.<actual-data-source-name>.username= # 数据库用户名，以数据库连接池自身配置为准
+spring.shardingsphere.datasource.<actual-data-source-name>.password= # 数据库密码，以数据库连接池自身配置为准
+spring.shardingsphere.datasource.<actual-data-source-name>.<xxx>= # ... 数据库连接池的其它属性
+```
+
+### 配置示例
+
+示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。
+
+```properties
+# 配置真实数据源
+spring.shardingsphere.datasource.names=ds1,ds2
+
+# 配置第 1 个数据源
+spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
+spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
+spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
+spring.shardingsphere.datasource.ds1.username=root
+spring.shardingsphere.datasource.ds1.password=
+
+# 配置第 2 个数据源
+spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
+spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
+spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
+spring.shardingsphere.datasource.ds2.username=root
+spring.shardingsphere.datasource.ds2.password=
+```
+
+## 使用 JNDI 数据源
+
+如果计划使用 JNDI 配置数据库，在应用容器（如 Tomcat）中使用 ShardingSphere-JDBC 时，
+可使用 `spring.shardingsphere.datasource.${datasourceName}.jndiName` 来代替数据源的一系列配置。
+
+### 配置项说明
+
+```properties
+spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分
+
+# <actual-data-source-name> 表示真实数据源名称
+spring.shardingsphere.datasource.<actual-data-source-name>.jndi-name= # 数据源 JNDI
+```
+
+### 配置示例
+
+```properties
+# 配置真实数据源
+spring.shardingsphere.datasource.names=ds1,ds2
+
+# 配置第 1 个数据源
+spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
+# 配置第 2 个数据源
+spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md
new file mode 100644
index 0000000000..3778ab8867
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md
@@ -0,0 +1,70 @@
++++
+title = "Data Source"
+weight = 2
+chapter = true
++++
+
+## Use Native Data Source
+
+### Configuration Item Explanation
+
+```properties
+spring.shardingsphere.datasource.names= # Actual data source name, multiple split by `,`
+
+# <actual-data-source-name> indicate name of data source name
+spring.shardingsphere.datasource.<actual-data-source-name>.type= # Full class name of database connection pool
+spring.shardingsphere.datasource.<actual-data-source-name>.driver-class-name= # Class name of database driver, ref property of connection pool
+spring.shardingsphere.datasource.<actual-data-source-name>.jdbc-url= # Database URL, ref property of connection pool
+spring.shardingsphere.datasource.<actual-data-source-name>.username= # Database username, ref property of connection pool
+spring.shardingsphere.datasource.<actual-data-source-name>.password= # Database password, ref property of connection pool
+spring.shardingsphere.datasource.<actual-data-source-name>.<xxx>= # ... Other properties for data source pool
+```
+
+### Example
+
+In this example, the database driver is MySQL, and connection pool is HikariCP, which can be replaced with other database drivers and connection pools.
+
+```properties
+# Configure actual data sources
+spring.shardingsphere.datasource.names=ds1,ds2
+
+# Configure the 1st data source
+spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
+spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
+spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
+spring.shardingsphere.datasource.ds1.username=root
+spring.shardingsphere.datasource.ds1.password=
+
+# Configure the 2nd data source
+spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
+spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
+spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
+spring.shardingsphere.datasource.ds2.username=root
+spring.shardingsphere.datasource.ds2.password=
+```
+
+## Use JNDI Data Source
+
+If developer plan to use ShardingSphere-JDBC in Web Server (such as Tomcat) with JNDI data source,
+`spring.shardingsphere.datasource.${datasourceName}.jndiName` can be used as an alternative to series of configuration of data source.
+
+### Configuration Item Explanation
+
+```properties
+spring.shardingsphere.datasource.names= # Actual data source name, multiple split by `,`
+
+# <actual-data-source-name> indicate name of data source name
+spring.shardingsphere.datasource.<actual-data-source-name>.jndi-name= # JNDI of data source
+```
+
+### Example
+
+```properties
+# Configure actual data sources
+spring.shardingsphere.datasource.names=ds1,ds2
+
+# Configure the 1st data source
+spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
+# Configure the 2nd data source
+spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.cn.md
new file mode 100644
index 0000000000..29dda29123
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.cn.md
@@ -0,0 +1,40 @@
++++
+title = "模式配置"
+weight = 1
++++
+
+缺省配置为使用内存模式。
+
+## 配置项说明
+
+```properties
+spring.shardingsphere.mode.type= # 运行模式类型。可选配置：Memory、Standalone、Cluster
+spring.shardingsphere.mode.repository= # 持久化仓库配置。Memory 类型无需持久化
+spring.shardingsphere.mode.overwrite= # 是否使用本地配置覆盖持久化配置
+```
+
+### 内存模式
+
+```properties
+spring.shardingsphere.mode.type=Memory
+```
+
+### 单机模式
+
+```properties
+spring.shardingsphere.mode.type=Standalone
+spring.shardingsphere.mode.repository.type= # 持久化仓库类型
+spring.shardingsphere.mode.repository.props.<key>= # 持久化仓库所需属性
+spring.shardingsphere.mode.overwrite= # 是否使用本地配置覆盖持久化配置
+```
+
+### 集群模式
+
+```properties
+spring.shardingsphere.mode.type=Cluster
+spring.shardingsphere.mode.repository.type= # 持久化仓库类型
+spring.shardingsphere.mode.repository.namespace= # 注册中心命名空间
+spring.shardingsphere.mode.repository.serverLists= # 注册中心连接地址
+spring.shardingsphere.mode.repository.props.<key>= # 持久化仓库所需属性
+spring.shardingsphere.mode.overwrite= # 是否使用本地配置覆盖持久化配置
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.en.md
new file mode 100644
index 0000000000..2c14ee784e
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/mode.en.md
@@ -0,0 +1,40 @@
++++
+title = "Mode Configuration"
+weight = 1
++++
+
+Default is Memory mode.
+
+### Configuration Item Explanation
+
+```properties
+spring.shardingsphere.mode.type= # Type of mode configuration. Values could be: Memory, Standalone, Cluster
+spring.shardingsphere.mode.repository= # Persist repository configuration. Memory type does not need persist
+spring.shardingsphere.mode.overwrite= # Whether overwrite persistent configuration with local configuration
+```
+
+### Memory Mode
+
+```properties
+spring.shardingsphere.mode.type=Memory
+```
+
+### Standalone Mode
+
+```properties
+spring.shardingsphere.mode.type=Standalone
+spring.shardingsphere.mode.repository.type= # Type of persist repository
+spring.shardingsphere.mode.repository.props.<key>= # Properties of persist repository
+spring.shardingsphere.mode.overwrite= # Whether overwrite persistent configuration with local configuration
+```
+
+### Cluster Mode
+
+```properties
+spring.shardingsphere.mode.type=Cluster
+spring.shardingsphere.mode.repository.type= # Type of persist repository
+spring.shardingsphere.mode.repository.namespace= # Namespace of registry center
+spring.shardingsphere.mode.repository.serverLists= # Server lists of registry center
+spring.shardingsphere.mode.repository.props.<key>= # Properties of persist repository
+spring.shardingsphere.mode.overwrite= # Whether overwrite persistent configuration with local configuration
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.cn.md
new file mode 100644
index 0000000000..2699868d4c
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.cn.md
@@ -0,0 +1,8 @@
++++
+title = "规则配置"
+weight = 3
+chapter = true
++++
+
+规则是 Apache ShardingSphere 面向可插拔的一部分。
+本章节是 ShardingSphere-JDBC 的 Spring Boot Starter 规则配置参考手册。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.en.md
new file mode 100644
index 0000000000..ef92196844
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/_index.en.md
@@ -0,0 +1,8 @@
++++
+title = "Rules"
+weight = 3
+chapter = true
++++
+
+Rules are pluggable part of Apache ShardingSphere.
+This chapter is a Spring Boot Starter rule configuration manual for ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/encrypt.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.cn.md
similarity index 93%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/encrypt.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.cn.md
index 92a6464f78..b73283d5a9 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/encrypt.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "数据加密"
-weight = 3
+weight = 4
 +++
 
 ## 配置项说明
@@ -21,4 +21,4 @@ spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xx
 spring.shardingsphere.rules.encrypt.queryWithCipherColumn= # 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询
 ```
 
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt)。
+算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/encrypt.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.en.md
similarity index 91%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/encrypt.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.en.md
index 2c685e5962..42a8594e2e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/encrypt.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/encrypt.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Encryption"
-weight = 3
+weight = 4
 +++
 
 ## Configuration Item Explanation
@@ -21,4 +21,4 @@ spring.shardingsphere.rules.encrypt.encryptors.<encrypt-algorithm-name>.props.xx
 spring.shardingsphere.rules.encrypt.queryWithCipherColumn= # Whether query with cipher column for data encrypt. User you can use plaintext to query if have
 ```
 
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt) for more details about type of algorithm.
+Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.cn.md
new file mode 100644
index 0000000000..d8c4af64b6
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.cn.md
@@ -0,0 +1,6 @@
++++
+title = "高可用"
+weight = 3
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.en.md
new file mode 100644
index 0000000000..fdbdfbf1ef
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/ha.en.md
@@ -0,0 +1,6 @@
++++
+title = "HA"
+weight = 3
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mix.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.cn.md
similarity index 98%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mix.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.cn.md
index a4054c7955..93eb980340 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mix.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.cn.md
@@ -22,13 +22,13 @@ spring.shardingsphere.datasource.write-ds0.password= # 数据库密码
 spring.shardingsphere.datasource.write-ds0.xxx=  # 数据库连接池的其它属性
 
 spring.shardingsphere.datasource.write-ds1.url= # 数据库 URL 连接
-... 忽略其他数据库配置项
+# 忽略其他数据库配置项
 
 spring.shardingsphere.datasource.write-ds0-read0.url= # 数据库 URL 连接
-... 忽略其他数据库配置项
+# 忽略其他数据库配置项
 
 spring.shardingsphere.datasource.write-ds1-read0.url= # 数据库 URL 连接
-... 忽略其他数据库配置项
+# 忽略其他数据库配置项
 
 # 分片规则配置
 # 分库策略
@@ -93,4 +93,4 @@ spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.load-balancer-
 
 # 负载均衡算法配置
 spring.shardingsphere.rules.readwrite-splitting.load-balancers.read-random.type=RANDOM
-```
\ No newline at end of file
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mix.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.en.md
similarity index 99%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mix.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.en.md
index c21f92e329..8d92ce7d26 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mix.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/mix.en.md
@@ -80,4 +80,4 @@ spring.shardingsphere.rules.readwrite-splitting.data-sources.ds_1.load-balancer-
 
 # Load balance algorithm configuration
 spring.shardingsphere.rules.readwrite-splitting.load-balancers.read-random.type=RANDOM
-```
\ No newline at end of file
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/readwrite-splitting.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.cn.md
similarity index 92%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/readwrite-splitting.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.cn.md
index c3ba2ba590..342c2a323e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/readwrite-splitting.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.cn.md
@@ -17,5 +17,5 @@ spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-alg
 spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
 ```
 
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
 查询一致性路由的详情，请参见[使用规范](/cn/features/readwrite-splitting/use-norms)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/readwrite-splitting.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.en.md
similarity index 91%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/readwrite-splitting.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.en.md
index 79ade137c0..73abcc104f 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/readwrite-splitting.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/readwrite-splitting.en.md
@@ -17,5 +17,5 @@ spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-alg
 spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # Load balance algorithm properties
 ```
 
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
 Please refer to [Use Norms](/en/features/readwrite-splitting/use-norms) for more details about query consistent routing.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.cn.md
similarity index 99%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/shadow.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.cn.md
index 399b531aa6..ee66d4bb62 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/shadow.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "影子库"
-weight = 4
+weight = 5
 +++
 
 ## 配置项说明
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.en.md
similarity index 99%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/shadow.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.en.md
index fb2bf2b5fb..7f4f0210fa 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/shadow.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/shadow.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Shadow DB"
-weight = 4
+weight = 5
 +++
 
 ## Configuration Item Explanation
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.cn.md
similarity index 95%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.cn.md
index 819247db4f..6649552e51 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.cn.md
@@ -59,7 +59,7 @@ spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name
 spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置
 ```
 
-算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen)。
+算法类型的详情，请参见[内置分片算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding)和[内置分布式序列算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen)。
 
 ## 注意事项
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.en.md
similarity index 94%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.en.md
index db2440f5be..7d44916a5e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding.en.md
@@ -59,7 +59,7 @@ spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name
 spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # Key generate algorithm properties
 ```
 
-Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding) and [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen) for more details about type of algorithm.
+Please refer to [Built-in Sharding Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding) and [Built-in Key Generate Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen) for more details about type of algorithm.
 
 ## Attention
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/unsupported-items.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/unsupported.cn.md
similarity index 98%
rename from docs/document/content/user-manual/shardingsphere-jdbc/unsupported-items.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/unsupported.cn.md
index d27d362be0..c030d4c779 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/unsupported-items.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/unsupported.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "不支持项"
-weight = 3
+weight = 8
 +++
 
 ## DataSource 接口
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/unsupported-items.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/unsupported.en.md
similarity index 98%
rename from docs/document/content/user-manual/shardingsphere-jdbc/unsupported-items.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/unsupported.en.md
index e8a084f128..d5ae9f693d 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/unsupported-items.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/unsupported.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Unsupported Items"
-weight = 3
+weight = 8
 +++
 
 ## DataSource Interface
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/_index.cn.md
new file mode 100644
index 0000000000..c1fc40f134
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/_index.cn.md
@@ -0,0 +1,79 @@
++++
+title = "YAML"
+weight = 2
+chapter = true
++++
+
+## 简介
+
+YAML 提供通过配置文件的方式与 ShardingSphere-JDBC 交互。
+配合治理模块一同使用时，持久化在配置中心的配置均为 YAML 格式。
+
+YAML 配置是最常见的配置方式，可以省略编程的复杂度，简化用户配置。
+
+## 使用步骤
+
+### 引入 Maven 依赖
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
+### 配置 YAML
+
+ShardingSphere-JDBC 的 YAML 配置文件通过 Schema 名称、运行模式、数据源集合、规则集合以及属性配置组成。
+
+```yaml
+# JDBC 中的数据源的别名。在集群模式，使用该参数联通 ShardingSphere-JDBC 与 ShardingSphere-Proxy 共同使用。
+# 默认值：logic_db
+schemaName (?):
+
+mode:
+
+dataSources:
+
+rules:
+- !FOO_XXX
+    ...
+- !BAR_XXX
+    ...
+
+props:
+  key_1: value_1
+  key_2: value_2
+```
+
+模式详情请参见[模式配置](/cn/user-manual/shardingsphere-jdbc/yaml/mode)。
+
+数据源详情请参见[数据源配置](/cn/user-manual/shardingsphere-jdbc/yaml/data-source)。
+
+规则详情请参见[规则配置](/cn/user-manual/shardingsphere-jdbc/yaml/rules)。
+
+
+### 构建数据源
+
+通过 YamlShardingSphereDataSourceFactory 工厂创建的 ShardingSphereDataSource 实现自 JDBC 的标准接口 DataSource。
+
+```java
+
+File yamlFile = // 指定 YAML 文件路径
+DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile);
+```
+
+### 使用数据源
+
+使用方式同 Java API。
+
+## 语法说明
+
+`!!` 表示实例化该类
+
+`!` 表示自定义别名
+
+`-` 表示可以包含一个或多个
+
+`[]` 表示数组，可以与减号相互替换使用
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/_index.en.md
new file mode 100644
index 0000000000..4575162359
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/_index.en.md
@@ -0,0 +1,81 @@
++++
+title = "YAML"
+weight = 2
+chapter = true
++++
+
+## Overview
+
+YAML configuration provides interaction with ShardingSphere JDBC through configuration files.
+When used with the governance module together, the configuration of persistence in the configuration center is YAML format.
+
+YAML configuration is the most common configuration mode, which can omit the complexity of programming and simplify user configuration.
+
+## Usage
+
+### Import Maven Dependency
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
+    <version>${shardingsphere.version}</version>
+</dependency>
+```
+
+### YAML Format
+
+ShardingSphere-JDBC YAML file consists of schema name, mode configuration, data source map, rule configurations and properties.
+
+Note: The example connection pool is HikariCP, which can be replaced with other connection pools according to business scenarios.
+
+```yaml
+# Alias of the datasource in JDBC.
+# Through this parameter to connect, ShardingSphere-JDBC and ShardingSphere-Proxy.
+# Default value: logic_db
+schemaName (?):
+
+mode:
+
+dataSources:
+
+rules:
+- !FOO_XXX
+    ...
+- !BAR_XXX
+    ...
+
+props:
+  key_1: value_1
+  key_2: value_2
+```
+
+Please refer to [Mode Confiugration](/en/user-manual/shardingsphere-jdbc/yaml/mode) for more mode details.
+
+Please refer to [Data Source Confiugration](/en/user-manual/shardingsphere-jdbc/yaml/data-source) for more data source details.
+
+Please refer to [Rules Confiugration](/en/user-manual/shardingsphere-jdbc/yaml/rules) for more rule details.
+
+### Create Data Source
+
+The ShardingSphereDataSource created by YamlShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.
+
+```java
+
+File yamlFile = // Indicate YAML file
+DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile);
+```
+
+### Use Data Source
+
+Same with Java API.
+
+## YAML Syntax Explanation
+
+`!!` means instantiation of that class
+
+`!` means self-defined alias
+
+`-` means one or multiple can be included
+
+`[]` means array, can substitutable with `-` each other
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/data-source.cn.md
new file mode 100644
index 0000000000..2da31f7a2e
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/data-source.cn.md
@@ -0,0 +1,69 @@
++++
+title = "数据源配置"
+weight = 2
+chapter = true
++++
+
+数据源配置分为单数据源配置和多数据源配置。ShardingSphere-JDBC 支持所有的数据库 JDBC 驱动和连接池。
+
+示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。
+
+## 单数据源配置
+
+用于数据加密等规则。
+
+### 配置项说明
+
+```yaml
+dataSource: # <!!数据库连接池实现类> `!!`表示实例化该类
+  driverClassName: # 数据库驱动类名，以数据库连接池自身配置为准
+  url: # 数据库 URL 连接，以数据库连接池自身配置为准
+  username: # 数据库用户名，以数据库连接池自身配置为准
+  password: # 数据库密码，以数据库连接池自身配置为准
+  # ... 数据库连接池的其它属性
+```
+
+### 配置示例
+
+```yaml
+dataSource: !!com.zaxxer.hikari.HikariDataSource
+  driverClassName: com.mysql.jdbc.Driver
+  jdbcUrl: jdbc:mysql://localhost:3306/ds
+  username: root
+  password:
+```
+
+## 多数据源配置
+
+用于分片、读写分离等规则。
+如果加密和分片等功能混合使用，则应使用多数据源配置。
+
+### 配置项说明
+
+```yaml
+dataSources: # 数据源配置，可配置多个 <data-source-name>
+  <data-source-name>: # <!!数据库连接池实现类>，`!!` 表示实例化该类
+    driverClassName: # 数据库驱动类名，以数据库连接池自身配置为准
+    url: # 数据库 URL 连接，以数据库连接池自身配置为准
+    username: # 数据库用户名，以数据库连接池自身配置为准
+    password: # 数据库密码，以数据库连接池自身配置为准
+    # ... 数据库连接池的其它属性
+```
+
+### 配置示例
+
+```yaml
+dataSources:
+  ds_1: !!com.zaxxer.hikari.HikariDataSource
+    driverClassName: com.mysql.jdbc.Driver
+    jdbcUrl: jdbc:mysql://localhost:3306/ds_1
+    username: root
+    password:
+  ds_2: !!com.zaxxer.hikari.HikariDataSource
+    driverClassName: com.mysql.jdbc.Driver
+    jdbcUrl: jdbc:mysql://localhost:3306/ds_2
+    username: root
+    password:
+  
+  # 配置其他数据源
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/data-source.en.md
new file mode 100644
index 0000000000..b5b710d761
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/data-source.en.md
@@ -0,0 +1,70 @@
++++
+title = "Data Source"
+weight = 2
+chapter = true
++++
+
+It is divided into single data source configuration and multi data source configuration.
+ShardingSphere-JDBC Supports all JDBC drivers and database connection pools.
+
+In this example, the database driver is MySQL, and connection pool is HikariCP, which can be replaced with other database drivers and connection pools.
+
+## Single Data Source Configuration
+
+Used for data encryption rules.
+
+### Configuration Item Explanation
+
+```yaml
+dataSource: # <!!Data source pool implementation class> `!!` means class instantiation
+  driverClassName: # Class name of database driver, ref property of connection pool
+  url: # Database URL, ref property of connection pool
+  username: # Database username, ref property of connection pool
+  password: # Database password, ref property of connection pool
+  # ... Other properties for data source pool
+```
+
+### Example
+
+```yaml
+dataSource: !!com.zaxxer.hikari.HikariDataSource
+  driverClassName: com.mysql.jdbc.Driver
+  jdbcUrl: jdbc:mysql://localhost:3306/ds
+  username: root
+  password:
+```
+
+## Multiple Data Source Configuration
+
+Used for fragmentation, readwrite-splitting and other rules.
+If features such as encryption and sharding are used in combination, a multi data source configuration should be used.
+
+### Configuration Item Explanation
+
+```yaml
+dataSources: # Data sources configuration, multiple <data-source-name> available
+  <data-source-name>: # <!!Data source pool implementation class> `!!` means class instantiation
+    driverClassName: # Class name of database driver, ref property of connection pool
+    url: # Database URL, ref property of connection pool
+    username: # Database username, ref property of connection pool
+    password: # Database password, ref property of connection pool
+    # ... Other properties for data source pool
+```
+
+### Example
+
+```yaml
+dataSources:
+  ds_1: !!com.zaxxer.hikari.HikariDataSource
+    driverClassName: com.mysql.jdbc.Driver
+    jdbcUrl: jdbc:mysql://localhost:3306/ds_1
+    username: root
+    password:
+  ds_2: !!com.zaxxer.hikari.HikariDataSource
+    driverClassName: com.mysql.jdbc.Driver
+    jdbcUrl: jdbc:mysql://localhost:3306/ds_2
+    username: root
+    password:
+  
+  # Configure other data sources
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/mode.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/mode.cn.md
new file mode 100644
index 0000000000..42f3be05bf
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/mode.cn.md
@@ -0,0 +1,48 @@
++++
+title = "模式配置"
+weight = 1
++++
+
+## 配置项说明
+
+```yaml
+mode (?): # 不配置则默认内存模式
+  type: # 运行模式类型。可选配置：Memory、Standalone、Cluster
+  repository (?): # 久化仓库配置。Memory 类型无需持久化
+  overwrite: # 是否使用本地配置覆盖持久化配置
+```
+
+### 内存模式
+
+```yaml
+mode:
+  type: Memory
+```
+
+### 单机模式
+
+```yaml
+mode:
+  type: Standalone
+  repository:
+    type: # 持久化仓库类型
+    props: # 持久化仓库所需属性
+      foo_key: foo_value
+      bar_key: bar_value
+  overwrite: # 是否使用本地配置覆盖持久化配置
+```
+
+### 集群模式
+
+```yaml
+mode:
+  type: Cluster
+  repository:
+    type: # 持久化仓库类型
+    namespace: # 注册中心命名空间
+    serverLists: # 注册中心连接地址
+    props: # 持久化仓库所需属性
+      foo_key: foo_value
+      bar_key: bar_value
+  overwrite: # 是否使用本地配置覆盖持久化配置
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/mode.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/mode.en.md
new file mode 100644
index 0000000000..bdbf3d5e5e
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/mode.en.md
@@ -0,0 +1,48 @@
++++
+title = "Mode Configuration"
+weight = 1
++++
+
+## Configuration Item Explanation
+
+```yaml
+mode (?): # Default value is Memory
+  type: # Type of mode configuration. Values could be: Memory, Standalone, Cluster
+  repository (?): # Persist repository configuration. Memory type does not need persist
+  overwrite: # Whether overwrite persistent configuration with local configuration
+```
+
+### Memory Mode
+
+```yaml
+mode:
+  type: Memory
+```
+
+### Standalone Mode
+
+```yaml
+mode:
+  type: Standalone
+  repository:
+    type: # Type of persist repository
+    props: # Properties of persist repository
+      foo_key: foo_value
+      bar_key: bar_value
+  overwrite: # Whether overwrite persistent configuration with local configuration
+```
+
+### Cluster Mode
+
+```yaml
+mode:
+  type: Cluster
+  repository:
+    type: # Type of persist repository
+    namespace: # Namespace of registry center
+    serverLists: # Server lists of registry center
+    props: # Properties of persist repository
+      foo_key: foo_value
+      bar_key: bar_value
+  overwrite: # Whether overwrite persistent configuration with local configuration
+```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/_index.cn.md
new file mode 100644
index 0000000000..7e13f86034
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/_index.cn.md
@@ -0,0 +1,8 @@
++++
+title = "规则配置"
+weight = 3
+chapter = true
++++
+
+规则是 Apache ShardingSphere 面向可插拔的一部分。
+本章节是 ShardingSphere-JDBC 的 YAML 规则配置参考手册。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/_index.en.md
new file mode 100644
index 0000000000..87bc1859c1
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/_index.en.md
@@ -0,0 +1,8 @@
++++
+title = "Rules"
+weight = 3
+chapter = true
++++
+
+Rules are pluggable part of Apache ShardingSphere.
+This chapter is a YAML rule configuration manual for ShardingSphere-JDBC.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/encrypt.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/encrypt.cn.md
similarity index 83%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/encrypt.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/encrypt.cn.md
index f776252097..0f730ce212 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/encrypt.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/encrypt.cn.md
@@ -1,13 +1,11 @@
 +++
 title = "数据加密"
-weight = 3
+weight = 4
 +++
 
 ## 配置项说明
 
 ```yaml
-dataSources: # 省略数据源配置，请参考使用手册
-
 rules:
 - !ENCRYPT
   tables:
@@ -29,4 +27,4 @@ rules:
   queryWithCipherColumn: # 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询
 ```
 
-算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt)。
+算法类型的详情，请参见[内置加密算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/encrypt.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/encrypt.en.md
similarity index 80%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/encrypt.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/encrypt.en.md
index f63a0f35d2..0165576d89 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/encrypt.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/encrypt.en.md
@@ -1,13 +1,11 @@
 +++
 title = "Encryption"
-weight = 3
+weight = 4
 +++
 
 ## Configuration Item Explanation
 
 ```yaml
-dataSources: # Omit the data source configuration, please refer to the usage
-
 rules:
 - !ENCRYPT
   tables:
@@ -29,4 +27,4 @@ rules:
   queryWithCipherColumn: # Whether query with cipher column for data encrypt. User you can use plaintext to query if have
 ```
 
-Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt) for more details about type of algorithm.
+Please refer to [Built-in Encrypt Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt) for more details about type of algorithm.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/ha.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/ha.cn.md
new file mode 100644
index 0000000000..d8c4af64b6
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/ha.cn.md
@@ -0,0 +1,6 @@
++++
+title = "高可用"
+weight = 3
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/ha.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/ha.en.md
new file mode 100644
index 0000000000..fdbdfbf1ef
--- /dev/null
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/ha.en.md
@@ -0,0 +1,6 @@
++++
+title = "HA"
+weight = 3
++++
+
+TODO
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mix.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/mix.cn.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mix.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/mix.cn.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mix.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/mix.en.md
similarity index 100%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/mix.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/mix.en.md
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/readwrite-splitting.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/readwrite-splitting.cn.md
similarity index 81%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/readwrite-splitting.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/readwrite-splitting.cn.md
index fb6ee4529c..a5bf06094e 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/readwrite-splitting.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/readwrite-splitting.cn.md
@@ -6,8 +6,6 @@ weight = 2
 ## 配置项说明
 
 ```yaml
-dataSources: # 省略数据源配置，请参考使用手册
-
 rules:
 - !READWRITE_SPLITTING
   dataSources:
@@ -23,10 +21,7 @@ rules:
       type: # 负载均衡算法类型
       props: # 负载均衡算法属性配置
         # ...
-
-props:
-  # ...
 ```
 
-算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance)。
+算法类型的详情，请参见[内置负载均衡算法列表](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance)。
 查询一致性路由的详情，请参见[使用规范](/cn/features/readwrite-splitting/use-norms)。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/readwrite-splitting.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/readwrite-splitting.en.md
similarity index 79%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/readwrite-splitting.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/readwrite-splitting.en.md
index ff412e2770..a72e52f2b1 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/readwrite-splitting.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/readwrite-splitting.en.md
@@ -6,8 +6,6 @@ weight = 2
 ## Configuration Item Explanation
 
 ```yaml
-dataSource: # Omit the data source configuration, please refer to the usage
-
 rules:
 - !READWRITE_SPLITTING
   dataSources:
@@ -23,10 +21,7 @@ rules:
       type: # Load balance algorithm type
       props: # Load balance algorithm properties
         # ...
-
-props:
-  # ...
 ```
 
-Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance) for more details about type of algorithm.
+Please refer to [Built-in Load Balance Algorithm List](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance) for more details about type of algorithm.
 Please refer to [Use Norms](/en/features/readwrite-splitting/use-norms) for more details about query consistent routing.
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/shadow.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/shadow.cn.md
similarity index 88%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/shadow.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/shadow.cn.md
index e1c6bdca42..52024b82a3 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/shadow.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/shadow.cn.md
@@ -1,13 +1,11 @@
 +++
 title = "影子库"
-weight = 4
+weight = 5
 +++
 
 ## 配置项说明
 
 ```yaml
-dataSources: # 省略数据源配置，请参考使用手册
-
 rules:
 - !SHADOW
   enable: # Shadow功能开关。 可选值：true/false，默认为false
@@ -27,7 +25,4 @@ rules:
       type: # 影子算法类型
       props: # 影子算法属性配置
         # ...
-      
-props:
-  # ...
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/shadow.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/shadow.en.md
similarity index 89%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/shadow.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/shadow.en.md
index 5102dad960..d57663383c 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/shadow.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/shadow.en.md
@@ -1,13 +1,11 @@
 +++
 title = "Shadow DB"
-weight = 4
+weight = 5
 +++
 
 ## Configuration Item Explanation
 
 ```yaml
-dataSources: # Omit the data source configuration, please refer to the usage
-
 rules:
   - !SHADOW
     enable: # Shadow function switch. Optional values: true/false, the default is false
@@ -27,7 +25,4 @@ rules:
         type: # Shadow algorithm type
         props: # Shadow algorithm property configuration
         # ...
-
-props:
-# ...
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/sharding.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/sharding.cn.md
similarity index 96%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/sharding.cn.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/sharding.cn.md
index cce3bd0416..d0b9dfdf66 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/sharding.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/sharding.cn.md
@@ -6,8 +6,6 @@ weight = 1
 ## 配置项说明
 
 ```yaml
-dataSources: # 省略数据源配置，请参考使用手册
-
 rules:
 - !SHARDING
   tables: # 数据分片规则配置
@@ -58,7 +56,4 @@ rules:
       type: # 分布式序列算法类型
       props: # 分布式序列算法属性配置
       # ...
-
-props:
-  # ...
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/sharding.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/sharding.en.md
similarity index 96%
rename from docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/sharding.en.md
rename to docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/sharding.en.md
index 6b087aac3d..16bb3243eb 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/configuration/yaml/sharding.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml/rules/sharding.en.md
@@ -6,8 +6,6 @@ weight = 1
 ## Configuration Item Explanation
 
 ```yaml
-dataSources: # Omit the data source configuration, please refer to the usage
-
 rules:
 - !SHARDING
   tables: # Sharding table configuration
@@ -58,7 +56,4 @@ rules:
       type: # Key generate algorithm type
       props: # Key generate algorithm properties
       # ...
-
-props:
-  # ...
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule.cn.md
index 2229a149f9..efcd9717a4 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule.cn.md
@@ -28,7 +28,7 @@ algorithmProperty:
     key=value                          
 ```
 - `PLAIN` 指定明文数据列，`CIPHER` 指定密文数据列
-- `encryptAlgorithmType` 指定加密算法类型，请参考 [加密算法](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt/)
+- `encryptAlgorithmType` 指定加密算法类型，请参考 [加密算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt/)
 - 重复的 `tableName` 将无法被创建
 - `queryWithCipherColumn` 支持大写或小写的 true 或 false
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule.en.md
index 8e9403db1b..cf32eb8da4 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule.en.md
@@ -28,7 +28,7 @@ algorithmProperty:
     key=value                          
 ```
 - `PLAIN` specifies the plain column, `CIPHER` specifies the cipher column
-- `encryptAlgorithmType` specifies the encryption algorithm type, please refer to [Encryption Algorithm](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt/)
+- `encryptAlgorithmType` specifies the encryption algorithm type, please refer to [Encryption Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/encrypt/)
 - Duplicate `tableName` will not be created
 - `queryWithCipherColumn` support uppercase or lowercase true or false
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule.cn.md
index 771582b82f..919903c202 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule.cn.md
@@ -34,7 +34,7 @@ algorithmProperty:
 
 - 支持创建静态读写分离规则和动态读写分离规则
 - 动态读写分离规则依赖于数据库发现规则
-- `loadBanlancerType` 指定负载均衡算法类型，请参考 [负载均衡算法](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance/)
+- `loadBanlancerType` 指定负载均衡算法类型，请参考 [负载均衡算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance/)
 - 重复的 `ruleName` 将无法被创建
 
 ## 示例
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule.en.md
index a870413ab6..8767cd0915 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule.en.md
@@ -34,7 +34,7 @@ algorithmProperty:
 
 - Support the creation of static readwrite-splitting rules and dynamic readwrite-splitting rules
 - Dynamic readwrite-splitting rules rely on database discovery rules
-- `loadBanlancerType` specifies the load balancing algorithm type, please refer to [Load Balance Algorithm](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance/)
+- `loadBanlancerType` specifies the load balancing algorithm type, please refer to [Load Balance Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/load-balance/)
 - Duplicate `ruleName` will not be created
 
 ## Example
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.cn.md
index c870a43091..3bc64ee053 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.cn.md
@@ -83,8 +83,8 @@ algorithmProperty:
     key=value                          
 ```
 - `RESOURCES` 需使用 RDL 管理的数据源资源
-- `shardingAlgorithmType` 指定自动分片算法类型，请参考  [自动分片算法](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding/)
-- `keyGenerateStrategyType` 指定分布式主键生成策略，请参考 [分布式主键](/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen/)
+- `shardingAlgorithmType` 指定自动分片算法类型，请参考  [自动分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)
+- `keyGenerateStrategyType` 指定分布式主键生成策略，请参考 [分布式主键](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
 - 重复的 `tableName` 将无法被创建
 - `shardingAlgorithm` 能够被不同的 `Sharding Table Rule` 复用，因此在执行 `DROP SHARDING TABLE RULE` 时，对应的 `shardingAlgorithm` 不会被移除
 - 如需移除 `shardingAlgorithm`，请执行 `DROP SHARDING ALGORITHM`
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.en.md
index a6c4bac54f..9cdc612899 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule.en.md
@@ -83,8 +83,8 @@ algorithmProperty:
     key=value                          
 ```
 - `RESOURCES` needs to use data source resources managed by RDL
-- `shardingAlgorithmType` specifies the type of automatic sharding algorithm, please refer to [Auto Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding/)
-- `keyGenerateStrategyType` specifies the distributed primary key generation strategy, please refer to [Key Generate Algorithm](/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen/)
+- `shardingAlgorithmType` specifies the type of automatic sharding algorithm, please refer to [Auto Sharding Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/)
+- `keyGenerateStrategyType` specifies the distributed primary key generation strategy, please refer to [Key Generate Algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
 - Duplicate `tableName` will not be created
 - `shardingAlgorithm` can be reused by different `Sharding Table Rule`, so when executing `DROP SHARDING TABLE RULE`, the corresponding `shardingAlgorithm` will not be removed
 - To remove `shardingAlgorithm`, please execute `DROP SHARDING ALGORITHM`
