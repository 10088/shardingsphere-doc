commit 427bec71b4da7da10affe89014f4d81d9cf364bc
Author: xlm1226 <89837082+xlm1226@users.noreply.github.com>
Date:   Sat Oct 23 23:44:13 2021 +0800

    New blog 21_25 (#13174)
    
    * New_Blog_Update_Images
    
    更新Blog20-25的图片
    
    * New_Blog_21_25
    
    * Changes
    
    * Fix mistakes

diff --git a/docs/blog/content/material/Oct_12_5_E_Hualu_ShardingSphere_Hulu_Story_Data_Processing_Shortcut.en.md b/docs/blog/content/material/Oct_12_5_E_Hualu_ShardingSphere_Hulu_Story_Data_Processing_Shortcut.en.md
new file mode 100644
index 0000000000..57be38983f
--- /dev/null
+++ b/docs/blog/content/material/Oct_12_5_E_Hualu_ShardingSphere_Hulu_Story_Data_Processing_Shortcut.en.md
@@ -0,0 +1,74 @@
++++
+title = "E-Hualu X ShardingSphere | Hulu Story’s Data Processing Shortcut"
+weight = 21 
+chapter = true
++++
+
+# E-Hualu X ShardingSphere | Hulu Story’s Data Processing Shortcut
+
+> “ShardingSphere has greatly simplified sharding development and maintenance, which has played a very important role in our rapid product release. We estimate that ShardingSphere has saved us at least 4 months of R&D costs.”                                                
+*— Shi Moxuan, Technical Director，E-Hualu*
+
+At the beginning of this year, E-hualu officially launched its cloud service product “Hulu App” that targets non-business users. Since then, its architecture’s data stress has increased on a daily basis.
+
+The R&D team of Hulu App chose to use ShardingSphere’s sharding features and scale their data out. The flexible and agile features of ShardingSphere met the requirements of Hulu App. It requires data extensibility, and needs to prevent the team from “reinventing the wheel”.
+
+ShardingSphere can simplify sharding development and maintenance to the greatest extent. As the service is growing, the work will be increasingly complicated.
+
+## Hulu App’s growth pressure: feature extension and new services
+
+The high requirement for data storage and computing is in the genes of the Hulu App technical team.
+
+Because Hulu App is rapidly growing, its service and feature changes are relatively frequent. Therefore its technical team needs to adapt quickly when a front-end service changes. As its users and service data volume are growing rapidly, its databases are faced with greater pressure.
+
+The official Hulu App was released on May 17, 2020, and then its user data and service volume also showed a rapid growth trend. Therefore it was inevitable to scale out its databases for many times. At the same time, with business requirements changing very quickly, new challenges have emerged:
+
+* *How to ensure feature extensibility*
+
+Because of increasing users and developing product versions, its user data has exploded. The storage and computing capability of its old architecture has been severely challenged. Therefore, Hulu App requires that its back-end data processing platform shall have both extensible features, and flexibility.
+
+* *How to improve efficiency*
+
+Faced with its changeable services, the R&D team of Hulu App needs to make rapid adjustments when necessary, so as to make its architecture adapt to its services. A highly-flexible, extensible data architecture can greatly improve development efficiency of the team. On the other hand, because of such large amounts of data, database retrieval efficiency will inevitably have problems such as delays, slow read and write. These problems will ultimately affect user experience.
+
+* *How to facilitate feature release*
+
+All new products will face problems like frequent new feature release, bringing the scheduled release date forward, when they are just released. These problems pose a great challenge to a development team. At first, Hulu’s development team planned to base on their service demands and create their own sharding plan all by themselves. However, they don’t have enough time to do that, so it’s urgent for them to choose a new sharding plan.
+
+* *How to guarantee system stability*
+    
+A newly-added technology will greatly challenge system stability. It’s especially true for bottom-level technologies, most of which can influence platform services and probably challenge system stability. So what Hulu App needs is a data application product that does not greatly stress databases, but quickly adapts to them and that is also highly stable.
+
+## Leverage ShardingSphere’s features to Create a Flexible, Highly-Available Data Architecture Solution
+
+Hulu App’s team studied their needs and spent two weeks evaluating ShardingSphere and other similar solutions. They had evaluative indicators like product feature, maturity, stability and performance. At last, they chose ShardingSphere because of its powerful features, its support and its high maturity can fully meet their needs.
+
+The Hulu team deployed ShardingSphere above Alibaba Cloud’s RDS. Instead of adjusting ontology databases, the Hulu team prefers to conduct data governance above its databases. ShardingSphere can effectively improve Hulu’s data architecture, because it can achieve three things: high scalability brought by its extensible architecture, closely adaptive to Hulu’s service. ShardingSphere brings Hulu with obvious improvement:
+   
+***“High scalability” of the pluggable architecture***
+
+Due to its service characteristics, Hulu App’s limited storage space is consumed very quickly, and the problem gradually begins to affect response efficiency at the front end. Therefore, the team can quickly develop enhanced features by using ShardingSphere, which can provide optimized solutions for its subsequent architectural adjustments. The example strengthens the ShardingSphere’s advantage in sharding.
+
+***Closely adaptive to service***
+
+The smaller the architecture change is, the more controllable it is for developers. ShardingSphere, an ecosystem located above databases, is closer to service and it deployment is even more lightweight. So it is undoubtedly the best solution to solve the contradiction between the front-end service changes and back-end architecture adjustment of Hulu App. In addition, in terms of flexibility, ShardingSphere supports instant achievement of relevant configurations, which greatly helps the team save a lot of sharding-related work. So it plays a very important role in Hulu App’s quick releases.
+
+***“Zero attack” to the service architecture***
+
+Hulu App chose ShardingSphere’s Proxy deployment mode. It can manage the real database cluster through Proxy without. replacing underlying databases. It basically completed the separation of service and data at the architectural level without any changes. So it can avoid the risks caused by database changes, such as unavailable service and long stable cycle. In addition, the non-status mode of ShardingSphere hardly has any perceptible impact on users at the front end and the service layer does not need to pay attention to the data storage method .
+
+So, Hulu App is a product with tight go-live schedule and fast feature iteration. ShardingSphere-Proxy can reuse original databases and help the Hulu development team to develop incremental features above databases such as sharding and data encryption. In addition, ShardingSphere allows developers not to worry about database configuration and shields user perception, so it quickly builds service-oriented database direct connection, which is well separated from the system architecture level, and ensures that daily maintenance work at the database agent, such as bug repair and version update, will not affect the services.
+
+This time, ShardingSphere collaborated with the R&D team of E-hualu’s Hulu App, and helped them overcome data volume explosion for several times. Actually, this is just a tiny example of ShardingSphere’s various application scenarios around the world.
+
+**About E-hualu & Hulu App**
+
+Founded in 2001, Beijing E-hualu Information Technology Co., Ltd. is a listed company under the state-owned enterprise China Hualu Group Co., LTD. directly administrated by the State-owned Assets Supervision and Administration Commission of the State Council (SASAC). Its mission is to reduce energy consumption and the cost of long-term data management.
+
+Hulu App is the first to-customer product of E-hualu.
+
+**ShardingSphere Community:**
+
+ShardingSphere Github: [https://github.com/apache/shardingsphere]()
+ShardingSphere Twitter: [https://twitter.com/ShardingSphere]()
+ShardingSphere Slack Channel: [apacheshardingsphere.slack.com]()
diff --git a/docs/blog/content/material/Oct_12_6_AutoTable_Your_Butler_Like_Sharding_Configuration_Tool.en.md b/docs/blog/content/material/Oct_12_6_AutoTable_Your_Butler_Like_Sharding_Configuration_Tool.en.md
new file mode 100644
index 0000000000..422ed2003c
--- /dev/null
+++ b/docs/blog/content/material/Oct_12_6_AutoTable_Your_Butler_Like_Sharding_Configuration_Tool.en.md
@@ -0,0 +1,203 @@
++++
+title = "AutoTable: Your Butler-Like Sharding Configuration Tool"
+weight = 22 
+chapter = true
++++
+
+# AutoTable: Your Butler-Like Sharding Configuration Tool
+
+## Summary
+
+In the previous article _“An Introduction to DistSQL”_ written by Haoran Meng, the Apache ShardingSphere Committer shared the motivating reasons behind the design of DistSQL, explained its syntax system, and impressively showcased how you can use one SQL to create a sharding table.
+
+We believe that you should be now more familair with the new capabilities Apache ShardingSphere can bring you.
+
+Following the article’s publication, we received many messages from our readers and users. They wanted to know the details of using DistSQL to configure sharding rules, and whether they can still use DistSQL to quickly create and configure a sharding table with configs like YAML or Namespace. Today, we’d like to introduce your new sharding configuration butler AutoTable to you.
+
+## Background
+
+`Sharding` is the core feature of Apache ShardingSphere. We guess, your old sharding workflow (without data migration) probably looks like the one below:
+
+**Figure 1:** Sharding Workflow
+
+![](../../static/img/Blog_22_img_1_sharding_workflow_en.png)
+
+In such workflow, you have to clearly know your sharding strategies, and the actual table names and their datasources. Then, you base your sharding rules on such information.
+
+One of the table distribution results may be 8 sharding databases each containing 4 tables.
+
+**Figure 2:** 8 Databases * 4 Tables Distribution
+
+![](../../static/img/Blog_22_img_2_8_Databases_4_Tables_Distribution.png)
+
+## Problem
+
+Only when you are 100% sure about the table distribution you can code the correct actualDataNodes rules. Otherwise, you may write the wrong one. The correct sharding rule in this case looks like this:
+
+~~~
+tables:
+t_order:
+actualDataNodes: ds_${0..7}.t_order_${0..3}
+databaseStrategy:
+standard:
+shardingColumn: order_id
+shardingAlgorithmName: database_inline
+tableStrategy:
+standard:
+shardingColumn: order_id
+shardingAlgorithmName: table_inline
+shardingAlgorithms:
+database_inline:
+type: INLINE
+props:
+algorithm-expression: ds_${order_id % 8}
+table_inline:
+type: INLINE
+props:
+algorithm-expression: t_order_${order_id % 4}
+~~~
+
+ShardingSphere actually has very user-friendly configuration rules. However, users may still have difficulties, such as:
+
+* Failure to understand sharding strategies or rules;
+
+* Inconsistency between sharding rules and actual table distribution;
+
+* Wrong configuration expressions.
+
+*We always pay attention to user issues. For example, we have noticed one of our users found the following issue:*
+
+![](../../static/img/Blog_22_img_3_Question_Comment.png)
+
+## Why You Need AutoTable？
+
+Apache ShardingSphere Version 5.0.0 launched `AutoTable`, a new method that makes sharding configuration easier for you.
+
+Literally, `AutoTable` means automated table sharding. When you use `AutoTable`, you only need to specify the sharding count and the datasource. Thanks to AutoTable, you no longer need to worry about actual table distribution.The correct configuration format is shown as follows:
+
+~~~
+autoTables:
+t_order:
+# Specify your datasources
+actualDataSources: ds_${0..7}
+shardingStrategy:
+standard:
+shardingColumn: order_id
+shardingAlgorithmName: mod
+shardingAlgorithms:
+mod:
+type: MOD
+props:
+# Specify your sharding-count
+sharding-count: 32
+~~~
+
+Due to AutoTable configuration, ShardingSphere is able to recognize that the logic table `t_order` has 8 datasources and needs 32 sharding tables, and then it automatically calculates the distribution result: 8 sharding databases* 4 sharding tables. The result is exactly the same.
+
+## AutoTable & DistSQL
+
+Now, you know more about `AutoTable`. However, when you combine AutoTable with DistSQL, the results are even more impressive as it can greatly simplify sharding configuration for you. Unlike the old method, the DistSQL configuration rule works immediately so you no longer need to restart it anymore. Besides, one rule change will never have impact on others.
+
+DistSQL supports three expressions used to manage sharding table rules: create, alter and drop.
+
+~~~
+# Create a sharding table rule
+CREATE SHARDING TABLE RULE t_order (
+RESOURCES(resource_0,resource_1),
+SHARDING_COLUMN=order_id,TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=4))
+);
+# Ater a sharding table rule
+ALTER SHARDING TABLE RULE t_order (
+RESOURCES(resource_0,resource_1),
+SHARDING_COLUMN=order_id,TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=10))
+);
+# Drop a sharding table rule
+DROP SHARDING TABLE RULE t_order;
+~~~
+
+*> Note: Rule alteration may have impact on old data. In order to fix the problem, we provide ShardingSphere Scaling that allows you to migrate data and makes it more convenient for you to manage distributed data. We are happy to share more about ShardingSphere Scaling in the near future.*
+
+## FAQ
+
+**Can I use AutoTable in ShardingSphere-JDBC?**
+
+Yes, you can.
+
+Both ShardingSphere-JDBC and ShardingSphere-Proxy support AutoTable. What’s more, you can also use DistSQL in Proxy for dynamic configuration in order to meet your various access demands.
+
+**Which Sharding Algorithms Does AutoTable Support?**
+
+AutoTable supports all automatic sharding algorithms:
+
+* MOD：Modulo Sharding Algorithm
+
+* HASH_MOD ：Hash Modulo Sharding Algorithm
+
+* VOLUME_RANGE：Volume Based Range Sharding Algorithm
+
+* BOUNDARY_RANGE：Boundary Based Range Sharding Algorithm
+
+* AUTO_INTERVAL : Auto Interval Sharding Algorithm
+
+For more information, please read the Apache ShardingSphere document _“Automatic Sharding Algorithm”._
+
+In addition to using build-in algorithms, you can also develop SPI extension to customize your own sharding algorithm when necessary.
+
+**I Have Already Used YAML. Can I Use AutoTable Now?**
+
+We don’t recommend you to do that.
+
+If you’re sure that such switch can make the table distribution result conform to your expectation, you may have a try. Otherwise, please don’t do that.
+
+However, if you want to create a new table, you are welcome to use AutoTable.
+
+**What‘s the Best Scenario for AutoTable?**
+
+AutoTable aims to be your butler for sharding configuration. All you need to do is to tell it how many shards you need, and then it saves you the trouble of remembering the actual table location and table count.
+
+To use AutoTable, you better configure rules first and then use `CREATE TABLE` to create tables. Old habits die hard but please change your old habit: create tables first and then configure rules. Now ShardingSphere is more like an access point of your distributed database, instead of middleware.
+
+**My Datasource Names Are Non-Contiguous or I Have Too Many Datasource Names. Can I Use AutoTable?**
+
+Yes, you can. When you specify your datasources, their names are not required to be continuous. To solve the problem, you can use enumeration-expression and inline-expression at the same time:
+
+~~~
+CREATE SHARDING TABLE RULE t_order (
+RESOURCES('resource_${0..9}',resource_12,resource_15,"resource_$->{17..19}"),
+...
+);
+~~~
+
+**Can I use AutoTable and the Old Method Together?**
+
+Yes, you can.
+
+For more information, please read: [https://github.com/apache/shardingsphere/blob/master/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/resources/config/config-sharding.yaml] ()
+
+## Reward:
+
+@CatYangWei was the first GitHub user to ask about `AutoTable`.
+
+![](../../static/img/Blog_22_img_4_Rewarded_User_Issue_Snapshot.png)
+
+We’d like to thank him for helping us find the problem. We do appreciate that. In order to express our gratitude, we will contact you later and send you a gift. as a token of appreciation from the community👏👏👏
+
+We also welcome other community members to help us find more issues, to improve the community.
+
+## ShardingSphere Community:
+
+ShardingSphere Github: [https://github.com/apache/shardingsphere]()
+
+ShardingSphere Twitter: [https://twitter.com/ShardingSphere]()
+
+ShardingSphere Slack Channel: [apacheshardingsphere.slack.com]()
+
+Contributor Guide：[https://shardingsphere.apache.org/community/en/contribute/]()
+
+## Author
+
+Longtao Jiang
+
+![](../../static/img/Blog_22_img_5_Liang_Longtao_Photo.png)
+
+> SphereEx Middleware Development Engineer & Apache ShardingSphere Contributor.
diff --git a/docs/blog/content/material/Oct_12_7_openGauss_ShardingSphere_One_of_the_Top_Distribution_Solutions.en.md b/docs/blog/content/material/Oct_12_7_openGauss_ShardingSphere_One_of_the_Top_Distribution_Solutions.en.md
new file mode 100644
index 0000000000..d9d8e76284
--- /dev/null
+++ b/docs/blog/content/material/Oct_12_7_openGauss_ShardingSphere_One_of_the_Top_Distribution_Solutions.en.md
@@ -0,0 +1,80 @@
++++
+title = "openGauss X ShardingSphere: One of the Top Distribution Solutions"
+weight = 23
+chapter = true
++++
+
+# openGauss X ShardingSphere: One of the Top Distribution Solutions
+
+## About openGauss
+
+openGauss is an open source relational database management system. Since its launch in June 2020, it has made waves the database management vertical. With an increasing number of partners and developers, it’s already reaping the benefits of the significant efforts & resources poured into building a successful database ecosystem.
+
+## Project Background
+
+Facing problems like data volume explosion, and super-high levels of concurrent data processing, openGauss made a choice: to adopt a distributed solution. It started to work on big data storage, throughput improvement for super-high concurrency, improving performance bottlenecks caused by large data amounts in a table, etc.
+
+Apache ShardingSphere facilitates the distributed feature development of openGauss. Such collaboration on the full stack and open source solution helps openGauss make significant breakthroughs.
+
+## The Distributed Solution
+
+openGauss integrates many open source components to optimize its full stack & open source distributed solution for horizontal scaling, distributed transactions, and distributed governance. Its framework is shown in Fig.1
+
+![](../../static/img/Blog_23_img_1_The_Structure_of_the_ShardingSphere_openGauss_Distribution_Solution.en.png)
+
+ShardingSphere-Proxy is the open source distributed database solution. ShardingSphere’s well-known features include but are not limited to data sharding, distributed transaction, elastic scaling, and read-write splitting.
+
+HAProxy uses Patroni REST API to identify database master nodes and guarantee high availability, as well as load balancer.
+
+Every high availability node of Patroni supports one master with multiple slaves and uses the Praxos protocols to keep data consistency, so that nodes are allowed to be deployed in the same site or in different sites to ensure multiple sites and centers data security.
+
+In terms of the solution, ShardingSphere-Proxy contributes with its mighty distribution features, Kubernetes helps manage clusters, and prometheus monitors cluster status. This all-star team’s integration make the project a really powerful full stack, open source distribution solution.
+
+## What’s Special About the Project?
+
+* *Great extensibility and elastic scaling*
+
+Horizontal scaling helps realize the linear extension of computing and storage capabilities. The maximum shard count increases to 6400. Database performance improves accordingly and the problem of data volume explosion in single database is effectively managed.
+
+Based on users’ traffic condition, a user can flexibly scale data nodes, and adopt intelligent read-write splitting to realize automatic load balancing of a distributed database.
+
+* *Enhanced enterprise-grade features*
+
+The project provides users with various enterprise-grade features such as distributed data store, Trigger, distributed governance, comprehensive end-to-end encryption, and Workload Diagnosis Report (WDR).
+
+* *Simple deployment*
+
+It may take only a few seconds to deploy the project. Its deployment is simple while also being efficient as it adopts standardized image deployment to keep delivery consistent in different environments. It also uses container deployment as well as resource pooling so that it is less platform dependent.
+
+* *Super-high availability and remote disaster recovery*
+
+The project can effectively manage clusters and facilitate operations & maintenance. It follows the Paxos protocols to ensure data security and strong consistency and provides various features for disaster recovery, whose recovery point object (RPO) is zero. It supports resilient recovery methods for one region, cross-region, and multi-region & multi-center.
+
+* *Open source ecosystem*
+
+The open source project openGauss warmly welcomes more contributors, and encourages joint efforts to grow the open source database ecosystem.
+
+## Application Scenarios
+
+* *Financial system*
+
+The product is extremely reliable even for demanding financial systems. Paxos is a family of protocols for solving consensus in a network of unreliable and fallible processors. Besides being Paxos-based, the product includes powerful features such as distributed transaction with strong consistency, and multi-region multi-center disaster recovery whose RPO is 0.
+
+* *Government and enterprise operations*
+
+It’s really safe and convenient for government and enterprise operations due to its comprehensive end-to-end security protection, its hardware and software ecosystem support, and its high availability capabilities.
+
+* *Intelligent grid*
+
+The product’s flexible disaster recovery features can improve smart grid database scalability.
+
+### ShardingSphere Community:
+
+ShardingSphere Github: [https://github.com/apache/shardingsphere]()
+
+ShardingSphere Twitter: [https://twitter.com/ShardingSphere]()
+
+ShardingSphere Slack Channel: [apacheshardingsphere.slack.com]()
+
+
+
diff --git a/docs/blog/content/material/Oct_12_8_ShardingSphere_Google_Summer_of_Code_Students_How_Was_Your_Open_Source_Experience.en.md b/docs/blog/content/material/Oct_12_8_ShardingSphere_Google_Summer_of_Code_Students_How_Was_Your_Open_Source_Experience.en.md
new file mode 100644
index 0000000000..8a9df024c8
--- /dev/null
+++ b/docs/blog/content/material/Oct_12_8_ShardingSphere_Google_Summer_of_Code_Students_How_Was_Your_Open_Source_Experience.en.md
@@ -0,0 +1,177 @@
++++
+title = "ShardingSphere x Google Summer of Code: Students, How Was Your Open Source Experience?"
+weight = 24
+chapter = true
++++
+
+# ShardingSphere x Google Summer of Code: Students, How Was Your Open Source Experience?
+
+![](../../static/img/Blog_24_img_1_ShardingSphere_GSoC.png)
+
+Recently the ShardingSphere community had the pleasure of contributing to the Google Summer of Code (GSoC), and mentoring the next generation of open source innovators. Our project was select to be part of this brilliant and long running program, to provide students from all over the world with an experience in open source software.
+
+Thanoshan and Liangda are the students that worked with Apache ShardingSphere mentors during the latest GSoC, and continue contributing to the project ever since.
+
+![](../../static/img/Blog_24_img_2_GSoC_2021_Projects_ss_Students_Snapshot_Thanoshan_Liangda.png)
+
+They were kind enough to agree to a phone interview with Yacine, one of the ShardingSphere committers and community managers — to share their opinions and experience with the GSoC application process, joining the Apache ShardingSphere project, and their future plans.
+
+## Students Intro:
+
+![](../../static/img/Blog_24_img_3_Thanoshan_Photo.png)
+
+Name: Thanoshan
+
+Country: Sri Lanka
+
+University: Sabaragamuwa University 
+
+Major: Computing & Information Systems
+
+![](../../static/img/Blog_24_img_4_Liangda_Photo.png)
+
+Name:Liangda
+
+Country: Germany
+
+School: University of Mannheim
+
+Major: Business Informatics
+
+## Q&A
+> **How did you get into software development?**
+
+**Thanoshan:** Basically, my degree is related to software development. And I’m personally very interested in this field. I was passionate about it even before starting university.
+
+**Liangda:** Mainly through my current studies. During high school, I was interested in both business and computer science, then I decided to study Business Informatics, which is a combination of both subjects. That was the beginning of my journey in coding and software development, where I’ve learned Java, C++, Python, and design patterns etc.
+
+> **How did you get the idea to apply for Google Summer of Code?**
+
+**Thanoshan:** Here, in Sri Lanka, many of my seniors have already done the Google Summer of Code. They strongly advised me to look at this opportunity and told me that I should definitely try it. So, I researched the GSoC program, for things such as “What is about? How can I work on that?”.
+
+**Liangda：**The first time I got to know GSoC was during last year’s summer, I was surfing on the internet, and I accidentally found out a blog sharing about some GSoC experiences and application tips. I was really fascinated by this program. But at that time, open source was completely new for me, and I was not confident enough. Then during the winter of 2020, I got the chance to work as a research assistant at the university on a chatbot project using Rasa, which is an open source conversational AI framework. That was the first time I dove so deep into an open source framework and interacted with the open source community. It was a great experience for me. And the idea came into my mind, why not take the opportunity of GSoC to get to learn more about the open source world.
+
+> **What’s so great about the program anyway?**
+
+**Liangda:** I think GSoC provides a really great platform for interested students to dive deep into the open source community and learn the newest technologies. There are almost 200 open source organizations participating in GSoC and each of them suggests several projects, which requires different kind of stack and technologies, from beginner level to professional level. So, I believe, every student could find a suitable project, if they spend enough time and effort. On the other hand, GSoC brings fresh blood into the open source community. So, it’s beneficial for both students and organizations.
+
+> **What project did you work on during GSoC?**
+
+**Thanoshan:**ShardingSphere’s ANTLR project. I’m really interested in Java, and Java related technologies and it’s my one of the favorite languages. Also, I am very passionate about open source software development. So, I want to do something in Java and open source, to learn more from other people, something that allows me to collaborate with other people. The Java-related technology is the main motivation, which actually drove me in this project.
+
+**Liangda:** My GSoC project contributes to Apache ShardingSphere’s parser engine, which handles different database SQLs like MySQL, PostgreSQL, Oracle etc. And I was focusing on proofreading the Oracle SQL definition of DDL (Data Definition Language) and TCL (Transaction Control language).
+
+> **How did you start with your contributions with ShardingSphere? Any particular thing which made you to start contributing?**
+
+**Liangda:** That’s an interesting story. When I found the ShardingSphere project, which requires Java, Database SQL and Antlr knowledge, I felt that I finally found the one that matches my skills and knowledge. However, when I went to the Jira page, where the project details are listed. I noticed there’s already another student working on it since January–Thanoshan, another GSoC student .
+
+At that time, he had already submitted a couple PRs and was making good progress there. So, I felt I have no chance here and I left and looked for other organizations. Then one day in March, I came back to the Apache Software Foundation project list and surprisingly there was a new project added by Apache ShardingSphere, but this time, there was no student working on it! So, I felt this was my chance and I should take this opportunity. Then I just started to work on the preliminary issues.
+
+> **How is working with ShardingSphere? How easy is it to get started?**
+
+**Thanoshan:** On getting started with ShardingSphere, actually at that time I was not familiar with the ANTLR project (Another Tool for Language Recognition) and working with ANTLR, but then my mentor Trista created an issue, that’s like a great beginner-friendly issue.
+
+She listed the number of tasks that we have to do and the processes to follow. So, I followed those steps, practiced and at last I also learned ANTLR, it’s not difficult. Actually, I feel it’s like intermediate level, but my mentor’s help and support made it become easy. So, I learned a lot from my mentors, as actually each of them helped me with the tasks. The mentors were 100% helpful, I had three mentors including Trista and the others I am not sure about their names now, but they are very friendly. They helped me a lot. I learned many things from them.
+
+**Liangda:** It was hard for me to get started at the beginning, since I’m not coming from a strong computer science background, and it was my first time working on such large-scale project. It took me hours of effort to set up the package and I did face some issues during my first few pull requests.
+
+However, the Apache ShardingSphere is a nice and friendly community, my questions got answered and I received a lot of help from other contributors. I feel I’m warmly welcomed in this community. And this is also one of the reasons I decided to contribute to Apache ShardingShpere.
+
+> **How was your experience as a GSoC student?**
+
+**Liangda:**It was a really great experience. The program is well organized with clear timeline and schedule. I was able to learn a lot about open source development and improve my skills and knowledge. The GSoC student summit at the end of the program was also really interesting and informative.
+
+>**What did you do differently in order to get selected for GSoC by ShardingSphere?**
+
+**Liangda:**I think I was really motivated and I’m able to dive deep into the issues I faced to find the root cause. If I could not solve the issue by myself, I’m not afraid to ask on GitHub directly. This makes me get started quickly.
+
+And after I got familiar with my project, I also worked proactively to answer questions, review pull requests and fix other small issues. Beside this, when I was writing my project proposal, I communicated with my mentor regularly and asked for early feedback. It is important to know mentors’ expectations.
+
+>**How was your experience as a GSoC student?**
+
+**Liangda：**It was a really great experience. The program is well organized with clear timeline and schedule. I was able to learn a lot about open source development and improve my skills and knowledge. The GSoC student summit at the end of the program was also really interesting and informative.
+
+>**What did you do differently in order to get selected for GSoC by ShardingSphere?**
+
+**Liangda: **I think I was really motivated and I’m able to dive deep into the issues I faced to find the root cause. If I could not solve the issue by myself, I’m not afraid to ask on GitHub directly. This makes me get started quickly.
+
+And after I got familiar with my project, I also worked proactively to answer questions, review pull requests and fix other small issues. Beside this, when I was writing my project proposal, I communicated with my mentor regularly and asked for early feedback. It is important to know mentors’ expectations.
+
+> **Is there anything that you would like to say to students who are looking forward to work with ShardingSphere in GSoC? Or do you have any tips for them?**
+
+**Thanoshan:**I would say there will be some projects that will be specified by the mentors and the ShardingSphere community. So, students will have to participate in the community even before the GSoC.
+
+Students can approach the ShardingSphere community even before the program and work on some preliminary tasks related to the GSoC’s main task, which will definitely help them compete in the selection process. So, I would say that they should approach the ShardingSphere community as early as possible.
+
+**Liangda:**Yes, I would highly recommend it and it will be a great experience for sure. There are some issues labeled as “good first issue” or “volunteer wanted”. Just go and try it as soon as possible! The easiest way to get started is learning by doing. And if you feel blocked, don’t be afraid to ask questions and express your thoughts! We are all here to support you!
+
+> **Do you have any suggestions to improve ShardingSphere?**
+
+**Thanoshan:**To improve ShardingSphere? I mean it’s a huge project. And the plus point I see here is the documentation. It’s great. So, to be honest with you, I learned a lot about SQL. I worked on the SQL parser engine part of the project, so I learned the concepts of the SQL parser engine in the ShardingSphere project. For the improvement, I currently do not see anything specific. Actually, ShardingSphere is a great one. I really love to collaborate with the ShardingSphere community. I was able to understand the concepts very easily with the help of the documentation of the ShardingSphere. I also see that there are many community contributors who submitted pull requests for the improvement of the documentation. I’m an inquisitive person so I look around in the ShardingSphere documentation and codes, support, pull request, and issues all the time. So, when I set up the project the first time, I didn’t have this setup guide. Even though I use the Intellj, the JDK, and I set up it correctly, but I didn’t have the support at that time.
+
+It’s nice to see that ShardingSphere currently has been adding the setup guides, so that the new contributors can easily jump to that document and read and understand what they have to do. So, it’s a great thing to have. I am happy for it.
+
+**Liangda:** Overall, I had a great summer with ShardingShpere.
+
+I would have loved to have some video calls with mentors and other students to get to know more about each other during the community bonding.
+
+
+> **Things that people are passionate about help make them who they are. What are those things you are passionate about?**
+
+**Thanoshan:** I’m really passionate about Open Source. I have contributed to projects by a company called 99X, in Sri Lanka. They support some open source projects, so I contributed to at least five of their projects, with just simple contributions like adding a read-me file, contributors guide and improving the documentation and fixing some small bugs and so on. So that was the starting place for me, where I really became interested in open source.
+
+**Liangda:** I’m passionate about building communities. For example, I was the president at the Association of Chinese Students and Scholars in Mannheim, which helps Chinese students in their studies and career. We also promote exchanges with German culture and society. And after GSoC, I become passionate about open source community! It’s nice to see people around the world working together to improve a product and support each other.
+
+> **What’s on the roadmap for the next year for you?**
+
+**Thanoshan:** Next year, it will be my 4th year in college. So, I’ll be planning on completing my undergraduate studies and hoping to work on more open source projects as well and collaborate with the community.
+
+**Liangda:** From October, I will start my master’s degree at the Technical University of Munich, and I will lead the Google Developer Student Club at the University, another great community! I will organize technical events and workshops for students interested in Google technologies. I am really looking forward to this challenge ahead. At the same time, I will still be part of the open source community and of ShardingSphere. Maybe I will attend GSoC again next year!
+
+>**Do you have any questions for me or anything you’d like to know？**
+
+**Thanoshan:** Only one question. So are there any kind of tips that you can give me for an active contribution to ShardingSphere and making a significant impact？
+
+**Yacine:** Okay, sure. So, there are many ways. One of them is the issues. We have the issues, and you can help with that. Or as you mentioned, the documentation is something that we are working on. I have seen you are a good writer. I read your piece on Medium, so that is something that you could help with if you’d like. Moreover, your article had a lot of readers, so it helps in community building.
+
+Contributions can be made in many ways. There are code contributions, but also non-code contributions. Those are also equally appreciated by the community. I’m not sure if you have a desire to maybe one day become a committer in the Apache Community, but there is a voting process, and this type of contributions are considered when voting. I’m not sure if you have a desire to maybe one day become a committer in the Apache Community, but there is a voting process, and this type of contributions are considered when voting.
+
+**Thanoshan:** That’s one of my goals! After I graduate, I definitely want to become a committer, it’s a goal I set for myself.
+
+**Yacine:** Actually, I was talking about this just recently with the ShardingSphere PMC Chair. And he mentioned that the ShardingSphere community appreciates code contributions but even if someone is still learning and shows a desire to help, to learn and grow with the community, that is highly appreciated by the ShardingSphere community. And if you want to become a committer, there is a voting process, and if you’re happy with us and the project, etc., you definitely can achieve that.
+
+## Conclusion
+
+Thanoshan and Liangda shared a lot of their experience with the GSoC and the ShardingSphere project and community. Our community really appreciates their efforts. The two GSoC students had really a good experience with the GSoC and ShardingSphere, a community where they can grow and also contribute to a large project with the help of supportive mentors and community members. So don’t be afraid of getting started!
+
+The ShardingSphere community welcomes people of all skill levels and with different skill sets, that don’t necessarily have to be coding skills — to join and help the community grow.
+
+If you are interested in the Apache ShardingSphere project, feel free reach out to us on our socials (links below) or check out our GitHub page.
+
+### ShardingSphere Community:
+
+ShardingSphere Github: [https://github.com/apache/shardingsphere]()
+
+ShardingSphere Twitter: [https://twitter.com/ShardingSphere]()
+
+ShardingSphere Slack Channel: [apacheshardingsphere.slack.com]()
+
+## Author
+
+![](../../static/img/Blog_24_img_5_Yachine_Photo.png)
+
+> **Yacine Si Tayeb**
+
+*Apache ShardingSphere Contributor*
+
+*SphereEx International Operations Manager*
+
+Passionate about technology and innovation, Yacine moved to Beijing to pursue his Ph.D. in Business Administration, and fell in awe of the local startup and tech scene. His career path has so far been shaped by opportunities at the intersection of technology and business. Recently he took on a keen interest in the development of the ShardingSphere database ecosystem and Open-Source community building.
+
+Yacine’s LinkedIn: [https://www.linkedin.com/in/yacinesitayeb/]()
+
+Yacine’s Twitter: [https://twitter.com/RedVega11]()
+
+
+
+
diff --git a/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md b/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md
new file mode 100644
index 0000000000..27585e6f38
--- /dev/null
+++ b/docs/blog/content/material/Oct_12_9_ShardingSphere_JD Baitiao_Story_of_an_Implementation_Journey.en.md	
@@ -0,0 +1,170 @@
++++
+title = "ShardingSphere x JD Baitiao: Story of an Implementation Journey"
+weight = 25
+chapter = true
++++
+
+# Apache ShardingSphere x JD Baitiao: Story of an Implementation Journey
+
+>Apache ShardingSphere has become the best solution for JD Baitiao's very large storage scenarios and scale-up. JD's shopping festival weighed very much on our big data storage. I mean, like hundreds of millions of data sets.
+
+>JD Baitiao, an internet credit products provider launched in 2014, has always been challenged by data explosion. Every shopping festival is like a technical test for us, but every time the technical staff professionals take proactive strategic initiatives in data architecture development to ensure everything goes smoothly. 
+
+> --Dongfang Zhang，JD Batiao R&D Director 
+
+## The Baitiao Data Architecture Evolution
+
+Launched in Feb. 2014, JD Baitiao's data architecture has already evolved for several times because of rapid increase in data volume and rapid business growth. 
+
+**From 2014 to 2015**
+
+Baitiao first adopted the Solr + HBase solution to connect core business systems and other systems with key databases. Solr indexing is able to achieve fast search responses and HBase is used to store a massive amount of data. 
+
+* A Solr cluster can help the core database reduce reads and writes stress. 
+
+* However, Solr is not perfect: it has unsatisfying extensibility and intrusions.
+
+**From 2015 to 2016**
+
+The company chose NoSQL to store monthly data tables in Mongo DB clusters, temporarily meeting the demand for importing/exporting massive data in payment settlement scenarios. 
+
+* The change made it quite efficient to query hot data. In addition, thanks to such unstructured data storage, staff can easily modify table structures.
+
+* Nevertheless, the plan was still problematic: bad extensibility, intrusions, and memory hog. 
+
+**From 2016 to 2017**
+
+Growing business and growing data. Tens of billions of data volume imposed more performance and volume pressure on MongoDB. JD Baitiao's Big Data Platform used DBRep and MySQL Slave to capture data changes and store the information data in its message center, to later be written to ES and HBase. 
+
+* This plan was actually much better. It focused on real-time data and improved extensibility. 
+
+* However, Baitiao faced high costs to maintain its code because of the data sharding problem in its architecture.
+
+The architecture evolution of JD Baitiao is just an illustration of rapidly growing Internet consumer finance. All the methods Baitiao adopted in the past were not comprehensive, indicating that every solution would be outdated soon. 
+
+## Time to Adopt a Decoupled Architecture
+
+To ensure good system performance even with rapidly increasing data volumes, the technical team first chose the sharding architecture pattern that not only guaranteed excellent performance, but also kept code under control. 
+
+**The data striping plan was actually based on application architecture:**
+
+The product continuously developed but the early solution had now become one of the biggest problems. The old data sharding plan makes code even more complex and increases maintenance expenditure. Developers have to spend much time adjusting sharding every time when the application upgrades, so they cannot concentrate on their own developments. In fact, tight coupling is to blame for the problem. 
+
+Therefore, the team decided to use a mature sharding component that simplifies system upgrades and architecture changes. To compare Baitiao's shard and ShardingSphere shard, their differences are shown in the following table.
+
+![](../../static/img/Blog_25_img_1_JD_VS_ShardingSphere_Table.en.png)
+
+For Baitiao, decoupling was the next task. 
+
+Apparently, JD Baitiao‘s data architecture will experience a brand-new journey to decoupling. The following three directions definitely fueled its transformation: 
+
+**Concentration:** instead of database sharding built in its architecture, it applied a sharding component to place more energy on it own product development. 
+
+**Easier Upgrade:** it used a decoupled architecture to simplify the R&D process of system upgrades. 
+
+**Future-Oriented Plan:** it aims to improve system extensibility so that Baitiao will be more capable of confidently holding large online shopping festivals like the 618 Shopping Festival and Double 11 Shopping Festival (also known as Singles Day on November 11th). 
+
+JD Baitiao is a huge business, so its business scenario is truly related to finance, high concurrency, and massive data volumes. Baitiao's sharding component must have the following features:
+
+1. Be a mature product
+
+1. Have excellent performance
+
+1. Be able to handle big data
+
+1. Have an extensible architecture
+
+##The Apache ShardingSphere Solution
+
+The lightweight Java framework ShardingSphere-JDBC is Apache ShardingSpheres's first product providing services such as a Java Database Connectivity (JDBC) API. ShardingSphere JDBC uses jar archive file installation package and allows the client-side to directly connect to databases. So, it requires no extra deployment dependencies. It is like an enhanced JDBC driver fully compatible with JDBC and ORM frameworks.
+
+ShardingSphere - JDBC provides the following features, making it the best solution in the Baitiao scenario. 
+
+**Mature Product:** ShardingSphere - JDBC is a mature product developed for years, and its open source community is very active.
+
+**Excellent Performance:** its micro-kernel and lightweight design hardly hinder performance.
+
+**Minimum Changes:** it supports native MySQL protocol and minimizes R&D workload.
+
+**Extensibility:** users can combine with the migration sync component to easily extend data.
+
+![](../../static/img/Blog_25_img_2_JD_ShardingSphere_JDBC_en.png)
+
+After being systematically tested for several times, Apache ShardingSphere became JD Baitiao's first choice of data sharding middleware. The cooperation started at the end of 2018. 
+
+##Product Adaptation
+
+To provide Baitiao with better services and support the business, Apache ShardingSphere has made many improvements to its product features and performance during the implementation process. At the same time, the user case helps optimize the product in return. 
+
+**Upgrade the SQL Engine**
+
+Baitiao's business logic is extremely complicated; its diversified scenario demands require the best SQL compatibility levels. Thus, Apache ShardingSphere restructures the SQL parser module to support more SQLs.
+
+* Single data node routing：100% SQL compatibility 
+
+* Multi data node routing：comprehensively support DML, DDL, DCL, TCL and partly DAL. Support features such as pagination, deduplication, ranking, grouping, aggregation and correlated query. 
+
+**Distributed Key**
+
+Apache ShardingSphere provides built-in distributed key generators, such as UUID, and SNOWFLAKE. It also provides its distributed key generation API so that users can develop custom key generation algorithms to meet their special needs. 
+
+**Shard Key Value Injection**
+
+If a SQL has no shard condition, Apache ShardingSphere uses ThreadLoad to manage shard key value, and users can program and add a shard condition to HintManager, making the condition only effective in the current thread. That's so-called SQL zero intrusion.
+
+Additionally, Apache ShardingSphere continues to optimize its other features in order to meet Baitiao's need for high performance such as：
+
+* SQL parsing result cache
+
+* JDBC metadata cache
+
+* Bind table & Broadcast table
+
+* Automated execution engine & Stream merge
+
+JD Baitiao & ShardingSphere teams joint efforts amde all indicators of the product live up to their expectation. The resulting final performance is almost the same as that of a native JDBC. 
+
+![](../../static/img/Blog_25_img_JD_System_en.png)
+
+
+##Cutover
+
+Apache ShardingSphere uses its custom HASH strategy to shard data, effectively avoiding the hot data problem. The total of data nodes almost reaches ten thousand. The cutover process lasts for about 4 weeks. 
+
+1. After DBRep reads data, Apache ShardingSphere synchronizes the data to the target database cluster. 
+
+1. Two clusters run together. After a data migration, Baitiao uses its own tool to verify business and data. 
+
+DBRep is fundamental to the product design of ShardingSphere-Scaling. The automation feature of Scaling definitely facilitates migration and scale-up. 
+
+##Apache ShardingSphere Brings Many Benefits
+
+**Simplified Upgrade Path**
+
+The decoupled architecture effectively simplifies a technology stack required in a system upgrade, so the developer team no longer need to worry about table sharding. Instead, they can focus on the business itself. In brief, ShardingSphere greatly helps Baitiao optimize the upgrade path. 
+
+**Save R&D Cost**
+
+Baitiao directly uses the mature product Apache ShardingSphere, so they do not need to reinvent the wheel and save a lot of time and energy. 
+
+**Improve Architecture Extensibility**
+
+Baitiao also uses the sync migration component Scaling that makes system scale-up even more flexible. It's the company's secret for online shopping festival successes. 
+
+##Summary
+
+The growth of JD Baitiao's business greatly stimulates its data architecture upgrades. This time, it chose Apache ShardingSphere to decouple its architecture and make future upgrades less complicated. Thank to this from now on, developers only have to concentrate on their own product optimization because its data architecture is extensible enough. The case is really a good example of ShardingSphere application in the consumer finance scenario. 
+
+Now, there are more and more internet credit payment models. In the future, Apache ShardingSphere in collaboration with JD Technology will explore more business scenarios, and contribute finance-related technological innovations, further improving Internet finance.
+
+###About Apache ShardingSphere
+
+ShardingSphere is one of the Apache Software Foundation Top-Level Open Source projects, used by over 170 enterprises worldwide, across various verticals such as finance, e-commerce, cloud services, tourism, logistics, education, and entertainment. Its GitHub community has so far cumulated over 14,000 stars. 
+
+We welcome more technical professionals to write articles and share their experiences and thoughts. If you are interested, feel free to contact us: 
+
+ ShardingSphere Github: [https://github.com/apache/shardingsphere]() 
+ 
+ ShardingSphere Twitter: [https://twitter.com/ShardingSphere]()
+ 
+ ShardingSphere Slack Channel:[ShardingSphere Slack Channel:]()
diff --git a/docs/blog/static/img/Blog_22_img_1_sharding_workflow_en.png b/docs/blog/static/img/Blog_22_img_1_sharding_workflow_en.png
new file mode 100644
index 0000000000..228b99e264
Binary files /dev/null and b/docs/blog/static/img/Blog_22_img_1_sharding_workflow_en.png differ
diff --git a/docs/blog/static/img/Blog_22_img_2_8_Databases_4_Tables_Distribution.png b/docs/blog/static/img/Blog_22_img_2_8_Databases_4_Tables_Distribution.png
new file mode 100644
index 0000000000..cb0fe91b5e
Binary files /dev/null and b/docs/blog/static/img/Blog_22_img_2_8_Databases_4_Tables_Distribution.png differ
diff --git a/docs/blog/static/img/Blog_22_img_3_Question_Comment.png b/docs/blog/static/img/Blog_22_img_3_Question_Comment.png
new file mode 100644
index 0000000000..0124ce931b
Binary files /dev/null and b/docs/blog/static/img/Blog_22_img_3_Question_Comment.png differ
diff --git a/docs/blog/static/img/Blog_22_img_4_Rewarded_User_Issue_Snapshot.png b/docs/blog/static/img/Blog_22_img_4_Rewarded_User_Issue_Snapshot.png
new file mode 100644
index 0000000000..ad30a5e01a
Binary files /dev/null and b/docs/blog/static/img/Blog_22_img_4_Rewarded_User_Issue_Snapshot.png differ
diff --git a/docs/blog/static/img/Blog_22_img_5_Liang_Longtao_Photo.png b/docs/blog/static/img/Blog_22_img_5_Liang_Longtao_Photo.png
new file mode 100644
index 0000000000..b9b9315c2b
Binary files /dev/null and b/docs/blog/static/img/Blog_22_img_5_Liang_Longtao_Photo.png differ
diff --git a/docs/blog/static/img/Blog_23_img_1_The_Structure_of_the_ShardingSphere_openGauss_Distribution_Solution.en.png b/docs/blog/static/img/Blog_23_img_1_The_Structure_of_the_ShardingSphere_openGauss_Distribution_Solution.en.png
new file mode 100644
index 0000000000..16a524eb7d
Binary files /dev/null and b/docs/blog/static/img/Blog_23_img_1_The_Structure_of_the_ShardingSphere_openGauss_Distribution_Solution.en.png differ
diff --git a/docs/blog/static/img/Blog_24_img_1_ShardingSphere_GSoC.png b/docs/blog/static/img/Blog_24_img_1_ShardingSphere_GSoC.png
new file mode 100644
index 0000000000..8c01ce2b99
Binary files /dev/null and b/docs/blog/static/img/Blog_24_img_1_ShardingSphere_GSoC.png differ
diff --git a/docs/blog/static/img/Blog_24_img_2_GSoC_2021_Projects_ss_Students_Snapshot_Thanoshan_Liangda.png b/docs/blog/static/img/Blog_24_img_2_GSoC_2021_Projects_ss_Students_Snapshot_Thanoshan_Liangda.png
new file mode 100644
index 0000000000..14f20e73c4
Binary files /dev/null and b/docs/blog/static/img/Blog_24_img_2_GSoC_2021_Projects_ss_Students_Snapshot_Thanoshan_Liangda.png differ
diff --git a/docs/blog/static/img/Blog_24_img_3_Thanoshan_Photo.png b/docs/blog/static/img/Blog_24_img_3_Thanoshan_Photo.png
new file mode 100644
index 0000000000..c1e5445f75
Binary files /dev/null and b/docs/blog/static/img/Blog_24_img_3_Thanoshan_Photo.png differ
diff --git a/docs/blog/static/img/Blog_24_img_4_Liangda_Photo.png b/docs/blog/static/img/Blog_24_img_4_Liangda_Photo.png
new file mode 100644
index 0000000000..b0edd43c24
Binary files /dev/null and b/docs/blog/static/img/Blog_24_img_4_Liangda_Photo.png differ
diff --git a/docs/blog/static/img/Blog_24_img_5_Yachine_Photo.png b/docs/blog/static/img/Blog_24_img_5_Yachine_Photo.png
new file mode 100644
index 0000000000..cd14898a5a
Binary files /dev/null and b/docs/blog/static/img/Blog_24_img_5_Yachine_Photo.png differ
diff --git a/docs/blog/static/img/Blog_25_img_1_JD_VS_ShardingSphere_Table.en.png b/docs/blog/static/img/Blog_25_img_1_JD_VS_ShardingSphere_Table.en.png
new file mode 100644
index 0000000000..ade995d26d
Binary files /dev/null and b/docs/blog/static/img/Blog_25_img_1_JD_VS_ShardingSphere_Table.en.png differ
diff --git a/docs/blog/static/img/Blog_25_img_2_JD_ShardingSphere_JDBC_en.png b/docs/blog/static/img/Blog_25_img_2_JD_ShardingSphere_JDBC_en.png
new file mode 100644
index 0000000000..e48d106302
Binary files /dev/null and b/docs/blog/static/img/Blog_25_img_2_JD_ShardingSphere_JDBC_en.png differ
diff --git a/docs/blog/static/img/Blog_25_img_JD_System_en.png b/docs/blog/static/img/Blog_25_img_JD_System_en.png
new file mode 100644
index 0000000000..e856d225b1
Binary files /dev/null and b/docs/blog/static/img/Blog_25_img_JD_System_en.png differ
