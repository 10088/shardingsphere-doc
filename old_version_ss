commit 8df418faef0ba044b6cbbcfac53b5d869fc88223
Author: lanchengx <52209337+lanchengx@users.noreply.github.com>
Date:   Tue Apr 12 16:21:17 2022 +0800

    Refactor `CREATE SHARDING TABLE RULE` syntax doc (#16737)
    
    * DistSQL Documentation.
    
    * DistSQL Documentation.
    
    * DistSQL Documentation.
    
    * DistSQL Documentation.
    
    * DistSQL Documentation.
    
    * DistSQL Documentation.
    
    * DistSQL Documentation.

diff --git a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/_index.cn.md b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/_index.cn.md
index e50ed59198..39ff4ece3c 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/_index.cn.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/_index.cn.md
@@ -1,6 +1,6 @@
 +++
 title = "资源定义"
-weight = 2
+weight = 1
 chapter = true
 +++
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/_index.en.md b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/_index.en.md
index da200e869b..b6096f4a10 100644
--- a/docs/document/content/reference/distsql/syntax/rdl/resource-definition/_index.en.md
+++ b/docs/document/content/reference/distsql/syntax/rdl/resource-definition/_index.en.md
@@ -1,6 +1,6 @@
 +++
 title = "Resource Definition"
-weight = 2
+weight = 1
 chapter = true
 +++
 
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/create-sharding-table-rule.cn.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/create-sharding-table-rule.cn.md
new file mode 100644
index 0000000000..ea362eeac9
--- /dev/null
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/create-sharding-table-rule.cn.md
@@ -0,0 +1,145 @@
++++
+title = "CREATE SHARDING TABLE RULE"
+weight = 1
++++
+
+## 描述
+
+`CREATE SHARDING TABLE RULE` 语法用于为当前所选逻辑库添加分片规则
+
+### 语法定义
+
+```SQL
+CreateShardingTableRule ::=
+  'CREATE' 'SHARDING' 'TABLE' 'RULE' ( tableDefinition | autoTableDefinition ) ( ',' ( tableDefinition | autoTableDefinition ) )*
+
+tableDefinition ::= 
+   tableName '(' 'DATANODES' '(' dataNode ( ',' dataNode )* ')'  ( ','  'DATABASE_STRATEGY' '(' strategyDefinition ')' )?  ( ','  'TABLE_STRATEGY' '(' strategyDefinition ')' )?  ( ','  'KEY_GENERATE_STRATEGY' '(' keyGenerateStrategyDefinition ')' )? ')'
+
+autoTableDefinition ::=
+    tableName '(' 'RESOURCES' '(' resourceName ( ',' resourceName )*  ')' ',' 'SHARDING_COLUMN' '=' columnName ',' algorithmDefinition ( ','  'KEY_GENERATE_STRATEGY' '(' keyGenerateStrategyDefinition ')' )?')'
+
+strategyDefinition ::=
+  'TYPE' '=' strategyType ',' ( 'SHARDING_COLUMN' | 'SHARDING_COLUMNS' ) '=' columnName ',' algorithmDefinition
+
+keyGenerateStrategyDefinition ::= 
+  'KEY_GENERATE_STRATEGY' '(' 'COLUMN' '=' columnName ',' ( 'KEY_GENERATOR' '=' algorihtmName | algorithmDefinition ) ')' 
+
+algorithmDefinition ::=
+  ('SHARDING_ALGORITHM' '=' algorithmName | 'TYPE' '(' 'NAME' '=' algorithmType ( ',' 'PROPERTIES'  '(' propretyDefinition  ')' )?')'  )
+
+propretyDefinition ::=
+    ( key  '=' value ) ( ',' key  '=' value )* 
+```
+
+### 补充说明
+
+- `tableDefinition` 为标准分片规则定义；`autoTableDefinition` 为自动分片规则定义。标准分片规则和自动分片规则可参考[数据分片](/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/)。
+- 当使用标准分片时：
+    - `DATANODES` 只能使用已经添加到当前逻辑库的资源，且只能使用 INLINE 表达式指定需要的资源
+    - `DATABASE_STRATEGY`、`TABLE_STRATEGY` 表示分库和分表策略，均为可选项，未配置时使用默认策略
+    - `strategyDefinition` 中属性 `TYPE` 用于指定[分片算法](/cn/features/sharding/concept/sharding/#自定义分片算法)的类型，目前仅支持 `STANDARD` 、`COMPLEX`。使用 `COMPLEX` 时需要用 `SHARDING_COLUMNS` 指定多个分片键。 
+- 当使用自动分片时：
+    - `RESOURCES` 只能使用已经添加到当前逻辑库的资源，可通过枚举或 INLINE 表达式指定需要的资源
+    - 只能使用自动分片算法，可参考[自动分片算法](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#自动分片算法)
+- 自动生成的算法命名规则为  `tableName` _ `strategyType` _ `shardingAlgorithmType`
+- 自动生成的主键策略命名规则为 `tableName` _ `strategyType`
+- `KEY_GENERATE_STRATEGY` 用于指定主键生成策略，为可选项，关于主键生成策略可参考[分布式主键](/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
+
+### 示例
+
+#### 1.标准分片规则
+
+- ##### 指定分片算法创建标准分片规则
+
+```SQL
+-- 创建分片算法
+CREATE SHARDING ALGORITHM database_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${user_id % 2}"))
+), table_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${order_id % 2}"))
+); 
+
+-- 指定分片算法创建分片规则
+CREATE SHARDING TABLE RULE t_order (
+    DATANODES("ds_${0..1}.t_order_${0..1}"),
+    DATABASE_STRATEGY(TYPE=standard, SHARDING_COLUMN=user_id, SHARDING_ALGORITHM=database_inline),
+    TABLE_STRATEGY(TYPE=standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=table_inline)
+);
+```
+
+- ##### 在默认分库策略下，通过指定分片算法创建标准分片规则
+
+```SQL
+-- 创建分片算法
+CREATE SHARDING ALGORITHM database_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${user_id % 2}"))
+), table_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${order_id % 2}"))
+); 
+
+-- 创建默认分库策略
+CREATE DEFAULT SHARDING DATABASE STRATEGY (
+    TYPE = standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=database_inline
+);
+
+-- 指定分片算法创建分片规则
+CREATE SHARDING TABLE RULE t_order (
+    DATANODES("ds_${0..1}.t_order_${0..1}"),
+    TABLE_STRATEGY(TYPE=standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=table_inline)
+);
+```
+
+- ##### 在默认分库分表策略下，通过指定分片算法创建标准分片规则
+
+```SQL
+-- 创建分片算法
+CREATE SHARDING ALGORITHM database_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${user_id % 2}"))
+), table_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${order_id % 2}"))
+); 
+
+-- 创建默认分库策略
+CREATE DEFAULT SHARDING DATABASE STRATEGY (
+    TYPE = standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=database_inline
+);
+
+-- 创建默认分表策略
+CREATE DEFAULT SHARDING TABLE STRATEGY (
+    TYPE = standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=table_inline
+);
+
+-- 创建分片规则
+CREATE SHARDING TABLE RULE t_order (
+    DATANODES("ds_${0..1}.t_order_${0..1}")
+);
+```
+
+- ##### 创建标准分片规则的同时创建分片算法
+
+```SQL
+CREATE SHARDING TABLE RULE t_order (
+    DATANODES("ds_${0..1}.t_order_${0..1}"),
+    DATABASE_STRATEGY(TYPE=standard, SHARDING_COLUMN=user_id, SHARDING_ALGORITHM(TYPE(NAME=inline, PROPERTIES("algorithm-expression"="ds_${user_id % 2}")))),
+    TABLE_STRATEGY(TYPE=standard, SHARDING_COLUMN=user_id, SHARDING_ALGORITHM(TYPE(NAME=inline, PROPERTIES("algorithm-expression"="ds_${order_id % 2}"))))
+);
+```
+
+#### 2.自动分片规则
+- ##### 创建自动分片规则
+```SQL
+CREATE SHARDING TABLE RULE t_order (
+    RESOURCES(ds_0, ds_1),
+    SHARDING_COLUMN=order_id, TYPE(NAME=MOD, PROPERTIES("sharding-count"=4))
+);
+```
+
+### 保留字
+
+    CREATE、SHARDING、TABLE、RULE、DATANODES、DATABASE_STRATEGY、TABLE_STRATEGY、KEY_GENERATE_STRATEGY、RESOURCES、SHARDING_COLUMN、TYPE、SHARDING_COLUMN、KEY_GENERATOR、SHARDING_ALGORITHM、COLUMN、NAME、PROPERTIES
+
+### 相关链接
+- [保留字](/cn/reference/distsql/syntax/reserved-word/)
+- [CREATE SHARDING ALGORITHM](/cn/reference/distsql/syntax/rdl/rule-definition/create-sharding-algorithm/)
+
diff --git a/docs/document/content/reference/distsql/syntax/rdl/rule-definition/create-sharding-table-rule.en.md b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/create-sharding-table-rule.en.md
new file mode 100644
index 0000000000..28a84b2a11
--- /dev/null
+++ b/docs/document/content/reference/distsql/syntax/rdl/rule-definition/create-sharding-table-rule.en.md
@@ -0,0 +1,143 @@
++++
+title = "CREATE SHARDING TABLE RULE"
+weight = 1
++++
+
+## Description
+
+The `CREATE SHARDING TABLE RULE` syntax is used to add sharding table rule for the currently selected schema
+
+### Syntax
+
+```SQL
+CreateShardingTableRule ::=
+  'CREATE' 'SHARDING' 'TABLE' 'RULE' ( tableDefinition | autoTableDefinition ) ( ',' ( tableDefinition | autoTableDefinition ) )*
+
+tableDefinition ::= 
+   tableName '(' 'DATANODES' '(' dataNode ( ',' dataNode )* ')'  ( ','  'DATABASE_STRATEGY' '(' strategyDefinition ')' )?  ( ','  'TABLE_STRATEGY' '(' strategyDefinition ')' )?  ( ','  'KEY_GENERATE_STRATEGY' '(' keyGenerateStrategyDefinition ')' )? ')'
+
+autoTableDefinition ::=
+    tableName '(' 'RESOURCES' '(' resourceName ( ',' resourceName )*  ')' ',' 'SHARDING_COLUMN' '=' columnName ',' algorithmDefinition ( ','  'KEY_GENERATE_STRATEGY' '(' keyGenerateStrategyDefinition ')' )?')'
+
+strategyDefinition ::=
+  'TYPE' '=' strategyType ',' ( 'SHARDING_COLUMN' | 'SHARDING_COLUMNS' ) '=' columnName ',' algorithmDefinition
+
+keyGenerateStrategyDefinition ::= 
+  'KEY_GENERATE_STRATEGY' '(' 'COLUMN' '=' columnName ',' ( 'KEY_GENERATOR' '=' algorihtmName | algorithmDefinition ) ')' 
+
+algorithmDefinition ::=
+  ('SHARDING_ALGORITHM' '=' algorithmName | 'TYPE' '(' 'NAME' '=' algorithmType ( ',' 'PROPERTIES'  '(' propretyDefinition  ')' )?')'  )
+
+propretyDefinition ::=
+    ( key  '=' value ) ( ',' key  '=' value )* 
+```
+
+### Supplement
+
+- `tableDefinition` is defined for standard sharding table rule; `autoTableDefinition` is defined for auto sharding table rule. For standard sharding rules and auto sharding rule, refer to [Data Sharding](en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/).
+- use standard sharding table rule
+  - `DATANODES` can only use resources that have been added to the current schema, and can only use INLINE expressions to specify required resources    
+  - `DATABASE_STRATEGY`, `TABLE_STRATEGY` are the database sharding strategy and the table sharding strategy, which are optional, and the default strategy is used when not configured  
+  - The attribute `TYPE` in `strategyDefinition` is used to specify the type of [sharding algorithm](/en/features/sharding/concept/sharding/#user-defined-sharding-algorithm), currently only supports `STANDARD`, `COMPLEX`. Using `COMPLEX` requires specifying multiple sharding columns with `SHARDING_COLUMNS`.
+- use auto sharding table rule
+    - `RESOURCES` can only use resources that have been added to the current schema, and the required resources can be specified by enumeration or INLINE expression
+    - Only auto sharding algorithm can be used, please refer to [auto sharding algorithm](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/#auto-sharding-algorithm)    
+- The auto-generated algorithm naming rule is `tableName` _ `strategyType` _ `shardingAlgorithmType`
+- The auto-generated primary key strategy naming rule is `tableName` _ `strategyType`
+- `KEY_GENERATE_STRATEGY` is used to specify the primary key generation strategy, which is optional. For the primary key generation strategy, please refer to [Distributed Primary Key](/en/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/)
+
+### Example
+
+#### 1.Standard sharding table rule
+
+- ##### Create standard sharding table rule by specifying sharding algorithms
+
+```SQL
+-- create sharding algorithms
+CREATE SHARDING ALGORITHM database_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${user_id % 2}"))
+), table_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${order_id % 2}"))
+); 
+
+-- create a sharding rule by specifying sharding algorithms
+CREATE SHARDING TABLE RULE t_order (
+    DATANODES("ds_${0..1}.t_order_${0..1}"),
+    DATABASE_STRATEGY(TYPE=standard, SHARDING_COLUMN=user_id, SHARDING_ALGORITHM=database_inline),
+    TABLE_STRATEGY(TYPE=standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=table_inline)
+);
+```
+
+- ##### Use the default sharding database strategy, create standard sharding table rule by specifying a sharding algorithm
+```SQL
+-- create sharding algorithms
+CREATE SHARDING ALGORITHM database_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${user_id % 2}"))
+), table_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${order_id % 2}"))
+); 
+
+-- create a default sharding database strategy
+CREATE DEFAULT SHARDING DATABASE STRATEGY (
+    TYPE = standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=database_inline
+);
+
+-- create a sharding table rule by specifying a sharding algorithm
+CREATE SHARDING TABLE RULE t_order (
+    DATANODES("ds_${0..1}.t_order_${0..1}"),
+    TABLE_STRATEGY(TYPE=standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=table_inline)
+);
+```
+
+- ##### Use both the default sharding and the default sharding strategy, create standard sharding table rule
+
+```SQL
+-- create sharding algorithms
+CREATE SHARDING ALGORITHM database_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${user_id % 2}"))
+), table_inline (
+    TYPE(NAME=inline, PROPERTIES("algorithm-expression"="t_order_${order_id % 2}"))
+); 
+
+-- create a default sharding database strategy
+CREATE DEFAULT SHARDING DATABASE STRATEGY (
+    TYPE = standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=database_inline
+);
+
+-- create a default sharding table strategy
+CREATE DEFAULT SHARDING TABLE STRATEGY (
+    TYPE = standard, SHARDING_COLUMN=order_id, SHARDING_ALGORITHM=table_inline
+);
+
+-- create a sharding table rule 
+CREATE SHARDING TABLE RULE t_order (
+    DATANODES("ds_${0..1}.t_order_${0..1}")
+);
+```
+
+- ##### Create standard sharding table rule and sharding algorithms at the same time
+
+```SQL
+CREATE SHARDING TABLE RULE t_order (
+    DATANODES("ds_${0..1}.t_order_${0..1}"),
+    DATABASE_STRATEGY(TYPE=standard, SHARDING_COLUMN=user_id, SHARDING_ALGORITHM(TYPE(NAME=inline, PROPERTIES("algorithm-expression"="ds_${user_id % 2}")))),
+    TABLE_STRATEGY(TYPE=standard, SHARDING_COLUMN=user_id, SHARDING_ALGORITHM(TYPE(NAME=inline, PROPERTIES("algorithm-expression"="ds_${order_id % 2}"))))
+);
+```
+
+#### 2.Auto sharding table rule
+- ##### create auto sharding table rule
+```SQL
+CREATE SHARDING TABLE RULE t_order (
+    RESOURCES(ds_0, ds_1),
+    SHARDING_COLUMN=order_id, TYPE(NAME=MOD, PROPERTIES("sharding-count"=4))
+);
+```
+
+### Reserved word
+
+    CREATE、SHARDING、TABLE、RULE、DATANODES、DATABASE_STRATEGY、TABLE_STRATEGY、KEY_GENERATE_STRATEGY、RESOURCES、SHARDING_COLUMN、TYPE、SHARDING_COLUMN、KEY_GENERATOR、SHARDING_ALGORITHM、COLUMN、NAME、PROPERTIES
+
+### Related links
+- [Reserved word](/en/reference/distsql/syntax/reserved-word/)
+- [CREATE SHARDING ALGORITHM](/en/reference/distsql/syntax/rdl/rule-definition/create-sharding-algorithm/)
diff --git a/docs/document/content/reference/distsql/syntax/rql/resource-query/_index.cn.md b/docs/document/content/reference/distsql/syntax/rql/resource-query/_index.cn.md
new file mode 100644
index 0000000000..eb5a47fbfb
--- /dev/null
+++ b/docs/document/content/reference/distsql/syntax/rql/resource-query/_index.cn.md
@@ -0,0 +1,7 @@
++++
+title = "资源查询"
+weight = 1
+chapter = true
++++
+
+本章节将对资源查询的语法进行详细说明。
diff --git a/docs/document/content/reference/distsql/syntax/rql/resource-query/_index.en.md b/docs/document/content/reference/distsql/syntax/rql/resource-query/_index.en.md
new file mode 100644
index 0000000000..aa82cbc128
--- /dev/null
+++ b/docs/document/content/reference/distsql/syntax/rql/resource-query/_index.en.md
@@ -0,0 +1,7 @@
++++
+title = "Resource Query"
+weight = 1
+chapter = true
++++
+
+This chapter describes the syntax of resource query.
diff --git a/docs/document/content/reference/distsql/syntax/rql/show-resource.cn.md b/docs/document/content/reference/distsql/syntax/rql/resource-query/show-resource.cn.md
similarity index 100%
rename from docs/document/content/reference/distsql/syntax/rql/show-resource.cn.md
rename to docs/document/content/reference/distsql/syntax/rql/resource-query/show-resource.cn.md
diff --git a/docs/document/content/reference/distsql/syntax/rql/show-resource.en.md b/docs/document/content/reference/distsql/syntax/rql/resource-query/show-resource.en.md
similarity index 100%
rename from docs/document/content/reference/distsql/syntax/rql/show-resource.en.md
rename to docs/document/content/reference/distsql/syntax/rql/resource-query/show-resource.en.md
