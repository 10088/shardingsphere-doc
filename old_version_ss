commit d19a34f471034ad6f640477ee180752c9b37dfe8
Author: Liang Zhang <terrymanu@163.com>
Date:   Sun Aug 29 11:55:51 2021 +0800

    Unify class name of transaction module (#12084)
    
    * Rename ShardingSphereTransactionManagerEngine
    
    * Unify class name of transaction module

diff --git a/docs/document/content/dev-manual/transaction.cn.md b/docs/document/content/dev-manual/transaction.cn.md
index 3e132c67de..cb107c209b 100644
--- a/docs/document/content/dev-manual/transaction.cn.md
+++ b/docs/document/content/dev-manual/transaction.cn.md
@@ -5,24 +5,24 @@ weight = 8
 chapter = true
 +++
 
-## ShardingTransactionManager
+## ShardingSphereTransactionManager
 
-| *SPI 名称*                         | *详细说明*                 |
-| --------------------------------- | -------------------------- |
-| ShardingTransactionManager        | 分布式事务管理器             |
+| *SPI 名称*                                | *详细说明*                 |
+| ---------------------------------------- | ------------------------- |
+| ShardingSphereTransactionManager         | 分布式事务管理器             |
 
-| *已知实现类*                       | *详细说明*                  |
-| --------------------------------- | -------------------------- |
-| XAShardingTransactionManager      | 基于 XA 的分布式事务管理器    |
-| SeataATShardingTransactionManager | 基于 Seata 的分布式事务管理器 |
+| *已知实现类*                               | *详细说明*                  |
+| ---------------------------------------- | -------------------------- |
+| XAShardingSphereTransactionManager       | 基于 XA 的分布式事务管理器    |
+| SeataATShardingSphereTransactionManager  | 基于 Seata 的分布式事务管理器 |
 
 ## XATransactionManager
 
-| *SPI 名称*                   | *详细说明*                         |
-| ---------------------------- | --------------------------------- |
+| *SPI 名称*                    | *详细说明*                         |
+| ---------------------------- | -------------------------------- |
 | XATransactionManager         | XA分布式事务管理器                  |
 
-| *已知实现类*                  | *详细说明*                         |
+| *已知实现类*                   | *详细说明*                         |
 | ---------------------------- | --------------------------------- |
 | AtomikosTransactionManager   | 基于 Atomikos 的 XA 分布式事务管理器 |
 | NarayanaXATransactionManager | 基于 Narayana 的 XA 分布式事务管理器 |
diff --git a/docs/document/content/dev-manual/transaction.en.md b/docs/document/content/dev-manual/transaction.en.md
index 65012fa0b4..b195e957f4 100644
--- a/docs/document/content/dev-manual/transaction.en.md
+++ b/docs/document/content/dev-manual/transaction.en.md
@@ -5,16 +5,16 @@ weight = 8
 chapter = true
 +++
 
-## ShardingTransactionManager
+## ShardingSphereTransactionManager
 
-| *SPI Name*                        | *Description*                         |
-| --------------------------------- | ------------------------------------- |
-| ShardingTransactionManager        | Distributed transaction manager       |
+| *SPI Name*                               | *Description*                         |
+| ---------------------------------------- | ------------------------------------- |
+| ShardingSphereTransactionManager         | Distributed transaction manager       |
 
-| *Implementation Class*            | *Description*                         |
-| --------------------------------- | ------------------------------------- |
-| XAShardingTransactionManager      | XA distributed transaction manager    |
-| SeataATShardingTransactionManager | Seata distributed transaction manager |
+| *Implementation Class*                   | *Description*                         |
+| ---------------------------------------- | ------------------------------------- |
+| XAShardingSphereTransactionManager       | XA distributed transaction manager    |
+| SeataATShardingSphereTransactionManager  | Seata distributed transaction manager |
 
 ## XATransactionManager
 
diff --git a/docs/document/content/features/transaction/principle/2pc-xa-transaction.cn.md b/docs/document/content/features/transaction/principle/2pc-xa-transaction.cn.md
index 77db39112a..a782e2359d 100644
--- a/docs/document/content/features/transaction/principle/2pc-xa-transaction.cn.md
+++ b/docs/document/content/features/transaction/principle/2pc-xa-transaction.cn.md
@@ -3,18 +3,18 @@ title = "XA两阶段事务"
 weight = 2
 +++
 
-`XAShardingTransactionManager` 为Apache ShardingSphere 的分布式事务的XA实现类。
+`XAShardingSphereTransactionManager` 为A pache ShardingSphere 的分布式事务的 XA 实现类。
 它主要负责对多数据源进行管理和适配，并且将相应事务的开启、提交和回滚操作委托给具体的 XA 事务管理器。
 
 ![XA事务实现原理](https://shardingsphere.apache.org/document/current/img/transaction/2pc-xa-transaction-design.png)
 
 ## 开启全局事务
 
-收到接入端的 `set autoCommit=0` 时，`XAShardingTransactionManager` 将调用具体的 XA 事务管理器开启 XA 全局事务，以 XID 的形式进行标记。
+收到接入端的 `set autoCommit=0` 时，`XAShardingSphereTransactionManager` 将调用具体的 XA 事务管理器开启 XA 全局事务，以 XID 的形式进行标记。
 
 ## 执行真实分片SQL
 
-`XAShardingTransactionManager`将数据库连接所对应的 XAResource 注册到当前 XA 事务中之后，事务管理器会在此阶段发送 `XAResource.start` 命令至数据库。
+`XAShardingSphereTransactionManager` 将数据库连接所对应的 XAResource 注册到当前 XA 事务中之后，事务管理器会在此阶段发送 `XAResource.start` 命令至数据库。
 数据库在收到 `XAResource.end` 命令之前的所有 SQL 操作，会被标记为 XA 事务。
 
 例如:
@@ -30,7 +30,7 @@ XAResource1.end               ## 提交阶段执行
 
 ## 提交或回滚事务
 
-`XAShardingTransactionManager` 在接收到接入端的提交命令后，会委托实际的 XA 事务管理进行提交动作，
+`XAShardingSphereTransactionManager` 在接收到接入端的提交命令后，会委托实际的 XA 事务管理进行提交动作，
 事务管理器将收集到的当前线程中所有注册的 XAResource，并发送 `XAResource.end` 指令，用以标记此 XA 事务边界。
 接着会依次发送 `prepare` 指令，收集所有参与 XAResource 投票。
 若所有 XAResource 的反馈结果均为正确，则调用 `commit` 指令进行最终提交；
diff --git a/docs/document/content/features/transaction/principle/2pc-xa-transaction.en.md b/docs/document/content/features/transaction/principle/2pc-xa-transaction.en.md
index 7a68626921..4e351b938c 100644
--- a/docs/document/content/features/transaction/principle/2pc-xa-transaction.en.md
+++ b/docs/document/content/features/transaction/principle/2pc-xa-transaction.en.md
@@ -3,19 +3,19 @@ title = "XA Transaction"
 weight = 2
 +++
 
-`XAShardingTransactionManager` is XA transaction manager of Apache ShardingSphere.
+`XAShardingSphereTransactionManager` is XA transaction manager of Apache ShardingSphere.
 Its main responsibly is manage and adapt multiple data sources, and sent corresponding transactions to concrete XA transaction manager.
 
-![Principle of sharding transaction XA](https://shardingsphere.apache.org/document/current/img/transaction/2pc-xa-transaction-design.png)
+![Principle of ShardingSphere transaction XA](https://shardingsphere.apache.org/document/current/img/transaction/2pc-xa-transaction-design.png)
 
 ## Transaction Begin
 
-When receiving `set autoCommit=0` from client, `XAShardingTransactionManager` will use XA transaction managers to start overall XA transactions, which is marked by XID.
+When receiving `set autoCommit=0` from client, `XAShardingSphereTransactionManager` will use XA transaction managers to start overall XA transactions, which is marked by XID.
 
 ## Execute actual sharding SQL
 
 
-After `XAShardingTransactionManager` register the corresponding XAResource to the current XA transaction, transaction manager will send `XAResource.start` command to databases.
+After `XAShardingSphereTransactionManager` register the corresponding XAResource to the current XA transaction, transaction manager will send `XAResource.start` command to databases.
 After databases received `XAResource.end` command, all SQL operator will mark as XA transaction. 
 
 For example:
@@ -31,7 +31,7 @@ XAResource1.end               ## execute in the commit phase
 
 ## Commit or Rollback
 
-After `XAShardingTransactionManager` receives the commit command in the access, it will delegate it to the actual XA manager. 
+After `XAShardingSphereTransactionManager` receives the commit command in the access, it will delegate it to the actual XA manager. 
 It will collect all the registered XAResource in the thread, before sending `XAResource.end` to mark the boundary for the XA transaction. 
 Then it will send prepare command one by one to collect votes from XAResource. 
 If all the XAResource feedback is OK, it will send commit command to finally finish it; 
diff --git a/docs/document/content/features/transaction/principle/base-transaction-seata.en.md b/docs/document/content/features/transaction/principle/base-transaction-seata.en.md
index 4a408c0ce9..2c22bcedab 100644
--- a/docs/document/content/features/transaction/principle/base-transaction-seata.en.md
+++ b/docs/document/content/features/transaction/principle/base-transaction-seata.en.md
@@ -3,7 +3,7 @@ title = "Seata BASE transaction"
 weight = 3
 +++
 
-When integrating Seata AT transaction, we need to integrate TM, RM and TC component into Apache Sharding transaction manager. 
+When integrating Seata AT transaction, we need to integrate TM, RM and TC component into ShardingSphere transaction manager. 
 Seata have proxied `DataSource` interface in order to RPC with TC. 
 Similarly, Apache ShardingSphere faced to `DataSource` interface to aggregate data sources too. 
 After Seata `DataSource` encapsulation, it is easy to put Seata AT transaction in to Apache ShardingSphere sharding ecosystem.
@@ -13,7 +13,7 @@ After Seata `DataSource` encapsulation, it is easy to put Seata AT transaction i
 
 ## Init Seata Engine
 
-When an application containing `ShardingTransactionBaseSeataAT` startup, the user-configured DataSource will be wrapped into seata `DataSourceProxy` through `seata.conf`, then registered into RM.
+When an application containing `ShardingSphereTransactionBaseSeataAT` startup, the user-configured DataSource will be wrapped into seata `DataSourceProxy` through `seata.conf`, then registered into RM.
 
 ## Transaction Begin
 
diff --git a/docs/document/content/others/faq/_index.en.md b/docs/document/content/others/faq/_index.en.md
index 024f25f328..50a5e37a90 100644
--- a/docs/document/content/others/faq/_index.en.md
+++ b/docs/document/content/others/faq/_index.en.md
@@ -276,7 +276,7 @@ Answer:
 1. ShardingSphere-Proxy could be considered as a mysql sever, so we recommend using mysql command line tool to connect to and operate it.
 2. If users would like use a third-party database tool, there may be some errors cause of the certain implementation/options. For example, we recommend Navicat with version 11.1.13(not 12.x), and turn on "introspect using jdbc metadata"(or it will get all real tables info from informations_schema) in idea or datagrip.
 
-## 23. Found a JtaTransactionManager in spring boot project when integrating with ShardingTransaction of XA
+## 23. Found a JtaTransactionManager in spring boot project when integrating with transaction of XA
 
 Answer:
 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter.cn.md
index c70bb2697f..3f487090dc 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter.cn.md
@@ -50,7 +50,7 @@ public class TransactionConfiguration {
 
 ```java
 @Transactional
-@ShardingTransactionType(TransactionType.XA)  // 支持TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE
+@ShardingSphereTransactionType(TransactionType.XA)  // 支持TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE
 public void insert() {
     jdbcTemplate.execute("INSERT INTO t_order (user_id, status) VALUES (?, ?)", (PreparedStatementCallback<Object>) ps -> {
         ps.setObject(1, i);
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter.en.md
index 7b8adcf3a1..64d24d5129 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter.en.md
@@ -50,7 +50,7 @@ public class TransactionConfiguration {
 
 ```java
 @Transactional
-@ShardingTransactionType(TransactionType.XA)  // Support TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE
+@ShardingSphereTransactionType(TransactionType.XA)  // Support TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE
 public void insert() {
     jdbcTemplate.execute("INSERT INTO t_order (user_id, status) VALUES (?, ?)", (PreparedStatementCallback<Object>) ps -> {
         ps.setObject(1, i);
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace.cn.md
index ac53ee7799..6822b206ee 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace.cn.md
@@ -41,7 +41,7 @@ weight = 3
 </bean>
 <tx:annotation-driven />
 
-<!-- 开启自动扫描 @ShardingTransactionType 注解，使用 Spring 原生的 AOP 在类和方法上进行增强 -->
+<!-- 开启自动扫描 @ShardingSphereTransactionType 注解，使用 Spring 原生的 AOP 在类和方法上进行增强 -->
 <sharding:tx-type-annotation-driven />
 ```
 
@@ -49,7 +49,7 @@ weight = 3
 
 ```java
 @Transactional
-@ShardingTransactionType(TransactionType.XA)  // 支持TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE
+@ShardingSphereTransactionType(TransactionType.XA)  // 支持TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE
 public void insert() {
     jdbcTemplate.execute("INSERT INTO t_order (user_id, status) VALUES (?, ?)", (PreparedStatementCallback<Object>) ps -> {
         ps.setObject(1, i);
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace.en.md
index 844cf4778b..09bee4b54b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace.en.md
@@ -41,7 +41,7 @@ weight = 3
 </bean>
 <tx:annotation-driven />
 
-<!-- Enable auto scan @ShardingTransactionType annotation to inject the transaction type before connection created -->
+<!-- Enable auto scan @ShardingSphereTransactionType annotation to inject the transaction type before connection created -->
 <sharding:tx-type-annotation-driven />
 ```
 
@@ -49,7 +49,7 @@ weight = 3
 
 ```java
 @Transactional
-@ShardingTransactionType(TransactionType.XA)  // Support TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE
+@ShardingSphereTransactionType(TransactionType.XA)  // Support TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE
 public void insert() {
     jdbcTemplate.execute("INSERT INTO t_order (user_id, status) VALUES (?, ?)", (PreparedStatementCallback<Object>) ps -> {
         ps.setObject(1, i);
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/transaction.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/transaction.cn.md
index 2b9856c76a..3894a639fb 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/transaction.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/transaction.cn.md
@@ -93,4 +93,4 @@ props:
 
 ## BASE 事务
 
-BASE 目前没有集成至 ShardingSphere-Proxy 的二进制发布包中，使用时需要将实现了 `ShardingTransactionManager` SPI 的 jar 拷贝至 `conf/lib` 目录，然后切换事务类型为 BASE。
+BASE 目前没有集成至 ShardingSphere-Proxy 的二进制发布包中，使用时需要将实现了 `ShardingSphereTransactionManager` SPI 的 jar 拷贝至 `conf/lib` 目录，然后切换事务类型为 BASE。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/usage/transaction.en.md b/docs/document/content/user-manual/shardingsphere-proxy/usage/transaction.en.md
index dd4c0156e0..dff4d77e1c 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/usage/transaction.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/usage/transaction.en.md
@@ -85,4 +85,4 @@ props:
 
 ## BASE Transaction
 
-Since we have not packed the BASE implementation jar into ShardingSphere-Proxy, you should copy relevant jar which implement `ShardingTransactionManager` SPI to `conf/lib`, then switch the transaction type to `BASE`.
+Since we have not packed the BASE implementation jar into ShardingSphere-Proxy, you should copy relevant jar which implement `ShardingSphereTransactionManager` SPI to `conf/lib`, then switch the transaction type to `BASE`.
