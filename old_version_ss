commit f37aba24021cecb2f1460add62d701ce9e3e5f1b
Author: Haoran Meng <menghaoranss@gmail.com>
Date:   Wed Jan 12 18:51:20 2022 +0800

    update registry center document (#14713)

diff --git a/docs/document/content/reference/management/_index.cn.md b/docs/document/content/reference/management/_index.cn.md
index 4ad266d474..3b1a8e933f 100644
--- a/docs/document/content/reference/management/_index.cn.md
+++ b/docs/document/content/reference/management/_index.cn.md
@@ -6,30 +6,40 @@ weight = 1
 
 ## 注册中心数据结构
 
-在定义的命名空间下，`rules` 、`props` 和 `metadata` 节点以 YAML 格式存储配置，可通过修改节点来实现对于配置的动态管理。`status` 存储数据库访问对象运行节点，用于区分不同数据库访问实例。
+在定义的命名空间下，`rules` 、`props` 和 `metadata` 节点以 YAML 格式存储配置，可通过修改节点来实现对于配置的动态管理。`nodes` 存储数据库访问对象运行节点，用于区分不同数据库访问实例。
 
 ```
 namespace
-   ├──rules                                     # 全局规则配置
-   ├──props                                     # 属性配置
-   ├──metadata                                  # Metadata 配置
-   ├      ├──${schema_1}                        # Schema 名称1
-   ├      ├      ├──dataSources                 # 数据源配置
-   ├      ├      ├──rules                       # 规则配置
-   ├      ├      ├──schema                      # 表结构配置
-   ├      ├──${schema_2}                        # Schema 名称2
-   ├      ├      ├──dataSources                 # 数据源配置
-   ├      ├      ├──rules                       # 规则配置
-   ├      ├      ├──schema                      # 表结构配置
-   ├──status
+   ├──rules                                   # 全局规则配置
+   ├──props                                   # 属性配置
+   ├──metadata                                # Metadata 配置
+   ├     ├──${schema_1}                       # Schema 名称1
+   ├     ├     ├──dataSources                 # 数据源配置
+   ├     ├     ├──rules                       # 规则配置
+   ├     ├     ├──tables                      # 表结构配置
+   ├     ├     ├     ├──t_1 
+   ├     ├     ├     ├──t_2                       
+   ├     ├──${schema_2}                       # Schema 名称2
+   ├     ├     ├──dataSources                 # 数据源配置
+   ├     ├     ├──rules                       # 规则配置
+   ├     ├     ├──tables                      # 表结构配置
+   ├──nodes
    ├    ├──compute_nodes
    ├    ├     ├──online
+   ├    ├     ├     ├──proxy
+   ├    ├     ├     ├     ├──${your_instance_ip_a}@${your_instance_port_x}
+   ├    ├     ├     ├     ├──${your_instance_ip_b}@${your_instance_port_y}
+   ├    ├     ├     ├     ├──....
+   ├    ├     ├     ├──jdbc
+   ├    ├     ├     ├     ├──${your_instance_ip_a}@${your_instance_pid_x}
+   ├    ├     ├     ├     ├──${your_instance_ip_b}@${your_instance_pid_y}
+   ├    ├     ├     ├     ├──....   
+   ├    ├     ├──attributies
    ├    ├     ├     ├──${your_instance_ip_a}@${your_instance_port_x}
-   ├    ├     ├     ├──${your_instance_ip_b}@${your_instance_port_y}
-   ├    ├     ├     ├──....
-   ├    ├     ├──circuit_breaker
-   ├    ├     ├     ├──${your_instance_ip_c}@${your_instance_port_v}
-   ├    ├     ├     ├──${your_instance_ip_d}@${your_instance_port_w}
+   ├    ├     ├     ├     ├──status
+   ├    ├     ├     ├     ├──label    
+   ├    ├     ├     ├──${your_instance_ip_b}@${your_instance_pid_y}
+   ├    ├     ├     ├     ├──status   
    ├    ├     ├     ├──....
    ├    ├──storage_nodes
    ├    ├     ├──disable
@@ -114,46 +124,37 @@ ds_1:
   xxx
 ```
 
-### /metadata/${schemaName}/schema
+### /metadata/${schemaName}/tables
 
-表结构配置，暂不支持动态修改。
+表结构配置，每个表使用单独节点存储，暂不支持动态修改。
 
 ```yaml
-tables:                                       # 表
-  t_order:                                    # 表名
-    columns:                                  # 列
-      id:                                     # 列名
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: id
-        primaryKey: trues
-      order_id:
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: order_id
-        primaryKey: false
-    indexs:                                   # 索引
-      t_user_order_id_index:                  # 索引名
-        name: t_user_order_id_index
-  t_order_item:
-    columns:
-      order_id:
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: order_id
-        primaryKey: false
+name: t_order                             # 表名
+columns:                                  # 列
+  id:                                     # 列名
+    caseSensitive: false
+    dataType: 0
+    generated: false
+    name: id
+    primaryKey: trues
+  order_id:
+    caseSensitive: false
+    dataType: 0
+    generated: false
+    name: order_id
+    primaryKey: false
+indexs:                                   # 索引
+  t_user_order_id_index:                  # 索引名
+    name: t_user_order_id_index
 ```
 
-### /status/compute_nodes
+### /nodes/compute_nodes
 
 数据库访问对象运行实例信息，子节点是当前运行实例的标识。
 运行实例标识由运行服务器的 IP 地址和 PORT 构成。
 运行实例标识均为临时节点，当实例上线时注册，下线时自动清理。
 注册中心监控这些节点的变化来治理运行中实例对数据库的访问等。
 
-### /status/storage_nodes
+### /nodes/storage_nodes
 
 可以治理读写分离从库，可动态添加删除以及禁用。
diff --git a/docs/document/content/reference/management/_index.en.md b/docs/document/content/reference/management/_index.en.md
index 983804ff61..c540a84481 100644
--- a/docs/document/content/reference/management/_index.en.md
+++ b/docs/document/content/reference/management/_index.en.md
@@ -6,30 +6,40 @@ weight = 1
 
 ## Data Structure in Registry Center
 
-Under defined namespace, `rules`, `props` and `metadata` nodes persist in YAML, modifying nodes can dynamically refresh configurations. `status` node persist the runtime node of database access object, to distinguish different database access instances.
+Under defined namespace, `rules`, `props` and `metadata` nodes persist in YAML, modifying nodes can dynamically refresh configurations. `nodes` node persist the runtime node of database access object, to distinguish different database access instances.
 
 ```
 namespace
-   ├──rules                                     # Global rule configuration
-   ├──props                                     # Properties configuration
-   ├──metadata                                  # Metadata configuration
-   ├      ├──${schema_1}                        # Schema name 1
-   ├      ├      ├──dataSources                 # Datasource configuration
-   ├      ├      ├──rules                       # Rule configuration
-   ├      ├      ├──schema                      # Table configuration
-   ├      ├──${schema_2}                        # Schema name 2
-   ├      ├      ├──dataSources                 # Datasource configuration
-   ├      ├      ├──rules                       # Rule configuration
-   ├      ├      ├──schema                      # Table configuration
-   ├──status
+   ├──rules                                   # Global rule configuration
+   ├──props                                   # Properties configuration
+   ├──metadata                                # Metadata configuration
+   ├     ├──${schema_1}                       # Schema name 1
+   ├     ├     ├──dataSources                 # Datasource configuration
+   ├     ├     ├──rules                       # Rule configuration
+   ├     ├     ├──tables                      # Table configuration
+   ├     ├     ├     ├──t_1 
+   ├     ├     ├     ├──t_2      
+   ├     ├──${schema_2}                       # Schema name 2
+   ├     ├     ├──dataSources                 # Datasource configuration
+   ├     ├     ├──rules                       # Rule configuration
+   ├     ├     ├──tables                      # Table configuration
+   ├──nodes
    ├    ├──compute_nodes
    ├    ├     ├──online
+   ├    ├     ├     ├──proxy
+   ├    ├     ├     ├     ├──${your_instance_ip_a}@${your_instance_port_x}
+   ├    ├     ├     ├     ├──${your_instance_ip_b}@${your_instance_port_y}
+   ├    ├     ├     ├     ├──....
+   ├    ├     ├     ├──jdbc
+   ├    ├     ├     ├     ├──${your_instance_ip_a}@${your_instance_pid_x}
+   ├    ├     ├     ├     ├──${your_instance_ip_b}@${your_instance_pid_y}
+   ├    ├     ├     ├     ├──....   
+   ├    ├     ├──attributies
    ├    ├     ├     ├──${your_instance_ip_a}@${your_instance_port_x}
-   ├    ├     ├     ├──${your_instance_ip_b}@${your_instance_port_y}
-   ├    ├     ├     ├──....
-   ├    ├     ├──circuit_breaker
-   ├    ├     ├     ├──${your_instance_ip_c}@${your_instance_port_v}
-   ├    ├     ├     ├──${your_instance_ip_d}@${your_instance_port_w}
+   ├    ├     ├     ├     ├──status
+   ├    ├     ├     ├     ├──label    
+   ├    ├     ├     ├──${your_instance_ip_b}@${your_instance_pid_y}
+   ├    ├     ├     ├     ├──status   
    ├    ├     ├     ├──....
    ├    ├──storage_nodes
    ├    ├     ├──disable
@@ -114,43 +124,34 @@ Rule configurations, including sharding, readwrite-splitting, data encryption, s
   xxx
 ```
 
-### /metadata/${schemaName}/schema
+### /metadata/${schemaName}/tables
 
-Dynamic modification of metadata content is not supported currently.
+Use separate node storage for each table, dynamic modification of metadata content is not supported currently.
 
 ```yaml
-tables:                                       # Tables
-  t_order:                                    # table_name
-    columns:                                  # Columns
-      id:                                     # column_name
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: id
-        primaryKey: trues
-      order_id:
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: order_id
-        primaryKey: false
-    indexs:                                   # Indexes
-      t_user_order_id_index:                  # index_name
-        name: t_user_order_id_index
-  t_order_item:
-    columns:
-      order_id:
-        caseSensitive: false
-        dataType: 0
-        generated: false
-        name: order_id
-        primaryKey: false
+name: t_order                             # Table name
+columns:                                  # Columns
+  id:                                     # Column name
+    caseSensitive: false
+    dataType: 0
+    generated: false
+    name: id
+    primaryKey: trues
+  order_id:
+    caseSensitive: false
+    dataType: 0
+    generated: false
+    name: order_id
+    primaryKey: false
+indexs:                                   # Index
+  t_user_order_id_index:                  # Index name
+    name: t_user_order_id_index
 ```
 
-### /status/compute_nodes
+### /nodes/compute_nodes
 
 It includes running instance information of database access object, with sub-nodes as the identifiers of currently running instance, which consist of IP and PORT. Those identifiers are temporary nodes, which are registered when instances are on-line and cleared when instances are off-line. The registry center monitors the change of those nodes to govern the database access of running instances and other things.
 
-### /status/storage_nodes
+### /nodes/storage_nodes
 
 It is able to orchestrate replica database, delete or disable data dynamically.
