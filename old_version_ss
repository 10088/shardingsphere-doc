commit ab73865bc5d2731469564e976be69a44e5456635
Author: Liang Zhang <terrymanu@163.com>
Date:   Thu Oct 28 20:58:37 2021 +0800

    Update sharding document (#13336)

diff --git a/docs/document/content/features/sharding/concept/sharding.cn.md b/docs/document/content/features/sharding/concept/sharding.cn.md
index ca801ac8ff..a96e8d93cb 100644
--- a/docs/document/content/features/sharding/concept/sharding.cn.md
+++ b/docs/document/content/features/sharding/concept/sharding.cn.md
@@ -5,56 +5,46 @@ weight = 2
 
 ## 分片键
 
-用于分片的数据库字段，是将数据库（表）水平拆分的关键字段。例：将订单表中的订单主键的尾数取模分片，则订单主键为分片字段。
+用于将数据库（表）水平拆分的数据库字段。
+例：将订单表中的订单主键的尾数取模分片，则订单主键为分片字段。
 SQL 中如果无分片字段，将执行全路由，性能较差。
 除了对单分片字段的支持，Apache ShardingSphere 也支持根据多个字段进行分片。
 
 ## 分片算法
 
-通过分片算法将数据分片，支持通过 `=`、`>=`、`<=`、`>`、`<`、`BETWEEN` 和 `IN` 分片。
-分片算法需要应用方开发者自行实现，可实现的灵活度非常高。
+用于将数据分片的算法，支持 `=`、`>=`、`<=`、`>`、`<`、`BETWEEN` 和 `IN` 进行分片。
+分片算法可由开发者自行实现，也可使用 Apache ShardingSphere 内置的分片算法语法糖，灵活度非常高。
 
-目前提供 3 种分片算法。
-由于分片算法和业务实现紧密相关，因此并未提供内置分片算法，而是通过分片策略将各种场景提炼出来，提供更高层级的抽象，并提供接口让应用开发者自行实现分片算法。
+### 自动化分片算法
 
-- 标准分片算法
-
-对应 StandardShardingAlgorithm，用于处理使用单一键作为分片键的 `=`、`IN`、`BETWEEN AND`、`>`、`<`、`>=`、`<=` 进行分片的场景。需要配合 StandardShardingStrategy 使用。
-
-- 复合分片算法
-
-对应 ComplexKeysShardingAlgorithm，用于处理使用多键作为分片键进行分片的场景，包含多个分片键的逻辑较复杂，需要应用开发者自行处理其中的复杂度。需要配合 ComplexShardingStrategy 使用。
+分片算法语法糖，用于便捷的托管所有数据节点，使用者无需关注真实表的物理分布。
+包括取模、哈希、范围、时间等常用分片算法的实现。
 
-- Hint分片算法
+### 自定义分片算法
 
-对应 HintShardingAlgorithm，用于处理使用 `Hint` 行分片的场景。需要配合 HintShardingStrategy 使用。
+提供接口让应用开发者自行实现与业务实现紧密相关的分片算法，并允许使用者自行管理真实表的物理分布。
+自定义分片算法又分为：
 
-## 分片策略
-
-包含分片键和分片算法，由于分片算法的独立性，将其独立抽离。真正可用于分片操作的是分片键 + 分片算法，也就是分片策略。目前提供 4 种分片策略。
-
-- 标准分片策略
+- 标准分片算法
 
-对应 StandardShardingStrategy。提供对 SQL 语句中的 `=`, `>`, `<`, `>=`, `<=`, `IN` 和 `BETWEEN AND` 的分片操作支持。
-StandardShardingStrategy 只支持单分片键，提供 PreciseShardingAlgorithm 和 RangeShardingAlgorithm 两个分片算法。
-PreciseShardingAlgorithm 是必选的，用于处理 `=` 和 `IN` 的分片。
-RangeShardingAlgorithm 是可选的，用于处理 `BETWEEN AND`, `>`, `<`, `>=`, `<=` 分片，如果不配置 RangeShardingAlgorithm，SQL 中的 `BETWEEN AND` 将按照全库路由处理。
+用于处理使用单一键作为分片键的 `=`、`IN`、`BETWEEN AND`、`>`、`<`、`>=`、`<=` 进行分片的场景。
 
-- 复合分片策略
+- 复合分片算法
 
-对应 ComplexShardingStrategy。复合分片策略。提供对 SQL 语句中的 `=`, `>`, `<`, `>=`, `<=`, `IN` 和 `BETWEEN AND` 的分片操作支持。
-ComplexShardingStrategy 支持多分片键，由于多分片键之间的关系复杂，因此并未进行过多的封装，而是直接将分片键值组合以及分片操作符透传至分片算法，完全由应用开发者实现，提供最大的灵活度。
+用于处理使用多键作为分片键进行分片的场景，包含多个分片键的逻辑较复杂，需要应用开发者自行处理其中的复杂度。
 
-- Hint分片策略
+- Hint 分片算法
 
-对应 HintShardingStrategy。通过 Hint 指定分片值而非从 SQL 中提取分片值的方式进行分片的策略。
+用于处理使用 `Hint` 行分片的场景。
 
-- 不分片策略
+## 分片策略
 
-对应 NoneShardingStrategy。不分片的策略。
+包含分片键和分片算法，由于分片算法的独立性，将其独立抽离。
+真正可用于分片操作的是分片键 + 分片算法，也就是分片策略。
 
 ## SQL Hint
 
-对于分片字段非 SQL 决定，而由其他外置条件决定的场景，可使用 SQL Hint 灵活的注入分片字段。
-例：内部系统，按照员工登录主键分库，而数据库中并无此字段。SQL Hint 支持通过 Java API 和 SQL 注释（待实现）两种方式使用。
+对于分片字段并非由 SQL 而是其他外置条件决定的场景，可使用 SQL Hint 注入分片值。
+例：按照员工登录主键分库，而数据库中并无此字段。
+SQL Hint 支持通过 Java API 和 SQL 注释（待实现）两种方式使用。
 详情请参见[强制分片路由](/cn/features/sharding/concept/hint/)。
diff --git a/docs/document/content/features/sharding/concept/sharding.en.md b/docs/document/content/features/sharding/concept/sharding.en.md
index bea81d25c2..cce9062ebc 100644
--- a/docs/document/content/features/sharding/concept/sharding.en.md
+++ b/docs/document/content/features/sharding/concept/sharding.en.md
@@ -5,63 +5,48 @@ weight = 2
 
 ## Sharding Key
 
-The database field used in sharding refers to the key field in horizontal sharding of the database (table). 
+Column used to determine database (table) sharding.
 For example, in last number modulo of order ID sharding, order ID is taken as the sharding key. 
-The full route executed when there is no sharding field in SQL has a poor performance. 
+The full route executed when there is no sharding column in SQL has a poor performance. 
 Besides single sharding column, Apache ShardingSphere also supports multiple sharding columns.
 
 ## Sharding Algorithm
 
-Data sharding can be achieved by sharding algorithms through `=`, `>=`, `<=`, `>`, `<`, `BETWEEN` and `IN`. 
-They need to be implemented by developers themselves and can be highly flexible.
+Data sharding can be achieved by sharding algorithms through `=`, `>=`, `<=`, `>`, `<`, `BETWEEN` and `IN`.
+It can be implemented by developers themselves, or using built-in syntactic sugar of Apache ShardingSphere, with high flexibility.
 
-Currently, 3 kinds of sharding algorithms are available. 
-Since the sharding algorithm and business achievement are closely related, it extracts all kinds of scenarios by sharding strategies, instead of providing built-in sharding algorithms. 
-Therefore, it can provide higher abstraction and the interface for developers to implement sharding algorithm by themselves.
+### Auto Sharding Algorithm
+
+It provides syntactic sugar for sharding algorithm.
+It used to manage all data nodes automatically, user do not care about the topology of physical data nodes.
+It includes lots of implementation for Mod, Hash, Range and Time Interval etc.
+
+### User-Defined Sharding Algorithm
+
+It provides interfaces for developers to implement the sharding algorithm related to business implementation, and allows users to manage the physical topology physical data nodes by themselves.
+It includes:
 
 - Standard Sharding Algorithm
 
-`StandardShardingAlgorithm` is to process the sharding case in which single sharding keys `=`, `IN`, `BETWEEN AND`, `>`, `<`, `>=`, `<=` are used; `StandardShardingStrategy` needs to be used together.
+It is to process the sharding case in which single sharding keys `=`, `IN`, `BETWEEN AND`, `>`, `<`, `>=`, `<=` are used.
 
 - Complex Keys Sharding Algorithm
 
-`ComplexKeysShardingAlgorithm` is to process the sharding case in which multiple sharding keys are used; `ComplexShardingStrategy` needs to be used together.
+It is to process the sharding case in which multiple sharding keys are used.
 It has a relatively complex logic that requires developers to deal by themselves.
 
 - Hint Sharding Algorithm
 
-`HintShardingAlgorithm` is to process the sharding case in which Hint is used; `HintShardingStrategy`needs to be used together.
+It is to process the sharding case in which Hint is used.
 
 ## Sharding Strategy
 
 It includes the sharding key and the sharding algorithm, and the latter one is extracted out for its independence. 
-Only sharding key + sharding algorithm, i.e., the sharding strategy, can be used in sharding operation. For now, 4 kinds of sharding strategies are available.
-
-- Standard Sharding Strategy
-
-`StandardShardingStrategy` provides support for the sharding operation of `=`, `>`, `<`, `>=`, `<=`, `IN` and `BETWEEN AND` in SQL. 
-`StandardShardingStrategy` only supports single sharding keys and provides two sharding algorithms of `PreciseShardingAlgorithm` and `RangeShardingAlgorithm`. 
-`PreciseShardingAlgorithm` is compulsory and used to operate the sharding of `=` and `IN`. 
-`RangeShardingAlgorithm` is optional and used to operate the sharding of `BETWEEN AND`, `>`, `<`, `>=`, `<=`. 
-`BETWEEN AND` in SQL will operate by way of all data node route without the configuration of `RangeShardingAlgorithm`.
-
-- Complex Sharding Strategy
-
-`ComplexShardingStrategy` provides support for the sharding operation of `=`, `>`, `<`, `>=`, `<=`, `IN` and `BETWEEN AND` in SQL. 
-`ComplexShardingStrategy` supports multiple sharding keys, but since their relationships are so complex that there is not too much encapsulation, 
-the combination of sharding keys and sharding operators are in the algorithm interface and achieved by developers with the most flexibility.
-
-- Hint Sharding Strategy
-
-`HintShardingStrategy` refers to the sharding strategy which get sharding values by hint rather than extracted from SQL.
-
-- None sharding strategy
-
-`NoneShardingStrategy` refers to the strategy with no sharding.
+Only sharding key + sharding algorithm can be used in sharding operation.
 
 ## SQL Hint
 
-In the case that the `ShardingColumn` is not decided by SQL but other external conditions, SQL hint can be used flexibly to inject `ShardingColumn`. 
-For example, in the internal system, databases are divided according to the staff’s ID, but this column does not exist in the database. 
-SQL Hint can be used by two ways, Java API and SQL comment (to do).
+In the case that the sharding column is not decide by SQL but other external conditions, SQL hint can be used to inject sharding value. 
+For example, databases are shard according to the staff’s ID, but column does not exist in the database. 
+SQL Hint can be used by two ways, Java API and SQL comment (TODO).
 Please refer to [Hint](/en/features/sharding/concept/hint/) for more details.
