commit 27080c93233f33ddac17ecab063b75ff04fc3dc9
Author: Mike0601 <40025573+Mike0601@users.noreply.github.com>
Date:   Fri Sep 2 14:38:25 2022 +0800

    In order to solve the release problem, the three documents are combined into one (#20731)

diff --git a/docs/document/content/overview/_index.cn.md b/docs/document/content/overview/_index.cn.md
index 38be2a303b6..4425103224d 100644
--- a/docs/document/content/overview/_index.cn.md
+++ b/docs/document/content/overview/_index.cn.md
@@ -8,3 +8,188 @@ chapter = true
 本章介绍 Apache ShardingSphere的定义，设计哲学和部署形态。
 
 更多常见问题，请参考 [FAQ](https://github.com/apache/shardingsphere/wiki/FAQ)。
+
+# 什么是 ShardingSphere
+
+## 介绍
+
+Apache ShardingSphere 是一款开源的分布式数据库生态项目，由 JDBC 和 Proxy 两款产品组成。其核心采用微内核+可插拔架构，通过插件开放扩展功能。它提供多源异构数据库增强平台，进而围绕其上层构建生态。
+
+Apache ShardingSphere 设计哲学为 Database Plus，旨在构建异构数据库上层的标准和生态。它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库。它站在数据库的上层视角，关注它们之间的协作多于数据库自身。
+
+### ShardingSphere-JDBC
+
+[![Maven Status](https://img.shields.io/maven-central/v/org.apache.shardingsphere/shardingsphere-jdbc.svg?color=green)](https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc)
+
+ShardingSphere-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。
+
+### ShardingSphere-Proxy
+
+[![Nightly-Download](https://img.shields.io/badge/nightly--builds-download-orange.svg)](https://nightlies.apache.org/shardingsphere/)
+[![Download](https://img.shields.io/badge/release-download-orange.svg)](/cn/downloads/)
+[![Docker Pulls](https://img.shields.io/docker/pulls/apache/shardingsphere-proxy.svg)](https://hub.docker.com/r/apache/shardingsphere-proxy)
+
+ShardingSphere-Proxy 定位为透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持。
+
+## 产品功能
+
+| 特性       | 定义 |
+| --------- | ----- |
+| 数据分片   | 数据分片，是应对海量数据存储与计算的有效手段。ShardingSphere 提供基于底层数据库之上，可计算与存储水平扩展的分布式数据库解决方案。 |
+| 分布式事务 | 事务能力，是保障数据库完整、安全的关键技术，也是数据库的核心技术之一。ShardingSphere 提供在单机数据库之上的分布式事务能力，可实现跨底层数据源的数据安全。 |
+| 读写分离   | 读写分离，是应对高压力业务访问的手段之一。ShardingSphere 基于对SQL语义理解及底层数据库拓扑感知能力，提供灵活、安全的读写分离能力，且可实现读访问的负载均衡。 |
+| 高可用     | 高可用，是对数据存储计算平台的基本要求。ShardingSphere 基于无状态服务，提供高可用计算服务访问；同时可感知并利用底层数据库自身高可用实现整体的高可用能力。 |
+| 数据迁移   | 数据迁移，是打通数据生态的关键能力。SharingSphere 提供基于数据全场景的迁移能力，可应对业务数据量激增的场景。 |
+| 联邦查询   | 联邦查询，是面对复杂数据环境下利用数据的有效手段之一。ShardingSphere 提供跨数据源的复杂数据查询分析能力，简化并提升数据使用体验。 |
+| 数据加密   | 数据加密，是保证数据安全的基本手段。ShardingSphere 提供一套完整的、透明化、安全的、低改造成本的数据加密解决方案。 |
+| 影子库     | 在全链路压测场景下，ShardingSphere 通过影子库功能支持在复杂压测场景下数据隔离，压测获得测试结果可准确反应系统真实容量和性能水平。 |
+
+## 产品优势
+
+* 极致性能
+
+驱动程序端历经长年打磨，效率接近原生 JDBC，性能极致。
+
+* 生态兼容
+
+代理端支持任何通过 MySQL/PostgreSQL 协议的应用访问，驱动程序端可对接任意实现 JDBC 规范的数据库。
+
+* 业务零侵入
+
+面对数据库替换场景，ShardingSphere 可满足业务无需改造，实现平滑业务迁移。
+
+* 运维低成本
+
+在保留原技术栈不变前提下，对 DBA 学习、管理成本低，交互友好。
+
+* 安全稳定
+
+基于成熟数据库底座之上提供增量能力，兼顾安全性及稳定性。
+
+* 弹性扩展
+
+具备计算、存储平滑在线扩展能力，可满足业务多变的需求。
+
+* 开放生态
+
+通过多层次（内核、功能、生态）插件化能力，为用户提供可定制满足自身特殊需求的独有系统。
+
+## 线路规划
+
+![Roadmap](https://shardingsphere.apache.org/document/current/img/roadmap_cn.png)
+
+## 如何参与
+
+ShardingSphere 已于 2020 年 4 月 16 日成为 [Apache 软件基金会](https://apache.org/index.html#projects-list)的顶级项目。
+欢迎通过[邮件列表](mailto:dev@shardingsphere.apache.org)参与讨论。
+
+# 设计哲学
+
+ShardingSphere 采用 Database Plus 设计哲学，该理念致力于构建数据库上层的标准和生态，在生态中补充数据库所缺失的能力。
+
+![Design](https://shardingsphere.apache.org/document/current/img/design_cn.png)
+
+## 连接：打造数据库上层标准
+
+通过对数据库协议、SQL 方言以及数据库存储的灵活适配，快速构建多模异构数据库上层的标准，同时通过内置 DistSQL 为应用提供标准化的连接方式。
+
+## 增强：数据库计算增强引擎
+
+在原生数据库基础能力之上，提供分布式及流量增强方面的能力。前者可突破底层数据库在计算与存储上的瓶颈，后者通过对流量的变形、重定向、治理、鉴权及分析能力提供更为丰富的数据应用增强能力。
+
+## 可插拔：构建数据库功能生态
+
+![ShardingSphere Architecture](https://shardingsphere.apache.org/document/current/img/overview_cn.png)
+
+Apache ShardingSphere 的可插拔架构划分为 3 层，它们是：L1 内核层、L2 功能层、L3 生态层。
+
+### L1 内核层
+
+是数据库基本能力的抽象，其所有组件均必须存在，但具体实现方式可通过可插拔的方式更换。
+主要包括查询优化器、分布式事务引擎、分布式执行引擎、权限引擎和调度引擎等。
+
+### L2 功能层
+
+用于提供增量能力，其所有组件均是可选的，可以包含零至多个组件。
+组件之间完全隔离，互无感知，多组件可通过叠加的方式相互配合使用。
+主要包括数据分片、读写分离、数据库高可用、数据加密、影子库等。
+用户自定义功能可完全面向 Apache ShardingSphere 定义的顶层接口进行定制化扩展，而无需改动内核代码。
+
+### L3 生态层
+
+用于对接和融入现有数据库生态，包括数据库协议、SQL 解析器和存储适配器，分别对应于 Apache ShardingSphere 以数据库协议提供服务的方式、SQL 方言操作数据的方式以及对接存储节点的数据库类型。
+
+# 部署形态
+
+## 部署形态
+
+Apache ShardingSphere 由 ShardingSphere-JDBC 和 ShardingSphere-Proxy 这 2 款既能够独立部署，又支持混合部署配合使用的产品组成。
+它们均提供标准化的基于数据库作为存储节点的增量功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。
+
+### ShardingSphere-JDBC 独立部署
+
+ShardingSphere-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。
+它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。
+
+- 适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC；
+- 支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等；
+- 支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。
+
+![ShardingSphere-JDBC Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-jdbc_v3.png)
+
+|           | ShardingSphere-JDBC | ShardingSphere-Proxy |
+| --------- | ------------------- | -------------------- |
+| 数据库     | `任意`               | MySQL/PostgreSQL     |
+| 连接消耗数  | `高`                | 低                    |
+| 异构语言   | `仅 Java`            | 任意                  |
+| 性能      | `损耗低`              | 损耗略高               |
+| 无中心化   | `是`                 | 否                    |
+| 静态入口   | `无`                 | 有                    |
+
+### ShardingSphere-Proxy 独立部署
+
+ShardingSphere-Proxy 定位为透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持。
+目前提供 MySQL 和 PostgreSQL 协议，透明化数据库操作，对 DBA 更加友好。
+
+- 向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；
+- 兼容 MariaDB 等基于 MySQL 协议的数据库，以及 openGauss 等基于 PostgreSQL 协议的数据库；
+- 适用于任何兼容 MySQL/PostgreSQL 协议的的客户端，如：MySQL Command Client, MySQL Workbench, Navicat 等。
+
+![ShardingSphere-Proxy Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-proxy_v2.png)
+
+|           | ShardingSphere-JDBC | ShardingSphere-Proxy |
+| --------- | ------------------- | -------------------- |
+| 数据库     | 任意                 | `MySQL/PostgreSQL`   |
+| 连接消耗数  | 高                  | `低`                  |
+| 异构语言   | 仅 Java              | `任意`                |
+| 性能      | 损耗低                | `损耗略高`             |
+| 无中心化   | 是                   | `否`                  |
+| 静态入口   | 无                   | `有`                  |
+
+### 混合部署架构
+
+ShardingSphere-JDBC 采用无中心化架构，与应用程序共享资源，适用于 Java 开发的高性能的轻量级 OLTP 应用；
+ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。
+
+Apache ShardingSphere 是多接入端共同组成的生态圈。
+通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。
+
+![ShardingSphere Hybrid Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-hybrid-architecture_v2.png)
+
+## 运行模式
+
+Apache ShardingSphere 提供了两种运行模式，分别是单机模式和集群模式。
+
+### 单机模式
+
+能够将数据源和规则等元数据信息持久化，但无法将元数据同步至多个 Apache ShardingSphere 实例，无法在集群环境中相互感知。
+通过某一实例更新元数据之后，会导致其他实例由于获取不到最新的元数据而产生不一致的错误。
+
+适用于工程师在本地搭建 Apache ShardingSphere 环境。
+
+### 集群模式
+
+提供了多个 Apache ShardingSphere 实例之间的元数据共享和分布式场景下状态协调的能力。
+它能够提供计算能力水平扩展和高可用等分布式系统必备的能力，集群环境需要通过独立部署的注册中心来存储元数据和协调节点状态。
+
+在生产环境建议使用集群模式。
diff --git a/docs/document/content/overview/_index.en.md b/docs/document/content/overview/_index.en.md
index 781b89f9254..8d52fac4fcf 100644
--- a/docs/document/content/overview/_index.en.md
+++ b/docs/document/content/overview/_index.en.md
@@ -8,3 +8,200 @@ chapter = true
 This chapter mainly introduces what Apache ShardingSphere is, as well as its design philosophy and deployment architecture.
 
 For frequently asked questions, please refer to [FAQ](https://github.com/apache/shardingsphere/wiki/FAQ).
+
+# What is ShardingSphere
+
+## Introduction
+
+Apache ShardingSphere is an open source ecosystem that allows you to transform any database into a distributed database system. 
+The project includes a JDBC and a Proxy, and its core adopts a micro-kernel and pluggable architecture.
+Thanks to its plugin-oriented architecture, features can be flexibly expanded at will.
+
+The project is committed to providing a multi-source heterogeneous, enhanced database platform and further building an ecosystem around the upper layer of the platform.
+Database Plus, the design philosophy of Apache ShardingSphere, aims at building the standard and ecosystem on the upper layer of the heterogeneous database.
+It focuses on how to make full and reasonable use of the computing and storage capabilities of existing databases rather than creating a brand new database.
+It attaches greater importance to the collaboration between multiple databases instead of the database itself.
+
+### ShardingSphere-JDBC
+
+[![Maven Status](https://img.shields.io/maven-central/v/org.apache.shardingsphere/shardingsphere-jdbc.svg?color=green)](https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc)
+
+ShardingSphere-JDBC is a lightweight Java framework that provides additional services at Java's JDBC layer.
+
+### ShardingSphere-Proxy
+
+[![Nightly-Download](https://img.shields.io/badge/nightly--builds-download-orange.svg)](https://nightlies.apache.org/shardingsphere/)
+[![Download](https://img.shields.io/badge/release-download-orange.svg)](/cn/downloads/)
+[![Docker Pulls](https://img.shields.io/docker/pulls/apache/shardingsphere-proxy.svg)](https://hub.docker.com/r/apache/shardingsphere-proxy)
+
+ShardingSphere-Proxy is a transparent database proxy, providing a database server that encapsulates database binary protocol to support heterogeneous languages.
+
+## Product Features
+
+| Feature                 | Definition |
+| ----------------------- | ---------- |
+| Data Sharding           | Data sharding is an effective way to deal with massive data storage and computing. ShardingSphere provides distributed database solutions that can scale out computing and storage levels on top of the underlying database. |
+| Distributed Transaction | Transactional capability is key to ensuring database integrity and security and is also one of the databases' core technologies. ShardingSphere provides distributed transaction capability on top of a single database, which can achieve data security across underlying data sources. |
+| Read/write Splitting    | Read/write splitting can be used to cope with business access with high stress. Based on its understanding of SQL semantics and the topological awareness of the underlying database, ShardingSphere provides flexible and secure read/write splitting capabilities and can achieve load balancing for read access. |
+| High Availability       | High availability is a basic requirement for a data storage and computing platform. ShardingSphere provides access to high-availability computing services based on stateless services. At the same time, it can sense and use the underlying database's HA solution to achieve its overall high availability. |
+| Data Migration          | Data migration is the key to connecting data ecosystems. ShardingSphere provides full-scenario data migration capability for users, which can cope with the surge of business data volume. |
+| Federated Query         | Federated queries are effective in utilizing data in a complex data environment. ShardingSphere is capable of querying and analyzing complex data across data sources, simplifying and improving the data usage experience. |
+| Data Encryption         | Data Encryption is a basic way to ensure data security. ShardingSphere provides a set of data encryption solutions that are complete, secure, transparent, and with low transformation costs. |
+| Shadow Database         | In the full-link stress testing scenario, ShardingSphere shadow DB is used for providing data isolation support for complex testing work. The obtained testing result can accurately reflect the system's true capacity and performance. |
+
+## Advantages
+
+- Ultimate Performance 
+
+Having been polished for years, the driver is close to a native JDBC in terms of efficiency, with ultimate performance.
+
+- Ecosystem Compatibility
+
+The proxy can be accessed by any application using MySQL/PostgreSQL protocol, and the driver can connect to any database that implements JDBC specifications.
+
+- Zero Business Intrusion
+
+In response to database switchover scenarios, ShardingSphere can achieve smooth business migration without business intrusion.
+
+- Low Ops & Maintenance Cost
+
+ShardingSphere offers a flat learning curve to DBAs and is interaction-friendly while allowing the original technology stack to remain unchanged.
+
+- Security & Stability
+
+It can provide enhancement capability based on mature databases while ensuring security and stability.
+
+- Elastic Extention
+
+It supports computing, storage, and smooth online expansion, which can meet diverse business needs.
+
+- Open Ecosystem
+
+It can provide users with flexibility thanks to custom systems based on multi-level (kernel, feature, and ecosystem) plugin capabilities.
+
+## Roadmap
+
+![Roadmap](https://shardingsphere.apache.org/document/current/img/roadmap_en.png)
+
+## How to Contribute
+
+ShardingSphere became an [Apache](https://apache.org/index.html#projects-list) Top-Level Project on April 16, 2020.
+You are welcome to check out the mailing list and discuss via [mail](mailto:dev@shardingsphere.apache.org).
+
+# Design Philosophy
+
+ShardingSphere adopts the database plus design philosophy, which is committed to building the standards and ecology of the upper layer of the database and supplementing the missing capabilities of the database in the ecology.
+
+![Design](https://shardingsphere.apache.org/document/current/img/design_en.png)
+
+## Connect: Create database upper level standard
+
+ Through flexible adaptation of database protocols, SQL dialects, and database storage, it can quickly build standards on top of multi-modal heterogeneous databases, while providing standardized connection mode for applications through built-in DistSQL.
+
+## Enhance: Database computing enhancement engine
+
+It can further provide distributed capabilities and traffic enhancement functions based on native database capabilities. The former can break through the bottleneck of the underlying database in computing and storage, while the latter provides more diversified data application enhancement capabilities through traffic deformation, redirection, governance, authentication, and analysis.
+
+## Pluggable: Building database function ecology
+
+![Overview](https://shardingsphere.apache.org/document/current/img/overview_en.png)
+
+The pluggable architecture of Apache ShardingSphere is composed of three layers - L1 Kernel Layer, L2 Feature Layer and L3 Ecosystem Layer.
+
+### L1 Kernel Layer
+
+An abstraction of databases' basic capabilities.
+All the components are required and the specific implementation method can be replaced thanks to plugins.
+It includes a query optimizer, distributed transaction engine, distributed execution engine, permission engine and scheduling engine.
+
+### L2 Feature Layer
+
+Used to provide enhancement capabilities.
+All components are optional, allowing you to choose whether to include zero or multiple components.
+Components are isolated from each other, and multiple components can be used together by overlaying.
+It includes data sharding, read/write splitting, database high availability, data encryption and shadow database and so on.
+The user-defined feature can be fully customized and extended for the top-level interface defined by Apache ShardingSphere without changing kernel codes.
+
+### L3 Ecosystem Layer
+
+It is used to integrate and merge the current database ecosystems.
+The ecosystem layer includes database protocol, SQL parser and storage adapter, corresponding to the way in which Apache ShardingSphere provides services by database protocol, the way in which SQL dialect operates data, and the database type that interacts with storage nodes.
+
+# Deployment
+
+## Deployment
+
+Apache ShardingSphere includes two independent clients: ShardingSphere-JDBC & ShardingSphere-Proxy. They all provide functions of data scale-out, distributed transaction and distributed governance, applicable in a variety of scenarios such as Java isomorphism, heterogeneous languages, and a cloud-native environment.
+
+### Independent ShardingSphere-JDBC
+
+ShardingSphere-JDBC is a lightweight Java framework that provides additional services at Java's JDBC layer.
+With the client connecting directly to the database, it provides services in the form of jar and requires no extra deployment and dependence.
+It can be considered as an enhanced version of the JDBC driver, which is fully compatible with JDBC and all kinds of ORM frameworks.
+
+- Applicable in any ORM framework based on JDBC, such as JPA, Hibernate, Mybatis, Spring JDBC Template, or direct use of JDBC;
+- Support any third-party database connection pool, such as DBCP, C3P0, BoneCP, HikariCP;
+- Support any kind of JDBC standard database: MySQL, PostgreSQL, Oracle, SQLServer and any JDBC adapted databases.
+
+![ShardingSphere-JDBC Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-jdbc_v3.png)
+
+|                        | ShardingSphere-JDBC | ShardingSphere-Proxy |
+| ---------------------- | ------------------- | -------------------- |
+| Database               | `Any`               | MySQL/PostgreSQL     |
+| Connections Count Cost | `More`              | Less                 |
+| Heterogeneous language | `Java Only`         | Any                  |
+| Performance            | `Low loss`          | Relatively High loss |
+| Decentralization       | `Yes`               | No                   |
+| Static entry           | `No`                | Yes                  |
+
+### Independent ShardingSphere-Proxy
+
+ShardingSphere-Proxy is a transparent database proxy, providing a database server that encapsulates database binary protocol to support heterogeneous languages.
+Currently, MySQL and PostgreSQL protocols are provided.
+It can use any kind of terminal that is compatible with MySQL or PostgreSQL protocol to operate data, which is more friendly to DBAs.
+
+- Transparent to applications, it can be used directly as MySQL/PostgreSQL;
+- Compatible with MySQL-based databases, such as MariaDB, and PostgreSQL-based databases, such as openGauss;
+- Applicable to any kind of client that is compatible with MySQL/PostgreSQL protocol, such as MySQL Command Client, MySQL Workbench, etc.
+
+![ShardingSphere-Proxy Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-proxy_v2.png)
+
+|                        | ShardingSphere-JDBC | ShardingSphere-Proxy   |
+| ---------------------- | ------------------- | ---------------------- |
+| Database               | Any                 | `MySQL/PostgreSQL`     |
+| Connections Count Cost | More                | `Less`                 |
+| Heterogeneous language | Java Only           | `Any`                  |
+| Performance            | Low loss            | `Relatively High loss` |
+| Decentralization       | Yes                 | `No`                   |
+| Static entry           | No                  | `Yes`                  |
+
+### Hybrid Architecture
+
+ShardingSphere-JDBC adopts a decentralized architecture, applicable to high-performance light-weight OLTP applications developed with Java.
+ShardingSphere-Proxy provides static entry and supports all languages, applicable to OLAP applications and the sharding databases management and operation situation.
+
+Apache ShardingSphere is an ecosystem composed of multiple access ports.
+By combining ShardingSphere-JDBC and ShardingSphere-Proxy, and using the same registry to configure sharding strategies, it can flexibly build application systems for various scenarios, allowing architects to freely adjust the system architecture according to the current businesses. 
+
+![ShardingSphere Hybrid Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-hybrid-architecture_v2.png)
+
+## Running Modes
+
+Apache ShardingSphere provides two running modes: standalone mode and cluster mode.
+
+### Standalone mode
+
+It can achieve data persistence in terms of metadata information such as data sources and rules,
+but it is not able to synchronize metadata to multiple Apache ShardingSphere instances or be aware of each other in a cluster environment.
+Updating metadata through one instance causes inconsistencies in other instances because they cannot get the latest metadata.
+
+It is ideal for engineers to build a ShardingSphere environment locally.
+
+### Cluster mode
+
+It provides metadata sharing between multiple Apache ShardingSphere instances and the capability to coordinate states in distributed scenarios.
+
+It provides the capabilities necessary for distributed systems, such as horizontal scaling of computing capability and high availability.
+Clustered environments need to store metadata and coordinate nodes' status through a separately deployed registry center.
+
+We suggest using cluster mode in production environment.
diff --git a/docs/document/content/overview/deployment.cn.md b/docs/document/content/overview/deployment.cn.md
deleted file mode 100644
index 7f2d1d0b7da..00000000000
--- a/docs/document/content/overview/deployment.cn.md
+++ /dev/null
@@ -1,79 +0,0 @@
-+++
-pre = "<b>1.3 </b>"
-title = "部署形态"
-weight = 3
-chapter = true
-+++
-
-## 部署形态
-
-Apache ShardingSphere 由 ShardingSphere-JDBC 和 ShardingSphere-Proxy 这 2 款既能够独立部署，又支持混合部署配合使用的产品组成。
-它们均提供标准化的基于数据库作为存储节点的增量功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。
-
-### ShardingSphere-JDBC 独立部署
-
-ShardingSphere-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。
-它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。
-
-- 适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC；
-- 支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等；
-- 支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。
-
-![ShardingSphere-JDBC Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-jdbc_v3.png)
-
-|           | ShardingSphere-JDBC | ShardingSphere-Proxy |
-| --------- | ------------------- | -------------------- |
-| 数据库     | `任意`               | MySQL/PostgreSQL     |
-| 连接消耗数  | `高`                | 低                    |
-| 异构语言   | `仅 Java`            | 任意                  |
-| 性能      | `损耗低`              | 损耗略高               |
-| 无中心化   | `是`                 | 否                    |
-| 静态入口   | `无`                 | 有                    |
-
-### ShardingSphere-Proxy 独立部署
-
-ShardingSphere-Proxy 定位为透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持。
-目前提供 MySQL 和 PostgreSQL 协议，透明化数据库操作，对 DBA 更加友好。
-
-- 向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；
-- 兼容 MariaDB 等基于 MySQL 协议的数据库，以及 openGauss 等基于 PostgreSQL 协议的数据库；
-- 适用于任何兼容 MySQL/PostgreSQL 协议的的客户端，如：MySQL Command Client, MySQL Workbench, Navicat 等。
-
-![ShardingSphere-Proxy Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-proxy_v2.png)
-
-|           | ShardingSphere-JDBC | ShardingSphere-Proxy |
-| --------- | ------------------- | -------------------- |
-| 数据库     | 任意                 | `MySQL/PostgreSQL`   |
-| 连接消耗数  | 高                  | `低`                  |
-| 异构语言   | 仅 Java              | `任意`                |
-| 性能      | 损耗低                | `损耗略高`             |
-| 无中心化   | 是                   | `否`                  |
-| 静态入口   | 无                   | `有`                  |
-
-### 混合部署架构
-
-ShardingSphere-JDBC 采用无中心化架构，与应用程序共享资源，适用于 Java 开发的高性能的轻量级 OLTP 应用；
-ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。
-
-Apache ShardingSphere 是多接入端共同组成的生态圈。
-通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。
-
-![ShardingSphere Hybrid Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-hybrid-architecture_v2.png)
-
-## 运行模式
-
-Apache ShardingSphere 提供了两种运行模式，分别是单机模式和集群模式。
-
-### 单机模式
-
-能够将数据源和规则等元数据信息持久化，但无法将元数据同步至多个 Apache ShardingSphere 实例，无法在集群环境中相互感知。
-通过某一实例更新元数据之后，会导致其他实例由于获取不到最新的元数据而产生不一致的错误。
-
-适用于工程师在本地搭建 Apache ShardingSphere 环境。
-
-### 集群模式
-
-提供了多个 Apache ShardingSphere 实例之间的元数据共享和分布式场景下状态协调的能力。
-它能够提供计算能力水平扩展和高可用等分布式系统必备的能力，集群环境需要通过独立部署的注册中心来存储元数据和协调节点状态。
-
-在生产环境建议使用集群模式。
diff --git a/docs/document/content/overview/deployment.en.md b/docs/document/content/overview/deployment.en.md
deleted file mode 100644
index f348dd2e68a..00000000000
--- a/docs/document/content/overview/deployment.en.md
+++ /dev/null
@@ -1,83 +0,0 @@
-+++
-pre = "<b>1.3 </b>"
-title = "Deployment"
-weight = 3
-chapter = true
-+++
-
-## Deployment
-
-Apache ShardingSphere includes two independent clients: ShardingSphere-JDBC & ShardingSphere-Proxy. They all provide functions of data scale-out, distributed transaction and distributed governance, applicable in a variety of scenarios such as Java isomorphism, heterogeneous languages, and a cloud-native environment.
-
-### Independent ShardingSphere-JDBC
-
-ShardingSphere-JDBC is a lightweight Java framework that provides additional services at Java's JDBC layer.
-With the client connecting directly to the database, it provides services in the form of jar and requires no extra deployment and dependence.
-It can be considered as an enhanced version of the JDBC driver, which is fully compatible with JDBC and all kinds of ORM frameworks.
-
-- Applicable in any ORM framework based on JDBC, such as JPA, Hibernate, Mybatis, Spring JDBC Template, or direct use of JDBC;
-- Support any third-party database connection pool, such as DBCP, C3P0, BoneCP, HikariCP;
-- Support any kind of JDBC standard database: MySQL, PostgreSQL, Oracle, SQLServer and any JDBC adapted databases.
-
-![ShardingSphere-JDBC Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-jdbc_v3.png)
-
-|                        | ShardingSphere-JDBC | ShardingSphere-Proxy |
-| ---------------------- | ------------------- | -------------------- |
-| Database               | `Any`               | MySQL/PostgreSQL     |
-| Connections Count Cost | `More`              | Less                 |
-| Heterogeneous language | `Java Only`         | Any                  |
-| Performance            | `Low loss`          | Relatively High loss |
-| Decentralization       | `Yes`               | No                   |
-| Static entry           | `No`                | Yes                  |
-
-### Independent ShardingSphere-Proxy
-
-ShardingSphere-Proxy is a transparent database proxy, providing a database server that encapsulates database binary protocol to support heterogeneous languages.
-Currently, MySQL and PostgreSQL protocols are provided.
-It can use any kind of terminal that is compatible with MySQL or PostgreSQL protocol to operate data, which is more friendly to DBAs.
-
-- Transparent to applications, it can be used directly as MySQL/PostgreSQL;
-- Compatible with MySQL-based databases, such as MariaDB, and PostgreSQL-based databases, such as openGauss;
-- Applicable to any kind of client that is compatible with MySQL/PostgreSQL protocol, such as MySQL Command Client, MySQL Workbench, etc.
-
-![ShardingSphere-Proxy Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-proxy_v2.png)
-
-|                        | ShardingSphere-JDBC | ShardingSphere-Proxy   |
-| ---------------------- | ------------------- | ---------------------- |
-| Database               | Any                 | `MySQL/PostgreSQL`     |
-| Connections Count Cost | More                | `Less`                 |
-| Heterogeneous language | Java Only           | `Any`                  |
-| Performance            | Low loss            | `Relatively High loss` |
-| Decentralization       | Yes                 | `No`                   |
-| Static entry           | No                  | `Yes`                  |
-
-### Hybrid Architecture
-
-ShardingSphere-JDBC adopts a decentralized architecture, applicable to high-performance light-weight OLTP applications developed with Java.
-ShardingSphere-Proxy provides static entry and supports all languages, applicable to OLAP applications and the sharding databases management and operation situation.
-
-Apache ShardingSphere is an ecosystem composed of multiple access ports.
-By combining ShardingSphere-JDBC and ShardingSphere-Proxy, and using the same registry to configure sharding strategies, it can flexibly build application systems for various scenarios, allowing architects to freely adjust the system architecture according to the current businesses. 
-
-![ShardingSphere Hybrid Architecture](https://shardingsphere.apache.org/document/current/img/shardingsphere-hybrid-architecture_v2.png)
-
-## Running Modes
-
-Apache ShardingSphere provides two running modes: standalone mode and cluster mode.
-
-### Standalone mode
-
-It can achieve data persistence in terms of metadata information such as data sources and rules,
-but it is not able to synchronize metadata to multiple Apache ShardingSphere instances or be aware of each other in a cluster environment.
-Updating metadata through one instance causes inconsistencies in other instances because they cannot get the latest metadata.
-
-It is ideal for engineers to build a ShardingSphere environment locally.
-
-### Cluster mode
-
-It provides metadata sharing between multiple Apache ShardingSphere instances and the capability to coordinate states in distributed scenarios.
-
-It provides the capabilities necessary for distributed systems, such as horizontal scaling of computing capability and high availability.
-Clustered environments need to store metadata and coordinate nodes' status through a separately deployed registry center.
-
-We suggest using cluster mode in production environment.
diff --git a/docs/document/content/overview/design.cn.md b/docs/document/content/overview/design.cn.md
deleted file mode 100644
index 5bec4b4e198..00000000000
--- a/docs/document/content/overview/design.cn.md
+++ /dev/null
@@ -1,40 +0,0 @@
-+++
-pre = "<b>1.2 </b>"
-title = "设计哲学"
-weight = 2
-chapter = true
-+++
-
-ShardingSphere 采用 Database Plus 设计哲学，该理念致力于构建数据库上层的标准和生态，在生态中补充数据库所缺失的能力。
-
-![Design](https://shardingsphere.apache.org/document/current/img/design_cn.png)
-
-## 连接：打造数据库上层标准
-
-通过对数据库协议、SQL 方言以及数据库存储的灵活适配，快速构建多模异构数据库上层的标准，同时通过内置 DistSQL 为应用提供标准化的连接方式。
-
-## 增强：数据库计算增强引擎
-
-在原生数据库基础能力之上，提供分布式及流量增强方面的能力。前者可突破底层数据库在计算与存储上的瓶颈，后者通过对流量的变形、重定向、治理、鉴权及分析能力提供更为丰富的数据应用增强能力。
-
-## 可插拔：构建数据库功能生态
-
-![ShardingSphere Architecture](https://shardingsphere.apache.org/document/current/img/overview_cn.png)
-
-Apache ShardingSphere 的可插拔架构划分为 3 层，它们是：L1 内核层、L2 功能层、L3 生态层。
-
-### L1 内核层
-
-是数据库基本能力的抽象，其所有组件均必须存在，但具体实现方式可通过可插拔的方式更换。
-主要包括查询优化器、分布式事务引擎、分布式执行引擎、权限引擎和调度引擎等。
-
-### L2 功能层
-
-用于提供增量能力，其所有组件均是可选的，可以包含零至多个组件。
-组件之间完全隔离，互无感知，多组件可通过叠加的方式相互配合使用。
-主要包括数据分片、读写分离、数据库高可用、数据加密、影子库等。
-用户自定义功能可完全面向 Apache ShardingSphere 定义的顶层接口进行定制化扩展，而无需改动内核代码。
-
-### L3 生态层
-
-用于对接和融入现有数据库生态，包括数据库协议、SQL 解析器和存储适配器，分别对应于 Apache ShardingSphere 以数据库协议提供服务的方式、SQL 方言操作数据的方式以及对接存储节点的数据库类型。
diff --git a/docs/document/content/overview/design.en.md b/docs/document/content/overview/design.en.md
deleted file mode 100644
index 4160c1596d7..00000000000
--- a/docs/document/content/overview/design.en.md
+++ /dev/null
@@ -1,43 +0,0 @@
-+++
-pre = "<b>1.2 </b>"
-title = "Design Philosophy"
-weight = 2
-chapter = true
-+++
-
-ShardingSphere adopts the database plus design philosophy, which is committed to building the standards and ecology of the upper layer of the database and supplementing the missing capabilities of the database in the ecology.
-
-![Design](https://shardingsphere.apache.org/document/current/img/design_en.png)
-
-## Connect: Create database upper level standard
-
- Through flexible adaptation of database protocols, SQL dialects, and database storage, it can quickly build standards on top of multi-modal heterogeneous databases, while providing standardized connection mode for applications through built-in DistSQL.
-
-## Enhance: Database computing enhancement engine
-
-It can further provide distributed capabilities and traffic enhancement functions based on native database capabilities. The former can break through the bottleneck of the underlying database in computing and storage, while the latter provides more diversified data application enhancement capabilities through traffic deformation, redirection, governance, authentication, and analysis.
-
-## Pluggable: Building database function ecology
-
-![Overview](https://shardingsphere.apache.org/document/current/img/overview_en.png)
-
-The pluggable architecture of Apache ShardingSphere is composed of three layers - L1 Kernel Layer, L2 Feature Layer and L3 Ecosystem Layer.
-
-### L1 Kernel Layer
-
-An abstraction of databases' basic capabilities.
-All the components are required and the specific implementation method can be replaced thanks to plugins.
-It includes a query optimizer, distributed transaction engine, distributed execution engine, permission engine and scheduling engine.
-
-### L2 Feature Layer
-
-Used to provide enhancement capabilities.
-All components are optional, allowing you to choose whether to include zero or multiple components.
-Components are isolated from each other, and multiple components can be used together by overlaying.
-It includes data sharding, read/write splitting, database high availability, data encryption and shadow database and so on.
-The user-defined feature can be fully customized and extended for the top-level interface defined by Apache ShardingSphere without changing kernel codes.
-
-### L3 Ecosystem Layer
-
-It is used to integrate and merge the current database ecosystems.
-The ecosystem layer includes database protocol, SQL parser and storage adapter, corresponding to the way in which Apache ShardingSphere provides services by database protocol, the way in which SQL dialect operates data, and the database type that interacts with storage nodes.
diff --git a/docs/document/content/overview/intro.cn.md b/docs/document/content/overview/intro.cn.md
deleted file mode 100644
index ce489adf974..00000000000
--- a/docs/document/content/overview/intro.cn.md
+++ /dev/null
@@ -1,78 +0,0 @@
-+++
-pre = "<b>1.1 </b>"
-title = "什么是 ShardingSphere"
-weight = 1
-chapter = true
-+++
-
-## 介绍
-
-Apache ShardingSphere 是一款开源的分布式数据库生态项目，由 JDBC 和 Proxy 两款产品组成。其核心采用微内核+可插拔架构，通过插件开放扩展功能。它提供多源异构数据库增强平台，进而围绕其上层构建生态。
-
-Apache ShardingSphere 设计哲学为 Database Plus，旨在构建异构数据库上层的标准和生态。它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库。它站在数据库的上层视角，关注它们之间的协作多于数据库自身。
-
-### ShardingSphere-JDBC
-
-[![Maven Status](https://img.shields.io/maven-central/v/org.apache.shardingsphere/shardingsphere-jdbc.svg?color=green)](https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc)
-
-ShardingSphere-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。
-
-### ShardingSphere-Proxy
-
-[![Nightly-Download](https://img.shields.io/badge/nightly--builds-download-orange.svg)](https://nightlies.apache.org/shardingsphere/)
-[![Download](https://img.shields.io/badge/release-download-orange.svg)](/cn/downloads/)
-[![Docker Pulls](https://img.shields.io/docker/pulls/apache/shardingsphere-proxy.svg)](https://hub.docker.com/r/apache/shardingsphere-proxy)
-
-ShardingSphere-Proxy 定位为透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持。
-
-## 产品功能
-
-| 特性       | 定义 |
-| --------- | ----- |
-| 数据分片   | 数据分片，是应对海量数据存储与计算的有效手段。ShardingSphere 提供基于底层数据库之上，可计算与存储水平扩展的分布式数据库解决方案。 |
-| 分布式事务 | 事务能力，是保障数据库完整、安全的关键技术，也是数据库的核心技术之一。ShardingSphere 提供在单机数据库之上的分布式事务能力，可实现跨底层数据源的数据安全。 |
-| 读写分离   | 读写分离，是应对高压力业务访问的手段之一。ShardingSphere 基于对SQL语义理解及底层数据库拓扑感知能力，提供灵活、安全的读写分离能力，且可实现读访问的负载均衡。 |
-| 高可用     | 高可用，是对数据存储计算平台的基本要求。ShardingSphere 基于无状态服务，提供高可用计算服务访问；同时可感知并利用底层数据库自身高可用实现整体的高可用能力。 |
-| 数据迁移   | 数据迁移，是打通数据生态的关键能力。SharingSphere 提供基于数据全场景的迁移能力，可应对业务数据量激增的场景。 |
-| 联邦查询   | 联邦查询，是面对复杂数据环境下利用数据的有效手段之一。ShardingSphere 提供跨数据源的复杂数据查询分析能力，简化并提升数据使用体验。 |
-| 数据加密   | 数据加密，是保证数据安全的基本手段。ShardingSphere 提供一套完整的、透明化、安全的、低改造成本的数据加密解决方案。 |
-| 影子库     | 在全链路压测场景下，ShardingSphere 通过影子库功能支持在复杂压测场景下数据隔离，压测获得测试结果可准确反应系统真实容量和性能水平。 |
-
-## 产品优势
-
-* 极致性能
-
-驱动程序端历经长年打磨，效率接近原生 JDBC，性能极致。
-
-* 生态兼容
-
-代理端支持任何通过 MySQL/PostgreSQL 协议的应用访问，驱动程序端可对接任意实现 JDBC 规范的数据库。
-
-* 业务零侵入
-
-面对数据库替换场景，ShardingSphere 可满足业务无需改造，实现平滑业务迁移。
-
-* 运维低成本
-
-在保留原技术栈不变前提下，对 DBA 学习、管理成本低，交互友好。
-
-* 安全稳定
-
-基于成熟数据库底座之上提供增量能力，兼顾安全性及稳定性。
-
-* 弹性扩展
-
-具备计算、存储平滑在线扩展能力，可满足业务多变的需求。
-
-* 开放生态
-
-通过多层次（内核、功能、生态）插件化能力，为用户提供可定制满足自身特殊需求的独有系统。
-
-## 线路规划
-
-![Roadmap](https://shardingsphere.apache.org/document/current/img/roadmap_cn.png)
-
-## 如何参与
-
-ShardingSphere 已于 2020 年 4 月 16 日成为 [Apache 软件基金会](https://apache.org/index.html#projects-list)的顶级项目。
-欢迎通过[邮件列表](mailto:dev@shardingsphere.apache.org)参与讨论。
diff --git a/docs/document/content/overview/intro.en.md b/docs/document/content/overview/intro.en.md
deleted file mode 100644
index 4cc0c7e167a..00000000000
--- a/docs/document/content/overview/intro.en.md
+++ /dev/null
@@ -1,83 +0,0 @@
-+++
-pre = "<b>1.1 </b>"
-title = "What is ShardingSphere"
-weight = 1
-chapter = true
-+++
-
-## Introduction
-
-Apache ShardingSphere is an open source ecosystem that allows you to transform any database into a distributed database system. 
-The project includes a JDBC and a Proxy, and its core adopts a micro-kernel and pluggable architecture.
-Thanks to its plugin-oriented architecture, features can be flexibly expanded at will.
-
-The project is committed to providing a multi-source heterogeneous, enhanced database platform and further building an ecosystem around the upper layer of the platform.
-Database Plus, the design philosophy of Apache ShardingSphere, aims at building the standard and ecosystem on the upper layer of the heterogeneous database.
-It focuses on how to make full and reasonable use of the computing and storage capabilities of existing databases rather than creating a brand new database.
-It attaches greater importance to the collaboration between multiple databases instead of the database itself.
-
-### ShardingSphere-JDBC
-
-[![Maven Status](https://img.shields.io/maven-central/v/org.apache.shardingsphere/shardingsphere-jdbc.svg?color=green)](https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc)
-
-ShardingSphere-JDBC is a lightweight Java framework that provides additional services at Java's JDBC layer.
-
-### ShardingSphere-Proxy
-
-[![Nightly-Download](https://img.shields.io/badge/nightly--builds-download-orange.svg)](https://nightlies.apache.org/shardingsphere/)
-[![Download](https://img.shields.io/badge/release-download-orange.svg)](/cn/downloads/)
-[![Docker Pulls](https://img.shields.io/docker/pulls/apache/shardingsphere-proxy.svg)](https://hub.docker.com/r/apache/shardingsphere-proxy)
-
-ShardingSphere-Proxy is a transparent database proxy, providing a database server that encapsulates database binary protocol to support heterogeneous languages.
-
-## Product Features
-
-| Feature                 | Definition |
-| ----------------------- | ---------- |
-| Data Sharding           | Data sharding is an effective way to deal with massive data storage and computing. ShardingSphere provides distributed database solutions that can scale out computing and storage levels on top of the underlying database. |
-| Distributed Transaction | Transactional capability is key to ensuring database integrity and security and is also one of the databases' core technologies. ShardingSphere provides distributed transaction capability on top of a single database, which can achieve data security across underlying data sources. |
-| Read/write Splitting    | Read/write splitting can be used to cope with business access with high stress. Based on its understanding of SQL semantics and the topological awareness of the underlying database, ShardingSphere provides flexible and secure read/write splitting capabilities and can achieve load balancing for read access. |
-| High Availability       | High availability is a basic requirement for a data storage and computing platform. ShardingSphere provides access to high-availability computing services based on stateless services. At the same time, it can sense and use the underlying database's HA solution to achieve its overall high availability. |
-| Data Migration          | Data migration is the key to connecting data ecosystems. ShardingSphere provides full-scenario data migration capability for users, which can cope with the surge of business data volume. |
-| Federated Query         | Federated queries are effective in utilizing data in a complex data environment. ShardingSphere is capable of querying and analyzing complex data across data sources, simplifying and improving the data usage experience. |
-| Data Encryption         | Data Encryption is a basic way to ensure data security. ShardingSphere provides a set of data encryption solutions that are complete, secure, transparent, and with low transformation costs. |
-| Shadow Database         | In the full-link stress testing scenario, ShardingSphere shadow DB is used for providing data isolation support for complex testing work. The obtained testing result can accurately reflect the system's true capacity and performance. |
-
-## Advantages
-
-- Ultimate Performance 
-
-Having been polished for years, the driver is close to a native JDBC in terms of efficiency, with ultimate performance.
-
-- Ecosystem Compatibility
-
-The proxy can be accessed by any application using MySQL/PostgreSQL protocol, and the driver can connect to any database that implements JDBC specifications.
-
-- Zero Business Intrusion
-
-In response to database switchover scenarios, ShardingSphere can achieve smooth business migration without business intrusion.
-
-- Low Ops & Maintenance Cost
-
-ShardingSphere offers a flat learning curve to DBAs and is interaction-friendly while allowing the original technology stack to remain unchanged.
-
-- Security & Stability
-
-It can provide enhancement capability based on mature databases while ensuring security and stability.
-
-- Elastic Extention
-
-It supports computing, storage, and smooth online expansion, which can meet diverse business needs.
-
-- Open Ecosystem
-
-It can provide users with flexibility thanks to custom systems based on multi-level (kernel, feature, and ecosystem) plugin capabilities.
-
-## Roadmap
-
-![Roadmap](https://shardingsphere.apache.org/document/current/img/roadmap_en.png)
-
-## How to Contribute
-
-ShardingSphere became an [Apache](https://apache.org/index.html#projects-list) Top-Level Project on April 16, 2020.
-You are welcome to check out the mailing list and discuss via [mail](mailto:dev@shardingsphere.apache.org).
