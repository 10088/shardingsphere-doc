commit 208e7f4ba1bf6fec491812d06b7afa4fbec9879d
Author: Liang Zhang <terrymanu@163.com>
Date:   Thu Jan 7 13:21:40 2021 +0800

    Rename shardingsphere-integration-test-suite and shardingsphere-integration-test-fixture (#8926)

diff --git a/docs/document/content/features/test-engine/integration-test-engine.cn.md b/docs/document/content/features/test-engine/integration-test-engine.cn.md
index df2800d9be..87660674b8 100644
--- a/docs/document/content/features/test-engine/integration-test-engine.cn.md
+++ b/docs/document/content/features/test-engine/integration-test-engine.cn.md
@@ -13,20 +13,20 @@ Junit 中的 `Parameterized` 会聚合起所有的测试数据，并将测试数
 ### 配置
 
   - 环境类文件
-    - /shardingsphere-test-suite/src/test/resources/integrate/env-native.properties
-    - /shardingsphere-test-suite/src/test/resources/integrate/env/`SQL-TYPE`/dataset.xml
-    - /shardingsphere-test-suite/src/test/resources/integrate/env/`SQL-TYPE`/schema.xml
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/env-native.properties
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/env/`SQL-TYPE`/dataset.xml
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/env/`SQL-TYPE`/schema.xml
   - 测试用例类文件
-    - /shardingsphere-test-suite/src/test/resources/integrate/cases/`SQL-TYPE`/`SQL-TYPE`-integrate-test-cases.xml
-    - /shardingsphere-test-suite/src/test/resources/integrate/cases/`SQL-TYPE`/dataset/`FEATURE-TYPE`/*.xml
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/cases/`SQL-TYPE`/`SQL-TYPE`-integrate-test-cases.xml
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/cases/`SQL-TYPE`/dataset/`FEATURE-TYPE`/*.xml
   - sql-case 文件
-    - /sharding-sql-test/src/main/resources/sql/sharding/`SQL-TYPE`/*.xml
+    - /shardingsphere-integration-test-suite/src/main/resources/sql/sharding/`SQL-TYPE`/*.xml
 
 ### 环境配置 
 
 集成测试需要真实的数据库环境，根据相应的配置文件创建测试环境：
 
-首先，修改配置文件 `/shardingsphere-test-suite/src/test/resources/integrate/env-native.properties` ，例子如下：
+首先，修改配置文件 `/shardingsphere-integration-test-suite/src/test/resources/integrate/env-native.properties` ，例子如下：
 
 ```properties
 # 测试主键，并发，column index等的开关
@@ -63,7 +63,7 @@ it.oracle.username=jdbc
 it.oracle.password=jdbc
 ```
 
-其次，修改文件 `/shardingsphere-test-suite/src/test/resources/integrate/env/SQL-TYPE/dataset.xml` 
+其次，修改文件 `/shardingsphere-integration-test-suite/src/test/resources/integrate/env/SQL-TYPE/dataset.xml` 
 在`dataset.xml`文件中定义元数据和测试数据。例如：
 
 ```xml
@@ -92,7 +92,7 @@ it.oracle.password=jdbc
 
 `env-native.properties` 与 `dataset.xml ` 确定了什么SQL在什么环境执行，下面是断言数据的配置：
 
-断言的配置，需要两种文件，第一类文件位于 `/shardingsphere-test-suite/src/test/resources/integrate/cases/SQL-TYPE/SQL-TYPE-integrate-test-cases.xml`
+断言的配置，需要两种文件，第一类文件位于 `/shardingsphere-integration-test-suite/src/test/resources/integrate/cases/SQL-TYPE/SQL-TYPE-integrate-test-cases.xml`
 这个文件类似于一个索引，定义了要执行的SQL，参数以及期待的数据的文件位置。这里的 test-case 引用的就是`sharding-sql-test`中 SQL 对应的`sql-case-id`，例子如下：
 
 ```xml
@@ -103,7 +103,7 @@ it.oracle.password=jdbc
     </dml-test-case>
 </integrate-test-cases>
 ```
-还有一类文件 -- 断言数据，也就是上面配置中的 expected-data-file 对应的文件，文件在 `/shardingsphere-test-suite/src/test/resources/integrate/cases/SQL-TYPE/dataset/FEATURE-TYPE/*.xml`
+还有一类文件 -- 断言数据，也就是上面配置中的 expected-data-file 对应的文件，文件在 `/shardingsphere-integration-test-suite/src/test/resources/integrate/cases/SQL-TYPE/dataset/FEATURE-TYPE/*.xml`
 这个文件内容跟 dataset.xml 很相似，只不过`expected-data-file`文件中不仅定义了断言的数据，还有相应SQL执行后的返回值等。例如：
 
 ```xml
diff --git a/docs/document/content/features/test-engine/integration-test-engine.en.md b/docs/document/content/features/test-engine/integration-test-engine.en.md
index 5abc61b439..ddc1c1fcba 100644
--- a/docs/document/content/features/test-engine/integration-test-engine.en.md
+++ b/docs/document/content/features/test-engine/integration-test-engine.en.md
@@ -12,12 +12,12 @@ The `Parameterized` in JUnit will collect all test data, and pass to test method
 ### Configuration
  
   - environment type
-    - /shardingsphere-test-suite/src/test/resources/integrate/env-native.properties
-    - /shardingsphere-test-suite/src/test/resources/integrate/env/`SQL-TYPE`/dataset.xml
-    - /shardingsphere-test-suite/src/test/resources/integrate/env/`SQL-TYPE`/schema.xml
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/env-native.properties
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/env/`SQL-TYPE`/dataset.xml
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/env/`SQL-TYPE`/schema.xml
   - test case type
-    - /shardingsphere-test-suite/src/test/resources/integrate/cases/`SQL-TYPE`/`SQL-TYPE`-integrate-test-cases.xml
-    - /shardingsphere-test-suite/src/test/resources/integrate/cases/`SQL-TYPE`/dataset/`FEATURE-TYPE`/*.xml
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/cases/`SQL-TYPE`/`SQL-TYPE`-integrate-test-cases.xml
+    - /shardingsphere-integration-test-suite/src/test/resources/integrate/cases/`SQL-TYPE`/dataset/`FEATURE-TYPE`/*.xml
   - sql-case 
     - /sharding-sql-test/src/main/resources/sql/sharding/`SQL-TYPE`/*.xml
 
@@ -25,7 +25,7 @@ The `Parameterized` in JUnit will collect all test data, and pass to test method
 
 Integration test depends on existed database environment, developer need to setup the configuration file for corresponding database to test: 
 
-Firstly, setup configuration file `/shardingsphere-test-suite/src/test/resources/integrate/env-native.properties`, for example: 
+Firstly, setup configuration file `/shardingsphere-integration-test-suite/src/test/resources/integrate/env-native.properties`, for example: 
 
 ```properties
 # the switch for PK, concurrent, column index testing and so on
@@ -62,7 +62,7 @@ it.oracle.username=jdbc
 it.oracle.password=jdbc
 ```
 
-Secondly, setup configuration file `/shardingsphere-test-suite/src/test/resources/integrate/env/SQL-TYPE/dataset.xml`. 
+Secondly, setup configuration file `/shardingsphere-integration-test-suite/src/test/resources/integrate/env/SQL-TYPE/dataset.xml`. 
 Developer can set up metadata and expected data to start the data initialization in `dataset.xml`. For example: 
 
 ```xml
@@ -89,8 +89,8 @@ Developer can customize DDL to create databases and tables in `schema.xml`.
 
 ### Assertion Configuration
 
-So far have confirmed what kind of sql execute in which environment in upon config, here define the data for assert.
-There are two kinds of config for assert, one is at `/shardingsphere-test-suite/src/test/resources/integrate/cases/SQL-TYPE/SQL-TYPE-integrate-test-cases.xml`.
+So far have confirmed what kind of sql execute in which environment in upon configuration, here define the data for assert.
+There are two kinds of config for assert, one is at `/shardingsphere-integration-test-suite/src/test/resources/integrate/cases/SQL-TYPE/SQL-TYPE-integrate-test-cases.xml`.
 This file just like an index, defined the sql, parameters and expected index position for execution. the SQL is the value for `sql-case-id`. For example: 
 
 ```xml
@@ -102,7 +102,7 @@ This file just like an index, defined the sql, parameters and expected index pos
 </integrate-test-cases>
 ```
 
-Another kind of config for assert is the data, as known as the corresponding expected-data-file in SQL-TYPE-integrate-test-cases.xml, which is at `/shardingsphere-test-suite/src/test/resources/integrate/cases/SQL-TYPE/dataset/FEATURE-TYPE/*.xml`.  
+Another kind of config for assert is the data, as known as the corresponding expected-data-file in SQL-TYPE-integrate-test-cases.xml, which is at `/shardingsphere-integration-test-suite/src/test/resources/integrate/cases/SQL-TYPE/dataset/FEATURE-TYPE/*.xml`.  
 This file is very like the dataset.xml mentioned before, and the difference is that expected-data-file contains some other assert data, such as the return value after a sql execution. For examples:  
 
 ```xml
