commit c602ddc6cbc09f9c63559e43c3064fb00dd74f01
Author: zhaojinchao <zhaojinchao@apache.org>
Date:   Tue Jul 12 14:20:32 2022 +0800

    Refactor data source document (#19054)

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.cn.md
index 019ff036fe9..692da145ba4 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.cn.md
@@ -4,31 +4,51 @@ weight = 2
 chapter = true
 +++
 
+## 背景信息
+
 ShardingSphere-JDBC 支持所有的数据库 JDBC 驱动和连接池。
 
-## 配置示例
+本节将介绍，通过 `JAVA API` 的方式配置数据源。
 
-示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。当使用 ShardingSphere JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。
+## 操作步骤
 
-```java
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-
-// 配置第 1 个数据源
-HikariDataSource dataSource1 = new HikariDataSource();
-dataSource1.setDriverClassName("com.mysql.jdbc.Driver");
-dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
-dataSource1.setUsername("root");
-dataSource1.setPassword("");
-dataSourceMap.put("ds_1", dataSource1);
-
-// 配置第 2 个数据源
-HikariDataSource dataSource2 = new HikariDataSource();
-dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
-dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
-dataSource2.setUsername("root");
-dataSource2.setPassword("");
-dataSourceMap.put("ds_2", dataSource2);
-
-// 配置其他数据源
-...
+### 1. 引入 Maven 依赖
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
+    <version>${latest.release.version}</version>
+</dependency>
 ```
+
+> 注意：请将 `${latest.release.version}` 更改为实际的版本号。
+
+## 配置示例
+
+```java
+ModeConfiguration modeConfig = // 构建运行模式
+Map<String, DataSource> dataSourceMap = createDataSources();
+Collection<RuleConfiguration> ruleConfigs = ... // 构建具体规则
+Properties props = ... // 构建属性配置
+DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(databaseName, modeConfig, dataSourceMap, ruleConfigs, props);
+
+private Map<String, DataSource> createDataSources() {
+    Map<String, DataSource> dataSourceMap = new HashMap<>();
+    // 配置第 1 个数据源
+    HikariDataSource dataSource1 = new HikariDataSource();
+    dataSource1.setDriverClassName("com.mysql.jdbc.Driver");
+    dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
+    dataSource1.setUsername("root");
+    dataSource1.setPassword("");
+    dataSourceMap.put("ds_1", dataSource1);
+    
+    // 配置第 2 个数据源
+    HikariDataSource dataSource2 = new HikariDataSource();
+    dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
+    dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
+    dataSource2.setUsername("root");
+    dataSource2.setPassword("");
+    dataSourceMap.put("ds_2", dataSource2);
+}
+```
\ No newline at end of file
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.en.md
index f0d3900b1de..31cfa5b7ed6 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/java-api/data-source.en.md
@@ -4,31 +4,51 @@ weight = 2
 chapter = true
 +++
 
-ShardingSphere-JDBC Supports all JDBC drivers and database connection pools.
+## Background
 
-## Example
+ShardingSphere-JDBC supports all database JDBC drivers and connection pools.
 
-In this example, the database driver is MySQL, and connection pool is HikariCP, which can be replaced with other database drivers and connection pools. When using ShardingSphere JDBC, the property name of the JDBC pool depends on the definition of the respective JDBC pool, and is not defined by ShardingSphere. For related processing, please refer to the class `org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`.
+This section describes how to configure data sources through the `JAVA API`.
+
+## Procedure
+
+### 1. Import Maven dependency.
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core</artifactId>
+    <version>${latest.release.version}</version>
+</dependency>
+```
+
+> Notice: Please change `${latest.release.version}` to the actual version.
+
+## Sample
 
 ```java
-Map<String, DataSource> dataSourceMap = new HashMap<>();
-
-// Configure the 1st data source
-HikariDataSource dataSource1 = new HikariDataSource();
-dataSource1.setDriverClassName("com.mysql.jdbc.Driver");
-dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
-dataSource1.setUsername("root");
-dataSource1.setPassword("");
-dataSourceMap.put("ds_1", dataSource1);
-
-// Configure the 2nd data source
-HikariDataSource dataSource2 = new HikariDataSource();
-dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
-dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
-dataSource2.setUsername("root");
-dataSource2.setPassword("");
-dataSourceMap.put("ds_2", dataSource2);
-
-// Configure other data sources
-...
+ModeConfiguration modeConfig = // Build running mode
+Map<String, DataSource> dataSourceMap = createDataSources();
+Collection<RuleConfiguration> ruleConfigs = ... // Build specific rules
+Properties props = ... // Build attribute configuration
+DataSource dataSource = ShardingSphereDataSourceFactory.createDataSource(databaseName, modeConfig, dataSourceMap, ruleConfigs, props);
+
+private Map<String, DataSource> createDataSources() {
+    Map<String, DataSource> dataSourceMap = new HashMap<>();
+    // Configure the 1st data source
+    HikariDataSource dataSource1 = new HikariDataSource();
+    dataSource1.setDriverClassName("com.mysql.jdbc.Driver");
+    dataSource1.setJdbcUrl("jdbc:mysql://localhost:3306/ds_1");
+    dataSource1.setUsername("root");
+    dataSource1.setPassword("");
+    dataSourceMap.put("ds_1", dataSource1);
+    
+    // Configure the 2nd data source
+    HikariDataSource dataSource2 = new HikariDataSource();
+    dataSource2.setDriverClassName("com.mysql.jdbc.Driver");
+    dataSource2.setJdbcUrl("jdbc:mysql://localhost:3306/ds_2");
+    dataSource2.setUsername("root");
+    dataSource2.setPassword("");
+    dataSourceMap.put("ds_2", dataSource2);
+}
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md
index c8d16ed1c2e..66f2293148d 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.cn.md
@@ -4,10 +4,20 @@ weight = 2
 chapter = true
 +++
 
-## 使用本地数据源
+## 背景信息
 
-### 配置项说明
+### 使用本地数据源
 
+示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。当使用 ShardingSphere JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。例如对于 Alibaba Druid 1.2.9 而言，使用`url`代替如下示例中的`jdbc-url`是预期行为。
+
+### 使用 JNDI 数据源
+
+如果计划使用 JNDI 配置数据库，在应用容器（如 Tomcat）中使用 ShardingSphere-JDBC 时，
+可使用 `spring.shardingsphere.datasource.${datasourceName}.jndiName` 来代替数据源的一系列配置。
+
+## 参数解释
+
+### 使用本地数据源
 ```properties
 spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分
 
@@ -19,10 +29,31 @@ spring.shardingsphere.datasource.<actual-data-source-name>.username= # 数据库
 spring.shardingsphere.datasource.<actual-data-source-name>.password= # 数据库密码，以数据库连接池自身配置为准
 spring.shardingsphere.datasource.<actual-data-source-name>.<xxx>= # ... 数据库连接池的其它属性
 ```
+### 使用 JNDI 数据源
 
-### 配置示例
+```properties
+spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分
+# <actual-data-source-name> 表示真实数据源名称
+spring.shardingsphere.datasource.<actual-data-source-name>.jndi-name= # 数据源 JNDI
+```
 
-示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。当使用 ShardingSphere JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。例如对于 Alibaba Druid 1.2.9 而言，使用`url`代替如下示例中的`jdbc-url`是预期行为。
+## 操作步骤
+
+### 1. 引入 MAVEN 依赖
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId>
+    <version>${latest.release.version}</version>
+</dependency>
+```
+
+> 注意：请将 `${latest.release.version}` 更改为实际的版本号。
+
+## 配置示例
+
+### 使用本地数据源
 
 ```properties
 # 配置真实数据源
@@ -42,27 +73,11 @@ spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
 spring.shardingsphere.datasource.ds2.username=root
 spring.shardingsphere.datasource.ds2.password=
 ```
-
-## 使用 JNDI 数据源
-
-如果计划使用 JNDI 配置数据库，在应用容器（如 Tomcat）中使用 ShardingSphere-JDBC 时，
-可使用 `spring.shardingsphere.datasource.${datasourceName}.jndiName` 来代替数据源的一系列配置。
-
-### 配置项说明
-
-```properties
-spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分
-
-# <actual-data-source-name> 表示真实数据源名称
-spring.shardingsphere.datasource.<actual-data-source-name>.jndi-name= # 数据源 JNDI
-```
-
-### 配置示例
+### 使用 JNDI 数据源
 
 ```properties
 # 配置真实数据源
 spring.shardingsphere.datasource.names=ds1,ds2
-
 # 配置第 1 个数据源
 spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
 # 配置第 2 个数据源
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md
index ce1dc22872a..5ad72e00c6a 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source.en.md
@@ -4,38 +4,56 @@ weight = 2
 chapter = true
 +++
 
-## Use Native Data Source
+## Background information
 
-### Configuration Item Explanation
+### Use local datasource
+
+The database driver showed in the example is MySQL and the connection pool is HikariCP, either of which can be replaced by other database drivers and connection pools. When using ShardingSphere JDBC, the property names of the JDBC pools depend on its own definition instead of being fixed by ShardingSphere. See relevant procedures at `org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`. For example, using `url` instead of `jdbc-url` for Alibaba Druid 1.2.9 is the expected behavior.
+
+### Use datasource JNDI
+
+If you wish to use JNDI for database configuration, you can replace a series of datasource configurations with `spring.shardingsphere.datasource.${datasourceName}.jndiName` when you are using ShardingSphere-JDBC on application servers(e.g. Tomcat).
+
+## Parameters Explanation
+
+### Using local datasource
+
+```properties
+spring.shardingsphere.datasource.names= # Actual datasource names. Multiple datasources are separated with comma
+
+# <actual-data-source-name>  to show actual datasource name
+spring.shardingsphere.datasource.<actual-data-source-name>.type= # Full class name of the database connection pool
+spring.shardingsphere.datasource.<actual-data-source-name>.driver-class-name= # Database-driven class name, based on the database connection pool's own configuration
+spring.shardingsphere.datasource.<actual-data-source-name>.jdbc-url= # Database URL connection, in ine with the connection pool's own configuration 
+spring.shardingsphere.datasource.<actual-data-source-name>.username= # database user names，in line with the connection pool's own configuration
+spring.shardingsphere.datasource.<actual-data-source-name>.password= # database password ，in line with the connection pool's own configuration 
+spring.shardingsphere.datasource.<actual-data-source-name>.<xxx>= # ... Other properties of the database connection pool
+```
+
+### Using JNDI datasource
 
 ```properties
-spring.shardingsphere.datasource.names= # Actual data source name, multiple split by `,`
-
-# <actual-data-source-name> indicate name of data source name
-spring.shardingsphere.datasource.<actual-data-source-name>.type= # Full class name of database connection pool
-spring.shardingsphere.datasource.<actual-data-source-name>.driver-class-name= # Class name of database driver, ref property of connection pool
-spring.shardingsphere.datasource.<actual-data-source-name>.jdbc-url= # Database URL, ref property of connection pool
-spring.shardingsphere.datasource.<actual-data-source-name>.username= # Database username, ref property of connection pool
-spring.shardingsphere.datasource.<actual-data-source-name>.password= # Database password, ref property of connection pool
-spring.shardingsphere.datasource.<actual-data-source-name>.<xxx>= # ... Other properties for data source pool
+spring.shardingsphere.datasource.names= # Authentic datasource names. Multiple datasources are separated with comma
+# <actual-data-source-name> to show actual datasource name
+spring.shardingsphere.datasource.<actual-data-source-name>.jndi-name= # datasource JNDI
 ```
 
-### Example
+## Configuration Examples
 
-In this example, the database driver is MySQL, and connection pool is HikariCP, which can be replaced with other database drivers and connection pools. When using ShardingSphere JDBC, the property name of the JDBC pool depends on the definition of the respective JDBC pool, and is not defined by ShardingSphere. For related processing, please refer to the class `org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator` . For example, with Alibaba Druid 1.2.9, using `url` instead of `jdbc-url` in the example below is the expected behavior.
+### Using local datasource
 
 ```properties
-# Configure actual data sources
+# configure actual datasource
 spring.shardingsphere.datasource.names=ds1,ds2
 
-# Configure the 1st data source
+# configure the first datasource
 spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
 spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
 spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1
 spring.shardingsphere.datasource.ds1.username=root
 spring.shardingsphere.datasource.ds1.password=
 
-# Configure the 2nd data source
+# configure the second datasource
 spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
 spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
 spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2
@@ -43,28 +61,13 @@ spring.shardingsphere.datasource.ds2.username=root
 spring.shardingsphere.datasource.ds2.password=
 ```
 
-## Use JNDI Data Source
-
-If developer plan to use ShardingSphere-JDBC in Web Server (such as Tomcat) with JNDI data source,
-`spring.shardingsphere.datasource.${datasourceName}.jndiName` can be used as an alternative to series of configuration of data source.
-
-### Configuration Item Explanation
-
-```properties
-spring.shardingsphere.datasource.names= # Actual data source name, multiple split by `,`
-
-# <actual-data-source-name> indicate name of data source name
-spring.shardingsphere.datasource.<actual-data-source-name>.jndi-name= # JNDI of data source
-```
-
-### Example
+### Using JNDI datasource
 
 ```properties
-# Configure actual data sources
+# configure actual datasource
 spring.shardingsphere.datasource.names=ds1,ds2
-
-# Configure the 1st data source
+# configure the first datasource
 spring.shardingsphere.datasource.ds1.jndi-name=java:comp/env/jdbc/ds1
-# Configure the 2nd data source
+# configure the second datasource
 spring.shardingsphere.datasource.ds2.jndi-name=java:comp/env/jdbc/ds2
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.cn.md
index 2a33d8789f5..184f5023b6b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.cn.md
@@ -4,11 +4,28 @@ weight = 2
 chapter = true
 +++
 
+## 背景信息
+
 任何配置成为 Spring Bean 的数据源对象即可与 ShardingSphere-JDBC 的 Spring 命名空间配合使用。
 
-## 配置示例
+配置示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。
+当使用 ShardingSphere JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。例如对于 Alibaba Druid 1.2.9 而言，使用`url`代替如下示例中的`jdbcUrl`是预期行为。
+
+## 操作步骤
 
-示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。当使用 ShardingSphere JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。例如对于 Alibaba Druid 1.2.9 而言，使用`url`代替如下示例中的`jdbcUrl`是预期行为。
+### 1. 引入 MAVEN 依赖
+
+```xml
+<dependency>
+    <groupId>org.apache.shardingsphere</groupId>
+    <artifactId>shardingsphere-jdbc-core-spring-namespace</artifactId>
+    <version>${latest.release.version}</version>
+</dependency>
+```
+
+> 注意：请将 `${latest.release.version}` 更改为实际的版本号。
+
+## 配置示例
 
 ```xml
 <beans xmlns="http://www.springframework.org/schema/beans"
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.en.md
index fa69d9357fd..0637b2e633b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/spring-namespace/data-source.en.md
@@ -4,11 +4,14 @@ weight = 2
 chapter = true
 +++
 
-Any data source configured as spring bean can be cooperated with spring namespace.
+## Background
 
-## Example
+Any data source object configured as Spring bean can be used with the Spring namespace of ShardingSphere-JDBC Data Planning.
 
-In this example, the database driver is MySQL, and connection pool is HikariCP, which can be replaced with other database drivers and connection pools. When using ShardingSphere JDBC, the property name of the JDBC pool depends on the definition of the respective JDBC pool, and is not defined by ShardingSphere. For related processing, please refer to the class `org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator` . For example, with Alibaba Druid 1.2.9, using `url` instead of `jdbcUrl` in the example below is the expected behavior.
+The database driver in the example is MySQL and the connection pool is HikariCP, both of which can be replaced by other database drivers and connection pools.
+When using ShardingSphere JDBC, the property names of the JDBC pools depend on the definition of JDBC pools themselves respectively, rather than being rigidly defined by ShardingSphere. For relevant processing, you can see reference class `org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`. As for Alibaba Druid 1.2.9, using `url` instead of `jdbcUrl` as in the following example is the expected behavior.
+
+## Configuration Examples
 
 ```xml
 <beans xmlns="http://www.springframework.org/schema/beans"
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/data-source.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/data-source.cn.md
index 39d42b4d53e..d2491567086 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/data-source.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/data-source.cn.md
@@ -4,11 +4,13 @@ weight = 2
 chapter = true
 +++
 
-数据源配置分为单数据源配置和多数据源配置。ShardingSphere-JDBC 支持所有的数据库 JDBC 驱动和连接池。
+## 背景信息
 
-示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。当使用 ShardingSphere JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。例如对于 Alibaba Druid 1.2.9 而言，使用`url`代替如下示例中的`jdbcUrl`是预期行为。
+ShardingSphere-JDBC 支持所有的数据库 JDBC 驱动和连接池。
 
-### 配置项说明
+示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。当使用 ShardingSphere-JDBC 时，JDBC 池的属性名取决于各自 JDBC 池自己的定义，并不由 ShardingSphere 硬定义，相关的处理可以参考类`org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator`。例如对于 Alibaba Druid 1.2.9 而言，使用 `url` 代替如下示例中的 `jdbcUrl` 是预期行为。
+
+## 参数解释
 
 ```yaml
 dataSources: # 数据源配置，可配置多个 <data-source-name>
@@ -20,8 +22,7 @@ dataSources: # 数据源配置，可配置多个 <data-source-name>
     password: # 数据库密码，以数据库连接池自身配置为准
     # ... 数据库连接池的其它属性
 ```
-
-### 配置示例
+## 配置示例
 
 ```yaml
 dataSources:
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/data-source.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/data-source.en.md
index b6106cc7fd2..c3a10b4c73b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/data-source.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/data-source.en.md
@@ -4,25 +4,27 @@ weight = 2
 chapter = true
 +++
 
-It is divided into single data source configuration and multi data source configuration.
+## Background
+
 ShardingSphere-JDBC Supports all JDBC drivers and database connection pools.
 
-In this example, the database driver is MySQL, and connection pool is HikariCP, which can be replaced with other database drivers and connection pools. When using ShardingSphere JDBC, the property name of the JDBC pool depends on the definition of the respective JDBC pool, and is not defined by ShardingSphere. For related processing, please refer to the class `org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator` . For example, with Alibaba Druid 1.2.9, using `url` instead of `jdbcUrl` in the example below is the expected behavior.
+In this example, the database driver is MySQL, and the connection pool is HikariCP, which can be replaced with other database drivers and connection pools.
+When using ShardingSphere JDBC, the property name of the JDBC pool depends on the definition of the respective JDBC pool and is not defined by ShardingSphere. For related processing, please refer to the class org.apache.shardingsphere.infra.datasource.pool.creator.DataSourcePoolCreator.
+For example, with Alibaba Druid 1.2.9, using url instead of jdbcUrl in the example below is the expected behavior.
 
-### Configuration Item Explanation
+## Parameters
 
 ```yaml
 dataSources: # Data sources configuration, multiple <data-source-name> available
   <data-source-name>: # Data source name
     dataSourceClassName: # Data source class name
-    driverClassName: # Class name of database driver, ref property of connection pool
-    jdbcUrl: # Database URL, ref property of connection pool
-    username: # Database username, ref property of connection pool
-    password: # Database password, ref property of connection pool
-    # ... Other properties for data source pool
+    driverClassName: # The database driver class name is subject to the configuration of the database connection pool itself
+    jdbcUrl: # The database URL connection is subject to the configuration of the database connection pool itself
+    username: # Database user name, subject to the configuration of the database connection pool itself
+    password: # The database password is subject to the configuration of the database connection pool itself
+    # ... Other properties of data source pool
 ```
-
-### Example
+## Sample
 
 ```yaml
 dataSources:
@@ -38,6 +40,6 @@ dataSources:
     jdbcUrl: jdbc:mysql://localhost:3306/ds_2
     username: root
     password:
-  
+      
   # Configure other data sources
 ```
