commit 7d49a3353bab748ba30d11f9f9e024402018d057
Author: Hongsheng Zhong <sandynz@126.com>
Date:   Wed Dec 29 15:09:27 2021 +0800

    Update scaling doc for 5.1.0 release (#14407)

diff --git a/docs/document/content/dev-manual/scaling.cn.md b/docs/document/content/dev-manual/scaling.cn.md
index 623e3be850..588b5501f0 100644
--- a/docs/document/content/dev-manual/scaling.cn.md
+++ b/docs/document/content/dev-manual/scaling.cn.md
@@ -8,30 +8,62 @@ chapter = true
 ## ScalingEntry
 
 | *SPI 名称*             | *详细说明*                    |
-| ---------------------- | ---------------------------- |
+| ---------------------- | --------------------------- |
 | ScalingEntry           | 弹性伸缩入口                  |
 
 | *已知实现类*            | *详细说明*                    |
-| ---------------------- | ---------------------------- |
+| ---------------------- | --------------------------- |
 | MySQLScalingEntry      | 基于 MySQL 的弹性伸缩入口      |
 | PostgreSQLScalingEntry | 基于 PostgreSQL 的弹性伸缩入口 |
+| OpenGaussScalingEntry  | 基于 openGauss 的弹性伸缩入口  |
 
-## ScalingClusterAutoSwitchAlgorithm
+## JobRateLimitAlgorithm
 
 | *SPI 名称*                                   | *详细说明*                                   |
 | ------------------------------------------- | ------------------------------------------- |
-| ScalingClusterAutoSwitchAlgorithm           | 迁移任务完成度自动检测算法                      |
+| JobRateLimitAlgorithm                       | 任务限流算法                                  |
 
 | *已知实现类*                                  | *详细说明*                                   |
 | ------------------------------------------- | ------------------------------------------- |
-| ScalingIdleClusterAutoSwitchAlgorithm       | 基于增量迁移任务空闲时长的检测算法                |
+| SourceJobRateLimitAlgorithm                 | 源端限流算法                                  |
 
-## ScalingDataConsistencyCheckAlgorithm
+## JobCompletionDetectAlgorithm
 
 | *SPI 名称*                                   | *详细说明*                                   |
 | ------------------------------------------- | ------------------------------------------- |
-| ScalingDataConsistencyCheckAlgorithm        | 数据一致性校验算法                             |
+| JobCompletionDetectAlgorithm                | 作业是否接近完成检测算法                        |
 
 | *已知实现类*                                  | *详细说明*                                   |
 | ------------------------------------------- | ------------------------------------------- |
-| ScalingDefaultDataConsistencyCheckAlgorithm | 默认数据一致性校验算法。对全量数据做CRC32计算。    |
+| IdleRuleAlteredJobCompletionDetectAlgorithm | 基于增量迁移任务空闲时长的检测算法                |
+
+## RowBasedJobLockAlgorithm
+
+| *SPI 名称*                                   | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| RowBasedJobLockAlgorithm                    | 用于保护记录的任务锁算法                        |
+
+| *已知实现类*                                  | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| DefaultSourceWritingStopAlgorithm           | 源端停写算法默认实现                           |
+
+## DataConsistencyCheckAlgorithm
+
+| *SPI 名称*                                   | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| DataConsistencyCheckAlgorithm               | 数据一致性校验算法                             |
+
+| *已知实现类*                                  | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| DataMatchDataConsistencyCheckAlgorithm      | 基于数据匹配的一致性校验算法                    |
+| CRC32MatchDataConsistencyCheckAlgorithm     | 基于数据CRC32匹配的一致性校验算法               |
+
+## RuleBasedJobLockAlgorithm
+
+| *SPI 名称*                                   | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| RuleBasedJobLockAlgorithm                   | 用于保护规则的任务锁算法                        |
+
+| *已知实现类*                                  | *详细说明*                                   |
+| ------------------------------------------- | ------------------------------------------- |
+| DefaultMetadataCheckoutLockAlgorithm        | 切换元数据锁算法默认实现                        |
diff --git a/docs/document/content/dev-manual/scaling.en.md b/docs/document/content/dev-manual/scaling.en.md
index ab046335ae..0d632dfaca 100644
--- a/docs/document/content/dev-manual/scaling.en.md
+++ b/docs/document/content/dev-manual/scaling.en.md
@@ -15,23 +15,55 @@ chapter = true
 | ---------------------- | --------------------------- |
 | MySQLScalingEntry      | MySQL entry of scaling      |
 | PostgreSQLScalingEntry | PostgreSQL entry of scaling |
+| OpenGaussScalingEntry  | openGauss entry of scaling |
 
-## ScalingClusterAutoSwitchAlgorithm
+## JobRateLimitAlgorithm
+
+| *SPI Name*                                   | *Description*                              |
+| ------------------------------------------- | ------------------------------------------- |
+| JobRateLimitAlgorithm                       | job rate limit algorithm                    |
+
+| *Implementation Class*                      | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| SourceJobRateLimitAlgorithm                 | rate limit algorithm for source side        |
+
+## JobCompletionDetectAlgorithm
+
+| *SPI Name*                                  | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| JobCompletionDetectAlgorithm                | Job completion check algorithm              |
+
+| *Implementation Class*                      | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| IdleRuleAlteredJobCompletionDetectAlgorithm | Incremental task idle time based algorithm  |
+
+## RowBasedJobLockAlgorithm
+
+| *SPI Name*                                  | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| RowBasedJobLockAlgorithm                    | Job lock algorithm for protecting row       |
+
+| *Implementation Class*                      | *Description*                               |
+| ------------------------------------------- | ------------------------------------------- |
+| DefaultSourceWritingStopAlgorithm           | Default lock implementation for stopping source writing |
+
+## DataConsistencyCheckAlgorithm
 
 | *SPI Name*                                  | *Description*                               |
 | ------------------------------------------- | ------------------------------------------- |
-| ScalingClusterAutoSwitchAlgorithm           | Scaling job completion check algorithm      |
+| DataConsistencyCheckAlgorithm               | Data consistency check algorithm on source and target database cluster |
 
 | *Implementation Class*                      | *Description*                               |
 | ------------------------------------------- | ------------------------------------------- |
-| ScalingIdleClusterAutoSwitchAlgorithm       | Incremental task idle time based algorithm  |
+| DataMatchDataConsistencyCheckAlgorithm      | Records content match implementation        |
+| CRC32MatchDataConsistencyCheckAlgorithm     | Records CRC32 match implementation          |
 
-## ScalingDataConsistencyCheckAlgorithm
+## RuleBasedJobLockAlgorithm
 
 | *SPI Name*                                  | *Description*                               |
 | ------------------------------------------- | ------------------------------------------- |
-| ScalingDataConsistencyCheckAlgorithm        | Data consistency check algorithm on source and target database cluster |
+| RuleBasedJobLockAlgorithm                   | Job lock algorithm for protecting rule      |
 
 | *Implementation Class*                      | *Description*                               |
 | ------------------------------------------- | ------------------------------------------- |
-| ScalingDefaultDataConsistencyCheckAlgorithm | Default implementation with CRC32 of all records. |
+| DefaultMetadataCheckoutLockAlgorithm        | Default lock implementation for metadata checkout |
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/build.cn.md b/docs/document/content/user-manual/shardingsphere-scaling/build.cn.md
index 20dbfd3bbb..f56f951e3f 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/build.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/build.cn.md
@@ -18,23 +18,16 @@ mvn clean install -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Drat.skip=tr
 
 或者通过[下载页面]( https://shardingsphere.apache.org/document/current/cn/downloads/ )获取安装包。
 
-> Scaling还是实验性质的功能，建议使用master分支最新版本，点击此处[下载最新版本]( https://github.com/apache/shardingsphere#nightly-builds )
+> Scaling还是实验性质的功能，建议使用master分支最新版本，点击此处[下载每日构建版本]( https://github.com/apache/shardingsphere#nightly-builds )
 
 2. 解压缩 proxy 发布包，修改配置文件`conf/config-sharding.yaml`。详情请参见[proxy启动手册](/cn/user-manual/shardingsphere-proxy/startup/bin/)。
 
-3. 修改配置文件 `conf/server.yaml`，目前 `mode` 必须是 `Cluster`，需要提前启动对应的注册中心。
-开启 `scaling` 和 `mode` 之后的配置：
-```yaml
-scaling:
-  blockQueueSize: 10000
-  workerThread: 40
-  clusterAutoSwitchAlgorithm:
-    type: IDLE
-    props:
-      incremental-task-idle-minute-threshold: 30
-  dataConsistencyCheckAlgorithm:
-    type: DEFAULT
+3. 修改配置文件 `conf/server.yaml`，详情请参见[模式配置](/cn/user-manual/shardingsphere-jdbc/yaml-config/mode/)。
+
+目前 `mode` 必须是 `Cluster`，需要提前启动对应的注册中心。
 
+配置示例：
+```yaml
 mode:
   type: Cluster
   repository:
@@ -49,21 +42,77 @@ mode:
   overwrite: false
 ```
 
-打开`clusterAutoSwitchAlgorithm`配置代表开启自动检测任务是否完成及切换配置，目前系统提供了`IDLE`类型实现。
+4. 修改配置文件 `conf/config-sharding.yaml` 的 `scalingName` 和 `scaling` 部分。
 
-打开`dataConsistencyCheckAlgorithm`配置设置数据校验算法，关闭该配置系统将不进行数据校验。目前系统提供了`DEFAULT`类型实现，`DEFAULT`算法目前支持的数据库：`MySQL`。其他数据库还不能打开这个配置项，相关支持还在开发中。
+配置项说明：
+```yaml
+rules:
+- !SHARDING
+  # 忽略的配置
+  
+  scalingName: # 启用的弹性伸缩配置名称
+  scaling:
+    <scaling-action-config-name> (+):
+      blockQueueSize: # 数据通道阻塞队列大小
+      workerThread: # 给全量数据摄取和数据导入使用的工作线程池大小
+      readBatchSize: # 一次查询操作返回的最大记录数
+      rateLimiter: # 限流算法
+        type: # 算法类型。可选项：SOURCE
+        props: # 算法属性
+          qps: # QPS属性。适用算法类型：SOURCE
+      completionDetector: # 作业是否接近完成检测算法。如果不配置，那么系统无法自动进行后续步骤，可以通过 DistSQL 手动操作。
+        type: # 算法类型。可选项：IDLE
+        props: # 算法属性
+          incremental-task-idle-minute-threshold: # 如果增量同步任务不再活动超过一定时间，那么可以认为增量同步任务接近完成。适用算法类型：IDLE
+      sourceWritingStopper: # 源端停写算法。如果不配置，那么系统会跳过这个步骤。
+        type: # 算法类型。可选项：DEFAULT
+      dataConsistencyChecker: # 数据一致性校验算法。如果不配置，那么系统会跳过这个步骤。
+        type: # 算法类型。可选项：DATA_MATCH, CRC32_MATCH
+        props: # 算法属性
+          chunk-size: # 一次查询操作返回的最大记录数
+      checkoutLocker: # 元数据切换算法。如果不配置，那么系统会跳过这个步骤。
+        type: # 算法类型。可选项：DEFAULT
+```
 
-可以通过`ScalingClusterAutoSwitchAlgorithm`接口自定义一个SPI实现，通过`ScalingDataConsistencyCheckAlgorithm`接口自定义一个SPI实现。详情请参见[开发者手册#弹性伸缩](/cn/dev-manual/scaling/)。
+配置示例：
+```yaml
+rules:
+- !SHARDING
+  # 忽略的配置
+  
+  scalingName: default_scaling
+  scaling:
+    default_scaling:
+      blockQueueSize: 10000
+      workerThread: 40
+      readBatchSize: 1000
+      rateLimiter:
+        type: SOURCE
+        props:
+          qps: 50
+      completionDetector:
+        type: IDLE
+        props:
+          incremental-task-idle-minute-threshold: 30
+      sourceWritingStopper:
+        type: DEFAULT
+      dataConsistencyChecker:
+        type: DATA_MATCH
+        props:
+          chunk-size: 1000
+      checkoutLocker:
+        type: DEFAULT
+```
 
-`overwrite` 字段含义为：控制配置文件是否覆盖注册中心元数据，一般可在测试时使用。
+以上的 `rateLimiter`，`completionDetector`，`sourceWritingStopper`，`dataConsistencyChecker` 和 `checkoutLocker` 都可以通过实现SPI自定义。可以参考现有实现，详情请参见[开发者手册#弹性伸缩](/cn/dev-manual/scaling/)。
 
-3. 启动 ShardingSphere-Proxy：
+5. 启动 ShardingSphere-Proxy：
 
 ```
 sh bin/start.sh
 ```
 
-4. 查看 proxy 日志 `logs/stdout.log`，看到日志中出现：
+6. 查看 proxy 日志 `logs/stdout.log`，看到日志中出现：
 
 ```
 [INFO ] [main] o.a.s.p.frontend.ShardingSphereProxy - ShardingSphere-Proxy start success
@@ -76,18 +125,3 @@ sh bin/start.sh
 ```
  sh bin/stop.sh
 ```
-
-## 应用配置项
-
-应用现有配置项如下，相应的配置可在 `conf/server.yaml` 中修改：
-
-| 一级Key  | 二级Key                        | 三级Key                                                      | 说明                                                          | 默认值     |
-| ------- | ----------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | --------- |
-| scaling |                               | blockQueueSize                                               | 数据传输通道队列大小                                             | 10000     |
-|         |                               | workerThread                                                 | 工作线程池大小，允许同时运行的迁移任务线程数                         | 40        |
-|         | clusterAutoSwitchAlgorithm    | type                                                         | 开启自动检测任务是否完成及切换配置，目前系统提供了IDLE类型实现         |           |
-|         |                               | props:incremental-task-idle-minute-threshold                 | 增量同步空闲时间最大值，超过该值，进入下一状态                       | 30 (分钟)  |
-|         | dataConsistencyCheckAlgorithm | type                                                         | 配置数据校验算法，关闭该配置系统将不进行数据校验。目前系统提供了DEFAULT类型实现，DEFAULT算法目前支持的数据库：MySQL。其他数据库还不能打开这个配置项，相关支持还在开发中。详情请参见[开发者手册#弹性伸缩#数据一致性算法](/cn/dev-manual/scaling/#scalingdataconsistencycheckalgorithm)。 |          |
-| mode    | type                          | Cluster                                                      |                                                               |           |
-|         | repository                    | type、props                                                  | 注册中心，当前支持Zookeeper，Etcd                                 |           |
-|         | overwrite                     |                                                              | 控制配置文件是否覆盖注册中心元数据，一般可在测试时使用。               | false     |
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/build.en.md b/docs/document/content/user-manual/shardingsphere-scaling/build.en.md
index 6efd23bead..57c29ef474 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/build.en.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/build.en.md
@@ -18,24 +18,15 @@ The binary packages:
 
 Or get binary package from [download page]( https://shardingsphere.apache.org/document/current/en/downloads/ ).
 
-> Scaling is an experimental feature, if scaling job fail, you could try nightly version, click here to [download latest version]( https://github.com/apache/shardingsphere#nightly-builds ).
+> Scaling is an experimental feature, if scaling job fail, you could try nightly version, click here to [download nightly build]( https://github.com/apache/shardingsphere#nightly-builds ).
 
 2. Unzip the proxy distribution package, modify the configuration file `conf/config-sharding.yaml`. Please refer to [proxy startup manual](/en/user-manual/shardingsphere-proxy/startup/bin/) for more details.
 
-3. Modify the configuration file `conf/server.yaml`. Type of `mode` must be `Cluster` for now, please start the registry center before running proxy.
+3. Modify the configuration file `conf/server.yaml`. Please refer to [Mode Configuration](/en/user-manual/shardingsphere-jdbc/yaml-config/mode/) for more details.
+Type of `mode` must be `Cluster` for now, please start the registry center before running proxy.
 
-Configuration after enabling `scaling` and `mode`:
+Configuration Example:
 ```yaml
-scaling:
-  blockQueueSize: 10000
-  workerThread: 40
-  clusterAutoSwitchAlgorithm:
-    type: IDLE
-    props:
-      incremental-task-idle-minute-threshold: 30
-  dataConsistencyCheckAlgorithm:
-    type: DEFAULT
-
 mode:
   type: Cluster
   repository:
@@ -50,19 +41,77 @@ mode:
   overwrite: false
 ```
 
-Enable `clusterAutoSwitchAlgorithm` indicate system will detect when scaling job is finished and switch cluster configuration automatically. Currently, system supply `IDLE` type implementation.
+4. Modify `scalingName` and `scaling` configuration in `conf/config-sharding.yaml`. 
+
+Configuration Items Explanation:
+```yaml
+rules:
+- !SHARDING
+  # ignored configuration
+  
+  scalingName: # Enabled scaling action config name
+  scaling:
+    <scaling-action-config-name> (+):
+      blockQueueSize: # Data channel blocking queue size
+      workerThread: # Worker thread pool size for inventory data ingestion and data importing
+      readBatchSize: # Maximum records count of a query operation returning
+      rateLimiter: # Rate limit algorithm
+        type: # Algorithm type. Options: SOURCE
+        props: # Algorithm properties
+          qps: # QPS property. Available for types: SOURCE
+      completionDetector: # Completion detect algorithm. If it's not configured, then system won't continue to do next steps automatically.
+        type: # Algorithm type. Options: IDLE
+        props: # Algorithm properties
+          incremental-task-idle-minute-threshold: # If incremental tasks is idle more than so much minutes, then it could be considered as almost completed. Available for types: IDLE
+      sourceWritingStopper: # Lock algorithm for stopping source writing. If it's not configured, then system will skip this step.
+        type: # Algorithm type. Options: DEFAULT
+      dataConsistencyChecker: # Data consistency check algorithm. If it's not configured, then system will skip this step.
+        type: # Algorithm type. Options: DATA_MATCH, CRC32_MATCH
+        props: # Algorithm properties
+          chunk-size: # Maximum records count of a query operation for check
+      checkoutLocker: # Lock algorithm for metadata checkout. If it's not configured, then system will skip this step.
+        type: # Algorithm type. Options: DEFAULT
+```
 
-Enable `dataConsistencyCheckAlgorithm` indicate system will use this defined algorithm to do data consistency check when it's emitted, if it's disabled, then data consistency check will be ignored. Currently, system supply `DEFAULT` type implementation, it supports following database types: `MySQL`, you could not enable it if you're running other database types for now, support of other database types is under development.
+Configuration Example:
+```yaml
+rules:
+- !SHARDING
+  # ignored configuration
+  
+  scalingName: default_scaling
+  scaling:
+    default_scaling:
+      blockQueueSize: 10000
+      workerThread: 40
+      readBatchSize: 1000
+      rateLimiter:
+        type: SOURCE
+        props:
+          qps: 50
+      completionDetector:
+        type: IDLE
+        props:
+          incremental-task-idle-minute-threshold: 30
+      sourceWritingStopper:
+        type: DEFAULT
+      dataConsistencyChecker:
+        type: DATA_MATCH
+        props:
+          chunk-size: 1000
+      checkoutLocker:
+        type: DEFAULT
+```
 
-You could customize an auto switch algorithm by implementing `ScalingClusterAutoSwitchAlgorithm` SPI interface, and customize a check algorithm by implementing `ScalingDataConsistencyCheckAlgorithm` SPI interface. Please refer to [Dev Manual#Scaling](/en/dev-manual/scaling/) for more details.
+You could customize `rateLimiter`, `completionDetector`, `sourceWritingStopper`, `dataConsistencyChecker` and `checkoutLocker` algorithm by implementing SPI. Current implementation could be referenced, please refer to [Dev Manual#Scaling](/en/dev-manual/scaling/) for more details.
 
-3. Start up ShardingSphere-Proxy:
+5. Start up ShardingSphere-Proxy:
 
 ```
 sh bin/start.sh
 ```
 
-4. Check proxy log `logs/stdout.log`:
+6. Check proxy log `logs/stdout.log`:
 
 ```
 [INFO ] [main] o.a.s.p.frontend.ShardingSphereProxy - ShardingSphere-Proxy start success
@@ -75,18 +124,3 @@ It means `proxy` start up successfully.
 ```
 sh bin/stop.sh
 ```
-
-## Configuration
-
-The existing configuration items are as follows, we can modify them in `conf/server.yaml`:
-
-| 1st key | 2nd key                       | 3rd key                                      | Desc                                                                                         | Default value   |
-| ------- | ----------------------------- | -------------------------------------------- | -------------------------------------------------------------------------------------------- | --------------- |
-| scaling |                               | blockQueueSize                               | Queue size of data transmission channel                                                      | 10000           |
-|         |                               | workerThread                                 | Worker thread pool size, the number of migration task threads allowed to run concurrently    | 40              |
-|         | clusterAutoSwitchAlgorithm    | type                                         | Enable automatic detection of task completion and switch configuration, currently the system provides IDLE type implementation |           |
-|         |                               | props:incremental-task-idle-minute-threshold | The maximum idle time of incremental synchronization, if it exceeds this value, enter the next state    | 30 (minutes) |
-|         | dataConsistencyCheckAlgorithm | type                                         | Configure the dataConsistencyCheckAlgorithm, configure it to enable data consistency check. At present, system provides `DEFAULT` type of implementation, only MySQL implement `DEFAULT` algorithm for now. Please refer to [Data consistency check algorithm](/en/dev-manual/scaling/#scalingdataconsistencycheckalgorithm) for more details. |           |
-| mode    | type                          | Cluster                                      |                                                                                              |                |
-|         | repository                    | type, props                                  | registry center, now support Zookeeper, Etcd                                                 |                |
-|         | overwrite                     |                                              | Control whether the configuration file covers the registry center metadata, which can generally be used during testing. | false     |
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md b/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
index 0bb2d9782c..b1726df5ea 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/usage.cn.md
@@ -33,7 +33,8 @@ weight = 2
 | 全量迁移               | 支持           | 支持           | 支持           |
 | 增量迁移               | 支持           | 支持           | 支持           |
 | 自动建表               | 支持           | 不支持         | 支持           |
-| 默认数据一致性校验算法   | 支持           | 不支持         | 不支持          |
+| DATA_MATCH一致性校验   | 支持           | 支持           | 支持           |
+| CRC32_MATCH一致性校验  | 支持           | 不支持         | 不支持          |
 
 **注意**：
 
@@ -41,16 +42,25 @@ weight = 2
 
 ### 权限要求
 #### MySQL
-MySQL 需要开启 `binlog`，且迁移时所使用用户需要赋予 Replication 相关权限。
-执行以下命令，确认是否有开启binlog：
+1. 开启 `binlog`
 
+MySQL 5.7 `my.cnf` 示例配置：
+```
+[mysqld]
+server-id=1
+log-bin=mysql-bin
+binlog-format=row
+binlog-row-image=full
+max_connections=600
+```
+
+执行以下命令，确认是否有开启binlog：
 ```
 show variables like '%log_bin%';
 show variables like '%binlog%';
 ```
 
 如以下显示，则说明binlog已开启
-
 ```
 +-----------------------------------------+---------------------------------------+
 | Variable_name                           | Value                                 |
@@ -61,11 +71,14 @@ show variables like '%binlog%';
 +-----------------------------------------+---------------------------------------+
 ```
 
-执行以下命令，查看该用户是否有迁移权限
+2. 赋予 MySQL 账号 Replication 相关权限。
+
+执行以下命令，查看该用户是否有迁移权限：
 ```
 SHOW GRANTS 'user';
 ```
 
+示例结果：
 ```
 +------------------------------------------------------------------------------+
 |Grants for ${username}@${host}                                                |
@@ -76,7 +89,18 @@ SHOW GRANTS 'user';
 ```
 
 #### PostgreSQL
-PostgreSQL 需要开启 [test_decoding](https://www.postgresql.org/docs/9.4/test-decoding.html)
+
+1. 开启 [test_decoding](https://www.postgresql.org/docs/9.4/test-decoding.html)
+
+2. 调整 WAL 配置
+
+`postgresql.conf` 示例配置：
+```
+wal_level = logical
+max_replication_slots = 10
+```
+
+详情请参见 [Write Ahead Log](https://www.postgresql.org/docs/9.6/runtime-config-wal.html) 和 [Replication](https://www.postgresql.org/docs/9.6/runtime-config-replication.html )。
 
 ### DistSQL 自动模式接口
 
@@ -112,16 +136,27 @@ mysql> preview select count(1) from t_order;
 示例：
 ```sql
 ADD RESOURCE ds_2 (
-    URL="jdbc:mysql://127.0.0.1:3306/db2?serverTimezone=UTC&useSSL=false",
+    URL="jdbc:mysql://127.0.0.1:3306/scaling_ds_2?serverTimezone=UTC&useSSL=false",
+    USER=root,
+    PASSWORD=root,
+    PROPERTIES("maximumPoolSize"=10,"idleTimeout"="30000")
+), ds_3 (
+    URL="jdbc:mysql://127.0.0.1:3306/scaling_ds_3?serverTimezone=UTC&useSSL=false",
+    USER=root,
+    PASSWORD=root,
+    PROPERTIES("maximumPoolSize"=10,"idleTimeout"="30000")
+), ds_4 (
+    URL="jdbc:mysql://127.0.0.1:3306/scaling_ds_4?serverTimezone=UTC&useSSL=false",
     USER=root,
     PASSWORD=root,
     PROPERTIES("maximumPoolSize"=10,"idleTimeout"="30000")
 );
--- ds_3, ds_4
 ```
 
 2. 修改分片规则
 
+目前只有通过执行 `ALTER SHARDING TABLE RULE` DistSQL 来触发迁移。
+
 详情请参见[RDL#数据分片](/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding/)。
 
 `SHARDING TABLE RULE`支持2种类型：`TableRule`和`AutoTableRule`。以下是两种分片规则的对比：
@@ -137,12 +172,12 @@ DistSQL 字段含义和 YAML 配置保持一致，详情请参见[YAML配置#数
 ALTER SHARDING TABLE RULE t_order (
 RESOURCES(ds_2, ds_3, ds_4),
 SHARDING_COLUMN=order_id,
-TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=10)),
+TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=6)),
 GENERATED_KEY(COLUMN=order_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
 );
 ```
 
-比如说修改了 `RESOURCES` 和 `sharding-count` 会触发迁移。
+`RESOURCES` 从 `(ds_0, ds_1)` 改为了 `(ds_2, ds_3, ds_4)`，`sharding-count` 从 `4` 改为了 `6`，会触发迁移。
 
 `TableRule`修改示例：
 ```sql
@@ -163,7 +198,7 @@ GENERATED_KEY(COLUMN=order_item_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=12
 );
 ```
 
-比如说修改了 `database_inline` 的 `algorithm-expression` 和 `t_order` 的 `DATANODES` 会触发迁移。
+`database_inline` 的 `algorithm-expression` 从 `ds_${user_id % 2}` 改为 `ds_${user_id % 3 + 2}`，`t_order` 的 `DATANODES` 从 `ds_${0..1}.t_order_${0..1}` 改为 `ds_${2..4}.t_order_${0..1}`，会触发迁移。
 
 #### 查询所有迁移任务
 
@@ -180,8 +215,8 @@ mysql> show scaling list;
 +--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
 | id                 | tables                | sharding_total_count | active | create_time         | stop_time           |
 +--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
-| 659853312085983232 | t_order_item, t_order | 2                    | 0      | 2021-10-26 20:21:31 | 2021-10-26 20:24:01 |
-| 660152090995195904 | t_order_item, t_order | 2                    | 0      | 2021-10-27 16:08:43 | 2021-10-27 16:11:00 |
+| 659853312085983232 | t_order_item, t_order | 2                    | false  | 2021-10-26 20:21:31 | 2021-10-26 20:24:01 |
+| 660152090995195904 | t_order_item, t_order | 2                    | false  | 2021-10-27 16:08:43 | 2021-10-27 16:11:00 |
 +--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
 2 rows in set (0.04 sec)
 ```
diff --git a/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md b/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
index 4238cfa047..0bc328b688 100644
--- a/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
+++ b/docs/document/content/user-manual/shardingsphere-scaling/usage.en.md
@@ -33,7 +33,8 @@ Supported features:
 | Inventory migration                      | Supported     | Supported     | Supported     |
 | Incremental migration                    | Supported     | Supported     | Supported     |
 | Create table automatically               | Supported     | Unsupported   | Supported     |
-| Default data consistency check algorithm | Supported     | Unsupported   | Unsupported   |
+| DATA_MATCH data consistency check        | Supported     | Supported     | Supported     |
+| CRC32_MATCH data consistency check       | Supported     | Unsupported   | Unsupported   |
 
 **Attention**:
 
@@ -41,17 +42,27 @@ For RDBMS which `Create table automatically` feature is not supported, we need t
 
 ### Privileges
 
-We need to enable `binlog` for MySQL. Privileges of users scaling used should include Replication privileges.
+#### MySQL
 
-Execute the following SQL to confirm whether binlog is turned on or not:
+1. Enable `binlog`
+
+Configuration Example of MySQL 5.7 `my.cnf`:
+```
+[mysqld]
+server-id=1
+log-bin=mysql-bin
+binlog-format=row
+binlog-row-image=full
+max_connections=600
+```
 
+Execute the following SQL to confirm whether binlog is turned on or not:
 ```sql
 show variables like '%log_bin%';
 show variables like '%binlog%';
 ```
 
 As shown below, it means binlog has been turned on:
-
 ```
 +-----------------------------------------+---------------------------------------+
 | Variable_name                           | Value                                 |
@@ -62,12 +73,14 @@ As shown below, it means binlog has been turned on:
 +-----------------------------------------+---------------------------------------+
 ```
 
-Execute the following SQL to confirm whether the user has migration permission or not:
+2. Privileges of account that scaling use should include Replication privileges.
 
+Execute the following SQL to confirm whether the user has migration permission or not:
 ```sql
 SHOW GRANTS 'user';
 ```
 
+Result Example:
 ```
 +------------------------------------------------------------------------------+
 |Grants for ${username}@${host}                                                |
@@ -77,7 +90,19 @@ SHOW GRANTS 'user';
 +------------------------------------------------------------------------------+
 ```
 
-PostgreSQL need to support and open [test_decoding](https://www.postgresql.org/docs/9.4/test-decoding.html) feature.
+#### PostgreSQL
+
+1. Enable [test_decoding](https://www.postgresql.org/docs/9.4/test-decoding.html) feature.
+
+2. Adjust WAL configuration
+
+Configuration Example of `postgresql.conf`:
+```
+wal_level = logical
+max_replication_slots = 10
+```
+
+Please refer to [Write Ahead Log](https://www.postgresql.org/docs/9.6/runtime-config-wal.html) and [Replication](https://www.postgresql.org/docs/9.6/runtime-config-replication.html ) for more details.
 
 ### DistSQL API for auto mode
 
@@ -113,16 +138,27 @@ Create database on underlying RDBMS first, it will be used in following `DistSQL
 Example:
 ```sql
 ADD RESOURCE ds_2 (
-    URL="jdbc:mysql://127.0.0.1:3306/db2?serverTimezone=UTC&useSSL=false",
+    URL="jdbc:mysql://127.0.0.1:3306/scaling_ds_2?serverTimezone=UTC&useSSL=false",
+    USER=root,
+    PASSWORD=root,
+    PROPERTIES("maximumPoolSize"=10,"idleTimeout"="30000")
+), ds_3 (
+    URL="jdbc:mysql://127.0.0.1:3306/scaling_ds_3?serverTimezone=UTC&useSSL=false",
+    USER=root,
+    PASSWORD=root,
+    PROPERTIES("maximumPoolSize"=10,"idleTimeout"="30000")
+), ds_4 (
+    URL="jdbc:mysql://127.0.0.1:3306/scaling_ds_4?serverTimezone=UTC&useSSL=false",
     USER=root,
     PASSWORD=root,
     PROPERTIES("maximumPoolSize"=10,"idleTimeout"="30000")
 );
--- ds_3, ds_4
 ```
 
 2. Alter sharding table rule
 
+Currently, scaling job could only be emitted by executing `ALTER SHARDING TABLE RULE` DistSQL.
+
 Please refer to [RDL#Sharding](/en/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding/) for more details.
 
 `SHARDING TABLE RULE` support two types: `TableRule` and `AutoTableRule`. Following is a comparison of the two sharding rule types: 
@@ -138,12 +174,12 @@ Example of alter `AutoTableRule`:
 ALTER SHARDING TABLE RULE t_order (
 RESOURCES(ds_2, ds_3, ds_4),
 SHARDING_COLUMN=order_id,
-TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=10)),
+TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=6)),
 GENERATED_KEY(COLUMN=order_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=123)))
 );
 ```
 
-If `RESOURCES` and `sharding-count` is changed, then scaling job will be emitted.
+`RESOURCES` is altered from `(ds_0, ds_1)` to `(ds_2, ds_3, ds_4)`, and `sharding-count` is altered from `4` to `6`, it will emit scaling job.
 
 Uncompleted example of alter `TableRule`:
 ```sql
@@ -164,7 +200,7 @@ GENERATED_KEY(COLUMN=order_item_id,TYPE(NAME=snowflake,PROPERTIES("worker-id"=12
 );
 ```
 
-If `algorithm-expression` of `database_inline` and `DATANODES` of `t_order` is changed, then scaling job will be emitted.
+`algorithm-expression` of `database_inline` is alerted from `ds_${user_id % 2}` to `ds_${user_id % 3 + 2}`, and `DATANODES` of `t_order` is alerted from `ds_${0..1}.t_order_${0..1}` to `ds_${2..4}.t_order_${0..1}`, it will emit scaling job.
 
 #### List scaling jobs
 
@@ -181,8 +217,8 @@ mysql> show scaling list;
 +--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
 | id                 | tables                | sharding_total_count | active | create_time         | stop_time           |
 +--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
-| 659853312085983232 | t_order_item, t_order | 2                    | 0      | 2021-10-26 20:21:31 | 2021-10-26 20:24:01 |
-| 660152090995195904 | t_order_item, t_order | 2                    | 0      | 2021-10-27 16:08:43 | 2021-10-27 16:11:00 |
+| 659853312085983232 | t_order_item, t_order | 2                    | false  | 2021-10-26 20:21:31 | 2021-10-26 20:24:01 |
+| 660152090995195904 | t_order_item, t_order | 2                    | false  | 2021-10-27 16:08:43 | 2021-10-27 16:11:00 |
 +--------------------+-----------------------+----------------------+--------+---------------------+---------------------+
 2 rows in set (0.04 sec)
 ```
